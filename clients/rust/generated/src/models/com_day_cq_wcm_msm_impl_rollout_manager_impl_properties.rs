/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplRolloutManagerImplProperties {
  #[serde(rename = "event.filter")]
  event_filter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "rolloutmgr.excludedprops.default")]
  rolloutmgr_excludedprops_default: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "rolloutmgr.excludedparagraphprops.default")]
  rolloutmgr_excludedparagraphprops_default: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "rolloutmgr.excludednodetypes.default")]
  rolloutmgr_excludednodetypes_default: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "rolloutmgr.threadpool.maxsize")]
  rolloutmgr_threadpool_maxsize: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "rolloutmgr.threadpool.maxshutdowntime")]
  rolloutmgr_threadpool_maxshutdowntime: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "rolloutmgr.threadpool.priority")]
  rolloutmgr_threadpool_priority: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "rolloutmgr.commit.size")]
  rolloutmgr_commit_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "rolloutmgr.conflicthandling.enabled")]
  rolloutmgr_conflicthandling_enabled: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqWcmMsmImplRolloutManagerImplProperties {
  pub fn new() -> ComDayCqWcmMsmImplRolloutManagerImplProperties {
    ComDayCqWcmMsmImplRolloutManagerImplProperties {
      event_filter: None,
      rolloutmgr_excludedprops_default: None,
      rolloutmgr_excludedparagraphprops_default: None,
      rolloutmgr_excludednodetypes_default: None,
      rolloutmgr_threadpool_maxsize: None,
      rolloutmgr_threadpool_maxshutdowntime: None,
      rolloutmgr_threadpool_priority: None,
      rolloutmgr_commit_size: None,
      rolloutmgr_conflicthandling_enabled: None
    }
  }

  pub fn set_event_filter(&mut self, event_filter: ::models::ConfigNodePropertyString) {
    self.event_filter = Some(event_filter);
  }

  pub fn with_event_filter(mut self, event_filter: ::models::ConfigNodePropertyString) -> ComDayCqWcmMsmImplRolloutManagerImplProperties {
    self.event_filter = Some(event_filter);
    self
  }

  pub fn event_filter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.event_filter.as_ref()
  }

  pub fn reset_event_filter(&mut self) {
    self.event_filter = None;
  }

  pub fn set_rolloutmgr_excludedprops_default(&mut self, rolloutmgr_excludedprops_default: ::models::ConfigNodePropertyArray) {
    self.rolloutmgr_excludedprops_default = Some(rolloutmgr_excludedprops_default);
  }

  pub fn with_rolloutmgr_excludedprops_default(mut self, rolloutmgr_excludedprops_default: ::models::ConfigNodePropertyArray) -> ComDayCqWcmMsmImplRolloutManagerImplProperties {
    self.rolloutmgr_excludedprops_default = Some(rolloutmgr_excludedprops_default);
    self
  }

  pub fn rolloutmgr_excludedprops_default(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.rolloutmgr_excludedprops_default.as_ref()
  }

  pub fn reset_rolloutmgr_excludedprops_default(&mut self) {
    self.rolloutmgr_excludedprops_default = None;
  }

  pub fn set_rolloutmgr_excludedparagraphprops_default(&mut self, rolloutmgr_excludedparagraphprops_default: ::models::ConfigNodePropertyArray) {
    self.rolloutmgr_excludedparagraphprops_default = Some(rolloutmgr_excludedparagraphprops_default);
  }

  pub fn with_rolloutmgr_excludedparagraphprops_default(mut self, rolloutmgr_excludedparagraphprops_default: ::models::ConfigNodePropertyArray) -> ComDayCqWcmMsmImplRolloutManagerImplProperties {
    self.rolloutmgr_excludedparagraphprops_default = Some(rolloutmgr_excludedparagraphprops_default);
    self
  }

  pub fn rolloutmgr_excludedparagraphprops_default(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.rolloutmgr_excludedparagraphprops_default.as_ref()
  }

  pub fn reset_rolloutmgr_excludedparagraphprops_default(&mut self) {
    self.rolloutmgr_excludedparagraphprops_default = None;
  }

  pub fn set_rolloutmgr_excludednodetypes_default(&mut self, rolloutmgr_excludednodetypes_default: ::models::ConfigNodePropertyArray) {
    self.rolloutmgr_excludednodetypes_default = Some(rolloutmgr_excludednodetypes_default);
  }

  pub fn with_rolloutmgr_excludednodetypes_default(mut self, rolloutmgr_excludednodetypes_default: ::models::ConfigNodePropertyArray) -> ComDayCqWcmMsmImplRolloutManagerImplProperties {
    self.rolloutmgr_excludednodetypes_default = Some(rolloutmgr_excludednodetypes_default);
    self
  }

  pub fn rolloutmgr_excludednodetypes_default(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.rolloutmgr_excludednodetypes_default.as_ref()
  }

  pub fn reset_rolloutmgr_excludednodetypes_default(&mut self) {
    self.rolloutmgr_excludednodetypes_default = None;
  }

  pub fn set_rolloutmgr_threadpool_maxsize(&mut self, rolloutmgr_threadpool_maxsize: ::models::ConfigNodePropertyInteger) {
    self.rolloutmgr_threadpool_maxsize = Some(rolloutmgr_threadpool_maxsize);
  }

  pub fn with_rolloutmgr_threadpool_maxsize(mut self, rolloutmgr_threadpool_maxsize: ::models::ConfigNodePropertyInteger) -> ComDayCqWcmMsmImplRolloutManagerImplProperties {
    self.rolloutmgr_threadpool_maxsize = Some(rolloutmgr_threadpool_maxsize);
    self
  }

  pub fn rolloutmgr_threadpool_maxsize(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.rolloutmgr_threadpool_maxsize.as_ref()
  }

  pub fn reset_rolloutmgr_threadpool_maxsize(&mut self) {
    self.rolloutmgr_threadpool_maxsize = None;
  }

  pub fn set_rolloutmgr_threadpool_maxshutdowntime(&mut self, rolloutmgr_threadpool_maxshutdowntime: ::models::ConfigNodePropertyInteger) {
    self.rolloutmgr_threadpool_maxshutdowntime = Some(rolloutmgr_threadpool_maxshutdowntime);
  }

  pub fn with_rolloutmgr_threadpool_maxshutdowntime(mut self, rolloutmgr_threadpool_maxshutdowntime: ::models::ConfigNodePropertyInteger) -> ComDayCqWcmMsmImplRolloutManagerImplProperties {
    self.rolloutmgr_threadpool_maxshutdowntime = Some(rolloutmgr_threadpool_maxshutdowntime);
    self
  }

  pub fn rolloutmgr_threadpool_maxshutdowntime(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.rolloutmgr_threadpool_maxshutdowntime.as_ref()
  }

  pub fn reset_rolloutmgr_threadpool_maxshutdowntime(&mut self) {
    self.rolloutmgr_threadpool_maxshutdowntime = None;
  }

  pub fn set_rolloutmgr_threadpool_priority(&mut self, rolloutmgr_threadpool_priority: ::models::ConfigNodePropertyDropDown) {
    self.rolloutmgr_threadpool_priority = Some(rolloutmgr_threadpool_priority);
  }

  pub fn with_rolloutmgr_threadpool_priority(mut self, rolloutmgr_threadpool_priority: ::models::ConfigNodePropertyDropDown) -> ComDayCqWcmMsmImplRolloutManagerImplProperties {
    self.rolloutmgr_threadpool_priority = Some(rolloutmgr_threadpool_priority);
    self
  }

  pub fn rolloutmgr_threadpool_priority(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.rolloutmgr_threadpool_priority.as_ref()
  }

  pub fn reset_rolloutmgr_threadpool_priority(&mut self) {
    self.rolloutmgr_threadpool_priority = None;
  }

  pub fn set_rolloutmgr_commit_size(&mut self, rolloutmgr_commit_size: ::models::ConfigNodePropertyInteger) {
    self.rolloutmgr_commit_size = Some(rolloutmgr_commit_size);
  }

  pub fn with_rolloutmgr_commit_size(mut self, rolloutmgr_commit_size: ::models::ConfigNodePropertyInteger) -> ComDayCqWcmMsmImplRolloutManagerImplProperties {
    self.rolloutmgr_commit_size = Some(rolloutmgr_commit_size);
    self
  }

  pub fn rolloutmgr_commit_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.rolloutmgr_commit_size.as_ref()
  }

  pub fn reset_rolloutmgr_commit_size(&mut self) {
    self.rolloutmgr_commit_size = None;
  }

  pub fn set_rolloutmgr_conflicthandling_enabled(&mut self, rolloutmgr_conflicthandling_enabled: ::models::ConfigNodePropertyBoolean) {
    self.rolloutmgr_conflicthandling_enabled = Some(rolloutmgr_conflicthandling_enabled);
  }

  pub fn with_rolloutmgr_conflicthandling_enabled(mut self, rolloutmgr_conflicthandling_enabled: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmMsmImplRolloutManagerImplProperties {
    self.rolloutmgr_conflicthandling_enabled = Some(rolloutmgr_conflicthandling_enabled);
    self
  }

  pub fn rolloutmgr_conflicthandling_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.rolloutmgr_conflicthandling_enabled.as_ref()
  }

  pub fn reset_rolloutmgr_conflicthandling_enabled(&mut self) {
    self.rolloutmgr_conflicthandling_enabled = None;
  }

}



