/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties() {
    this->init();
}

OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::~OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties() {
    
}

void
OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::init() {
    m_provider_name_isSet = false;
    m_forward_requests_isSet = false;
}

void
OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(provider_name, json[QString("providerName")]);
    
    ::OpenAPI::fromJsonValue(forward_requests, json[QString("forward.requests")]);
    
}

QString
OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::asJsonObject() const {
    QJsonObject obj;
	if(provider_name.isSet()){
        obj.insert(QString("providerName"), ::OpenAPI::toJsonValue(provider_name));
    }
	if(forward_requests.isSet()){
        obj.insert(QString("forward.requests"), ::OpenAPI::toJsonValue(forward_requests));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::getProviderName() const {
    return provider_name;
}
void
OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::setProviderName(const OAIConfigNodePropertyString &provider_name) {
    this->provider_name = provider_name;
    this->m_provider_name_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::getForwardRequests() const {
    return forward_requests;
}
void
OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::setForwardRequests(const OAIConfigNodePropertyBoolean &forward_requests) {
    this->forward_requests = forward_requests;
    this->m_forward_requests_isSet = true;
}


bool
OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(provider_name.isSet()){ isObjectUpdated = true; break;}
    
        if(forward_requests.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

