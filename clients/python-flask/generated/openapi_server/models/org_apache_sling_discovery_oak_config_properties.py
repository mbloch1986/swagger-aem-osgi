# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_array import ConfigNodePropertyArray  # noqa: F401,E501
from openapi_server.models.config_node_property_boolean import ConfigNodePropertyBoolean  # noqa: F401,E501
from openapi_server.models.config_node_property_integer import ConfigNodePropertyInteger  # noqa: F401,E501
from openapi_server.models.config_node_property_string import ConfigNodePropertyString  # noqa: F401,E501
from openapi_server import util


class OrgApacheSlingDiscoveryOakConfigProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_ping_timeout: ConfigNodePropertyInteger=None, connector_ping_interval: ConfigNodePropertyInteger=None, discovery_lite_check_interval: ConfigNodePropertyInteger=None, cluster_sync_service_timeout: ConfigNodePropertyInteger=None, cluster_sync_service_interval: ConfigNodePropertyInteger=None, enable_sync_token: ConfigNodePropertyBoolean=None, min_event_delay: ConfigNodePropertyInteger=None, socket_connect_timeout: ConfigNodePropertyInteger=None, so_timeout: ConfigNodePropertyInteger=None, topology_connector_urls: ConfigNodePropertyArray=None, topology_connector_whitelist: ConfigNodePropertyArray=None, auto_stop_local_loop_enabled: ConfigNodePropertyBoolean=None, gzip_connector_requests_enabled: ConfigNodePropertyBoolean=None, hmac_enabled: ConfigNodePropertyBoolean=None, enable_encryption: ConfigNodePropertyBoolean=None, shared_key: ConfigNodePropertyString=None, hmac_shared_key_ttl: ConfigNodePropertyInteger=None, backoff_standby_factor: ConfigNodePropertyString=None, backoff_stable_factor: ConfigNodePropertyString=None):  # noqa: E501
        """OrgApacheSlingDiscoveryOakConfigProperties - a model defined in OpenAPI

        :param connector_ping_timeout: The connector_ping_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type connector_ping_timeout: ConfigNodePropertyInteger
        :param connector_ping_interval: The connector_ping_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type connector_ping_interval: ConfigNodePropertyInteger
        :param discovery_lite_check_interval: The discovery_lite_check_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type discovery_lite_check_interval: ConfigNodePropertyInteger
        :param cluster_sync_service_timeout: The cluster_sync_service_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type cluster_sync_service_timeout: ConfigNodePropertyInteger
        :param cluster_sync_service_interval: The cluster_sync_service_interval of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type cluster_sync_service_interval: ConfigNodePropertyInteger
        :param enable_sync_token: The enable_sync_token of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type enable_sync_token: ConfigNodePropertyBoolean
        :param min_event_delay: The min_event_delay of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type min_event_delay: ConfigNodePropertyInteger
        :param socket_connect_timeout: The socket_connect_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type socket_connect_timeout: ConfigNodePropertyInteger
        :param so_timeout: The so_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type so_timeout: ConfigNodePropertyInteger
        :param topology_connector_urls: The topology_connector_urls of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type topology_connector_urls: ConfigNodePropertyArray
        :param topology_connector_whitelist: The topology_connector_whitelist of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type topology_connector_whitelist: ConfigNodePropertyArray
        :param auto_stop_local_loop_enabled: The auto_stop_local_loop_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type auto_stop_local_loop_enabled: ConfigNodePropertyBoolean
        :param gzip_connector_requests_enabled: The gzip_connector_requests_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type gzip_connector_requests_enabled: ConfigNodePropertyBoolean
        :param hmac_enabled: The hmac_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type hmac_enabled: ConfigNodePropertyBoolean
        :param enable_encryption: The enable_encryption of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type enable_encryption: ConfigNodePropertyBoolean
        :param shared_key: The shared_key of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type shared_key: ConfigNodePropertyString
        :param hmac_shared_key_ttl: The hmac_shared_key_ttl of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type hmac_shared_key_ttl: ConfigNodePropertyInteger
        :param backoff_standby_factor: The backoff_standby_factor of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type backoff_standby_factor: ConfigNodePropertyString
        :param backoff_stable_factor: The backoff_stable_factor of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :type backoff_stable_factor: ConfigNodePropertyString
        """
        self.openapi_types = {
            'connector_ping_timeout': ConfigNodePropertyInteger,
            'connector_ping_interval': ConfigNodePropertyInteger,
            'discovery_lite_check_interval': ConfigNodePropertyInteger,
            'cluster_sync_service_timeout': ConfigNodePropertyInteger,
            'cluster_sync_service_interval': ConfigNodePropertyInteger,
            'enable_sync_token': ConfigNodePropertyBoolean,
            'min_event_delay': ConfigNodePropertyInteger,
            'socket_connect_timeout': ConfigNodePropertyInteger,
            'so_timeout': ConfigNodePropertyInteger,
            'topology_connector_urls': ConfigNodePropertyArray,
            'topology_connector_whitelist': ConfigNodePropertyArray,
            'auto_stop_local_loop_enabled': ConfigNodePropertyBoolean,
            'gzip_connector_requests_enabled': ConfigNodePropertyBoolean,
            'hmac_enabled': ConfigNodePropertyBoolean,
            'enable_encryption': ConfigNodePropertyBoolean,
            'shared_key': ConfigNodePropertyString,
            'hmac_shared_key_ttl': ConfigNodePropertyInteger,
            'backoff_standby_factor': ConfigNodePropertyString,
            'backoff_stable_factor': ConfigNodePropertyString
        }

        self.attribute_map = {
            'connector_ping_timeout': 'connectorPingTimeout',
            'connector_ping_interval': 'connectorPingInterval',
            'discovery_lite_check_interval': 'discoveryLiteCheckInterval',
            'cluster_sync_service_timeout': 'clusterSyncServiceTimeout',
            'cluster_sync_service_interval': 'clusterSyncServiceInterval',
            'enable_sync_token': 'enableSyncToken',
            'min_event_delay': 'minEventDelay',
            'socket_connect_timeout': 'socketConnectTimeout',
            'so_timeout': 'soTimeout',
            'topology_connector_urls': 'topologyConnectorUrls',
            'topology_connector_whitelist': 'topologyConnectorWhitelist',
            'auto_stop_local_loop_enabled': 'autoStopLocalLoopEnabled',
            'gzip_connector_requests_enabled': 'gzipConnectorRequestsEnabled',
            'hmac_enabled': 'hmacEnabled',
            'enable_encryption': 'enableEncryption',
            'shared_key': 'sharedKey',
            'hmac_shared_key_ttl': 'hmacSharedKeyTTL',
            'backoff_standby_factor': 'backoffStandbyFactor',
            'backoff_stable_factor': 'backoffStableFactor'
        }

        self._connector_ping_timeout = connector_ping_timeout
        self._connector_ping_interval = connector_ping_interval
        self._discovery_lite_check_interval = discovery_lite_check_interval
        self._cluster_sync_service_timeout = cluster_sync_service_timeout
        self._cluster_sync_service_interval = cluster_sync_service_interval
        self._enable_sync_token = enable_sync_token
        self._min_event_delay = min_event_delay
        self._socket_connect_timeout = socket_connect_timeout
        self._so_timeout = so_timeout
        self._topology_connector_urls = topology_connector_urls
        self._topology_connector_whitelist = topology_connector_whitelist
        self._auto_stop_local_loop_enabled = auto_stop_local_loop_enabled
        self._gzip_connector_requests_enabled = gzip_connector_requests_enabled
        self._hmac_enabled = hmac_enabled
        self._enable_encryption = enable_encryption
        self._shared_key = shared_key
        self._hmac_shared_key_ttl = hmac_shared_key_ttl
        self._backoff_standby_factor = backoff_standby_factor
        self._backoff_stable_factor = backoff_stable_factor

    @classmethod
    def from_dict(cls, dikt) -> 'OrgApacheSlingDiscoveryOakConfigProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The orgApacheSlingDiscoveryOakConfigProperties of this OrgApacheSlingDiscoveryOakConfigProperties.  # noqa: E501
        :rtype: OrgApacheSlingDiscoveryOakConfigProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_ping_timeout(self) -> ConfigNodePropertyInteger:
        """Gets the connector_ping_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The connector_ping_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._connector_ping_timeout

    @connector_ping_timeout.setter
    def connector_ping_timeout(self, connector_ping_timeout: ConfigNodePropertyInteger):
        """Sets the connector_ping_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param connector_ping_timeout: The connector_ping_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type connector_ping_timeout: ConfigNodePropertyInteger
        """

        self._connector_ping_timeout = connector_ping_timeout

    @property
    def connector_ping_interval(self) -> ConfigNodePropertyInteger:
        """Gets the connector_ping_interval of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The connector_ping_interval of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._connector_ping_interval

    @connector_ping_interval.setter
    def connector_ping_interval(self, connector_ping_interval: ConfigNodePropertyInteger):
        """Sets the connector_ping_interval of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param connector_ping_interval: The connector_ping_interval of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type connector_ping_interval: ConfigNodePropertyInteger
        """

        self._connector_ping_interval = connector_ping_interval

    @property
    def discovery_lite_check_interval(self) -> ConfigNodePropertyInteger:
        """Gets the discovery_lite_check_interval of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The discovery_lite_check_interval of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._discovery_lite_check_interval

    @discovery_lite_check_interval.setter
    def discovery_lite_check_interval(self, discovery_lite_check_interval: ConfigNodePropertyInteger):
        """Sets the discovery_lite_check_interval of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param discovery_lite_check_interval: The discovery_lite_check_interval of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type discovery_lite_check_interval: ConfigNodePropertyInteger
        """

        self._discovery_lite_check_interval = discovery_lite_check_interval

    @property
    def cluster_sync_service_timeout(self) -> ConfigNodePropertyInteger:
        """Gets the cluster_sync_service_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The cluster_sync_service_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_sync_service_timeout

    @cluster_sync_service_timeout.setter
    def cluster_sync_service_timeout(self, cluster_sync_service_timeout: ConfigNodePropertyInteger):
        """Sets the cluster_sync_service_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param cluster_sync_service_timeout: The cluster_sync_service_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type cluster_sync_service_timeout: ConfigNodePropertyInteger
        """

        self._cluster_sync_service_timeout = cluster_sync_service_timeout

    @property
    def cluster_sync_service_interval(self) -> ConfigNodePropertyInteger:
        """Gets the cluster_sync_service_interval of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The cluster_sync_service_interval of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._cluster_sync_service_interval

    @cluster_sync_service_interval.setter
    def cluster_sync_service_interval(self, cluster_sync_service_interval: ConfigNodePropertyInteger):
        """Sets the cluster_sync_service_interval of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param cluster_sync_service_interval: The cluster_sync_service_interval of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type cluster_sync_service_interval: ConfigNodePropertyInteger
        """

        self._cluster_sync_service_interval = cluster_sync_service_interval

    @property
    def enable_sync_token(self) -> ConfigNodePropertyBoolean:
        """Gets the enable_sync_token of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The enable_sync_token of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyBoolean
        """
        return self._enable_sync_token

    @enable_sync_token.setter
    def enable_sync_token(self, enable_sync_token: ConfigNodePropertyBoolean):
        """Sets the enable_sync_token of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param enable_sync_token: The enable_sync_token of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type enable_sync_token: ConfigNodePropertyBoolean
        """

        self._enable_sync_token = enable_sync_token

    @property
    def min_event_delay(self) -> ConfigNodePropertyInteger:
        """Gets the min_event_delay of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The min_event_delay of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._min_event_delay

    @min_event_delay.setter
    def min_event_delay(self, min_event_delay: ConfigNodePropertyInteger):
        """Sets the min_event_delay of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param min_event_delay: The min_event_delay of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type min_event_delay: ConfigNodePropertyInteger
        """

        self._min_event_delay = min_event_delay

    @property
    def socket_connect_timeout(self) -> ConfigNodePropertyInteger:
        """Gets the socket_connect_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The socket_connect_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._socket_connect_timeout

    @socket_connect_timeout.setter
    def socket_connect_timeout(self, socket_connect_timeout: ConfigNodePropertyInteger):
        """Sets the socket_connect_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param socket_connect_timeout: The socket_connect_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type socket_connect_timeout: ConfigNodePropertyInteger
        """

        self._socket_connect_timeout = socket_connect_timeout

    @property
    def so_timeout(self) -> ConfigNodePropertyInteger:
        """Gets the so_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The so_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._so_timeout

    @so_timeout.setter
    def so_timeout(self, so_timeout: ConfigNodePropertyInteger):
        """Sets the so_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param so_timeout: The so_timeout of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type so_timeout: ConfigNodePropertyInteger
        """

        self._so_timeout = so_timeout

    @property
    def topology_connector_urls(self) -> ConfigNodePropertyArray:
        """Gets the topology_connector_urls of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The topology_connector_urls of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyArray
        """
        return self._topology_connector_urls

    @topology_connector_urls.setter
    def topology_connector_urls(self, topology_connector_urls: ConfigNodePropertyArray):
        """Sets the topology_connector_urls of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param topology_connector_urls: The topology_connector_urls of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type topology_connector_urls: ConfigNodePropertyArray
        """

        self._topology_connector_urls = topology_connector_urls

    @property
    def topology_connector_whitelist(self) -> ConfigNodePropertyArray:
        """Gets the topology_connector_whitelist of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The topology_connector_whitelist of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyArray
        """
        return self._topology_connector_whitelist

    @topology_connector_whitelist.setter
    def topology_connector_whitelist(self, topology_connector_whitelist: ConfigNodePropertyArray):
        """Sets the topology_connector_whitelist of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param topology_connector_whitelist: The topology_connector_whitelist of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type topology_connector_whitelist: ConfigNodePropertyArray
        """

        self._topology_connector_whitelist = topology_connector_whitelist

    @property
    def auto_stop_local_loop_enabled(self) -> ConfigNodePropertyBoolean:
        """Gets the auto_stop_local_loop_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The auto_stop_local_loop_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyBoolean
        """
        return self._auto_stop_local_loop_enabled

    @auto_stop_local_loop_enabled.setter
    def auto_stop_local_loop_enabled(self, auto_stop_local_loop_enabled: ConfigNodePropertyBoolean):
        """Sets the auto_stop_local_loop_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param auto_stop_local_loop_enabled: The auto_stop_local_loop_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type auto_stop_local_loop_enabled: ConfigNodePropertyBoolean
        """

        self._auto_stop_local_loop_enabled = auto_stop_local_loop_enabled

    @property
    def gzip_connector_requests_enabled(self) -> ConfigNodePropertyBoolean:
        """Gets the gzip_connector_requests_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The gzip_connector_requests_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyBoolean
        """
        return self._gzip_connector_requests_enabled

    @gzip_connector_requests_enabled.setter
    def gzip_connector_requests_enabled(self, gzip_connector_requests_enabled: ConfigNodePropertyBoolean):
        """Sets the gzip_connector_requests_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param gzip_connector_requests_enabled: The gzip_connector_requests_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type gzip_connector_requests_enabled: ConfigNodePropertyBoolean
        """

        self._gzip_connector_requests_enabled = gzip_connector_requests_enabled

    @property
    def hmac_enabled(self) -> ConfigNodePropertyBoolean:
        """Gets the hmac_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The hmac_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyBoolean
        """
        return self._hmac_enabled

    @hmac_enabled.setter
    def hmac_enabled(self, hmac_enabled: ConfigNodePropertyBoolean):
        """Sets the hmac_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param hmac_enabled: The hmac_enabled of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type hmac_enabled: ConfigNodePropertyBoolean
        """

        self._hmac_enabled = hmac_enabled

    @property
    def enable_encryption(self) -> ConfigNodePropertyBoolean:
        """Gets the enable_encryption of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The enable_encryption of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyBoolean
        """
        return self._enable_encryption

    @enable_encryption.setter
    def enable_encryption(self, enable_encryption: ConfigNodePropertyBoolean):
        """Sets the enable_encryption of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param enable_encryption: The enable_encryption of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type enable_encryption: ConfigNodePropertyBoolean
        """

        self._enable_encryption = enable_encryption

    @property
    def shared_key(self) -> ConfigNodePropertyString:
        """Gets the shared_key of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The shared_key of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._shared_key

    @shared_key.setter
    def shared_key(self, shared_key: ConfigNodePropertyString):
        """Sets the shared_key of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param shared_key: The shared_key of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type shared_key: ConfigNodePropertyString
        """

        self._shared_key = shared_key

    @property
    def hmac_shared_key_ttl(self) -> ConfigNodePropertyInteger:
        """Gets the hmac_shared_key_ttl of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The hmac_shared_key_ttl of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyInteger
        """
        return self._hmac_shared_key_ttl

    @hmac_shared_key_ttl.setter
    def hmac_shared_key_ttl(self, hmac_shared_key_ttl: ConfigNodePropertyInteger):
        """Sets the hmac_shared_key_ttl of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param hmac_shared_key_ttl: The hmac_shared_key_ttl of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type hmac_shared_key_ttl: ConfigNodePropertyInteger
        """

        self._hmac_shared_key_ttl = hmac_shared_key_ttl

    @property
    def backoff_standby_factor(self) -> ConfigNodePropertyString:
        """Gets the backoff_standby_factor of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The backoff_standby_factor of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._backoff_standby_factor

    @backoff_standby_factor.setter
    def backoff_standby_factor(self, backoff_standby_factor: ConfigNodePropertyString):
        """Sets the backoff_standby_factor of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param backoff_standby_factor: The backoff_standby_factor of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type backoff_standby_factor: ConfigNodePropertyString
        """

        self._backoff_standby_factor = backoff_standby_factor

    @property
    def backoff_stable_factor(self) -> ConfigNodePropertyString:
        """Gets the backoff_stable_factor of this OrgApacheSlingDiscoveryOakConfigProperties.


        :return: The backoff_stable_factor of this OrgApacheSlingDiscoveryOakConfigProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._backoff_stable_factor

    @backoff_stable_factor.setter
    def backoff_stable_factor(self, backoff_stable_factor: ConfigNodePropertyString):
        """Sets the backoff_stable_factor of this OrgApacheSlingDiscoveryOakConfigProperties.


        :param backoff_stable_factor: The backoff_stable_factor of this OrgApacheSlingDiscoveryOakConfigProperties.
        :type backoff_stable_factor: ConfigNodePropertyString
        """

        self._backoff_stable_factor = backoff_stable_factor
