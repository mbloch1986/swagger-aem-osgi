/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteAuthOauthProviderProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteAuthOauthProviderProperties::ComAdobeGraniteAuthOauthProviderProperties()
{
    m_Oauth_config_idIsSet = false;
    m_Oauth_client_idIsSet = false;
    m_Oauth_client_secretIsSet = false;
    m_Oauth_scopeIsSet = false;
    m_Oauth_config_provider_idIsSet = false;
    m_Oauth_create_usersIsSet = false;
    m_Oauth_userid_propertyIsSet = false;
    m_Force_strict_username_matchingIsSet = false;
    m_Oauth_encode_useridsIsSet = false;
    m_Oauth_hash_useridsIsSet = false;
    m_Oauth_callBackUrlIsSet = false;
    m_Oauth_access_token_persistIsSet = false;
    m_Oauth_access_token_persist_cookieIsSet = false;
    m_Oauth_csrf_state_protectionIsSet = false;
    m_Oauth_redirect_request_paramsIsSet = false;
    m_Oauth_config_siblings_allowIsSet = false;
}

ComAdobeGraniteAuthOauthProviderProperties::~ComAdobeGraniteAuthOauthProviderProperties()
{
}

void ComAdobeGraniteAuthOauthProviderProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteAuthOauthProviderProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Oauth_config_idIsSet)
    {
        val[utility::conversions::to_string_t("oauth.config.id")] = ModelBase::toJson(m_Oauth_config_id);
    }
    if(m_Oauth_client_idIsSet)
    {
        val[utility::conversions::to_string_t("oauth.client.id")] = ModelBase::toJson(m_Oauth_client_id);
    }
    if(m_Oauth_client_secretIsSet)
    {
        val[utility::conversions::to_string_t("oauth.client.secret")] = ModelBase::toJson(m_Oauth_client_secret);
    }
    if(m_Oauth_scopeIsSet)
    {
        val[utility::conversions::to_string_t("oauth.scope")] = ModelBase::toJson(m_Oauth_scope);
    }
    if(m_Oauth_config_provider_idIsSet)
    {
        val[utility::conversions::to_string_t("oauth.config.provider.id")] = ModelBase::toJson(m_Oauth_config_provider_id);
    }
    if(m_Oauth_create_usersIsSet)
    {
        val[utility::conversions::to_string_t("oauth.create.users")] = ModelBase::toJson(m_Oauth_create_users);
    }
    if(m_Oauth_userid_propertyIsSet)
    {
        val[utility::conversions::to_string_t("oauth.userid.property")] = ModelBase::toJson(m_Oauth_userid_property);
    }
    if(m_Force_strict_username_matchingIsSet)
    {
        val[utility::conversions::to_string_t("force.strict.username.matching")] = ModelBase::toJson(m_Force_strict_username_matching);
    }
    if(m_Oauth_encode_useridsIsSet)
    {
        val[utility::conversions::to_string_t("oauth.encode.userids")] = ModelBase::toJson(m_Oauth_encode_userids);
    }
    if(m_Oauth_hash_useridsIsSet)
    {
        val[utility::conversions::to_string_t("oauth.hash.userids")] = ModelBase::toJson(m_Oauth_hash_userids);
    }
    if(m_Oauth_callBackUrlIsSet)
    {
        val[utility::conversions::to_string_t("oauth.callBackUrl")] = ModelBase::toJson(m_Oauth_callBackUrl);
    }
    if(m_Oauth_access_token_persistIsSet)
    {
        val[utility::conversions::to_string_t("oauth.access.token.persist")] = ModelBase::toJson(m_Oauth_access_token_persist);
    }
    if(m_Oauth_access_token_persist_cookieIsSet)
    {
        val[utility::conversions::to_string_t("oauth.access.token.persist.cookie")] = ModelBase::toJson(m_Oauth_access_token_persist_cookie);
    }
    if(m_Oauth_csrf_state_protectionIsSet)
    {
        val[utility::conversions::to_string_t("oauth.csrf.state.protection")] = ModelBase::toJson(m_Oauth_csrf_state_protection);
    }
    if(m_Oauth_redirect_request_paramsIsSet)
    {
        val[utility::conversions::to_string_t("oauth.redirect.request.params")] = ModelBase::toJson(m_Oauth_redirect_request_params);
    }
    if(m_Oauth_config_siblings_allowIsSet)
    {
        val[utility::conversions::to_string_t("oauth.config.siblings.allow")] = ModelBase::toJson(m_Oauth_config_siblings_allow);
    }

    return val;
}

void ComAdobeGraniteAuthOauthProviderProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("oauth.config.id")))
    {
        if(!val[utility::conversions::to_string_t("oauth.config.id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.config.id")]);
            setOauthConfigId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.client.id")))
    {
        if(!val[utility::conversions::to_string_t("oauth.client.id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.client.id")]);
            setOauthClientId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.client.secret")))
    {
        if(!val[utility::conversions::to_string_t("oauth.client.secret")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.client.secret")]);
            setOauthClientSecret( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.scope")))
    {
        if(!val[utility::conversions::to_string_t("oauth.scope")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.scope")]);
            setOauthScope( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.config.provider.id")))
    {
        if(!val[utility::conversions::to_string_t("oauth.config.provider.id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.config.provider.id")]);
            setOauthConfigProviderId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.create.users")))
    {
        if(!val[utility::conversions::to_string_t("oauth.create.users")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.create.users")]);
            setOauthCreateUsers( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.userid.property")))
    {
        if(!val[utility::conversions::to_string_t("oauth.userid.property")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.userid.property")]);
            setOauthUseridProperty( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("force.strict.username.matching")))
    {
        if(!val[utility::conversions::to_string_t("force.strict.username.matching")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("force.strict.username.matching")]);
            setForceStrictUsernameMatching( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.encode.userids")))
    {
        if(!val[utility::conversions::to_string_t("oauth.encode.userids")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.encode.userids")]);
            setOauthEncodeUserids( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.hash.userids")))
    {
        if(!val[utility::conversions::to_string_t("oauth.hash.userids")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.hash.userids")]);
            setOauthHashUserids( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.callBackUrl")))
    {
        if(!val[utility::conversions::to_string_t("oauth.callBackUrl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.callBackUrl")]);
            setOauthCallBackUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.access.token.persist")))
    {
        if(!val[utility::conversions::to_string_t("oauth.access.token.persist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.access.token.persist")]);
            setOauthAccessTokenPersist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.access.token.persist.cookie")))
    {
        if(!val[utility::conversions::to_string_t("oauth.access.token.persist.cookie")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.access.token.persist.cookie")]);
            setOauthAccessTokenPersistCookie( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.csrf.state.protection")))
    {
        if(!val[utility::conversions::to_string_t("oauth.csrf.state.protection")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.csrf.state.protection")]);
            setOauthCsrfStateProtection( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.redirect.request.params")))
    {
        if(!val[utility::conversions::to_string_t("oauth.redirect.request.params")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.redirect.request.params")]);
            setOauthRedirectRequestParams( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.config.siblings.allow")))
    {
        if(!val[utility::conversions::to_string_t("oauth.config.siblings.allow")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.config.siblings.allow")]);
            setOauthConfigSiblingsAllow( newItem );
        }
    }
}

void ComAdobeGraniteAuthOauthProviderProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Oauth_config_idIsSet)
    {
        if (m_Oauth_config_id.get())
        {
            m_Oauth_config_id->toMultipart(multipart, utility::conversions::to_string_t("oauth.config.id."));
        }
    }
    if(m_Oauth_client_idIsSet)
    {
        if (m_Oauth_client_id.get())
        {
            m_Oauth_client_id->toMultipart(multipart, utility::conversions::to_string_t("oauth.client.id."));
        }
    }
    if(m_Oauth_client_secretIsSet)
    {
        if (m_Oauth_client_secret.get())
        {
            m_Oauth_client_secret->toMultipart(multipart, utility::conversions::to_string_t("oauth.client.secret."));
        }
    }
    if(m_Oauth_scopeIsSet)
    {
        if (m_Oauth_scope.get())
        {
            m_Oauth_scope->toMultipart(multipart, utility::conversions::to_string_t("oauth.scope."));
        }
    }
    if(m_Oauth_config_provider_idIsSet)
    {
        if (m_Oauth_config_provider_id.get())
        {
            m_Oauth_config_provider_id->toMultipart(multipart, utility::conversions::to_string_t("oauth.config.provider.id."));
        }
    }
    if(m_Oauth_create_usersIsSet)
    {
        if (m_Oauth_create_users.get())
        {
            m_Oauth_create_users->toMultipart(multipart, utility::conversions::to_string_t("oauth.create.users."));
        }
    }
    if(m_Oauth_userid_propertyIsSet)
    {
        if (m_Oauth_userid_property.get())
        {
            m_Oauth_userid_property->toMultipart(multipart, utility::conversions::to_string_t("oauth.userid.property."));
        }
    }
    if(m_Force_strict_username_matchingIsSet)
    {
        if (m_Force_strict_username_matching.get())
        {
            m_Force_strict_username_matching->toMultipart(multipart, utility::conversions::to_string_t("force.strict.username.matching."));
        }
    }
    if(m_Oauth_encode_useridsIsSet)
    {
        if (m_Oauth_encode_userids.get())
        {
            m_Oauth_encode_userids->toMultipart(multipart, utility::conversions::to_string_t("oauth.encode.userids."));
        }
    }
    if(m_Oauth_hash_useridsIsSet)
    {
        if (m_Oauth_hash_userids.get())
        {
            m_Oauth_hash_userids->toMultipart(multipart, utility::conversions::to_string_t("oauth.hash.userids."));
        }
    }
    if(m_Oauth_callBackUrlIsSet)
    {
        if (m_Oauth_callBackUrl.get())
        {
            m_Oauth_callBackUrl->toMultipart(multipart, utility::conversions::to_string_t("oauth.callBackUrl."));
        }
    }
    if(m_Oauth_access_token_persistIsSet)
    {
        if (m_Oauth_access_token_persist.get())
        {
            m_Oauth_access_token_persist->toMultipart(multipart, utility::conversions::to_string_t("oauth.access.token.persist."));
        }
    }
    if(m_Oauth_access_token_persist_cookieIsSet)
    {
        if (m_Oauth_access_token_persist_cookie.get())
        {
            m_Oauth_access_token_persist_cookie->toMultipart(multipart, utility::conversions::to_string_t("oauth.access.token.persist.cookie."));
        }
    }
    if(m_Oauth_csrf_state_protectionIsSet)
    {
        if (m_Oauth_csrf_state_protection.get())
        {
            m_Oauth_csrf_state_protection->toMultipart(multipart, utility::conversions::to_string_t("oauth.csrf.state.protection."));
        }
    }
    if(m_Oauth_redirect_request_paramsIsSet)
    {
        if (m_Oauth_redirect_request_params.get())
        {
            m_Oauth_redirect_request_params->toMultipart(multipart, utility::conversions::to_string_t("oauth.redirect.request.params."));
        }
    }
    if(m_Oauth_config_siblings_allowIsSet)
    {
        if (m_Oauth_config_siblings_allow.get())
        {
            m_Oauth_config_siblings_allow->toMultipart(multipart, utility::conversions::to_string_t("oauth.config.siblings.allow."));
        }
    }
}

void ComAdobeGraniteAuthOauthProviderProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("oauth.config.id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.config.id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.config.id."));
            setOauthConfigId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.client.id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.client.id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.client.id."));
            setOauthClientId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.client.secret")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.client.secret")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.client.secret."));
            setOauthClientSecret( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.scope")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.scope")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.scope."));
            setOauthScope( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.config.provider.id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.config.provider.id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.config.provider.id."));
            setOauthConfigProviderId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.create.users")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.create.users")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.create.users."));
            setOauthCreateUsers( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.userid.property")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.userid.property")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.userid.property."));
            setOauthUseridProperty( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("force.strict.username.matching")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("force.strict.username.matching")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("force.strict.username.matching."));
            setForceStrictUsernameMatching( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.encode.userids")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.encode.userids")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.encode.userids."));
            setOauthEncodeUserids( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.hash.userids")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.hash.userids")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.hash.userids."));
            setOauthHashUserids( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.callBackUrl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.callBackUrl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.callBackUrl."));
            setOauthCallBackUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.access.token.persist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.access.token.persist")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.access.token.persist."));
            setOauthAccessTokenPersist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.access.token.persist.cookie")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.access.token.persist.cookie")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.access.token.persist.cookie."));
            setOauthAccessTokenPersistCookie( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.csrf.state.protection")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.csrf.state.protection")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.csrf.state.protection."));
            setOauthCsrfStateProtection( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.redirect.request.params")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.redirect.request.params")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.redirect.request.params."));
            setOauthRedirectRequestParams( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.config.siblings.allow")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.config.siblings.allow")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.config.siblings.allow."));
            setOauthConfigSiblingsAllow( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthProviderProperties::getOauthConfigId() const
{
    return m_Oauth_config_id;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthConfigId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_config_id = value;
    m_Oauth_config_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthConfigIdIsSet() const
{
    return m_Oauth_config_idIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_config_id()
{
    m_Oauth_config_idIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthProviderProperties::getOauthClientId() const
{
    return m_Oauth_client_id;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthClientId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_client_id = value;
    m_Oauth_client_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthClientIdIsSet() const
{
    return m_Oauth_client_idIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_client_id()
{
    m_Oauth_client_idIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthProviderProperties::getOauthClientSecret() const
{
    return m_Oauth_client_secret;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthClientSecret(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_client_secret = value;
    m_Oauth_client_secretIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthClientSecretIsSet() const
{
    return m_Oauth_client_secretIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_client_secret()
{
    m_Oauth_client_secretIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteAuthOauthProviderProperties::getOauthScope() const
{
    return m_Oauth_scope;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthScope(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Oauth_scope = value;
    m_Oauth_scopeIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthScopeIsSet() const
{
    return m_Oauth_scopeIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_scope()
{
    m_Oauth_scopeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthProviderProperties::getOauthConfigProviderId() const
{
    return m_Oauth_config_provider_id;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthConfigProviderId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_config_provider_id = value;
    m_Oauth_config_provider_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthConfigProviderIdIsSet() const
{
    return m_Oauth_config_provider_idIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_config_provider_id()
{
    m_Oauth_config_provider_idIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteAuthOauthProviderProperties::getOauthCreateUsers() const
{
    return m_Oauth_create_users;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthCreateUsers(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Oauth_create_users = value;
    m_Oauth_create_usersIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthCreateUsersIsSet() const
{
    return m_Oauth_create_usersIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_create_users()
{
    m_Oauth_create_usersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthProviderProperties::getOauthUseridProperty() const
{
    return m_Oauth_userid_property;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthUseridProperty(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_userid_property = value;
    m_Oauth_userid_propertyIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthUseridPropertyIsSet() const
{
    return m_Oauth_userid_propertyIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_userid_property()
{
    m_Oauth_userid_propertyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteAuthOauthProviderProperties::getForceStrictUsernameMatching() const
{
    return m_Force_strict_username_matching;
}


void ComAdobeGraniteAuthOauthProviderProperties::setForceStrictUsernameMatching(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Force_strict_username_matching = value;
    m_Force_strict_username_matchingIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::forceStrictUsernameMatchingIsSet() const
{
    return m_Force_strict_username_matchingIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetForce_strict_username_matching()
{
    m_Force_strict_username_matchingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteAuthOauthProviderProperties::getOauthEncodeUserids() const
{
    return m_Oauth_encode_userids;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthEncodeUserids(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Oauth_encode_userids = value;
    m_Oauth_encode_useridsIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthEncodeUseridsIsSet() const
{
    return m_Oauth_encode_useridsIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_encode_userids()
{
    m_Oauth_encode_useridsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteAuthOauthProviderProperties::getOauthHashUserids() const
{
    return m_Oauth_hash_userids;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthHashUserids(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Oauth_hash_userids = value;
    m_Oauth_hash_useridsIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthHashUseridsIsSet() const
{
    return m_Oauth_hash_useridsIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_hash_userids()
{
    m_Oauth_hash_useridsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthProviderProperties::getOauthCallBackUrl() const
{
    return m_Oauth_callBackUrl;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthCallBackUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_callBackUrl = value;
    m_Oauth_callBackUrlIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthCallBackUrlIsSet() const
{
    return m_Oauth_callBackUrlIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_callBackUrl()
{
    m_Oauth_callBackUrlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteAuthOauthProviderProperties::getOauthAccessTokenPersist() const
{
    return m_Oauth_access_token_persist;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthAccessTokenPersist(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Oauth_access_token_persist = value;
    m_Oauth_access_token_persistIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthAccessTokenPersistIsSet() const
{
    return m_Oauth_access_token_persistIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_access_token_persist()
{
    m_Oauth_access_token_persistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteAuthOauthProviderProperties::getOauthAccessTokenPersistCookie() const
{
    return m_Oauth_access_token_persist_cookie;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthAccessTokenPersistCookie(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Oauth_access_token_persist_cookie = value;
    m_Oauth_access_token_persist_cookieIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthAccessTokenPersistCookieIsSet() const
{
    return m_Oauth_access_token_persist_cookieIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_access_token_persist_cookie()
{
    m_Oauth_access_token_persist_cookieIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteAuthOauthProviderProperties::getOauthCsrfStateProtection() const
{
    return m_Oauth_csrf_state_protection;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthCsrfStateProtection(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Oauth_csrf_state_protection = value;
    m_Oauth_csrf_state_protectionIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthCsrfStateProtectionIsSet() const
{
    return m_Oauth_csrf_state_protectionIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_csrf_state_protection()
{
    m_Oauth_csrf_state_protectionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteAuthOauthProviderProperties::getOauthRedirectRequestParams() const
{
    return m_Oauth_redirect_request_params;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthRedirectRequestParams(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Oauth_redirect_request_params = value;
    m_Oauth_redirect_request_paramsIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthRedirectRequestParamsIsSet() const
{
    return m_Oauth_redirect_request_paramsIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_redirect_request_params()
{
    m_Oauth_redirect_request_paramsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteAuthOauthProviderProperties::getOauthConfigSiblingsAllow() const
{
    return m_Oauth_config_siblings_allow;
}


void ComAdobeGraniteAuthOauthProviderProperties::setOauthConfigSiblingsAllow(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Oauth_config_siblings_allow = value;
    m_Oauth_config_siblings_allowIsSet = true;
}
bool ComAdobeGraniteAuthOauthProviderProperties::oauthConfigSiblingsAllowIsSet() const
{
    return m_Oauth_config_siblings_allowIsSet;
}

void ComAdobeGraniteAuthOauthProviderProperties::unsetOauth_config_siblings_allow()
{
    m_Oauth_config_siblings_allowIsSet = false;
}

}
}
}
}

