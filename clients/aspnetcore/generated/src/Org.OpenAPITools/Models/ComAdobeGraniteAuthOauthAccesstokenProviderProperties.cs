/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteAuthOauthAccesstokenProviderProperties : IEquatable<ComAdobeGraniteAuthOauthAccesstokenProviderProperties>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public ConfigNodePropertyString Name { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderTitle
        /// </summary>
        [DataMember(Name="auth.token.provider.title")]
        public ConfigNodePropertyString AuthTokenProviderTitle { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderDefaultClaims
        /// </summary>
        [DataMember(Name="auth.token.provider.default.claims")]
        public ConfigNodePropertyArray AuthTokenProviderDefaultClaims { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderEndpoint
        /// </summary>
        [DataMember(Name="auth.token.provider.endpoint")]
        public ConfigNodePropertyString AuthTokenProviderEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets AuthAccessTokenRequest
        /// </summary>
        [DataMember(Name="auth.access.token.request")]
        public ConfigNodePropertyString AuthAccessTokenRequest { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderKeypairAlias
        /// </summary>
        [DataMember(Name="auth.token.provider.keypair.alias")]
        public ConfigNodePropertyString AuthTokenProviderKeypairAlias { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderConnTimeout
        /// </summary>
        [DataMember(Name="auth.token.provider.conn.timeout")]
        public ConfigNodePropertyInteger AuthTokenProviderConnTimeout { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderSoTimeout
        /// </summary>
        [DataMember(Name="auth.token.provider.so.timeout")]
        public ConfigNodePropertyInteger AuthTokenProviderSoTimeout { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderClientId
        /// </summary>
        [DataMember(Name="auth.token.provider.client.id")]
        public ConfigNodePropertyString AuthTokenProviderClientId { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderScope
        /// </summary>
        [DataMember(Name="auth.token.provider.scope")]
        public ConfigNodePropertyString AuthTokenProviderScope { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderReuseAccessToken
        /// </summary>
        [DataMember(Name="auth.token.provider.reuse.access.token")]
        public ConfigNodePropertyBoolean AuthTokenProviderReuseAccessToken { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenProviderRelaxedSsl
        /// </summary>
        [DataMember(Name="auth.token.provider.relaxed.ssl")]
        public ConfigNodePropertyBoolean AuthTokenProviderRelaxedSsl { get; set; }

        /// <summary>
        /// Gets or Sets TokenRequestCustomizerType
        /// </summary>
        [DataMember(Name="token.request.customizer.type")]
        public ConfigNodePropertyString TokenRequestCustomizerType { get; set; }

        /// <summary>
        /// Gets or Sets AuthTokenValidatorType
        /// </summary>
        [DataMember(Name="auth.token.validator.type")]
        public ConfigNodePropertyString AuthTokenValidatorType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteAuthOauthAccesstokenProviderProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AuthTokenProviderTitle: ").Append(AuthTokenProviderTitle).Append("\n");
            sb.Append("  AuthTokenProviderDefaultClaims: ").Append(AuthTokenProviderDefaultClaims).Append("\n");
            sb.Append("  AuthTokenProviderEndpoint: ").Append(AuthTokenProviderEndpoint).Append("\n");
            sb.Append("  AuthAccessTokenRequest: ").Append(AuthAccessTokenRequest).Append("\n");
            sb.Append("  AuthTokenProviderKeypairAlias: ").Append(AuthTokenProviderKeypairAlias).Append("\n");
            sb.Append("  AuthTokenProviderConnTimeout: ").Append(AuthTokenProviderConnTimeout).Append("\n");
            sb.Append("  AuthTokenProviderSoTimeout: ").Append(AuthTokenProviderSoTimeout).Append("\n");
            sb.Append("  AuthTokenProviderClientId: ").Append(AuthTokenProviderClientId).Append("\n");
            sb.Append("  AuthTokenProviderScope: ").Append(AuthTokenProviderScope).Append("\n");
            sb.Append("  AuthTokenProviderReuseAccessToken: ").Append(AuthTokenProviderReuseAccessToken).Append("\n");
            sb.Append("  AuthTokenProviderRelaxedSsl: ").Append(AuthTokenProviderRelaxedSsl).Append("\n");
            sb.Append("  TokenRequestCustomizerType: ").Append(TokenRequestCustomizerType).Append("\n");
            sb.Append("  AuthTokenValidatorType: ").Append(AuthTokenValidatorType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteAuthOauthAccesstokenProviderProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteAuthOauthAccesstokenProviderProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteAuthOauthAccesstokenProviderProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteAuthOauthAccesstokenProviderProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    AuthTokenProviderTitle == other.AuthTokenProviderTitle ||
                    AuthTokenProviderTitle != null &&
                    AuthTokenProviderTitle.Equals(other.AuthTokenProviderTitle)
                ) && 
                (
                    AuthTokenProviderDefaultClaims == other.AuthTokenProviderDefaultClaims ||
                    AuthTokenProviderDefaultClaims != null &&
                    AuthTokenProviderDefaultClaims.Equals(other.AuthTokenProviderDefaultClaims)
                ) && 
                (
                    AuthTokenProviderEndpoint == other.AuthTokenProviderEndpoint ||
                    AuthTokenProviderEndpoint != null &&
                    AuthTokenProviderEndpoint.Equals(other.AuthTokenProviderEndpoint)
                ) && 
                (
                    AuthAccessTokenRequest == other.AuthAccessTokenRequest ||
                    AuthAccessTokenRequest != null &&
                    AuthAccessTokenRequest.Equals(other.AuthAccessTokenRequest)
                ) && 
                (
                    AuthTokenProviderKeypairAlias == other.AuthTokenProviderKeypairAlias ||
                    AuthTokenProviderKeypairAlias != null &&
                    AuthTokenProviderKeypairAlias.Equals(other.AuthTokenProviderKeypairAlias)
                ) && 
                (
                    AuthTokenProviderConnTimeout == other.AuthTokenProviderConnTimeout ||
                    AuthTokenProviderConnTimeout != null &&
                    AuthTokenProviderConnTimeout.Equals(other.AuthTokenProviderConnTimeout)
                ) && 
                (
                    AuthTokenProviderSoTimeout == other.AuthTokenProviderSoTimeout ||
                    AuthTokenProviderSoTimeout != null &&
                    AuthTokenProviderSoTimeout.Equals(other.AuthTokenProviderSoTimeout)
                ) && 
                (
                    AuthTokenProviderClientId == other.AuthTokenProviderClientId ||
                    AuthTokenProviderClientId != null &&
                    AuthTokenProviderClientId.Equals(other.AuthTokenProviderClientId)
                ) && 
                (
                    AuthTokenProviderScope == other.AuthTokenProviderScope ||
                    AuthTokenProviderScope != null &&
                    AuthTokenProviderScope.Equals(other.AuthTokenProviderScope)
                ) && 
                (
                    AuthTokenProviderReuseAccessToken == other.AuthTokenProviderReuseAccessToken ||
                    AuthTokenProviderReuseAccessToken != null &&
                    AuthTokenProviderReuseAccessToken.Equals(other.AuthTokenProviderReuseAccessToken)
                ) && 
                (
                    AuthTokenProviderRelaxedSsl == other.AuthTokenProviderRelaxedSsl ||
                    AuthTokenProviderRelaxedSsl != null &&
                    AuthTokenProviderRelaxedSsl.Equals(other.AuthTokenProviderRelaxedSsl)
                ) && 
                (
                    TokenRequestCustomizerType == other.TokenRequestCustomizerType ||
                    TokenRequestCustomizerType != null &&
                    TokenRequestCustomizerType.Equals(other.TokenRequestCustomizerType)
                ) && 
                (
                    AuthTokenValidatorType == other.AuthTokenValidatorType ||
                    AuthTokenValidatorType != null &&
                    AuthTokenValidatorType.Equals(other.AuthTokenValidatorType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (AuthTokenProviderTitle != null)
                    hashCode = hashCode * 59 + AuthTokenProviderTitle.GetHashCode();
                    if (AuthTokenProviderDefaultClaims != null)
                    hashCode = hashCode * 59 + AuthTokenProviderDefaultClaims.GetHashCode();
                    if (AuthTokenProviderEndpoint != null)
                    hashCode = hashCode * 59 + AuthTokenProviderEndpoint.GetHashCode();
                    if (AuthAccessTokenRequest != null)
                    hashCode = hashCode * 59 + AuthAccessTokenRequest.GetHashCode();
                    if (AuthTokenProviderKeypairAlias != null)
                    hashCode = hashCode * 59 + AuthTokenProviderKeypairAlias.GetHashCode();
                    if (AuthTokenProviderConnTimeout != null)
                    hashCode = hashCode * 59 + AuthTokenProviderConnTimeout.GetHashCode();
                    if (AuthTokenProviderSoTimeout != null)
                    hashCode = hashCode * 59 + AuthTokenProviderSoTimeout.GetHashCode();
                    if (AuthTokenProviderClientId != null)
                    hashCode = hashCode * 59 + AuthTokenProviderClientId.GetHashCode();
                    if (AuthTokenProviderScope != null)
                    hashCode = hashCode * 59 + AuthTokenProviderScope.GetHashCode();
                    if (AuthTokenProviderReuseAccessToken != null)
                    hashCode = hashCode * 59 + AuthTokenProviderReuseAccessToken.GetHashCode();
                    if (AuthTokenProviderRelaxedSsl != null)
                    hashCode = hashCode * 59 + AuthTokenProviderRelaxedSsl.GetHashCode();
                    if (TokenRequestCustomizerType != null)
                    hashCode = hashCode * 59 + TokenRequestCustomizerType.GetHashCode();
                    if (AuthTokenValidatorType != null)
                    hashCode = hashCode * 59 + AuthTokenValidatorType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteAuthOauthAccesstokenProviderProperties left, ComAdobeGraniteAuthOauthAccesstokenProviderProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteAuthOauthAccesstokenProviderProperties left, ComAdobeGraniteAuthOauthAccesstokenProviderProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
