<?php
/**
 * ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'translation_factory' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'default_connector_label' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'default_connector_attribution' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'default_connector_workspace_id' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'default_connector_subscription_key' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'language_map_location' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'category_map_location' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'retry_attempts' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'timeout_count' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'translation_factory' => null,
        'default_connector_label' => null,
        'default_connector_attribution' => null,
        'default_connector_workspace_id' => null,
        'default_connector_subscription_key' => null,
        'language_map_location' => null,
        'category_map_location' => null,
        'retry_attempts' => null,
        'timeout_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'translation_factory' => 'translationFactory',
        'default_connector_label' => 'defaultConnectorLabel',
        'default_connector_attribution' => 'defaultConnectorAttribution',
        'default_connector_workspace_id' => 'defaultConnectorWorkspaceId',
        'default_connector_subscription_key' => 'defaultConnectorSubscriptionKey',
        'language_map_location' => 'languageMapLocation',
        'category_map_location' => 'categoryMapLocation',
        'retry_attempts' => 'retryAttempts',
        'timeout_count' => 'timeoutCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'translation_factory' => 'setTranslationFactory',
        'default_connector_label' => 'setDefaultConnectorLabel',
        'default_connector_attribution' => 'setDefaultConnectorAttribution',
        'default_connector_workspace_id' => 'setDefaultConnectorWorkspaceId',
        'default_connector_subscription_key' => 'setDefaultConnectorSubscriptionKey',
        'language_map_location' => 'setLanguageMapLocation',
        'category_map_location' => 'setCategoryMapLocation',
        'retry_attempts' => 'setRetryAttempts',
        'timeout_count' => 'setTimeoutCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'translation_factory' => 'getTranslationFactory',
        'default_connector_label' => 'getDefaultConnectorLabel',
        'default_connector_attribution' => 'getDefaultConnectorAttribution',
        'default_connector_workspace_id' => 'getDefaultConnectorWorkspaceId',
        'default_connector_subscription_key' => 'getDefaultConnectorSubscriptionKey',
        'language_map_location' => 'getLanguageMapLocation',
        'category_map_location' => 'getCategoryMapLocation',
        'retry_attempts' => 'getRetryAttempts',
        'timeout_count' => 'getTimeoutCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['translation_factory'] = isset($data['translation_factory']) ? $data['translation_factory'] : null;
        $this->container['default_connector_label'] = isset($data['default_connector_label']) ? $data['default_connector_label'] : null;
        $this->container['default_connector_attribution'] = isset($data['default_connector_attribution']) ? $data['default_connector_attribution'] : null;
        $this->container['default_connector_workspace_id'] = isset($data['default_connector_workspace_id']) ? $data['default_connector_workspace_id'] : null;
        $this->container['default_connector_subscription_key'] = isset($data['default_connector_subscription_key']) ? $data['default_connector_subscription_key'] : null;
        $this->container['language_map_location'] = isset($data['language_map_location']) ? $data['language_map_location'] : null;
        $this->container['category_map_location'] = isset($data['category_map_location']) ? $data['category_map_location'] : null;
        $this->container['retry_attempts'] = isset($data['retry_attempts']) ? $data['retry_attempts'] : null;
        $this->container['timeout_count'] = isset($data['timeout_count']) ? $data['timeout_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets translation_factory
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getTranslationFactory()
    {
        return $this->container['translation_factory'];
    }

    /**
     * Sets translation_factory
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $translation_factory translation_factory
     *
     * @return $this
     */
    public function setTranslationFactory($translation_factory)
    {
        $this->container['translation_factory'] = $translation_factory;

        return $this;
    }

    /**
     * Gets default_connector_label
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDefaultConnectorLabel()
    {
        return $this->container['default_connector_label'];
    }

    /**
     * Sets default_connector_label
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $default_connector_label default_connector_label
     *
     * @return $this
     */
    public function setDefaultConnectorLabel($default_connector_label)
    {
        $this->container['default_connector_label'] = $default_connector_label;

        return $this;
    }

    /**
     * Gets default_connector_attribution
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDefaultConnectorAttribution()
    {
        return $this->container['default_connector_attribution'];
    }

    /**
     * Sets default_connector_attribution
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $default_connector_attribution default_connector_attribution
     *
     * @return $this
     */
    public function setDefaultConnectorAttribution($default_connector_attribution)
    {
        $this->container['default_connector_attribution'] = $default_connector_attribution;

        return $this;
    }

    /**
     * Gets default_connector_workspace_id
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDefaultConnectorWorkspaceId()
    {
        return $this->container['default_connector_workspace_id'];
    }

    /**
     * Sets default_connector_workspace_id
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $default_connector_workspace_id default_connector_workspace_id
     *
     * @return $this
     */
    public function setDefaultConnectorWorkspaceId($default_connector_workspace_id)
    {
        $this->container['default_connector_workspace_id'] = $default_connector_workspace_id;

        return $this;
    }

    /**
     * Gets default_connector_subscription_key
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDefaultConnectorSubscriptionKey()
    {
        return $this->container['default_connector_subscription_key'];
    }

    /**
     * Sets default_connector_subscription_key
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $default_connector_subscription_key default_connector_subscription_key
     *
     * @return $this
     */
    public function setDefaultConnectorSubscriptionKey($default_connector_subscription_key)
    {
        $this->container['default_connector_subscription_key'] = $default_connector_subscription_key;

        return $this;
    }

    /**
     * Gets language_map_location
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getLanguageMapLocation()
    {
        return $this->container['language_map_location'];
    }

    /**
     * Sets language_map_location
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $language_map_location language_map_location
     *
     * @return $this
     */
    public function setLanguageMapLocation($language_map_location)
    {
        $this->container['language_map_location'] = $language_map_location;

        return $this;
    }

    /**
     * Gets category_map_location
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getCategoryMapLocation()
    {
        return $this->container['category_map_location'];
    }

    /**
     * Sets category_map_location
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $category_map_location category_map_location
     *
     * @return $this
     */
    public function setCategoryMapLocation($category_map_location)
    {
        $this->container['category_map_location'] = $category_map_location;

        return $this;
    }

    /**
     * Gets retry_attempts
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getRetryAttempts()
    {
        return $this->container['retry_attempts'];
    }

    /**
     * Sets retry_attempts
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $retry_attempts retry_attempts
     *
     * @return $this
     */
    public function setRetryAttempts($retry_attempts)
    {
        $this->container['retry_attempts'] = $retry_attempts;

        return $this;
    }

    /**
     * Gets timeout_count
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getTimeoutCount()
    {
        return $this->container['timeout_count'];
    }

    /**
     * Sets timeout_count
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $timeout_count timeout_count
     *
     * @return $this
     */
    public function setTimeoutCount($timeout_count)
    {
        $this->container['timeout_count'] = $timeout_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


