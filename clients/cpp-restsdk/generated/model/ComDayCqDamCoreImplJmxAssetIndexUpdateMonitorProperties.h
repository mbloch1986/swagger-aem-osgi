/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyFloat.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties
    : public ModelBase
{
public:
    ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties();
    virtual ~ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJmxObjectname() const;
    bool jmxObjectnameIsSet() const;
    void unsetJmx_objectname();
    void setJmxObjectname(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPropertyMeasureEnabled() const;
    bool propertyMeasureEnabledIsSet() const;
    void unsetProperty_measure_enabled();
    void setPropertyMeasureEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPropertyName() const;
    bool propertyNameIsSet() const;
    void unsetProperty_name();
    void setPropertyName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPropertyMaxWaitMs() const;
    bool propertyMaxWaitMsIsSet() const;
    void unsetProperty_max_wait_ms();
    void setPropertyMaxWaitMs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyFloat> getPropertyMaxRate() const;
    bool propertyMaxRateIsSet() const;
    void unsetProperty_max_rate();
    void setPropertyMaxRate(std::shared_ptr<ConfigNodePropertyFloat> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getFulltextMeasureEnabled() const;
    bool fulltextMeasureEnabledIsSet() const;
    void unsetFulltext_measure_enabled();
    void setFulltextMeasureEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getFulltextName() const;
    bool fulltextNameIsSet() const;
    void unsetFulltext_name();
    void setFulltextName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getFulltextMaxWaitMs() const;
    bool fulltextMaxWaitMsIsSet() const;
    void unsetFulltext_max_wait_ms();
    void setFulltextMaxWaitMs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyFloat> getFulltextMaxRate() const;
    bool fulltextMaxRateIsSet() const;
    void unsetFulltext_max_rate();
    void setFulltextMaxRate(std::shared_ptr<ConfigNodePropertyFloat> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Jmx_objectname;
    bool m_Jmx_objectnameIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Property_measure_enabled;
    bool m_Property_measure_enabledIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Property_name;
    bool m_Property_nameIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Property_max_wait_ms;
    bool m_Property_max_wait_msIsSet;
    std::shared_ptr<ConfigNodePropertyFloat> m_Property_max_rate;
    bool m_Property_max_rateIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Fulltext_measure_enabled;
    bool m_Fulltext_measure_enabledIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Fulltext_name;
    bool m_Fulltext_nameIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Fulltext_max_wait_ms;
    bool m_Fulltext_max_wait_msIsSet;
    std::shared_ptr<ConfigNodePropertyFloat> m_Fulltext_max_rate;
    bool m_Fulltext_max_rateIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties_H_ */
