/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties {
  #[serde(rename = "sling.servlet.selectors")]
  sling_servlet_selectors: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "sling.servlet.extensions")]
  sling_servlet_extensions: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties {
  pub fn new() -> ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties {
    ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties {
      sling_servlet_selectors: None,
      sling_servlet_extensions: None
    }
  }

  pub fn set_sling_servlet_selectors(&mut self, sling_servlet_selectors: ::models::ConfigNodePropertyString) {
    self.sling_servlet_selectors = Some(sling_servlet_selectors);
  }

  pub fn with_sling_servlet_selectors(mut self, sling_servlet_selectors: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties {
    self.sling_servlet_selectors = Some(sling_servlet_selectors);
    self
  }

  pub fn sling_servlet_selectors(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_servlet_selectors.as_ref()
  }

  pub fn reset_sling_servlet_selectors(&mut self) {
    self.sling_servlet_selectors = None;
  }

  pub fn set_sling_servlet_extensions(&mut self, sling_servlet_extensions: ::models::ConfigNodePropertyString) {
    self.sling_servlet_extensions = Some(sling_servlet_extensions);
  }

  pub fn with_sling_servlet_extensions(mut self, sling_servlet_extensions: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties {
    self.sling_servlet_extensions = Some(sling_servlet_extensions);
    self
  }

  pub fn sling_servlet_extensions(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.sling_servlet_extensions.as_ref()
  }

  pub fn reset_sling_servlet_extensions(&mut self) {
    self.sling_servlet_extensions = None;
  }

}



