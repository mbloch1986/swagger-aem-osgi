/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties() {
    init();
}

OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::~OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties() {
    this->cleanup();
}

void
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::init() {
    cq_analytics_sitecatalyst_service_datacenter_url = new OAIConfigNodePropertyArray();
    m_cq_analytics_sitecatalyst_service_datacenter_url_isSet = false;
    devhostnamepatterns = new OAIConfigNodePropertyArray();
    m_devhostnamepatterns_isSet = false;
    connection_timeout = new OAIConfigNodePropertyInteger();
    m_connection_timeout_isSet = false;
    socket_timeout = new OAIConfigNodePropertyInteger();
    m_socket_timeout_isSet = false;
}

void
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::cleanup() {
    if(cq_analytics_sitecatalyst_service_datacenter_url != nullptr) { 
        delete cq_analytics_sitecatalyst_service_datacenter_url;
    }
    if(devhostnamepatterns != nullptr) { 
        delete devhostnamepatterns;
    }
    if(connection_timeout != nullptr) { 
        delete connection_timeout;
    }
    if(socket_timeout != nullptr) { 
        delete socket_timeout;
    }
}

OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties*
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&cq_analytics_sitecatalyst_service_datacenter_url, pJson["cq.analytics.sitecatalyst.service.datacenter.url"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&devhostnamepatterns, pJson["devhostnamepatterns"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&connection_timeout, pJson["connection.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&socket_timeout, pJson["socket.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::asJsonObject() {
    QJsonObject obj;
    if((cq_analytics_sitecatalyst_service_datacenter_url != nullptr) && (cq_analytics_sitecatalyst_service_datacenter_url->isSet())){
        toJsonValue(QString("cq.analytics.sitecatalyst.service.datacenter.url"), cq_analytics_sitecatalyst_service_datacenter_url, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((devhostnamepatterns != nullptr) && (devhostnamepatterns->isSet())){
        toJsonValue(QString("devhostnamepatterns"), devhostnamepatterns, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((connection_timeout != nullptr) && (connection_timeout->isSet())){
        toJsonValue(QString("connection.timeout"), connection_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((socket_timeout != nullptr) && (socket_timeout->isSet())){
        toJsonValue(QString("socket.timeout"), socket_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::getCqAnalyticsSitecatalystServiceDatacenterUrl() {
    return cq_analytics_sitecatalyst_service_datacenter_url;
}
void
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::setCqAnalyticsSitecatalystServiceDatacenterUrl(OAIConfigNodePropertyArray* cq_analytics_sitecatalyst_service_datacenter_url) {
    this->cq_analytics_sitecatalyst_service_datacenter_url = cq_analytics_sitecatalyst_service_datacenter_url;
    this->m_cq_analytics_sitecatalyst_service_datacenter_url_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::getDevhostnamepatterns() {
    return devhostnamepatterns;
}
void
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::setDevhostnamepatterns(OAIConfigNodePropertyArray* devhostnamepatterns) {
    this->devhostnamepatterns = devhostnamepatterns;
    this->m_devhostnamepatterns_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::getConnectionTimeout() {
    return connection_timeout;
}
void
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::setConnectionTimeout(OAIConfigNodePropertyInteger* connection_timeout) {
    this->connection_timeout = connection_timeout;
    this->m_connection_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::getSocketTimeout() {
    return socket_timeout;
}
void
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::setSocketTimeout(OAIConfigNodePropertyInteger* socket_timeout) {
    this->socket_timeout = socket_timeout;
    this->m_socket_timeout_isSet = true;
}


bool
OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(cq_analytics_sitecatalyst_service_datacenter_url != nullptr && cq_analytics_sitecatalyst_service_datacenter_url->isSet()){ isObjectUpdated = true; break;}
        if(devhostnamepatterns != nullptr && devhostnamepatterns->isSet()){ isObjectUpdated = true; break;}
        if(connection_timeout != nullptr && connection_timeout->isSet()){ isObjectUpdated = true; break;}
        if(socket_timeout != nullptr && socket_timeout->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

