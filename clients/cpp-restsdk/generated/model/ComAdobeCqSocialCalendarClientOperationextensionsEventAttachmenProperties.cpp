/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties()
{
    m_AttachmentTypeBlacklistIsSet = false;
    m_Extension_orderIsSet = false;
}

ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::~ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties()
{
}

void ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AttachmentTypeBlacklistIsSet)
    {
        val[utility::conversions::to_string_t("attachmentTypeBlacklist")] = ModelBase::toJson(m_AttachmentTypeBlacklist);
    }
    if(m_Extension_orderIsSet)
    {
        val[utility::conversions::to_string_t("extension.order")] = ModelBase::toJson(m_Extension_order);
    }

    return val;
}

void ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("attachmentTypeBlacklist")))
    {
        if(!val[utility::conversions::to_string_t("attachmentTypeBlacklist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("attachmentTypeBlacklist")]);
            setAttachmentTypeBlacklist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("extension.order")))
    {
        if(!val[utility::conversions::to_string_t("extension.order")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("extension.order")]);
            setExtensionOrder( newItem );
        }
    }
}

void ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AttachmentTypeBlacklistIsSet)
    {
        if (m_AttachmentTypeBlacklist.get())
        {
            m_AttachmentTypeBlacklist->toMultipart(multipart, utility::conversions::to_string_t("attachmentTypeBlacklist."));
        }
    }
    if(m_Extension_orderIsSet)
    {
        if (m_Extension_order.get())
        {
            m_Extension_order->toMultipart(multipart, utility::conversions::to_string_t("extension.order."));
        }
    }
}

void ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("attachmentTypeBlacklist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("attachmentTypeBlacklist")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("attachmentTypeBlacklist."));
            setAttachmentTypeBlacklist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("extension.order")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("extension.order")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("extension.order."));
            setExtensionOrder( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::getAttachmentTypeBlacklist() const
{
    return m_AttachmentTypeBlacklist;
}


void ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::setAttachmentTypeBlacklist(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_AttachmentTypeBlacklist = value;
    m_AttachmentTypeBlacklistIsSet = true;
}
bool ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::attachmentTypeBlacklistIsSet() const
{
    return m_AttachmentTypeBlacklistIsSet;
}

void ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::unsetAttachmentTypeBlacklist()
{
    m_AttachmentTypeBlacklistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::getExtensionOrder() const
{
    return m_Extension_order;
}


void ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::setExtensionOrder(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Extension_order = value;
    m_Extension_orderIsSet = true;
}
bool ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::extensionOrderIsSet() const
{
    return m_Extension_orderIsSet;
}

void ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties::unsetExtension_order()
{
    m_Extension_orderIsSet = false;
}

}
}
}
}

