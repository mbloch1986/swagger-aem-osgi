/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqDamS7imagingImplIsImageServerComponentProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqDamS7imagingImplIsImageServerComponentProperties :  IEquatable<ComAdobeCqDamS7imagingImplIsImageServerComponentProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqDamS7imagingImplIsImageServerComponentProperties" /> class.
        /// </summary>
        /// <param name="tcpPort">tcpPort.</param>
        /// <param name="allowRemoteAccess">allowRemoteAccess.</param>
        /// <param name="maxRenderRgnPixels">maxRenderRgnPixels.</param>
        /// <param name="maxMessageSize">maxMessageSize.</param>
        /// <param name="randomAccessUrlTimeout">randomAccessUrlTimeout.</param>
        /// <param name="workerThreads">workerThreads.</param>
        public ComAdobeCqDamS7imagingImplIsImageServerComponentProperties(ConfigNodePropertyString tcpPort = default(ConfigNodePropertyString), ConfigNodePropertyBoolean allowRemoteAccess = default(ConfigNodePropertyBoolean), ConfigNodePropertyString maxRenderRgnPixels = default(ConfigNodePropertyString), ConfigNodePropertyString maxMessageSize = default(ConfigNodePropertyString), ConfigNodePropertyInteger randomAccessUrlTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger workerThreads = default(ConfigNodePropertyInteger))
        {
            this.TcpPort = tcpPort;
            this.AllowRemoteAccess = allowRemoteAccess;
            this.MaxRenderRgnPixels = maxRenderRgnPixels;
            this.MaxMessageSize = maxMessageSize;
            this.RandomAccessUrlTimeout = randomAccessUrlTimeout;
            this.WorkerThreads = workerThreads;
        }
        
        /// <summary>
        /// Gets or Sets TcpPort
        /// </summary>
        [DataMember(Name="TcpPort", EmitDefaultValue=false)]
        public ConfigNodePropertyString TcpPort { get; set; }

        /// <summary>
        /// Gets or Sets AllowRemoteAccess
        /// </summary>
        [DataMember(Name="AllowRemoteAccess", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean AllowRemoteAccess { get; set; }

        /// <summary>
        /// Gets or Sets MaxRenderRgnPixels
        /// </summary>
        [DataMember(Name="MaxRenderRgnPixels", EmitDefaultValue=false)]
        public ConfigNodePropertyString MaxRenderRgnPixels { get; set; }

        /// <summary>
        /// Gets or Sets MaxMessageSize
        /// </summary>
        [DataMember(Name="MaxMessageSize", EmitDefaultValue=false)]
        public ConfigNodePropertyString MaxMessageSize { get; set; }

        /// <summary>
        /// Gets or Sets RandomAccessUrlTimeout
        /// </summary>
        [DataMember(Name="RandomAccessUrlTimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RandomAccessUrlTimeout { get; set; }

        /// <summary>
        /// Gets or Sets WorkerThreads
        /// </summary>
        [DataMember(Name="WorkerThreads", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger WorkerThreads { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {\n");
            sb.Append("  TcpPort: ").Append(TcpPort).Append("\n");
            sb.Append("  AllowRemoteAccess: ").Append(AllowRemoteAccess).Append("\n");
            sb.Append("  MaxRenderRgnPixels: ").Append(MaxRenderRgnPixels).Append("\n");
            sb.Append("  MaxMessageSize: ").Append(MaxMessageSize).Append("\n");
            sb.Append("  RandomAccessUrlTimeout: ").Append(RandomAccessUrlTimeout).Append("\n");
            sb.Append("  WorkerThreads: ").Append(WorkerThreads).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqDamS7imagingImplIsImageServerComponentProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqDamS7imagingImplIsImageServerComponentProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqDamS7imagingImplIsImageServerComponentProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqDamS7imagingImplIsImageServerComponentProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TcpPort == input.TcpPort ||
                    (this.TcpPort != null &&
                    this.TcpPort.Equals(input.TcpPort))
                ) && 
                (
                    this.AllowRemoteAccess == input.AllowRemoteAccess ||
                    (this.AllowRemoteAccess != null &&
                    this.AllowRemoteAccess.Equals(input.AllowRemoteAccess))
                ) && 
                (
                    this.MaxRenderRgnPixels == input.MaxRenderRgnPixels ||
                    (this.MaxRenderRgnPixels != null &&
                    this.MaxRenderRgnPixels.Equals(input.MaxRenderRgnPixels))
                ) && 
                (
                    this.MaxMessageSize == input.MaxMessageSize ||
                    (this.MaxMessageSize != null &&
                    this.MaxMessageSize.Equals(input.MaxMessageSize))
                ) && 
                (
                    this.RandomAccessUrlTimeout == input.RandomAccessUrlTimeout ||
                    (this.RandomAccessUrlTimeout != null &&
                    this.RandomAccessUrlTimeout.Equals(input.RandomAccessUrlTimeout))
                ) && 
                (
                    this.WorkerThreads == input.WorkerThreads ||
                    (this.WorkerThreads != null &&
                    this.WorkerThreads.Equals(input.WorkerThreads))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TcpPort != null)
                    hashCode = hashCode * 59 + this.TcpPort.GetHashCode();
                if (this.AllowRemoteAccess != null)
                    hashCode = hashCode * 59 + this.AllowRemoteAccess.GetHashCode();
                if (this.MaxRenderRgnPixels != null)
                    hashCode = hashCode * 59 + this.MaxRenderRgnPixels.GetHashCode();
                if (this.MaxMessageSize != null)
                    hashCode = hashCode * 59 + this.MaxMessageSize.GetHashCode();
                if (this.RandomAccessUrlTimeout != null)
                    hashCode = hashCode * 59 + this.RandomAccessUrlTimeout.GetHashCode();
                if (this.WorkerThreads != null)
                    hashCode = hashCode * 59 + this.WorkerThreads.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
