/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties()
{
    m_Event_filterIsSet = false;
    m_Fontmgr_system_font_dirIsSet = false;
    m_Fontmgr_adobe_font_dirIsSet = false;
    m_Fontmgr_customer_font_dirIsSet = false;
}

ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::~ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties()
{
}

void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Event_filterIsSet)
    {
        val[utility::conversions::to_string_t("event.filter")] = ModelBase::toJson(m_Event_filter);
    }
    if(m_Fontmgr_system_font_dirIsSet)
    {
        val[utility::conversions::to_string_t("fontmgr.system.font.dir")] = ModelBase::toJson(m_Fontmgr_system_font_dir);
    }
    if(m_Fontmgr_adobe_font_dirIsSet)
    {
        val[utility::conversions::to_string_t("fontmgr.adobe.font.dir")] = ModelBase::toJson(m_Fontmgr_adobe_font_dir);
    }
    if(m_Fontmgr_customer_font_dirIsSet)
    {
        val[utility::conversions::to_string_t("fontmgr.customer.font.dir")] = ModelBase::toJson(m_Fontmgr_customer_font_dir);
    }

    return val;
}

void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("event.filter")))
    {
        if(!val[utility::conversions::to_string_t("event.filter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("event.filter")]);
            setEventFilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fontmgr.system.font.dir")))
    {
        if(!val[utility::conversions::to_string_t("fontmgr.system.font.dir")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("fontmgr.system.font.dir")]);
            setFontmgrSystemFontDir( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fontmgr.adobe.font.dir")))
    {
        if(!val[utility::conversions::to_string_t("fontmgr.adobe.font.dir")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("fontmgr.adobe.font.dir")]);
            setFontmgrAdobeFontDir( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fontmgr.customer.font.dir")))
    {
        if(!val[utility::conversions::to_string_t("fontmgr.customer.font.dir")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("fontmgr.customer.font.dir")]);
            setFontmgrCustomerFontDir( newItem );
        }
    }
}

void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Event_filterIsSet)
    {
        if (m_Event_filter.get())
        {
            m_Event_filter->toMultipart(multipart, utility::conversions::to_string_t("event.filter."));
        }
    }
    if(m_Fontmgr_system_font_dirIsSet)
    {
        if (m_Fontmgr_system_font_dir.get())
        {
            m_Fontmgr_system_font_dir->toMultipart(multipart, utility::conversions::to_string_t("fontmgr.system.font.dir."));
        }
    }
    if(m_Fontmgr_adobe_font_dirIsSet)
    {
        if (m_Fontmgr_adobe_font_dir.get())
        {
            m_Fontmgr_adobe_font_dir->toMultipart(multipart, utility::conversions::to_string_t("fontmgr.adobe.font.dir."));
        }
    }
    if(m_Fontmgr_customer_font_dirIsSet)
    {
        if (m_Fontmgr_customer_font_dir.get())
        {
            m_Fontmgr_customer_font_dir->toMultipart(multipart, utility::conversions::to_string_t("fontmgr.customer.font.dir."));
        }
    }
}

void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("event.filter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("event.filter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("event.filter."));
            setEventFilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fontmgr.system.font.dir")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fontmgr.system.font.dir")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fontmgr.system.font.dir."));
            setFontmgrSystemFontDir( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fontmgr.adobe.font.dir")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fontmgr.adobe.font.dir")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fontmgr.adobe.font.dir."));
            setFontmgrAdobeFontDir( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fontmgr.customer.font.dir")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fontmgr.customer.font.dir")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fontmgr.customer.font.dir."));
            setFontmgrCustomerFontDir( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::getEventFilter() const
{
    return m_Event_filter;
}


void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::setEventFilter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Event_filter = value;
    m_Event_filterIsSet = true;
}
bool ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::eventFilterIsSet() const
{
    return m_Event_filterIsSet;
}

void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::unsetEvent_filter()
{
    m_Event_filterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::getFontmgrSystemFontDir() const
{
    return m_Fontmgr_system_font_dir;
}


void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::setFontmgrSystemFontDir(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Fontmgr_system_font_dir = value;
    m_Fontmgr_system_font_dirIsSet = true;
}
bool ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::fontmgrSystemFontDirIsSet() const
{
    return m_Fontmgr_system_font_dirIsSet;
}

void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::unsetFontmgr_system_font_dir()
{
    m_Fontmgr_system_font_dirIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::getFontmgrAdobeFontDir() const
{
    return m_Fontmgr_adobe_font_dir;
}


void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::setFontmgrAdobeFontDir(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Fontmgr_adobe_font_dir = value;
    m_Fontmgr_adobe_font_dirIsSet = true;
}
bool ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::fontmgrAdobeFontDirIsSet() const
{
    return m_Fontmgr_adobe_font_dirIsSet;
}

void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::unsetFontmgr_adobe_font_dir()
{
    m_Fontmgr_adobe_font_dirIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::getFontmgrCustomerFontDir() const
{
    return m_Fontmgr_customer_font_dir;
}


void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::setFontmgrCustomerFontDir(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Fontmgr_customer_font_dir = value;
    m_Fontmgr_customer_font_dirIsSet = true;
}
bool ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::fontmgrCustomerFontDirIsSet() const
{
    return m_Fontmgr_customer_font_dirIsSet;
}

void ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties::unsetFontmgr_customer_font_dir()
{
    m_Fontmgr_customer_font_dirIsSet = false;
}

}
}
}
}

