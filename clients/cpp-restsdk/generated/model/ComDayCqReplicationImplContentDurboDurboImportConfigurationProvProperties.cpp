/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties()
{
    m_Preserve_hierarchy_nodesIsSet = false;
    m_Ignore_versioningIsSet = false;
    m_Import_aclIsSet = false;
    m_Save_thresholdIsSet = false;
    m_Preserve_user_pathsIsSet = false;
    m_Preserve_uuidIsSet = false;
    m_Preserve_uuid_nodetypesIsSet = false;
    m_Preserve_uuid_subtreesIsSet = false;
    m_Auto_commitIsSet = false;
}

ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::~ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties()
{
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Preserve_hierarchy_nodesIsSet)
    {
        val[utility::conversions::to_string_t("preserve.hierarchy.nodes")] = ModelBase::toJson(m_Preserve_hierarchy_nodes);
    }
    if(m_Ignore_versioningIsSet)
    {
        val[utility::conversions::to_string_t("ignore.versioning")] = ModelBase::toJson(m_Ignore_versioning);
    }
    if(m_Import_aclIsSet)
    {
        val[utility::conversions::to_string_t("import.acl")] = ModelBase::toJson(m_Import_acl);
    }
    if(m_Save_thresholdIsSet)
    {
        val[utility::conversions::to_string_t("save.threshold")] = ModelBase::toJson(m_Save_threshold);
    }
    if(m_Preserve_user_pathsIsSet)
    {
        val[utility::conversions::to_string_t("preserve.user.paths")] = ModelBase::toJson(m_Preserve_user_paths);
    }
    if(m_Preserve_uuidIsSet)
    {
        val[utility::conversions::to_string_t("preserve.uuid")] = ModelBase::toJson(m_Preserve_uuid);
    }
    if(m_Preserve_uuid_nodetypesIsSet)
    {
        val[utility::conversions::to_string_t("preserve.uuid.nodetypes")] = ModelBase::toJson(m_Preserve_uuid_nodetypes);
    }
    if(m_Preserve_uuid_subtreesIsSet)
    {
        val[utility::conversions::to_string_t("preserve.uuid.subtrees")] = ModelBase::toJson(m_Preserve_uuid_subtrees);
    }
    if(m_Auto_commitIsSet)
    {
        val[utility::conversions::to_string_t("auto.commit")] = ModelBase::toJson(m_Auto_commit);
    }

    return val;
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("preserve.hierarchy.nodes")))
    {
        if(!val[utility::conversions::to_string_t("preserve.hierarchy.nodes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("preserve.hierarchy.nodes")]);
            setPreserveHierarchyNodes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ignore.versioning")))
    {
        if(!val[utility::conversions::to_string_t("ignore.versioning")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("ignore.versioning")]);
            setIgnoreVersioning( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("import.acl")))
    {
        if(!val[utility::conversions::to_string_t("import.acl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("import.acl")]);
            setImportAcl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("save.threshold")))
    {
        if(!val[utility::conversions::to_string_t("save.threshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("save.threshold")]);
            setSaveThreshold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("preserve.user.paths")))
    {
        if(!val[utility::conversions::to_string_t("preserve.user.paths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("preserve.user.paths")]);
            setPreserveUserPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("preserve.uuid")))
    {
        if(!val[utility::conversions::to_string_t("preserve.uuid")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("preserve.uuid")]);
            setPreserveUuid( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("preserve.uuid.nodetypes")))
    {
        if(!val[utility::conversions::to_string_t("preserve.uuid.nodetypes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("preserve.uuid.nodetypes")]);
            setPreserveUuidNodetypes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("preserve.uuid.subtrees")))
    {
        if(!val[utility::conversions::to_string_t("preserve.uuid.subtrees")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("preserve.uuid.subtrees")]);
            setPreserveUuidSubtrees( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("auto.commit")))
    {
        if(!val[utility::conversions::to_string_t("auto.commit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("auto.commit")]);
            setAutoCommit( newItem );
        }
    }
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Preserve_hierarchy_nodesIsSet)
    {
        if (m_Preserve_hierarchy_nodes.get())
        {
            m_Preserve_hierarchy_nodes->toMultipart(multipart, utility::conversions::to_string_t("preserve.hierarchy.nodes."));
        }
    }
    if(m_Ignore_versioningIsSet)
    {
        if (m_Ignore_versioning.get())
        {
            m_Ignore_versioning->toMultipart(multipart, utility::conversions::to_string_t("ignore.versioning."));
        }
    }
    if(m_Import_aclIsSet)
    {
        if (m_Import_acl.get())
        {
            m_Import_acl->toMultipart(multipart, utility::conversions::to_string_t("import.acl."));
        }
    }
    if(m_Save_thresholdIsSet)
    {
        if (m_Save_threshold.get())
        {
            m_Save_threshold->toMultipart(multipart, utility::conversions::to_string_t("save.threshold."));
        }
    }
    if(m_Preserve_user_pathsIsSet)
    {
        if (m_Preserve_user_paths.get())
        {
            m_Preserve_user_paths->toMultipart(multipart, utility::conversions::to_string_t("preserve.user.paths."));
        }
    }
    if(m_Preserve_uuidIsSet)
    {
        if (m_Preserve_uuid.get())
        {
            m_Preserve_uuid->toMultipart(multipart, utility::conversions::to_string_t("preserve.uuid."));
        }
    }
    if(m_Preserve_uuid_nodetypesIsSet)
    {
        if (m_Preserve_uuid_nodetypes.get())
        {
            m_Preserve_uuid_nodetypes->toMultipart(multipart, utility::conversions::to_string_t("preserve.uuid.nodetypes."));
        }
    }
    if(m_Preserve_uuid_subtreesIsSet)
    {
        if (m_Preserve_uuid_subtrees.get())
        {
            m_Preserve_uuid_subtrees->toMultipart(multipart, utility::conversions::to_string_t("preserve.uuid.subtrees."));
        }
    }
    if(m_Auto_commitIsSet)
    {
        if (m_Auto_commit.get())
        {
            m_Auto_commit->toMultipart(multipart, utility::conversions::to_string_t("auto.commit."));
        }
    }
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("preserve.hierarchy.nodes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("preserve.hierarchy.nodes")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("preserve.hierarchy.nodes."));
            setPreserveHierarchyNodes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ignore.versioning")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ignore.versioning")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ignore.versioning."));
            setIgnoreVersioning( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("import.acl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("import.acl")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("import.acl."));
            setImportAcl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("save.threshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("save.threshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("save.threshold."));
            setSaveThreshold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("preserve.user.paths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("preserve.user.paths")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("preserve.user.paths."));
            setPreserveUserPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("preserve.uuid")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("preserve.uuid")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("preserve.uuid."));
            setPreserveUuid( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("preserve.uuid.nodetypes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("preserve.uuid.nodetypes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("preserve.uuid.nodetypes."));
            setPreserveUuidNodetypes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("preserve.uuid.subtrees")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("preserve.uuid.subtrees")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("preserve.uuid.subtrees."));
            setPreserveUuidSubtrees( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auto.commit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("auto.commit")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("auto.commit."));
            setAutoCommit( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveHierarchyNodes() const
{
    return m_Preserve_hierarchy_nodes;
}


void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveHierarchyNodes(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Preserve_hierarchy_nodes = value;
    m_Preserve_hierarchy_nodesIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::preserveHierarchyNodesIsSet() const
{
    return m_Preserve_hierarchy_nodesIsSet;
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetPreserve_hierarchy_nodes()
{
    m_Preserve_hierarchy_nodesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getIgnoreVersioning() const
{
    return m_Ignore_versioning;
}


void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setIgnoreVersioning(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Ignore_versioning = value;
    m_Ignore_versioningIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::ignoreVersioningIsSet() const
{
    return m_Ignore_versioningIsSet;
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetIgnore_versioning()
{
    m_Ignore_versioningIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getImportAcl() const
{
    return m_Import_acl;
}


void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setImportAcl(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Import_acl = value;
    m_Import_aclIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::importAclIsSet() const
{
    return m_Import_aclIsSet;
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetImport_acl()
{
    m_Import_aclIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getSaveThreshold() const
{
    return m_Save_threshold;
}


void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setSaveThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Save_threshold = value;
    m_Save_thresholdIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::saveThresholdIsSet() const
{
    return m_Save_thresholdIsSet;
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetSave_threshold()
{
    m_Save_thresholdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUserPaths() const
{
    return m_Preserve_user_paths;
}


void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUserPaths(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Preserve_user_paths = value;
    m_Preserve_user_pathsIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::preserveUserPathsIsSet() const
{
    return m_Preserve_user_pathsIsSet;
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetPreserve_user_paths()
{
    m_Preserve_user_pathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUuid() const
{
    return m_Preserve_uuid;
}


void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUuid(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Preserve_uuid = value;
    m_Preserve_uuidIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::preserveUuidIsSet() const
{
    return m_Preserve_uuidIsSet;
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetPreserve_uuid()
{
    m_Preserve_uuidIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUuidNodetypes() const
{
    return m_Preserve_uuid_nodetypes;
}


void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUuidNodetypes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Preserve_uuid_nodetypes = value;
    m_Preserve_uuid_nodetypesIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::preserveUuidNodetypesIsSet() const
{
    return m_Preserve_uuid_nodetypesIsSet;
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetPreserve_uuid_nodetypes()
{
    m_Preserve_uuid_nodetypesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getPreserveUuidSubtrees() const
{
    return m_Preserve_uuid_subtrees;
}


void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setPreserveUuidSubtrees(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Preserve_uuid_subtrees = value;
    m_Preserve_uuid_subtreesIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::preserveUuidSubtreesIsSet() const
{
    return m_Preserve_uuid_subtreesIsSet;
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetPreserve_uuid_subtrees()
{
    m_Preserve_uuid_subtreesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::getAutoCommit() const
{
    return m_Auto_commit;
}


void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::setAutoCommit(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Auto_commit = value;
    m_Auto_commitIsSet = true;
}
bool ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::autoCommitIsSet() const
{
    return m_Auto_commitIsSet;
}

void ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties::unsetAuto_commit()
{
    m_Auto_commitIsSet = false;
}

}
}
}
}

