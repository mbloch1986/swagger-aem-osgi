/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties()
{
    m_FilepatternIsSet = false;
    m_Device_groupsIsSet = false;
    m_Build_page_nodesIsSet = false;
    m_Build_client_libsIsSet = false;
    m_Build_canvas_componentIsSet = false;
    
}

ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::~ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties()
{
}

void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_FilepatternIsSet)
    {
        val["filepattern"] = ModelBase::toJson(m_Filepattern);
    }
    if(m_Device_groupsIsSet)
    {
        val["device.groups"] = ModelBase::toJson(m_Device_groups);
    }
    if(m_Build_page_nodesIsSet)
    {
        val["build.page.nodes"] = ModelBase::toJson(m_Build_page_nodes);
    }
    if(m_Build_client_libsIsSet)
    {
        val["build.client.libs"] = ModelBase::toJson(m_Build_client_libs);
    }
    if(m_Build_canvas_componentIsSet)
    {
        val["build.canvas.component"] = ModelBase::toJson(m_Build_canvas_component);
    }
    

    return val;
}

void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("filepattern") != val.end())
    {
        if(!val["filepattern"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["filepattern"]);
            setFilepattern( newItem );
        }
        
    }
    if(val.find("device.groups") != val.end())
    {
        if(!val["device.groups"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["device.groups"]);
            setDeviceGroups( newItem );
        }
        
    }
    if(val.find("build.page.nodes") != val.end())
    {
        if(!val["build.page.nodes"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["build.page.nodes"]);
            setBuildPageNodes( newItem );
        }
        
    }
    if(val.find("build.client.libs") != val.end())
    {
        if(!val["build.client.libs"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["build.client.libs"]);
            setBuildClientLibs( newItem );
        }
        
    }
    if(val.find("build.canvas.component") != val.end())
    {
        if(!val["build.canvas.component"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["build.canvas.component"]);
            setBuildCanvasComponent( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::getFilepattern() const
{
    return m_Filepattern;
}
void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::setFilepattern(ConfigNodePropertyString const& value)
{
    m_Filepattern = value;
    m_FilepatternIsSet = true;
}
bool ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::filepatternIsSet() const
{
    return m_FilepatternIsSet;
}
void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::unsetFilepattern()
{
    m_FilepatternIsSet = false;
}
ConfigNodePropertyArray ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::getDeviceGroups() const
{
    return m_Device_groups;
}
void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::setDeviceGroups(ConfigNodePropertyArray const& value)
{
    m_Device_groups = value;
    m_Device_groupsIsSet = true;
}
bool ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::deviceGroupsIsSet() const
{
    return m_Device_groupsIsSet;
}
void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::unsetDevice_groups()
{
    m_Device_groupsIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::getBuildPageNodes() const
{
    return m_Build_page_nodes;
}
void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::setBuildPageNodes(ConfigNodePropertyBoolean const& value)
{
    m_Build_page_nodes = value;
    m_Build_page_nodesIsSet = true;
}
bool ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::buildPageNodesIsSet() const
{
    return m_Build_page_nodesIsSet;
}
void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::unsetBuild_page_nodes()
{
    m_Build_page_nodesIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::getBuildClientLibs() const
{
    return m_Build_client_libs;
}
void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::setBuildClientLibs(ConfigNodePropertyBoolean const& value)
{
    m_Build_client_libs = value;
    m_Build_client_libsIsSet = true;
}
bool ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::buildClientLibsIsSet() const
{
    return m_Build_client_libsIsSet;
}
void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::unsetBuild_client_libs()
{
    m_Build_client_libsIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::getBuildCanvasComponent() const
{
    return m_Build_canvas_component;
}
void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::setBuildCanvasComponent(ConfigNodePropertyBoolean const& value)
{
    m_Build_canvas_component = value;
    m_Build_canvas_componentIsSet = true;
}
bool ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::buildCanvasComponentIsSet() const
{
    return m_Build_canvas_componentIsSet;
}
void ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties::unsetBuild_canvas_component()
{
    m_Build_canvas_componentIsSet = false;
}

}
}
}
}

