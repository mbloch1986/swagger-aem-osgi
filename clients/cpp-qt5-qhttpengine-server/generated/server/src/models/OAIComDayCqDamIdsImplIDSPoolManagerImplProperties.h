/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComDayCqDamIdsImplIDSPoolManagerImplProperties.h
 *
 * 
 */

#ifndef OAIComDayCqDamIdsImplIDSPoolManagerImplProperties_H
#define OAIComDayCqDamIdsImplIDSPoolManagerImplProperties_H

#include <QJsonObject>


#include "OAIConfigNodePropertyInteger.h"
#include "OAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComDayCqDamIdsImplIDSPoolManagerImplProperties: public OAIObject {
public:
    OAIComDayCqDamIdsImplIDSPoolManagerImplProperties();
    OAIComDayCqDamIdsImplIDSPoolManagerImplProperties(QString json);
    ~OAIComDayCqDamIdsImplIDSPoolManagerImplProperties() override;
    void init();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigNodePropertyInteger getMaxErrorsToBlacklist() const;
    void setMaxErrorsToBlacklist(const OAIConfigNodePropertyInteger &max_errors_to_blacklist);

    OAIConfigNodePropertyInteger getRetryIntervalToWhitelist() const;
    void setRetryIntervalToWhitelist(const OAIConfigNodePropertyInteger &retry_interval_to_whitelist);

    OAIConfigNodePropertyInteger getConnectTimeout() const;
    void setConnectTimeout(const OAIConfigNodePropertyInteger &connect_timeout);

    OAIConfigNodePropertyInteger getSocketTimeout() const;
    void setSocketTimeout(const OAIConfigNodePropertyInteger &socket_timeout);

    OAIConfigNodePropertyString getProcessLabel() const;
    void setProcessLabel(const OAIConfigNodePropertyString &process_label);

    OAIConfigNodePropertyInteger getConnectionUseMax() const;
    void setConnectionUseMax(const OAIConfigNodePropertyInteger &connection_use_max);

    virtual bool isSet() const override;

private:
    OAIConfigNodePropertyInteger max_errors_to_blacklist;
    bool m_max_errors_to_blacklist_isSet;

    OAIConfigNodePropertyInteger retry_interval_to_whitelist;
    bool m_retry_interval_to_whitelist_isSet;

    OAIConfigNodePropertyInteger connect_timeout;
    bool m_connect_timeout_isSet;

    OAIConfigNodePropertyInteger socket_timeout;
    bool m_socket_timeout_isSet;

    OAIConfigNodePropertyString process_label;
    bool m_process_label_isSet;

    OAIConfigNodePropertyInteger connection_use_max;
    bool m_connection_use_max_isSet;

};

}

#endif // OAIComDayCqDamIdsImplIDSPoolManagerImplProperties_H
