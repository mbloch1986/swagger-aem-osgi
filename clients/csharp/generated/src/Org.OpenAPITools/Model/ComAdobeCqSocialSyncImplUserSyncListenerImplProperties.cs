/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqSocialSyncImplUserSyncListenerImplProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialSyncImplUserSyncListenerImplProperties :  IEquatable<ComAdobeCqSocialSyncImplUserSyncListenerImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqSocialSyncImplUserSyncListenerImplProperties" /> class.
        /// </summary>
        /// <param name="nodetypes">nodetypes.</param>
        /// <param name="ignorableprops">ignorableprops.</param>
        /// <param name="ignorablenodes">ignorablenodes.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="distfolders">distfolders.</param>
        public ComAdobeCqSocialSyncImplUserSyncListenerImplProperties(ConfigNodePropertyArray nodetypes = default(ConfigNodePropertyArray), ConfigNodePropertyArray ignorableprops = default(ConfigNodePropertyArray), ConfigNodePropertyArray ignorablenodes = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean enabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray distfolders = default(ConfigNodePropertyArray))
        {
            this.Nodetypes = nodetypes;
            this.Ignorableprops = ignorableprops;
            this.Ignorablenodes = ignorablenodes;
            this.Enabled = enabled;
            this.Distfolders = distfolders;
        }
        
        /// <summary>
        /// Gets or Sets Nodetypes
        /// </summary>
        [DataMember(Name="nodetypes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Nodetypes { get; set; }

        /// <summary>
        /// Gets or Sets Ignorableprops
        /// </summary>
        [DataMember(Name="ignorableprops", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Ignorableprops { get; set; }

        /// <summary>
        /// Gets or Sets Ignorablenodes
        /// </summary>
        [DataMember(Name="ignorablenodes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Ignorablenodes { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Distfolders
        /// </summary>
        [DataMember(Name="distfolders", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Distfolders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {\n");
            sb.Append("  Nodetypes: ").Append(Nodetypes).Append("\n");
            sb.Append("  Ignorableprops: ").Append(Ignorableprops).Append("\n");
            sb.Append("  Ignorablenodes: ").Append(Ignorablenodes).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Distfolders: ").Append(Distfolders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqSocialSyncImplUserSyncListenerImplProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialSyncImplUserSyncListenerImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqSocialSyncImplUserSyncListenerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialSyncImplUserSyncListenerImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Nodetypes == input.Nodetypes ||
                    (this.Nodetypes != null &&
                    this.Nodetypes.Equals(input.Nodetypes))
                ) && 
                (
                    this.Ignorableprops == input.Ignorableprops ||
                    (this.Ignorableprops != null &&
                    this.Ignorableprops.Equals(input.Ignorableprops))
                ) && 
                (
                    this.Ignorablenodes == input.Ignorablenodes ||
                    (this.Ignorablenodes != null &&
                    this.Ignorablenodes.Equals(input.Ignorablenodes))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Distfolders == input.Distfolders ||
                    (this.Distfolders != null &&
                    this.Distfolders.Equals(input.Distfolders))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nodetypes != null)
                    hashCode = hashCode * 59 + this.Nodetypes.GetHashCode();
                if (this.Ignorableprops != null)
                    hashCode = hashCode * 59 + this.Ignorableprops.GetHashCode();
                if (this.Ignorablenodes != null)
                    hashCode = hashCode * 59 + this.Ignorablenodes.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Distfolders != null)
                    hashCode = hashCode * 59 + this.Distfolders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
