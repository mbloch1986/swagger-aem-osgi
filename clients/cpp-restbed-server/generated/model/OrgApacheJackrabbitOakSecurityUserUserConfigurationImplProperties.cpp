/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties()
{
    
}

OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::~OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties()
{
}

std::string OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getUsersPath() const
{
    return m_UsersPath;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setUsersPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_UsersPath = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getGroupsPath() const
{
    return m_GroupsPath;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setGroupsPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_GroupsPath = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getSystemRelativePath() const
{
    return m_SystemRelativePath;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setSystemRelativePath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_SystemRelativePath = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getDefaultDepth() const
{
    return m_DefaultDepth;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setDefaultDepth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_DefaultDepth = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getImportBehavior() const
{
    return m_ImportBehavior;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setImportBehavior(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_ImportBehavior = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHashAlgorithm() const
{
    return m_PasswordHashAlgorithm;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHashAlgorithm(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PasswordHashAlgorithm = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHashIterations() const
{
    return m_PasswordHashIterations;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHashIterations(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PasswordHashIterations = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordSaltSize() const
{
    return m_PasswordSaltSize;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordSaltSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PasswordSaltSize = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getOmitAdminPw() const
{
    return m_OmitAdminPw;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setOmitAdminPw(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_OmitAdminPw = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getSupportAutoSave() const
{
    return m_SupportAutoSave;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setSupportAutoSave(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_SupportAutoSave = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordMaxAge() const
{
    return m_PasswordMaxAge;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PasswordMaxAge = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getInitialPasswordChange() const
{
    return m_InitialPasswordChange;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setInitialPasswordChange(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_InitialPasswordChange = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordHistorySize() const
{
    return m_PasswordHistorySize;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordHistorySize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PasswordHistorySize = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getPasswordExpiryForAdmin() const
{
    return m_PasswordExpiryForAdmin;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setPasswordExpiryForAdmin(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_PasswordExpiryForAdmin = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getCacheExpiration() const
{
    return m_CacheExpiration;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setCacheExpiration(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CacheExpiration = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::getEnableRFC7613UsercaseMappedProfile() const
{
    return m_EnableRFC7613UsercaseMappedProfile;
}
void OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties::setEnableRFC7613UsercaseMappedProfile(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableRFC7613UsercaseMappedProfile = value;
}

}
}
}
}

