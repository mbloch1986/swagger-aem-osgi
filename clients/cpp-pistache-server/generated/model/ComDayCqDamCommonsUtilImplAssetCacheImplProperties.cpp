/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamCommonsUtilImplAssetCacheImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamCommonsUtilImplAssetCacheImplProperties::ComDayCqDamCommonsUtilImplAssetCacheImplProperties()
{
    m_Large_file_minIsSet = false;
    m_Cache_applyIsSet = false;
    m_Mime_typesIsSet = false;
    
}

ComDayCqDamCommonsUtilImplAssetCacheImplProperties::~ComDayCqDamCommonsUtilImplAssetCacheImplProperties()
{
}

void ComDayCqDamCommonsUtilImplAssetCacheImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamCommonsUtilImplAssetCacheImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Large_file_minIsSet)
    {
        val["large.file.min"] = ModelBase::toJson(m_Large_file_min);
    }
    if(m_Cache_applyIsSet)
    {
        val["cache.apply"] = ModelBase::toJson(m_Cache_apply);
    }
    if(m_Mime_typesIsSet)
    {
        val["mime.types"] = ModelBase::toJson(m_Mime_types);
    }
    

    return val;
}

void ComDayCqDamCommonsUtilImplAssetCacheImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("large.file.min") != val.end())
    {
        if(!val["large.file.min"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["large.file.min"]);
            setLargeFileMin( newItem );
        }
        
    }
    if(val.find("cache.apply") != val.end())
    {
        if(!val["cache.apply"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cache.apply"]);
            setCacheApply( newItem );
        }
        
    }
    if(val.find("mime.types") != val.end())
    {
        if(!val["mime.types"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["mime.types"]);
            setMimeTypes( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComDayCqDamCommonsUtilImplAssetCacheImplProperties::getLargeFileMin() const
{
    return m_Large_file_min;
}
void ComDayCqDamCommonsUtilImplAssetCacheImplProperties::setLargeFileMin(ConfigNodePropertyInteger const& value)
{
    m_Large_file_min = value;
    m_Large_file_minIsSet = true;
}
bool ComDayCqDamCommonsUtilImplAssetCacheImplProperties::largeFileMinIsSet() const
{
    return m_Large_file_minIsSet;
}
void ComDayCqDamCommonsUtilImplAssetCacheImplProperties::unsetLarge_file_min()
{
    m_Large_file_minIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqDamCommonsUtilImplAssetCacheImplProperties::getCacheApply() const
{
    return m_Cache_apply;
}
void ComDayCqDamCommonsUtilImplAssetCacheImplProperties::setCacheApply(ConfigNodePropertyBoolean const& value)
{
    m_Cache_apply = value;
    m_Cache_applyIsSet = true;
}
bool ComDayCqDamCommonsUtilImplAssetCacheImplProperties::cacheApplyIsSet() const
{
    return m_Cache_applyIsSet;
}
void ComDayCqDamCommonsUtilImplAssetCacheImplProperties::unsetCache_apply()
{
    m_Cache_applyIsSet = false;
}
ConfigNodePropertyArray ComDayCqDamCommonsUtilImplAssetCacheImplProperties::getMimeTypes() const
{
    return m_Mime_types;
}
void ComDayCqDamCommonsUtilImplAssetCacheImplProperties::setMimeTypes(ConfigNodePropertyArray const& value)
{
    m_Mime_types = value;
    m_Mime_typesIsSet = true;
}
bool ComDayCqDamCommonsUtilImplAssetCacheImplProperties::mimeTypesIsSet() const
{
    return m_Mime_typesIsSet;
}
void ComDayCqDamCommonsUtilImplAssetCacheImplProperties::unsetMime_types()
{
    m_Mime_typesIsSet = false;
}

}
}
}
}

