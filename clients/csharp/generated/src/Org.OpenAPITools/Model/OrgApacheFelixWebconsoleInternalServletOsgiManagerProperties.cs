/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties :  IEquatable<OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties" /> class.
        /// </summary>
        /// <param name="managerRoot">managerRoot.</param>
        /// <param name="httpServiceFilter">httpServiceFilter.</param>
        /// <param name="defaultRender">defaultRender.</param>
        /// <param name="realm">realm.</param>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="category">category.</param>
        /// <param name="locale">locale.</param>
        /// <param name="loglevel">loglevel.</param>
        /// <param name="plugins">plugins.</param>
        public OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties(ConfigNodePropertyString managerRoot = default(ConfigNodePropertyString), ConfigNodePropertyString httpServiceFilter = default(ConfigNodePropertyString), ConfigNodePropertyString defaultRender = default(ConfigNodePropertyString), ConfigNodePropertyString realm = default(ConfigNodePropertyString), ConfigNodePropertyString username = default(ConfigNodePropertyString), ConfigNodePropertyString password = default(ConfigNodePropertyString), ConfigNodePropertyString category = default(ConfigNodePropertyString), ConfigNodePropertyString locale = default(ConfigNodePropertyString), ConfigNodePropertyDropDown loglevel = default(ConfigNodePropertyDropDown), ConfigNodePropertyDropDown plugins = default(ConfigNodePropertyDropDown))
        {
            this.ManagerRoot = managerRoot;
            this.HttpServiceFilter = httpServiceFilter;
            this.DefaultRender = defaultRender;
            this.Realm = realm;
            this.Username = username;
            this.Password = password;
            this.Category = category;
            this.Locale = locale;
            this.Loglevel = loglevel;
            this.Plugins = plugins;
        }
        
        /// <summary>
        /// Gets or Sets ManagerRoot
        /// </summary>
        [DataMember(Name="manager.root", EmitDefaultValue=false)]
        public ConfigNodePropertyString ManagerRoot { get; set; }

        /// <summary>
        /// Gets or Sets HttpServiceFilter
        /// </summary>
        [DataMember(Name="http.service.filter", EmitDefaultValue=false)]
        public ConfigNodePropertyString HttpServiceFilter { get; set; }

        /// <summary>
        /// Gets or Sets DefaultRender
        /// </summary>
        [DataMember(Name="default.render", EmitDefaultValue=false)]
        public ConfigNodePropertyString DefaultRender { get; set; }

        /// <summary>
        /// Gets or Sets Realm
        /// </summary>
        [DataMember(Name="realm", EmitDefaultValue=false)]
        public ConfigNodePropertyString Realm { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public ConfigNodePropertyString Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public ConfigNodePropertyString Password { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public ConfigNodePropertyString Category { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public ConfigNodePropertyString Locale { get; set; }

        /// <summary>
        /// Gets or Sets Loglevel
        /// </summary>
        [DataMember(Name="loglevel", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown Loglevel { get; set; }

        /// <summary>
        /// Gets or Sets Plugins
        /// </summary>
        [DataMember(Name="plugins", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown Plugins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {\n");
            sb.Append("  ManagerRoot: ").Append(ManagerRoot).Append("\n");
            sb.Append("  HttpServiceFilter: ").Append(HttpServiceFilter).Append("\n");
            sb.Append("  DefaultRender: ").Append(DefaultRender).Append("\n");
            sb.Append("  Realm: ").Append(Realm).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Loglevel: ").Append(Loglevel).Append("\n");
            sb.Append("  Plugins: ").Append(Plugins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ManagerRoot == input.ManagerRoot ||
                    (this.ManagerRoot != null &&
                    this.ManagerRoot.Equals(input.ManagerRoot))
                ) && 
                (
                    this.HttpServiceFilter == input.HttpServiceFilter ||
                    (this.HttpServiceFilter != null &&
                    this.HttpServiceFilter.Equals(input.HttpServiceFilter))
                ) && 
                (
                    this.DefaultRender == input.DefaultRender ||
                    (this.DefaultRender != null &&
                    this.DefaultRender.Equals(input.DefaultRender))
                ) && 
                (
                    this.Realm == input.Realm ||
                    (this.Realm != null &&
                    this.Realm.Equals(input.Realm))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.Loglevel == input.Loglevel ||
                    (this.Loglevel != null &&
                    this.Loglevel.Equals(input.Loglevel))
                ) && 
                (
                    this.Plugins == input.Plugins ||
                    (this.Plugins != null &&
                    this.Plugins.Equals(input.Plugins))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ManagerRoot != null)
                    hashCode = hashCode * 59 + this.ManagerRoot.GetHashCode();
                if (this.HttpServiceFilter != null)
                    hashCode = hashCode * 59 + this.HttpServiceFilter.GetHashCode();
                if (this.DefaultRender != null)
                    hashCode = hashCode * 59 + this.DefaultRender.GetHashCode();
                if (this.Realm != null)
                    hashCode = hashCode * 59 + this.Realm.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.Loglevel != null)
                    hashCode = hashCode * 59 + this.Loglevel.GetHashCode();
                if (this.Plugins != null)
                    hashCode = hashCode * 59 + this.Plugins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
