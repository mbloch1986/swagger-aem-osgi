/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamInddProcessINDDMediaExtractProcessProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamInddProcessINDDMediaExtractProcessProperties::ComDayCqDamInddProcessINDDMediaExtractProcessProperties()
{
    m_Process_labelIsSet = false;
    m_Cq_dam_indd_pages_regexIsSet = false;
    m_Ids_job_decoupledIsSet = false;
    m_Ids_job_workflow_modelIsSet = false;
    
}

ComDayCqDamInddProcessINDDMediaExtractProcessProperties::~ComDayCqDamInddProcessINDDMediaExtractProcessProperties()
{
}

void ComDayCqDamInddProcessINDDMediaExtractProcessProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamInddProcessINDDMediaExtractProcessProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Process_labelIsSet)
    {
        val["process.label"] = ModelBase::toJson(m_Process_label);
    }
    if(m_Cq_dam_indd_pages_regexIsSet)
    {
        val["cq.dam.indd.pages.regex"] = ModelBase::toJson(m_Cq_dam_indd_pages_regex);
    }
    if(m_Ids_job_decoupledIsSet)
    {
        val["ids.job.decoupled"] = ModelBase::toJson(m_Ids_job_decoupled);
    }
    if(m_Ids_job_workflow_modelIsSet)
    {
        val["ids.job.workflow.model"] = ModelBase::toJson(m_Ids_job_workflow_model);
    }
    

    return val;
}

void ComDayCqDamInddProcessINDDMediaExtractProcessProperties::fromJson(nlohmann::json& val)
{
    if(val.find("process.label") != val.end())
    {
        if(!val["process.label"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["process.label"]);
            setProcessLabel( newItem );
        }
        
    }
    if(val.find("cq.dam.indd.pages.regex") != val.end())
    {
        if(!val["cq.dam.indd.pages.regex"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cq.dam.indd.pages.regex"]);
            setCqDamInddPagesRegex( newItem );
        }
        
    }
    if(val.find("ids.job.decoupled") != val.end())
    {
        if(!val["ids.job.decoupled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["ids.job.decoupled"]);
            setIdsJobDecoupled( newItem );
        }
        
    }
    if(val.find("ids.job.workflow.model") != val.end())
    {
        if(!val["ids.job.workflow.model"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["ids.job.workflow.model"]);
            setIdsJobWorkflowModel( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqDamInddProcessINDDMediaExtractProcessProperties::getProcessLabel() const
{
    return m_Process_label;
}
void ComDayCqDamInddProcessINDDMediaExtractProcessProperties::setProcessLabel(ConfigNodePropertyString const& value)
{
    m_Process_label = value;
    m_Process_labelIsSet = true;
}
bool ComDayCqDamInddProcessINDDMediaExtractProcessProperties::processLabelIsSet() const
{
    return m_Process_labelIsSet;
}
void ComDayCqDamInddProcessINDDMediaExtractProcessProperties::unsetProcess_label()
{
    m_Process_labelIsSet = false;
}
ConfigNodePropertyString ComDayCqDamInddProcessINDDMediaExtractProcessProperties::getCqDamInddPagesRegex() const
{
    return m_Cq_dam_indd_pages_regex;
}
void ComDayCqDamInddProcessINDDMediaExtractProcessProperties::setCqDamInddPagesRegex(ConfigNodePropertyString const& value)
{
    m_Cq_dam_indd_pages_regex = value;
    m_Cq_dam_indd_pages_regexIsSet = true;
}
bool ComDayCqDamInddProcessINDDMediaExtractProcessProperties::cqDamInddPagesRegexIsSet() const
{
    return m_Cq_dam_indd_pages_regexIsSet;
}
void ComDayCqDamInddProcessINDDMediaExtractProcessProperties::unsetCq_dam_indd_pages_regex()
{
    m_Cq_dam_indd_pages_regexIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqDamInddProcessINDDMediaExtractProcessProperties::getIdsJobDecoupled() const
{
    return m_Ids_job_decoupled;
}
void ComDayCqDamInddProcessINDDMediaExtractProcessProperties::setIdsJobDecoupled(ConfigNodePropertyBoolean const& value)
{
    m_Ids_job_decoupled = value;
    m_Ids_job_decoupledIsSet = true;
}
bool ComDayCqDamInddProcessINDDMediaExtractProcessProperties::idsJobDecoupledIsSet() const
{
    return m_Ids_job_decoupledIsSet;
}
void ComDayCqDamInddProcessINDDMediaExtractProcessProperties::unsetIds_job_decoupled()
{
    m_Ids_job_decoupledIsSet = false;
}
ConfigNodePropertyString ComDayCqDamInddProcessINDDMediaExtractProcessProperties::getIdsJobWorkflowModel() const
{
    return m_Ids_job_workflow_model;
}
void ComDayCqDamInddProcessINDDMediaExtractProcessProperties::setIdsJobWorkflowModel(ConfigNodePropertyString const& value)
{
    m_Ids_job_workflow_model = value;
    m_Ids_job_workflow_modelIsSet = true;
}
bool ComDayCqDamInddProcessINDDMediaExtractProcessProperties::idsJobWorkflowModelIsSet() const
{
    return m_Ids_job_workflow_modelIsSet;
}
void ComDayCqDamInddProcessINDDMediaExtractProcessProperties::unsetIds_job_workflow_model()
{
    m_Ids_job_workflow_modelIsSet = false;
}

}
}
}
}

