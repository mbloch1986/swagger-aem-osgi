/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties()
{
    m_Link_expired_prefixIsSet = false;
    m_Link_expired_removeIsSet = false;
    m_Link_expired_suffixIsSet = false;
    m_Link_invalid_prefixIsSet = false;
    m_Link_invalid_removeIsSet = false;
    m_Link_invalid_suffixIsSet = false;
    m_Link_predated_prefixIsSet = false;
    m_Link_predated_removeIsSet = false;
    m_Link_predated_suffixIsSet = false;
    m_Link_wcmmodesIsSet = false;
}

ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::~ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties()
{
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Link_expired_prefixIsSet)
    {
        val[utility::conversions::to_string_t("link.expired.prefix")] = ModelBase::toJson(m_Link_expired_prefix);
    }
    if(m_Link_expired_removeIsSet)
    {
        val[utility::conversions::to_string_t("link.expired.remove")] = ModelBase::toJson(m_Link_expired_remove);
    }
    if(m_Link_expired_suffixIsSet)
    {
        val[utility::conversions::to_string_t("link.expired.suffix")] = ModelBase::toJson(m_Link_expired_suffix);
    }
    if(m_Link_invalid_prefixIsSet)
    {
        val[utility::conversions::to_string_t("link.invalid.prefix")] = ModelBase::toJson(m_Link_invalid_prefix);
    }
    if(m_Link_invalid_removeIsSet)
    {
        val[utility::conversions::to_string_t("link.invalid.remove")] = ModelBase::toJson(m_Link_invalid_remove);
    }
    if(m_Link_invalid_suffixIsSet)
    {
        val[utility::conversions::to_string_t("link.invalid.suffix")] = ModelBase::toJson(m_Link_invalid_suffix);
    }
    if(m_Link_predated_prefixIsSet)
    {
        val[utility::conversions::to_string_t("link.predated.prefix")] = ModelBase::toJson(m_Link_predated_prefix);
    }
    if(m_Link_predated_removeIsSet)
    {
        val[utility::conversions::to_string_t("link.predated.remove")] = ModelBase::toJson(m_Link_predated_remove);
    }
    if(m_Link_predated_suffixIsSet)
    {
        val[utility::conversions::to_string_t("link.predated.suffix")] = ModelBase::toJson(m_Link_predated_suffix);
    }
    if(m_Link_wcmmodesIsSet)
    {
        val[utility::conversions::to_string_t("link.wcmmodes")] = ModelBase::toJson(m_Link_wcmmodes);
    }

    return val;
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("link.expired.prefix")))
    {
        if(!val[utility::conversions::to_string_t("link.expired.prefix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("link.expired.prefix")]);
            setLinkExpiredPrefix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link.expired.remove")))
    {
        if(!val[utility::conversions::to_string_t("link.expired.remove")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("link.expired.remove")]);
            setLinkExpiredRemove( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link.expired.suffix")))
    {
        if(!val[utility::conversions::to_string_t("link.expired.suffix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("link.expired.suffix")]);
            setLinkExpiredSuffix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link.invalid.prefix")))
    {
        if(!val[utility::conversions::to_string_t("link.invalid.prefix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("link.invalid.prefix")]);
            setLinkInvalidPrefix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link.invalid.remove")))
    {
        if(!val[utility::conversions::to_string_t("link.invalid.remove")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("link.invalid.remove")]);
            setLinkInvalidRemove( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link.invalid.suffix")))
    {
        if(!val[utility::conversions::to_string_t("link.invalid.suffix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("link.invalid.suffix")]);
            setLinkInvalidSuffix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link.predated.prefix")))
    {
        if(!val[utility::conversions::to_string_t("link.predated.prefix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("link.predated.prefix")]);
            setLinkPredatedPrefix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link.predated.remove")))
    {
        if(!val[utility::conversions::to_string_t("link.predated.remove")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("link.predated.remove")]);
            setLinkPredatedRemove( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link.predated.suffix")))
    {
        if(!val[utility::conversions::to_string_t("link.predated.suffix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("link.predated.suffix")]);
            setLinkPredatedSuffix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link.wcmmodes")))
    {
        if(!val[utility::conversions::to_string_t("link.wcmmodes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("link.wcmmodes")]);
            setLinkWcmmodes( newItem );
        }
    }
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Link_expired_prefixIsSet)
    {
        if (m_Link_expired_prefix.get())
        {
            m_Link_expired_prefix->toMultipart(multipart, utility::conversions::to_string_t("link.expired.prefix."));
        }
    }
    if(m_Link_expired_removeIsSet)
    {
        if (m_Link_expired_remove.get())
        {
            m_Link_expired_remove->toMultipart(multipart, utility::conversions::to_string_t("link.expired.remove."));
        }
    }
    if(m_Link_expired_suffixIsSet)
    {
        if (m_Link_expired_suffix.get())
        {
            m_Link_expired_suffix->toMultipart(multipart, utility::conversions::to_string_t("link.expired.suffix."));
        }
    }
    if(m_Link_invalid_prefixIsSet)
    {
        if (m_Link_invalid_prefix.get())
        {
            m_Link_invalid_prefix->toMultipart(multipart, utility::conversions::to_string_t("link.invalid.prefix."));
        }
    }
    if(m_Link_invalid_removeIsSet)
    {
        if (m_Link_invalid_remove.get())
        {
            m_Link_invalid_remove->toMultipart(multipart, utility::conversions::to_string_t("link.invalid.remove."));
        }
    }
    if(m_Link_invalid_suffixIsSet)
    {
        if (m_Link_invalid_suffix.get())
        {
            m_Link_invalid_suffix->toMultipart(multipart, utility::conversions::to_string_t("link.invalid.suffix."));
        }
    }
    if(m_Link_predated_prefixIsSet)
    {
        if (m_Link_predated_prefix.get())
        {
            m_Link_predated_prefix->toMultipart(multipart, utility::conversions::to_string_t("link.predated.prefix."));
        }
    }
    if(m_Link_predated_removeIsSet)
    {
        if (m_Link_predated_remove.get())
        {
            m_Link_predated_remove->toMultipart(multipart, utility::conversions::to_string_t("link.predated.remove."));
        }
    }
    if(m_Link_predated_suffixIsSet)
    {
        if (m_Link_predated_suffix.get())
        {
            m_Link_predated_suffix->toMultipart(multipart, utility::conversions::to_string_t("link.predated.suffix."));
        }
    }
    if(m_Link_wcmmodesIsSet)
    {
        if (m_Link_wcmmodes.get())
        {
            m_Link_wcmmodes->toMultipart(multipart, utility::conversions::to_string_t("link.wcmmodes."));
        }
    }
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("link.expired.prefix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link.expired.prefix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link.expired.prefix."));
            setLinkExpiredPrefix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link.expired.remove")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link.expired.remove")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link.expired.remove."));
            setLinkExpiredRemove( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link.expired.suffix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link.expired.suffix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link.expired.suffix."));
            setLinkExpiredSuffix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link.invalid.prefix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link.invalid.prefix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link.invalid.prefix."));
            setLinkInvalidPrefix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link.invalid.remove")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link.invalid.remove")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link.invalid.remove."));
            setLinkInvalidRemove( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link.invalid.suffix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link.invalid.suffix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link.invalid.suffix."));
            setLinkInvalidSuffix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link.predated.prefix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link.predated.prefix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link.predated.prefix."));
            setLinkPredatedPrefix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link.predated.remove")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link.predated.remove")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link.predated.remove."));
            setLinkPredatedRemove( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link.predated.suffix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link.predated.suffix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link.predated.suffix."));
            setLinkPredatedSuffix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link.wcmmodes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link.wcmmodes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link.wcmmodes."));
            setLinkWcmmodes( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkExpiredPrefix() const
{
    return m_Link_expired_prefix;
}


void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkExpiredPrefix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Link_expired_prefix = value;
    m_Link_expired_prefixIsSet = true;
}
bool ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::linkExpiredPrefixIsSet() const
{
    return m_Link_expired_prefixIsSet;
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::unsetLink_expired_prefix()
{
    m_Link_expired_prefixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkExpiredRemove() const
{
    return m_Link_expired_remove;
}


void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkExpiredRemove(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Link_expired_remove = value;
    m_Link_expired_removeIsSet = true;
}
bool ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::linkExpiredRemoveIsSet() const
{
    return m_Link_expired_removeIsSet;
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::unsetLink_expired_remove()
{
    m_Link_expired_removeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkExpiredSuffix() const
{
    return m_Link_expired_suffix;
}


void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkExpiredSuffix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Link_expired_suffix = value;
    m_Link_expired_suffixIsSet = true;
}
bool ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::linkExpiredSuffixIsSet() const
{
    return m_Link_expired_suffixIsSet;
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::unsetLink_expired_suffix()
{
    m_Link_expired_suffixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkInvalidPrefix() const
{
    return m_Link_invalid_prefix;
}


void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkInvalidPrefix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Link_invalid_prefix = value;
    m_Link_invalid_prefixIsSet = true;
}
bool ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::linkInvalidPrefixIsSet() const
{
    return m_Link_invalid_prefixIsSet;
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::unsetLink_invalid_prefix()
{
    m_Link_invalid_prefixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkInvalidRemove() const
{
    return m_Link_invalid_remove;
}


void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkInvalidRemove(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Link_invalid_remove = value;
    m_Link_invalid_removeIsSet = true;
}
bool ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::linkInvalidRemoveIsSet() const
{
    return m_Link_invalid_removeIsSet;
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::unsetLink_invalid_remove()
{
    m_Link_invalid_removeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkInvalidSuffix() const
{
    return m_Link_invalid_suffix;
}


void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkInvalidSuffix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Link_invalid_suffix = value;
    m_Link_invalid_suffixIsSet = true;
}
bool ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::linkInvalidSuffixIsSet() const
{
    return m_Link_invalid_suffixIsSet;
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::unsetLink_invalid_suffix()
{
    m_Link_invalid_suffixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkPredatedPrefix() const
{
    return m_Link_predated_prefix;
}


void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkPredatedPrefix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Link_predated_prefix = value;
    m_Link_predated_prefixIsSet = true;
}
bool ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::linkPredatedPrefixIsSet() const
{
    return m_Link_predated_prefixIsSet;
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::unsetLink_predated_prefix()
{
    m_Link_predated_prefixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkPredatedRemove() const
{
    return m_Link_predated_remove;
}


void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkPredatedRemove(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Link_predated_remove = value;
    m_Link_predated_removeIsSet = true;
}
bool ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::linkPredatedRemoveIsSet() const
{
    return m_Link_predated_removeIsSet;
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::unsetLink_predated_remove()
{
    m_Link_predated_removeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkPredatedSuffix() const
{
    return m_Link_predated_suffix;
}


void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkPredatedSuffix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Link_predated_suffix = value;
    m_Link_predated_suffixIsSet = true;
}
bool ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::linkPredatedSuffixIsSet() const
{
    return m_Link_predated_suffixIsSet;
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::unsetLink_predated_suffix()
{
    m_Link_predated_suffixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::getLinkWcmmodes() const
{
    return m_Link_wcmmodes;
}


void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::setLinkWcmmodes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Link_wcmmodes = value;
    m_Link_wcmmodesIsSet = true;
}
bool ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::linkWcmmodesIsSet() const
{
    return m_Link_wcmmodesIsSet;
}

void ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties::unsetLink_wcmmodes()
{
    m_Link_wcmmodesIsSet = false;
}

}
}
}
}

