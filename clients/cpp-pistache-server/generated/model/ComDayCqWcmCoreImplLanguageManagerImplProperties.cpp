/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmCoreImplLanguageManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmCoreImplLanguageManagerImplProperties::ComDayCqWcmCoreImplLanguageManagerImplProperties()
{
    m_Langmgr_list_pathIsSet = false;
    m_Langmgr_country_defaultIsSet = false;
    
}

ComDayCqWcmCoreImplLanguageManagerImplProperties::~ComDayCqWcmCoreImplLanguageManagerImplProperties()
{
}

void ComDayCqWcmCoreImplLanguageManagerImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmCoreImplLanguageManagerImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Langmgr_list_pathIsSet)
    {
        val["langmgr.list.path"] = ModelBase::toJson(m_Langmgr_list_path);
    }
    if(m_Langmgr_country_defaultIsSet)
    {
        val["langmgr.country.default"] = ModelBase::toJson(m_Langmgr_country_default);
    }
    

    return val;
}

void ComDayCqWcmCoreImplLanguageManagerImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("langmgr.list.path") != val.end())
    {
        if(!val["langmgr.list.path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["langmgr.list.path"]);
            setLangmgrListPath( newItem );
        }
        
    }
    if(val.find("langmgr.country.default") != val.end())
    {
        if(!val["langmgr.country.default"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["langmgr.country.default"]);
            setLangmgrCountryDefault( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqWcmCoreImplLanguageManagerImplProperties::getLangmgrListPath() const
{
    return m_Langmgr_list_path;
}
void ComDayCqWcmCoreImplLanguageManagerImplProperties::setLangmgrListPath(ConfigNodePropertyString const& value)
{
    m_Langmgr_list_path = value;
    m_Langmgr_list_pathIsSet = true;
}
bool ComDayCqWcmCoreImplLanguageManagerImplProperties::langmgrListPathIsSet() const
{
    return m_Langmgr_list_pathIsSet;
}
void ComDayCqWcmCoreImplLanguageManagerImplProperties::unsetLangmgr_list_path()
{
    m_Langmgr_list_pathIsSet = false;
}
ConfigNodePropertyArray ComDayCqWcmCoreImplLanguageManagerImplProperties::getLangmgrCountryDefault() const
{
    return m_Langmgr_country_default;
}
void ComDayCqWcmCoreImplLanguageManagerImplProperties::setLangmgrCountryDefault(ConfigNodePropertyArray const& value)
{
    m_Langmgr_country_default = value;
    m_Langmgr_country_defaultIsSet = true;
}
bool ComDayCqWcmCoreImplLanguageManagerImplProperties::langmgrCountryDefaultIsSet() const
{
    return m_Langmgr_country_defaultIsSet;
}
void ComDayCqWcmCoreImplLanguageManagerImplProperties::unsetLangmgr_country_default()
{
    m_Langmgr_country_defaultIsSet = false;
}

}
}
}
}

