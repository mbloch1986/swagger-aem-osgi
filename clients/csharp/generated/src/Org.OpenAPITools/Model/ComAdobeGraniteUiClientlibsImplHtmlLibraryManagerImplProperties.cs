/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties :  IEquatable<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties" /> class.
        /// </summary>
        /// <param name="htmllibmanagerTiming">htmllibmanagerTiming.</param>
        /// <param name="htmllibmanagerDebugInitJs">htmllibmanagerDebugInitJs.</param>
        /// <param name="htmllibmanagerMinify">htmllibmanagerMinify.</param>
        /// <param name="htmllibmanagerDebug">htmllibmanagerDebug.</param>
        /// <param name="htmllibmanagerGzip">htmllibmanagerGzip.</param>
        /// <param name="htmllibmanagerMaxDataUriSize">htmllibmanagerMaxDataUriSize.</param>
        /// <param name="htmllibmanagerMaxage">htmllibmanagerMaxage.</param>
        /// <param name="htmllibmanagerForceCQUrlInfo">htmllibmanagerForceCQUrlInfo.</param>
        /// <param name="htmllibmanagerDefaultthemename">htmllibmanagerDefaultthemename.</param>
        /// <param name="htmllibmanagerDefaultuserthemename">htmllibmanagerDefaultuserthemename.</param>
        /// <param name="htmllibmanagerClientmanager">htmllibmanagerClientmanager.</param>
        /// <param name="htmllibmanagerPathList">htmllibmanagerPathList.</param>
        /// <param name="htmllibmanagerExcludedPathList">htmllibmanagerExcludedPathList.</param>
        /// <param name="htmllibmanagerProcessorJs">htmllibmanagerProcessorJs.</param>
        /// <param name="htmllibmanagerProcessorCss">htmllibmanagerProcessorCss.</param>
        /// <param name="htmllibmanagerLongcachePatterns">htmllibmanagerLongcachePatterns.</param>
        /// <param name="htmllibmanagerLongcacheFormat">htmllibmanagerLongcacheFormat.</param>
        /// <param name="htmllibmanagerUseFileSystemOutputCache">htmllibmanagerUseFileSystemOutputCache.</param>
        /// <param name="htmllibmanagerFileSystemOutputCacheLocation">htmllibmanagerFileSystemOutputCacheLocation.</param>
        /// <param name="htmllibmanagerDisableReplacement">htmllibmanagerDisableReplacement.</param>
        public ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties(ConfigNodePropertyBoolean htmllibmanagerTiming = default(ConfigNodePropertyBoolean), ConfigNodePropertyString htmllibmanagerDebugInitJs = default(ConfigNodePropertyString), ConfigNodePropertyBoolean htmllibmanagerMinify = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean htmllibmanagerDebug = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean htmllibmanagerGzip = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger htmllibmanagerMaxDataUriSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger htmllibmanagerMaxage = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean htmllibmanagerForceCQUrlInfo = default(ConfigNodePropertyBoolean), ConfigNodePropertyString htmllibmanagerDefaultthemename = default(ConfigNodePropertyString), ConfigNodePropertyString htmllibmanagerDefaultuserthemename = default(ConfigNodePropertyString), ConfigNodePropertyString htmllibmanagerClientmanager = default(ConfigNodePropertyString), ConfigNodePropertyArray htmllibmanagerPathList = default(ConfigNodePropertyArray), ConfigNodePropertyArray htmllibmanagerExcludedPathList = default(ConfigNodePropertyArray), ConfigNodePropertyArray htmllibmanagerProcessorJs = default(ConfigNodePropertyArray), ConfigNodePropertyArray htmllibmanagerProcessorCss = default(ConfigNodePropertyArray), ConfigNodePropertyArray htmllibmanagerLongcachePatterns = default(ConfigNodePropertyArray), ConfigNodePropertyString htmllibmanagerLongcacheFormat = default(ConfigNodePropertyString), ConfigNodePropertyBoolean htmllibmanagerUseFileSystemOutputCache = default(ConfigNodePropertyBoolean), ConfigNodePropertyString htmllibmanagerFileSystemOutputCacheLocation = default(ConfigNodePropertyString), ConfigNodePropertyArray htmllibmanagerDisableReplacement = default(ConfigNodePropertyArray))
        {
            this.HtmllibmanagerTiming = htmllibmanagerTiming;
            this.HtmllibmanagerDebugInitJs = htmllibmanagerDebugInitJs;
            this.HtmllibmanagerMinify = htmllibmanagerMinify;
            this.HtmllibmanagerDebug = htmllibmanagerDebug;
            this.HtmllibmanagerGzip = htmllibmanagerGzip;
            this.HtmllibmanagerMaxDataUriSize = htmllibmanagerMaxDataUriSize;
            this.HtmllibmanagerMaxage = htmllibmanagerMaxage;
            this.HtmllibmanagerForceCQUrlInfo = htmllibmanagerForceCQUrlInfo;
            this.HtmllibmanagerDefaultthemename = htmllibmanagerDefaultthemename;
            this.HtmllibmanagerDefaultuserthemename = htmllibmanagerDefaultuserthemename;
            this.HtmllibmanagerClientmanager = htmllibmanagerClientmanager;
            this.HtmllibmanagerPathList = htmllibmanagerPathList;
            this.HtmllibmanagerExcludedPathList = htmllibmanagerExcludedPathList;
            this.HtmllibmanagerProcessorJs = htmllibmanagerProcessorJs;
            this.HtmllibmanagerProcessorCss = htmllibmanagerProcessorCss;
            this.HtmllibmanagerLongcachePatterns = htmllibmanagerLongcachePatterns;
            this.HtmllibmanagerLongcacheFormat = htmllibmanagerLongcacheFormat;
            this.HtmllibmanagerUseFileSystemOutputCache = htmllibmanagerUseFileSystemOutputCache;
            this.HtmllibmanagerFileSystemOutputCacheLocation = htmllibmanagerFileSystemOutputCacheLocation;
            this.HtmllibmanagerDisableReplacement = htmllibmanagerDisableReplacement;
        }
        
        /// <summary>
        /// Gets or Sets HtmllibmanagerTiming
        /// </summary>
        [DataMember(Name="htmllibmanager.timing", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean HtmllibmanagerTiming { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDebugInitJs
        /// </summary>
        [DataMember(Name="htmllibmanager.debug.init.js", EmitDefaultValue=false)]
        public ConfigNodePropertyString HtmllibmanagerDebugInitJs { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerMinify
        /// </summary>
        [DataMember(Name="htmllibmanager.minify", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean HtmllibmanagerMinify { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDebug
        /// </summary>
        [DataMember(Name="htmllibmanager.debug", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean HtmllibmanagerDebug { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerGzip
        /// </summary>
        [DataMember(Name="htmllibmanager.gzip", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean HtmllibmanagerGzip { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerMaxDataUriSize
        /// </summary>
        [DataMember(Name="htmllibmanager.maxDataUriSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger HtmllibmanagerMaxDataUriSize { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerMaxage
        /// </summary>
        [DataMember(Name="htmllibmanager.maxage", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger HtmllibmanagerMaxage { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerForceCQUrlInfo
        /// </summary>
        [DataMember(Name="htmllibmanager.forceCQUrlInfo", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean HtmllibmanagerForceCQUrlInfo { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDefaultthemename
        /// </summary>
        [DataMember(Name="htmllibmanager.defaultthemename", EmitDefaultValue=false)]
        public ConfigNodePropertyString HtmllibmanagerDefaultthemename { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDefaultuserthemename
        /// </summary>
        [DataMember(Name="htmllibmanager.defaultuserthemename", EmitDefaultValue=false)]
        public ConfigNodePropertyString HtmllibmanagerDefaultuserthemename { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerClientmanager
        /// </summary>
        [DataMember(Name="htmllibmanager.clientmanager", EmitDefaultValue=false)]
        public ConfigNodePropertyString HtmllibmanagerClientmanager { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerPathList
        /// </summary>
        [DataMember(Name="htmllibmanager.path.list", EmitDefaultValue=false)]
        public ConfigNodePropertyArray HtmllibmanagerPathList { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerExcludedPathList
        /// </summary>
        [DataMember(Name="htmllibmanager.excluded.path.list", EmitDefaultValue=false)]
        public ConfigNodePropertyArray HtmllibmanagerExcludedPathList { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerProcessorJs
        /// </summary>
        [DataMember(Name="htmllibmanager.processor.js", EmitDefaultValue=false)]
        public ConfigNodePropertyArray HtmllibmanagerProcessorJs { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerProcessorCss
        /// </summary>
        [DataMember(Name="htmllibmanager.processor.css", EmitDefaultValue=false)]
        public ConfigNodePropertyArray HtmllibmanagerProcessorCss { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerLongcachePatterns
        /// </summary>
        [DataMember(Name="htmllibmanager.longcache.patterns", EmitDefaultValue=false)]
        public ConfigNodePropertyArray HtmllibmanagerLongcachePatterns { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerLongcacheFormat
        /// </summary>
        [DataMember(Name="htmllibmanager.longcache.format", EmitDefaultValue=false)]
        public ConfigNodePropertyString HtmllibmanagerLongcacheFormat { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerUseFileSystemOutputCache
        /// </summary>
        [DataMember(Name="htmllibmanager.useFileSystemOutputCache", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean HtmllibmanagerUseFileSystemOutputCache { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerFileSystemOutputCacheLocation
        /// </summary>
        [DataMember(Name="htmllibmanager.fileSystemOutputCacheLocation", EmitDefaultValue=false)]
        public ConfigNodePropertyString HtmllibmanagerFileSystemOutputCacheLocation { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDisableReplacement
        /// </summary>
        [DataMember(Name="htmllibmanager.disable.replacement", EmitDefaultValue=false)]
        public ConfigNodePropertyArray HtmllibmanagerDisableReplacement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties {\n");
            sb.Append("  HtmllibmanagerTiming: ").Append(HtmllibmanagerTiming).Append("\n");
            sb.Append("  HtmllibmanagerDebugInitJs: ").Append(HtmllibmanagerDebugInitJs).Append("\n");
            sb.Append("  HtmllibmanagerMinify: ").Append(HtmllibmanagerMinify).Append("\n");
            sb.Append("  HtmllibmanagerDebug: ").Append(HtmllibmanagerDebug).Append("\n");
            sb.Append("  HtmllibmanagerGzip: ").Append(HtmllibmanagerGzip).Append("\n");
            sb.Append("  HtmllibmanagerMaxDataUriSize: ").Append(HtmllibmanagerMaxDataUriSize).Append("\n");
            sb.Append("  HtmllibmanagerMaxage: ").Append(HtmllibmanagerMaxage).Append("\n");
            sb.Append("  HtmllibmanagerForceCQUrlInfo: ").Append(HtmllibmanagerForceCQUrlInfo).Append("\n");
            sb.Append("  HtmllibmanagerDefaultthemename: ").Append(HtmllibmanagerDefaultthemename).Append("\n");
            sb.Append("  HtmllibmanagerDefaultuserthemename: ").Append(HtmllibmanagerDefaultuserthemename).Append("\n");
            sb.Append("  HtmllibmanagerClientmanager: ").Append(HtmllibmanagerClientmanager).Append("\n");
            sb.Append("  HtmllibmanagerPathList: ").Append(HtmllibmanagerPathList).Append("\n");
            sb.Append("  HtmllibmanagerExcludedPathList: ").Append(HtmllibmanagerExcludedPathList).Append("\n");
            sb.Append("  HtmllibmanagerProcessorJs: ").Append(HtmllibmanagerProcessorJs).Append("\n");
            sb.Append("  HtmllibmanagerProcessorCss: ").Append(HtmllibmanagerProcessorCss).Append("\n");
            sb.Append("  HtmllibmanagerLongcachePatterns: ").Append(HtmllibmanagerLongcachePatterns).Append("\n");
            sb.Append("  HtmllibmanagerLongcacheFormat: ").Append(HtmllibmanagerLongcacheFormat).Append("\n");
            sb.Append("  HtmllibmanagerUseFileSystemOutputCache: ").Append(HtmllibmanagerUseFileSystemOutputCache).Append("\n");
            sb.Append("  HtmllibmanagerFileSystemOutputCacheLocation: ").Append(HtmllibmanagerFileSystemOutputCacheLocation).Append("\n");
            sb.Append("  HtmllibmanagerDisableReplacement: ").Append(HtmllibmanagerDisableReplacement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HtmllibmanagerTiming == input.HtmllibmanagerTiming ||
                    (this.HtmllibmanagerTiming != null &&
                    this.HtmllibmanagerTiming.Equals(input.HtmllibmanagerTiming))
                ) && 
                (
                    this.HtmllibmanagerDebugInitJs == input.HtmllibmanagerDebugInitJs ||
                    (this.HtmllibmanagerDebugInitJs != null &&
                    this.HtmllibmanagerDebugInitJs.Equals(input.HtmllibmanagerDebugInitJs))
                ) && 
                (
                    this.HtmllibmanagerMinify == input.HtmllibmanagerMinify ||
                    (this.HtmllibmanagerMinify != null &&
                    this.HtmllibmanagerMinify.Equals(input.HtmllibmanagerMinify))
                ) && 
                (
                    this.HtmllibmanagerDebug == input.HtmllibmanagerDebug ||
                    (this.HtmllibmanagerDebug != null &&
                    this.HtmllibmanagerDebug.Equals(input.HtmllibmanagerDebug))
                ) && 
                (
                    this.HtmllibmanagerGzip == input.HtmllibmanagerGzip ||
                    (this.HtmllibmanagerGzip != null &&
                    this.HtmllibmanagerGzip.Equals(input.HtmllibmanagerGzip))
                ) && 
                (
                    this.HtmllibmanagerMaxDataUriSize == input.HtmllibmanagerMaxDataUriSize ||
                    (this.HtmllibmanagerMaxDataUriSize != null &&
                    this.HtmllibmanagerMaxDataUriSize.Equals(input.HtmllibmanagerMaxDataUriSize))
                ) && 
                (
                    this.HtmllibmanagerMaxage == input.HtmllibmanagerMaxage ||
                    (this.HtmllibmanagerMaxage != null &&
                    this.HtmllibmanagerMaxage.Equals(input.HtmllibmanagerMaxage))
                ) && 
                (
                    this.HtmllibmanagerForceCQUrlInfo == input.HtmllibmanagerForceCQUrlInfo ||
                    (this.HtmllibmanagerForceCQUrlInfo != null &&
                    this.HtmllibmanagerForceCQUrlInfo.Equals(input.HtmllibmanagerForceCQUrlInfo))
                ) && 
                (
                    this.HtmllibmanagerDefaultthemename == input.HtmllibmanagerDefaultthemename ||
                    (this.HtmllibmanagerDefaultthemename != null &&
                    this.HtmllibmanagerDefaultthemename.Equals(input.HtmllibmanagerDefaultthemename))
                ) && 
                (
                    this.HtmllibmanagerDefaultuserthemename == input.HtmllibmanagerDefaultuserthemename ||
                    (this.HtmllibmanagerDefaultuserthemename != null &&
                    this.HtmllibmanagerDefaultuserthemename.Equals(input.HtmllibmanagerDefaultuserthemename))
                ) && 
                (
                    this.HtmllibmanagerClientmanager == input.HtmllibmanagerClientmanager ||
                    (this.HtmllibmanagerClientmanager != null &&
                    this.HtmllibmanagerClientmanager.Equals(input.HtmllibmanagerClientmanager))
                ) && 
                (
                    this.HtmllibmanagerPathList == input.HtmllibmanagerPathList ||
                    (this.HtmllibmanagerPathList != null &&
                    this.HtmllibmanagerPathList.Equals(input.HtmllibmanagerPathList))
                ) && 
                (
                    this.HtmllibmanagerExcludedPathList == input.HtmllibmanagerExcludedPathList ||
                    (this.HtmllibmanagerExcludedPathList != null &&
                    this.HtmllibmanagerExcludedPathList.Equals(input.HtmllibmanagerExcludedPathList))
                ) && 
                (
                    this.HtmllibmanagerProcessorJs == input.HtmllibmanagerProcessorJs ||
                    (this.HtmllibmanagerProcessorJs != null &&
                    this.HtmllibmanagerProcessorJs.Equals(input.HtmllibmanagerProcessorJs))
                ) && 
                (
                    this.HtmllibmanagerProcessorCss == input.HtmllibmanagerProcessorCss ||
                    (this.HtmllibmanagerProcessorCss != null &&
                    this.HtmllibmanagerProcessorCss.Equals(input.HtmllibmanagerProcessorCss))
                ) && 
                (
                    this.HtmllibmanagerLongcachePatterns == input.HtmllibmanagerLongcachePatterns ||
                    (this.HtmllibmanagerLongcachePatterns != null &&
                    this.HtmllibmanagerLongcachePatterns.Equals(input.HtmllibmanagerLongcachePatterns))
                ) && 
                (
                    this.HtmllibmanagerLongcacheFormat == input.HtmllibmanagerLongcacheFormat ||
                    (this.HtmllibmanagerLongcacheFormat != null &&
                    this.HtmllibmanagerLongcacheFormat.Equals(input.HtmllibmanagerLongcacheFormat))
                ) && 
                (
                    this.HtmllibmanagerUseFileSystemOutputCache == input.HtmllibmanagerUseFileSystemOutputCache ||
                    (this.HtmllibmanagerUseFileSystemOutputCache != null &&
                    this.HtmllibmanagerUseFileSystemOutputCache.Equals(input.HtmllibmanagerUseFileSystemOutputCache))
                ) && 
                (
                    this.HtmllibmanagerFileSystemOutputCacheLocation == input.HtmllibmanagerFileSystemOutputCacheLocation ||
                    (this.HtmllibmanagerFileSystemOutputCacheLocation != null &&
                    this.HtmllibmanagerFileSystemOutputCacheLocation.Equals(input.HtmllibmanagerFileSystemOutputCacheLocation))
                ) && 
                (
                    this.HtmllibmanagerDisableReplacement == input.HtmllibmanagerDisableReplacement ||
                    (this.HtmllibmanagerDisableReplacement != null &&
                    this.HtmllibmanagerDisableReplacement.Equals(input.HtmllibmanagerDisableReplacement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HtmllibmanagerTiming != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerTiming.GetHashCode();
                if (this.HtmllibmanagerDebugInitJs != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerDebugInitJs.GetHashCode();
                if (this.HtmllibmanagerMinify != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerMinify.GetHashCode();
                if (this.HtmllibmanagerDebug != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerDebug.GetHashCode();
                if (this.HtmllibmanagerGzip != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerGzip.GetHashCode();
                if (this.HtmllibmanagerMaxDataUriSize != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerMaxDataUriSize.GetHashCode();
                if (this.HtmllibmanagerMaxage != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerMaxage.GetHashCode();
                if (this.HtmllibmanagerForceCQUrlInfo != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerForceCQUrlInfo.GetHashCode();
                if (this.HtmllibmanagerDefaultthemename != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerDefaultthemename.GetHashCode();
                if (this.HtmllibmanagerDefaultuserthemename != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerDefaultuserthemename.GetHashCode();
                if (this.HtmllibmanagerClientmanager != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerClientmanager.GetHashCode();
                if (this.HtmllibmanagerPathList != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerPathList.GetHashCode();
                if (this.HtmllibmanagerExcludedPathList != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerExcludedPathList.GetHashCode();
                if (this.HtmllibmanagerProcessorJs != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerProcessorJs.GetHashCode();
                if (this.HtmllibmanagerProcessorCss != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerProcessorCss.GetHashCode();
                if (this.HtmllibmanagerLongcachePatterns != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerLongcachePatterns.GetHashCode();
                if (this.HtmllibmanagerLongcacheFormat != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerLongcacheFormat.GetHashCode();
                if (this.HtmllibmanagerUseFileSystemOutputCache != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerUseFileSystemOutputCache.GetHashCode();
                if (this.HtmllibmanagerFileSystemOutputCacheLocation != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerFileSystemOutputCacheLocation.GetHashCode();
                if (this.HtmllibmanagerDisableReplacement != null)
                    hashCode = hashCode * 59 + this.HtmllibmanagerDisableReplacement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
