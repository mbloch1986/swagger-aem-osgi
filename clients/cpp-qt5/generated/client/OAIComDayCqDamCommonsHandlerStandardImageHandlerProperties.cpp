/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties() {
    init();
}

OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::~OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties() {
    this->cleanup();
}

void
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::init() {
    large_file_threshold = new OAIConfigNodePropertyInteger();
    m_large_file_threshold_isSet = false;
    large_comment_threshold = new OAIConfigNodePropertyInteger();
    m_large_comment_threshold_isSet = false;
    cq_dam_enable_ext_meta_extraction = new OAIConfigNodePropertyBoolean();
    m_cq_dam_enable_ext_meta_extraction_isSet = false;
}

void
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::cleanup() {
    if(large_file_threshold != nullptr) { 
        delete large_file_threshold;
    }
    if(large_comment_threshold != nullptr) { 
        delete large_comment_threshold;
    }
    if(cq_dam_enable_ext_meta_extraction != nullptr) { 
        delete cq_dam_enable_ext_meta_extraction;
    }
}

OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties*
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&large_file_threshold, pJson["large_file_threshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&large_comment_threshold, pJson["large_comment_threshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cq_dam_enable_ext_meta_extraction, pJson["cq.dam.enable.ext.meta.extraction"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::asJsonObject() {
    QJsonObject obj;
    if((large_file_threshold != nullptr) && (large_file_threshold->isSet())){
        toJsonValue(QString("large_file_threshold"), large_file_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((large_comment_threshold != nullptr) && (large_comment_threshold->isSet())){
        toJsonValue(QString("large_comment_threshold"), large_comment_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cq_dam_enable_ext_meta_extraction != nullptr) && (cq_dam_enable_ext_meta_extraction->isSet())){
        toJsonValue(QString("cq.dam.enable.ext.meta.extraction"), cq_dam_enable_ext_meta_extraction, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::getLargeFileThreshold() {
    return large_file_threshold;
}
void
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::setLargeFileThreshold(OAIConfigNodePropertyInteger* large_file_threshold) {
    this->large_file_threshold = large_file_threshold;
    this->m_large_file_threshold_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::getLargeCommentThreshold() {
    return large_comment_threshold;
}
void
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::setLargeCommentThreshold(OAIConfigNodePropertyInteger* large_comment_threshold) {
    this->large_comment_threshold = large_comment_threshold;
    this->m_large_comment_threshold_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::getCqDamEnableExtMetaExtraction() {
    return cq_dam_enable_ext_meta_extraction;
}
void
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::setCqDamEnableExtMetaExtraction(OAIConfigNodePropertyBoolean* cq_dam_enable_ext_meta_extraction) {
    this->cq_dam_enable_ext_meta_extraction = cq_dam_enable_ext_meta_extraction;
    this->m_cq_dam_enable_ext_meta_extraction_isSet = true;
}


bool
OAIComDayCqDamCommonsHandlerStandardImageHandlerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(large_file_threshold != nullptr && large_file_threshold->isSet()){ isObjectUpdated = true; break;}
        if(large_comment_threshold != nullptr && large_comment_threshold->isSet()){ isObjectUpdated = true; break;}
        if(cq_dam_enable_ext_meta_extraction != nullptr && cq_dam_enable_ext_meta_extraction->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

