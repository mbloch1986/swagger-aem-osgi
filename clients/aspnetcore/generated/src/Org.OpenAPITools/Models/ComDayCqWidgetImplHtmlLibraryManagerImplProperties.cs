/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqWidgetImplHtmlLibraryManagerImplProperties : IEquatable<ComDayCqWidgetImplHtmlLibraryManagerImplProperties>
    { 
        /// <summary>
        /// Gets or Sets HtmllibmanagerClientmanager
        /// </summary>
        [DataMember(Name="htmllibmanager.clientmanager")]
        public ConfigNodePropertyString HtmllibmanagerClientmanager { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDebug
        /// </summary>
        [DataMember(Name="htmllibmanager.debug")]
        public ConfigNodePropertyBoolean HtmllibmanagerDebug { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDebugConsole
        /// </summary>
        [DataMember(Name="htmllibmanager.debug.console")]
        public ConfigNodePropertyBoolean HtmllibmanagerDebugConsole { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDebugInitJs
        /// </summary>
        [DataMember(Name="htmllibmanager.debug.init.js")]
        public ConfigNodePropertyString HtmllibmanagerDebugInitJs { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDefaultthemename
        /// </summary>
        [DataMember(Name="htmllibmanager.defaultthemename")]
        public ConfigNodePropertyString HtmllibmanagerDefaultthemename { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerDefaultuserthemename
        /// </summary>
        [DataMember(Name="htmllibmanager.defaultuserthemename")]
        public ConfigNodePropertyString HtmllibmanagerDefaultuserthemename { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerFirebuglitePath
        /// </summary>
        [DataMember(Name="htmllibmanager.firebuglite.path")]
        public ConfigNodePropertyString HtmllibmanagerFirebuglitePath { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerForceCQUrlInfo
        /// </summary>
        [DataMember(Name="htmllibmanager.forceCQUrlInfo")]
        public ConfigNodePropertyBoolean HtmllibmanagerForceCQUrlInfo { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerGzip
        /// </summary>
        [DataMember(Name="htmllibmanager.gzip")]
        public ConfigNodePropertyBoolean HtmllibmanagerGzip { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerMaxage
        /// </summary>
        [DataMember(Name="htmllibmanager.maxage")]
        public ConfigNodePropertyInteger HtmllibmanagerMaxage { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerMaxDataUriSize
        /// </summary>
        [DataMember(Name="htmllibmanager.maxDataUriSize")]
        public ConfigNodePropertyInteger HtmllibmanagerMaxDataUriSize { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerMinify
        /// </summary>
        [DataMember(Name="htmllibmanager.minify")]
        public ConfigNodePropertyBoolean HtmllibmanagerMinify { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerPathList
        /// </summary>
        [DataMember(Name="htmllibmanager.path.list")]
        public ConfigNodePropertyArray HtmllibmanagerPathList { get; set; }

        /// <summary>
        /// Gets or Sets HtmllibmanagerTiming
        /// </summary>
        [DataMember(Name="htmllibmanager.timing")]
        public ConfigNodePropertyBoolean HtmllibmanagerTiming { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqWidgetImplHtmlLibraryManagerImplProperties {\n");
            sb.Append("  HtmllibmanagerClientmanager: ").Append(HtmllibmanagerClientmanager).Append("\n");
            sb.Append("  HtmllibmanagerDebug: ").Append(HtmllibmanagerDebug).Append("\n");
            sb.Append("  HtmllibmanagerDebugConsole: ").Append(HtmllibmanagerDebugConsole).Append("\n");
            sb.Append("  HtmllibmanagerDebugInitJs: ").Append(HtmllibmanagerDebugInitJs).Append("\n");
            sb.Append("  HtmllibmanagerDefaultthemename: ").Append(HtmllibmanagerDefaultthemename).Append("\n");
            sb.Append("  HtmllibmanagerDefaultuserthemename: ").Append(HtmllibmanagerDefaultuserthemename).Append("\n");
            sb.Append("  HtmllibmanagerFirebuglitePath: ").Append(HtmllibmanagerFirebuglitePath).Append("\n");
            sb.Append("  HtmllibmanagerForceCQUrlInfo: ").Append(HtmllibmanagerForceCQUrlInfo).Append("\n");
            sb.Append("  HtmllibmanagerGzip: ").Append(HtmllibmanagerGzip).Append("\n");
            sb.Append("  HtmllibmanagerMaxage: ").Append(HtmllibmanagerMaxage).Append("\n");
            sb.Append("  HtmllibmanagerMaxDataUriSize: ").Append(HtmllibmanagerMaxDataUriSize).Append("\n");
            sb.Append("  HtmllibmanagerMinify: ").Append(HtmllibmanagerMinify).Append("\n");
            sb.Append("  HtmllibmanagerPathList: ").Append(HtmllibmanagerPathList).Append("\n");
            sb.Append("  HtmllibmanagerTiming: ").Append(HtmllibmanagerTiming).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqWidgetImplHtmlLibraryManagerImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqWidgetImplHtmlLibraryManagerImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqWidgetImplHtmlLibraryManagerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqWidgetImplHtmlLibraryManagerImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HtmllibmanagerClientmanager == other.HtmllibmanagerClientmanager ||
                    HtmllibmanagerClientmanager != null &&
                    HtmllibmanagerClientmanager.Equals(other.HtmllibmanagerClientmanager)
                ) && 
                (
                    HtmllibmanagerDebug == other.HtmllibmanagerDebug ||
                    HtmllibmanagerDebug != null &&
                    HtmllibmanagerDebug.Equals(other.HtmllibmanagerDebug)
                ) && 
                (
                    HtmllibmanagerDebugConsole == other.HtmllibmanagerDebugConsole ||
                    HtmllibmanagerDebugConsole != null &&
                    HtmllibmanagerDebugConsole.Equals(other.HtmllibmanagerDebugConsole)
                ) && 
                (
                    HtmllibmanagerDebugInitJs == other.HtmllibmanagerDebugInitJs ||
                    HtmllibmanagerDebugInitJs != null &&
                    HtmllibmanagerDebugInitJs.Equals(other.HtmllibmanagerDebugInitJs)
                ) && 
                (
                    HtmllibmanagerDefaultthemename == other.HtmllibmanagerDefaultthemename ||
                    HtmllibmanagerDefaultthemename != null &&
                    HtmllibmanagerDefaultthemename.Equals(other.HtmllibmanagerDefaultthemename)
                ) && 
                (
                    HtmllibmanagerDefaultuserthemename == other.HtmllibmanagerDefaultuserthemename ||
                    HtmllibmanagerDefaultuserthemename != null &&
                    HtmllibmanagerDefaultuserthemename.Equals(other.HtmllibmanagerDefaultuserthemename)
                ) && 
                (
                    HtmllibmanagerFirebuglitePath == other.HtmllibmanagerFirebuglitePath ||
                    HtmllibmanagerFirebuglitePath != null &&
                    HtmllibmanagerFirebuglitePath.Equals(other.HtmllibmanagerFirebuglitePath)
                ) && 
                (
                    HtmllibmanagerForceCQUrlInfo == other.HtmllibmanagerForceCQUrlInfo ||
                    HtmllibmanagerForceCQUrlInfo != null &&
                    HtmllibmanagerForceCQUrlInfo.Equals(other.HtmllibmanagerForceCQUrlInfo)
                ) && 
                (
                    HtmllibmanagerGzip == other.HtmllibmanagerGzip ||
                    HtmllibmanagerGzip != null &&
                    HtmllibmanagerGzip.Equals(other.HtmllibmanagerGzip)
                ) && 
                (
                    HtmllibmanagerMaxage == other.HtmllibmanagerMaxage ||
                    HtmllibmanagerMaxage != null &&
                    HtmllibmanagerMaxage.Equals(other.HtmllibmanagerMaxage)
                ) && 
                (
                    HtmllibmanagerMaxDataUriSize == other.HtmllibmanagerMaxDataUriSize ||
                    HtmllibmanagerMaxDataUriSize != null &&
                    HtmllibmanagerMaxDataUriSize.Equals(other.HtmllibmanagerMaxDataUriSize)
                ) && 
                (
                    HtmllibmanagerMinify == other.HtmllibmanagerMinify ||
                    HtmllibmanagerMinify != null &&
                    HtmllibmanagerMinify.Equals(other.HtmllibmanagerMinify)
                ) && 
                (
                    HtmllibmanagerPathList == other.HtmllibmanagerPathList ||
                    HtmllibmanagerPathList != null &&
                    HtmllibmanagerPathList.Equals(other.HtmllibmanagerPathList)
                ) && 
                (
                    HtmllibmanagerTiming == other.HtmllibmanagerTiming ||
                    HtmllibmanagerTiming != null &&
                    HtmllibmanagerTiming.Equals(other.HtmllibmanagerTiming)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HtmllibmanagerClientmanager != null)
                    hashCode = hashCode * 59 + HtmllibmanagerClientmanager.GetHashCode();
                    if (HtmllibmanagerDebug != null)
                    hashCode = hashCode * 59 + HtmllibmanagerDebug.GetHashCode();
                    if (HtmllibmanagerDebugConsole != null)
                    hashCode = hashCode * 59 + HtmllibmanagerDebugConsole.GetHashCode();
                    if (HtmllibmanagerDebugInitJs != null)
                    hashCode = hashCode * 59 + HtmllibmanagerDebugInitJs.GetHashCode();
                    if (HtmllibmanagerDefaultthemename != null)
                    hashCode = hashCode * 59 + HtmllibmanagerDefaultthemename.GetHashCode();
                    if (HtmllibmanagerDefaultuserthemename != null)
                    hashCode = hashCode * 59 + HtmllibmanagerDefaultuserthemename.GetHashCode();
                    if (HtmllibmanagerFirebuglitePath != null)
                    hashCode = hashCode * 59 + HtmllibmanagerFirebuglitePath.GetHashCode();
                    if (HtmllibmanagerForceCQUrlInfo != null)
                    hashCode = hashCode * 59 + HtmllibmanagerForceCQUrlInfo.GetHashCode();
                    if (HtmllibmanagerGzip != null)
                    hashCode = hashCode * 59 + HtmllibmanagerGzip.GetHashCode();
                    if (HtmllibmanagerMaxage != null)
                    hashCode = hashCode * 59 + HtmllibmanagerMaxage.GetHashCode();
                    if (HtmllibmanagerMaxDataUriSize != null)
                    hashCode = hashCode * 59 + HtmllibmanagerMaxDataUriSize.GetHashCode();
                    if (HtmllibmanagerMinify != null)
                    hashCode = hashCode * 59 + HtmllibmanagerMinify.GetHashCode();
                    if (HtmllibmanagerPathList != null)
                    hashCode = hashCode * 59 + HtmllibmanagerPathList.GetHashCode();
                    if (HtmllibmanagerTiming != null)
                    hashCode = hashCode * 59 + HtmllibmanagerTiming.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqWidgetImplHtmlLibraryManagerImplProperties left, ComDayCqWidgetImplHtmlLibraryManagerImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqWidgetImplHtmlLibraryManagerImplProperties left, ComDayCqWidgetImplHtmlLibraryManagerImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
