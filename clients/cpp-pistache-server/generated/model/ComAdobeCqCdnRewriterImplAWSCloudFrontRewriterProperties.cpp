/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties()
{
    m_Service_rankingIsSet = false;
    m_Keypair_idIsSet = false;
    m_Keypair_aliasIsSet = false;
    m_Cdnrewriter_attributesIsSet = false;
    m_Cdn_rewriter_distribution_domainIsSet = false;
    
}

ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::~ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties()
{
}

void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Service_rankingIsSet)
    {
        val["service.ranking"] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_Keypair_idIsSet)
    {
        val["keypair.id"] = ModelBase::toJson(m_Keypair_id);
    }
    if(m_Keypair_aliasIsSet)
    {
        val["keypair.alias"] = ModelBase::toJson(m_Keypair_alias);
    }
    if(m_Cdnrewriter_attributesIsSet)
    {
        val["cdnrewriter.attributes"] = ModelBase::toJson(m_Cdnrewriter_attributes);
    }
    if(m_Cdn_rewriter_distribution_domainIsSet)
    {
        val["cdn.rewriter.distribution.domain"] = ModelBase::toJson(m_Cdn_rewriter_distribution_domain);
    }
    

    return val;
}

void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::fromJson(nlohmann::json& val)
{
    if(val.find("service.ranking") != val.end())
    {
        if(!val["service.ranking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["service.ranking"]);
            setServiceRanking( newItem );
        }
        
    }
    if(val.find("keypair.id") != val.end())
    {
        if(!val["keypair.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["keypair.id"]);
            setKeypairId( newItem );
        }
        
    }
    if(val.find("keypair.alias") != val.end())
    {
        if(!val["keypair.alias"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["keypair.alias"]);
            setKeypairAlias( newItem );
        }
        
    }
    if(val.find("cdnrewriter.attributes") != val.end())
    {
        if(!val["cdnrewriter.attributes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cdnrewriter.attributes"]);
            setCdnrewriterAttributes( newItem );
        }
        
    }
    if(val.find("cdn.rewriter.distribution.domain") != val.end())
    {
        if(!val["cdn.rewriter.distribution.domain"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["cdn.rewriter.distribution.domain"]);
            setCdnRewriterDistributionDomain( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::setServiceRanking(ConfigNodePropertyInteger const& value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}
void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}
ConfigNodePropertyString ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::getKeypairId() const
{
    return m_Keypair_id;
}
void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::setKeypairId(ConfigNodePropertyString const& value)
{
    m_Keypair_id = value;
    m_Keypair_idIsSet = true;
}
bool ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::keypairIdIsSet() const
{
    return m_Keypair_idIsSet;
}
void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::unsetKeypair_id()
{
    m_Keypair_idIsSet = false;
}
ConfigNodePropertyString ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::getKeypairAlias() const
{
    return m_Keypair_alias;
}
void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::setKeypairAlias(ConfigNodePropertyString const& value)
{
    m_Keypair_alias = value;
    m_Keypair_aliasIsSet = true;
}
bool ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::keypairAliasIsSet() const
{
    return m_Keypair_aliasIsSet;
}
void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::unsetKeypair_alias()
{
    m_Keypair_aliasIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::getCdnrewriterAttributes() const
{
    return m_Cdnrewriter_attributes;
}
void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::setCdnrewriterAttributes(ConfigNodePropertyArray const& value)
{
    m_Cdnrewriter_attributes = value;
    m_Cdnrewriter_attributesIsSet = true;
}
bool ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::cdnrewriterAttributesIsSet() const
{
    return m_Cdnrewriter_attributesIsSet;
}
void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::unsetCdnrewriter_attributes()
{
    m_Cdnrewriter_attributesIsSet = false;
}
ConfigNodePropertyString ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::getCdnRewriterDistributionDomain() const
{
    return m_Cdn_rewriter_distribution_domain;
}
void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::setCdnRewriterDistributionDomain(ConfigNodePropertyString const& value)
{
    m_Cdn_rewriter_distribution_domain = value;
    m_Cdn_rewriter_distribution_domainIsSet = true;
}
bool ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::cdnRewriterDistributionDomainIsSet() const
{
    return m_Cdn_rewriter_distribution_domainIsSet;
}
void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::unsetCdn_rewriter_distribution_domain()
{
    m_Cdn_rewriter_distribution_domainIsSet = false;
}

}
}
}
}

