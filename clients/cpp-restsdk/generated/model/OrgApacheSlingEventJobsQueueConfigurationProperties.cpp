/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingEventJobsQueueConfigurationProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingEventJobsQueueConfigurationProperties::OrgApacheSlingEventJobsQueueConfigurationProperties()
{
    m_Queue_nameIsSet = false;
    m_Queue_topicsIsSet = false;
    m_Queue_typeIsSet = false;
    m_Queue_priorityIsSet = false;
    m_Queue_retriesIsSet = false;
    m_Queue_retrydelayIsSet = false;
    m_Queue_maxparallelIsSet = false;
    m_Queue_keepJobsIsSet = false;
    m_Queue_preferRunOnCreationInstanceIsSet = false;
    m_Queue_threadPoolSizeIsSet = false;
    m_Service_rankingIsSet = false;
}

OrgApacheSlingEventJobsQueueConfigurationProperties::~OrgApacheSlingEventJobsQueueConfigurationProperties()
{
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingEventJobsQueueConfigurationProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Queue_nameIsSet)
    {
        val[utility::conversions::to_string_t("queue.name")] = ModelBase::toJson(m_Queue_name);
    }
    if(m_Queue_topicsIsSet)
    {
        val[utility::conversions::to_string_t("queue.topics")] = ModelBase::toJson(m_Queue_topics);
    }
    if(m_Queue_typeIsSet)
    {
        val[utility::conversions::to_string_t("queue.type")] = ModelBase::toJson(m_Queue_type);
    }
    if(m_Queue_priorityIsSet)
    {
        val[utility::conversions::to_string_t("queue.priority")] = ModelBase::toJson(m_Queue_priority);
    }
    if(m_Queue_retriesIsSet)
    {
        val[utility::conversions::to_string_t("queue.retries")] = ModelBase::toJson(m_Queue_retries);
    }
    if(m_Queue_retrydelayIsSet)
    {
        val[utility::conversions::to_string_t("queue.retrydelay")] = ModelBase::toJson(m_Queue_retrydelay);
    }
    if(m_Queue_maxparallelIsSet)
    {
        val[utility::conversions::to_string_t("queue.maxparallel")] = ModelBase::toJson(m_Queue_maxparallel);
    }
    if(m_Queue_keepJobsIsSet)
    {
        val[utility::conversions::to_string_t("queue.keepJobs")] = ModelBase::toJson(m_Queue_keepJobs);
    }
    if(m_Queue_preferRunOnCreationInstanceIsSet)
    {
        val[utility::conversions::to_string_t("queue.preferRunOnCreationInstance")] = ModelBase::toJson(m_Queue_preferRunOnCreationInstance);
    }
    if(m_Queue_threadPoolSizeIsSet)
    {
        val[utility::conversions::to_string_t("queue.threadPoolSize")] = ModelBase::toJson(m_Queue_threadPoolSize);
    }
    if(m_Service_rankingIsSet)
    {
        val[utility::conversions::to_string_t("service.ranking")] = ModelBase::toJson(m_Service_ranking);
    }

    return val;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("queue.name")))
    {
        if(!val[utility::conversions::to_string_t("queue.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.name")]);
            setQueueName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue.topics")))
    {
        if(!val[utility::conversions::to_string_t("queue.topics")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.topics")]);
            setQueueTopics( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue.type")))
    {
        if(!val[utility::conversions::to_string_t("queue.type")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.type")]);
            setQueueType( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue.priority")))
    {
        if(!val[utility::conversions::to_string_t("queue.priority")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.priority")]);
            setQueuePriority( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue.retries")))
    {
        if(!val[utility::conversions::to_string_t("queue.retries")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.retries")]);
            setQueueRetries( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue.retrydelay")))
    {
        if(!val[utility::conversions::to_string_t("queue.retrydelay")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.retrydelay")]);
            setQueueRetrydelay( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue.maxparallel")))
    {
        if(!val[utility::conversions::to_string_t("queue.maxparallel")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyFloat> newItem(new ConfigNodePropertyFloat());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.maxparallel")]);
            setQueueMaxparallel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue.keepJobs")))
    {
        if(!val[utility::conversions::to_string_t("queue.keepJobs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.keepJobs")]);
            setQueueKeepJobs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue.preferRunOnCreationInstance")))
    {
        if(!val[utility::conversions::to_string_t("queue.preferRunOnCreationInstance")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.preferRunOnCreationInstance")]);
            setQueuePreferRunOnCreationInstance( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue.threadPoolSize")))
    {
        if(!val[utility::conversions::to_string_t("queue.threadPoolSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("queue.threadPoolSize")]);
            setQueueThreadPoolSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.ranking")))
    {
        if(!val[utility::conversions::to_string_t("service.ranking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("service.ranking")]);
            setServiceRanking( newItem );
        }
    }
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Queue_nameIsSet)
    {
        if (m_Queue_name.get())
        {
            m_Queue_name->toMultipart(multipart, utility::conversions::to_string_t("queue.name."));
        }
    }
    if(m_Queue_topicsIsSet)
    {
        if (m_Queue_topics.get())
        {
            m_Queue_topics->toMultipart(multipart, utility::conversions::to_string_t("queue.topics."));
        }
    }
    if(m_Queue_typeIsSet)
    {
        if (m_Queue_type.get())
        {
            m_Queue_type->toMultipart(multipart, utility::conversions::to_string_t("queue.type."));
        }
    }
    if(m_Queue_priorityIsSet)
    {
        if (m_Queue_priority.get())
        {
            m_Queue_priority->toMultipart(multipart, utility::conversions::to_string_t("queue.priority."));
        }
    }
    if(m_Queue_retriesIsSet)
    {
        if (m_Queue_retries.get())
        {
            m_Queue_retries->toMultipart(multipart, utility::conversions::to_string_t("queue.retries."));
        }
    }
    if(m_Queue_retrydelayIsSet)
    {
        if (m_Queue_retrydelay.get())
        {
            m_Queue_retrydelay->toMultipart(multipart, utility::conversions::to_string_t("queue.retrydelay."));
        }
    }
    if(m_Queue_maxparallelIsSet)
    {
        if (m_Queue_maxparallel.get())
        {
            m_Queue_maxparallel->toMultipart(multipart, utility::conversions::to_string_t("queue.maxparallel."));
        }
    }
    if(m_Queue_keepJobsIsSet)
    {
        if (m_Queue_keepJobs.get())
        {
            m_Queue_keepJobs->toMultipart(multipart, utility::conversions::to_string_t("queue.keepJobs."));
        }
    }
    if(m_Queue_preferRunOnCreationInstanceIsSet)
    {
        if (m_Queue_preferRunOnCreationInstance.get())
        {
            m_Queue_preferRunOnCreationInstance->toMultipart(multipart, utility::conversions::to_string_t("queue.preferRunOnCreationInstance."));
        }
    }
    if(m_Queue_threadPoolSizeIsSet)
    {
        if (m_Queue_threadPoolSize.get())
        {
            m_Queue_threadPoolSize->toMultipart(multipart, utility::conversions::to_string_t("queue.threadPoolSize."));
        }
    }
    if(m_Service_rankingIsSet)
    {
        if (m_Service_ranking.get())
        {
            m_Service_ranking->toMultipart(multipart, utility::conversions::to_string_t("service.ranking."));
        }
    }
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("queue.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.name."));
            setQueueName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue.topics")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.topics")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.topics."));
            setQueueTopics( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue.type")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.type")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.type."));
            setQueueType( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue.priority")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.priority")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.priority."));
            setQueuePriority( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue.retries")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.retries")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.retries."));
            setQueueRetries( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue.retrydelay")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.retrydelay")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.retrydelay."));
            setQueueRetrydelay( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue.maxparallel")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.maxparallel")))
        {
            std::shared_ptr<ConfigNodePropertyFloat> newItem(new ConfigNodePropertyFloat());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.maxparallel."));
            setQueueMaxparallel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue.keepJobs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.keepJobs")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.keepJobs."));
            setQueueKeepJobs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue.preferRunOnCreationInstance")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.preferRunOnCreationInstance")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.preferRunOnCreationInstance."));
            setQueuePreferRunOnCreationInstance( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue.threadPoolSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue.threadPoolSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue.threadPoolSize."));
            setQueueThreadPoolSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.ranking."));
            setServiceRanking( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueName() const
{
    return m_Queue_name;
}


void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Queue_name = value;
    m_Queue_nameIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueNameIsSet() const
{
    return m_Queue_nameIsSet;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_name()
{
    m_Queue_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueTopics() const
{
    return m_Queue_topics;
}


void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueTopics(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Queue_topics = value;
    m_Queue_topicsIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueTopicsIsSet() const
{
    return m_Queue_topicsIsSet;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_topics()
{
    m_Queue_topicsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueType() const
{
    return m_Queue_type;
}


void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueType(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Queue_type = value;
    m_Queue_typeIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueTypeIsSet() const
{
    return m_Queue_typeIsSet;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_type()
{
    m_Queue_typeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingEventJobsQueueConfigurationProperties::getQueuePriority() const
{
    return m_Queue_priority;
}


void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueuePriority(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Queue_priority = value;
    m_Queue_priorityIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queuePriorityIsSet() const
{
    return m_Queue_priorityIsSet;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_priority()
{
    m_Queue_priorityIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueRetries() const
{
    return m_Queue_retries;
}


void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueRetries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Queue_retries = value;
    m_Queue_retriesIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueRetriesIsSet() const
{
    return m_Queue_retriesIsSet;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_retries()
{
    m_Queue_retriesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueRetrydelay() const
{
    return m_Queue_retrydelay;
}


void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueRetrydelay(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Queue_retrydelay = value;
    m_Queue_retrydelayIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueRetrydelayIsSet() const
{
    return m_Queue_retrydelayIsSet;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_retrydelay()
{
    m_Queue_retrydelayIsSet = false;
}

std::shared_ptr<ConfigNodePropertyFloat> OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueMaxparallel() const
{
    return m_Queue_maxparallel;
}


void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueMaxparallel(std::shared_ptr<ConfigNodePropertyFloat> value)
{
    m_Queue_maxparallel = value;
    m_Queue_maxparallelIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueMaxparallelIsSet() const
{
    return m_Queue_maxparallelIsSet;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_maxparallel()
{
    m_Queue_maxparallelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueKeepJobs() const
{
    return m_Queue_keepJobs;
}


void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueKeepJobs(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Queue_keepJobs = value;
    m_Queue_keepJobsIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueKeepJobsIsSet() const
{
    return m_Queue_keepJobsIsSet;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_keepJobs()
{
    m_Queue_keepJobsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingEventJobsQueueConfigurationProperties::getQueuePreferRunOnCreationInstance() const
{
    return m_Queue_preferRunOnCreationInstance;
}


void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueuePreferRunOnCreationInstance(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Queue_preferRunOnCreationInstance = value;
    m_Queue_preferRunOnCreationInstanceIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queuePreferRunOnCreationInstanceIsSet() const
{
    return m_Queue_preferRunOnCreationInstanceIsSet;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_preferRunOnCreationInstance()
{
    m_Queue_preferRunOnCreationInstanceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEventJobsQueueConfigurationProperties::getQueueThreadPoolSize() const
{
    return m_Queue_threadPoolSize;
}


void OrgApacheSlingEventJobsQueueConfigurationProperties::setQueueThreadPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Queue_threadPoolSize = value;
    m_Queue_threadPoolSizeIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::queueThreadPoolSizeIsSet() const
{
    return m_Queue_threadPoolSizeIsSet;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetQueue_threadPoolSize()
{
    m_Queue_threadPoolSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingEventJobsQueueConfigurationProperties::getServiceRanking() const
{
    return m_Service_ranking;
}


void OrgApacheSlingEventJobsQueueConfigurationProperties::setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool OrgApacheSlingEventJobsQueueConfigurationProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}

void OrgApacheSlingEventJobsQueueConfigurationProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

}
}
}
}

