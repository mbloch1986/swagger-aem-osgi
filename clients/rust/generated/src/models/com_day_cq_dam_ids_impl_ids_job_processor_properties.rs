/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamIdsImplIdsJobProcessorProperties {
  #[serde(rename = "enable.multisession")]
  enable_multisession: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "ids.cc.enable")]
  ids_cc_enable: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "enable.retry")]
  enable_retry: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "enable.retry.scripterror")]
  enable_retry_scripterror: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "externalizer.domain.cqhost")]
  externalizer_domain_cqhost: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "externalizer.domain.http")]
  externalizer_domain_http: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqDamIdsImplIdsJobProcessorProperties {
  pub fn new() -> ComDayCqDamIdsImplIdsJobProcessorProperties {
    ComDayCqDamIdsImplIdsJobProcessorProperties {
      enable_multisession: None,
      ids_cc_enable: None,
      enable_retry: None,
      enable_retry_scripterror: None,
      externalizer_domain_cqhost: None,
      externalizer_domain_http: None
    }
  }

  pub fn set_enable_multisession(&mut self, enable_multisession: ::models::ConfigNodePropertyBoolean) {
    self.enable_multisession = Some(enable_multisession);
  }

  pub fn with_enable_multisession(mut self, enable_multisession: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamIdsImplIdsJobProcessorProperties {
    self.enable_multisession = Some(enable_multisession);
    self
  }

  pub fn enable_multisession(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_multisession.as_ref()
  }

  pub fn reset_enable_multisession(&mut self) {
    self.enable_multisession = None;
  }

  pub fn set_ids_cc_enable(&mut self, ids_cc_enable: ::models::ConfigNodePropertyBoolean) {
    self.ids_cc_enable = Some(ids_cc_enable);
  }

  pub fn with_ids_cc_enable(mut self, ids_cc_enable: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamIdsImplIdsJobProcessorProperties {
    self.ids_cc_enable = Some(ids_cc_enable);
    self
  }

  pub fn ids_cc_enable(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.ids_cc_enable.as_ref()
  }

  pub fn reset_ids_cc_enable(&mut self) {
    self.ids_cc_enable = None;
  }

  pub fn set_enable_retry(&mut self, enable_retry: ::models::ConfigNodePropertyBoolean) {
    self.enable_retry = Some(enable_retry);
  }

  pub fn with_enable_retry(mut self, enable_retry: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamIdsImplIdsJobProcessorProperties {
    self.enable_retry = Some(enable_retry);
    self
  }

  pub fn enable_retry(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_retry.as_ref()
  }

  pub fn reset_enable_retry(&mut self) {
    self.enable_retry = None;
  }

  pub fn set_enable_retry_scripterror(&mut self, enable_retry_scripterror: ::models::ConfigNodePropertyBoolean) {
    self.enable_retry_scripterror = Some(enable_retry_scripterror);
  }

  pub fn with_enable_retry_scripterror(mut self, enable_retry_scripterror: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamIdsImplIdsJobProcessorProperties {
    self.enable_retry_scripterror = Some(enable_retry_scripterror);
    self
  }

  pub fn enable_retry_scripterror(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_retry_scripterror.as_ref()
  }

  pub fn reset_enable_retry_scripterror(&mut self) {
    self.enable_retry_scripterror = None;
  }

  pub fn set_externalizer_domain_cqhost(&mut self, externalizer_domain_cqhost: ::models::ConfigNodePropertyString) {
    self.externalizer_domain_cqhost = Some(externalizer_domain_cqhost);
  }

  pub fn with_externalizer_domain_cqhost(mut self, externalizer_domain_cqhost: ::models::ConfigNodePropertyString) -> ComDayCqDamIdsImplIdsJobProcessorProperties {
    self.externalizer_domain_cqhost = Some(externalizer_domain_cqhost);
    self
  }

  pub fn externalizer_domain_cqhost(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.externalizer_domain_cqhost.as_ref()
  }

  pub fn reset_externalizer_domain_cqhost(&mut self) {
    self.externalizer_domain_cqhost = None;
  }

  pub fn set_externalizer_domain_http(&mut self, externalizer_domain_http: ::models::ConfigNodePropertyString) {
    self.externalizer_domain_http = Some(externalizer_domain_http);
  }

  pub fn with_externalizer_domain_http(mut self, externalizer_domain_http: ::models::ConfigNodePropertyString) -> ComDayCqDamIdsImplIdsJobProcessorProperties {
    self.externalizer_domain_http = Some(externalizer_domain_http);
    self
  }

  pub fn externalizer_domain_http(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.externalizer_domain_http.as_ref()
  }

  pub fn reset_externalizer_domain_http(&mut self) {
    self.externalizer_domain_http = None;
  }

}



