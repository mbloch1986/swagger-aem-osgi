/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingEventImplJobsJobConsumerManagerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingEventImplJobsJobConsumerManagerProperties::OrgApacheSlingEventImplJobsJobConsumerManagerProperties()
{
    m_Org_apache_sling_installer_configuration_persistIsSet = false;
    m_Job_consumermanager_whitelistIsSet = false;
    m_Job_consumermanager_blacklistIsSet = false;
}

OrgApacheSlingEventImplJobsJobConsumerManagerProperties::~OrgApacheSlingEventImplJobsJobConsumerManagerProperties()
{
}

void OrgApacheSlingEventImplJobsJobConsumerManagerProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingEventImplJobsJobConsumerManagerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Org_apache_sling_installer_configuration_persistIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.installer.configuration.persist")] = ModelBase::toJson(m_Org_apache_sling_installer_configuration_persist);
    }
    if(m_Job_consumermanager_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("job.consumermanager.whitelist")] = ModelBase::toJson(m_Job_consumermanager_whitelist);
    }
    if(m_Job_consumermanager_blacklistIsSet)
    {
        val[utility::conversions::to_string_t("job.consumermanager.blacklist")] = ModelBase::toJson(m_Job_consumermanager_blacklist);
    }

    return val;
}

void OrgApacheSlingEventImplJobsJobConsumerManagerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.installer.configuration.persist")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.installer.configuration.persist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.installer.configuration.persist")]);
            setOrgApacheSlingInstallerConfigurationPersist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("job.consumermanager.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("job.consumermanager.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("job.consumermanager.whitelist")]);
            setJobConsumermanagerWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("job.consumermanager.blacklist")))
    {
        if(!val[utility::conversions::to_string_t("job.consumermanager.blacklist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("job.consumermanager.blacklist")]);
            setJobConsumermanagerBlacklist( newItem );
        }
    }
}

void OrgApacheSlingEventImplJobsJobConsumerManagerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Org_apache_sling_installer_configuration_persistIsSet)
    {
        if (m_Org_apache_sling_installer_configuration_persist.get())
        {
            m_Org_apache_sling_installer_configuration_persist->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.installer.configuration.persist."));
        }
    }
    if(m_Job_consumermanager_whitelistIsSet)
    {
        if (m_Job_consumermanager_whitelist.get())
        {
            m_Job_consumermanager_whitelist->toMultipart(multipart, utility::conversions::to_string_t("job.consumermanager.whitelist."));
        }
    }
    if(m_Job_consumermanager_blacklistIsSet)
    {
        if (m_Job_consumermanager_blacklist.get())
        {
            m_Job_consumermanager_blacklist->toMultipart(multipart, utility::conversions::to_string_t("job.consumermanager.blacklist."));
        }
    }
}

void OrgApacheSlingEventImplJobsJobConsumerManagerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.installer.configuration.persist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.installer.configuration.persist")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.installer.configuration.persist."));
            setOrgApacheSlingInstallerConfigurationPersist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("job.consumermanager.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("job.consumermanager.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("job.consumermanager.whitelist."));
            setJobConsumermanagerWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("job.consumermanager.blacklist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("job.consumermanager.blacklist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("job.consumermanager.blacklist."));
            setJobConsumermanagerBlacklist( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingEventImplJobsJobConsumerManagerProperties::getOrgApacheSlingInstallerConfigurationPersist() const
{
    return m_Org_apache_sling_installer_configuration_persist;
}


void OrgApacheSlingEventImplJobsJobConsumerManagerProperties::setOrgApacheSlingInstallerConfigurationPersist(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_sling_installer_configuration_persist = value;
    m_Org_apache_sling_installer_configuration_persistIsSet = true;
}
bool OrgApacheSlingEventImplJobsJobConsumerManagerProperties::orgApacheSlingInstallerConfigurationPersistIsSet() const
{
    return m_Org_apache_sling_installer_configuration_persistIsSet;
}

void OrgApacheSlingEventImplJobsJobConsumerManagerProperties::unsetOrg_apache_sling_installer_configuration_persist()
{
    m_Org_apache_sling_installer_configuration_persistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingEventImplJobsJobConsumerManagerProperties::getJobConsumermanagerWhitelist() const
{
    return m_Job_consumermanager_whitelist;
}


void OrgApacheSlingEventImplJobsJobConsumerManagerProperties::setJobConsumermanagerWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Job_consumermanager_whitelist = value;
    m_Job_consumermanager_whitelistIsSet = true;
}
bool OrgApacheSlingEventImplJobsJobConsumerManagerProperties::jobConsumermanagerWhitelistIsSet() const
{
    return m_Job_consumermanager_whitelistIsSet;
}

void OrgApacheSlingEventImplJobsJobConsumerManagerProperties::unsetJob_consumermanager_whitelist()
{
    m_Job_consumermanager_whitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingEventImplJobsJobConsumerManagerProperties::getJobConsumermanagerBlacklist() const
{
    return m_Job_consumermanager_blacklist;
}


void OrgApacheSlingEventImplJobsJobConsumerManagerProperties::setJobConsumermanagerBlacklist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Job_consumermanager_blacklist = value;
    m_Job_consumermanager_blacklistIsSet = true;
}
bool OrgApacheSlingEventImplJobsJobConsumerManagerProperties::jobConsumermanagerBlacklistIsSet() const
{
    return m_Job_consumermanager_blacklistIsSet;
}

void OrgApacheSlingEventImplJobsJobConsumerManagerProperties::unsetJob_consumermanager_blacklist()
{
    m_Job_consumermanager_blacklistIsSet = false;
}

}
}
}
}

