/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingSecurityImplReferrerFilterProperties : IEquatable<OrgApacheSlingSecurityImplReferrerFilterProperties>
    { 
        /// <summary>
        /// Gets or Sets AllowEmpty
        /// </summary>
        [DataMember(Name="allow.empty")]
        public ConfigNodePropertyBoolean AllowEmpty { get; set; }

        /// <summary>
        /// Gets or Sets AllowHosts
        /// </summary>
        [DataMember(Name="allow.hosts")]
        public ConfigNodePropertyArray AllowHosts { get; set; }

        /// <summary>
        /// Gets or Sets AllowHostsRegexp
        /// </summary>
        [DataMember(Name="allow.hosts.regexp")]
        public ConfigNodePropertyArray AllowHostsRegexp { get; set; }

        /// <summary>
        /// Gets or Sets FilterMethods
        /// </summary>
        [DataMember(Name="filter.methods")]
        public ConfigNodePropertyArray FilterMethods { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeAgentsRegexp
        /// </summary>
        [DataMember(Name="exclude.agents.regexp")]
        public ConfigNodePropertyArray ExcludeAgentsRegexp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingSecurityImplReferrerFilterProperties {\n");
            sb.Append("  AllowEmpty: ").Append(AllowEmpty).Append("\n");
            sb.Append("  AllowHosts: ").Append(AllowHosts).Append("\n");
            sb.Append("  AllowHostsRegexp: ").Append(AllowHostsRegexp).Append("\n");
            sb.Append("  FilterMethods: ").Append(FilterMethods).Append("\n");
            sb.Append("  ExcludeAgentsRegexp: ").Append(ExcludeAgentsRegexp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingSecurityImplReferrerFilterProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingSecurityImplReferrerFilterProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingSecurityImplReferrerFilterProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingSecurityImplReferrerFilterProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllowEmpty == other.AllowEmpty ||
                    AllowEmpty != null &&
                    AllowEmpty.Equals(other.AllowEmpty)
                ) && 
                (
                    AllowHosts == other.AllowHosts ||
                    AllowHosts != null &&
                    AllowHosts.Equals(other.AllowHosts)
                ) && 
                (
                    AllowHostsRegexp == other.AllowHostsRegexp ||
                    AllowHostsRegexp != null &&
                    AllowHostsRegexp.Equals(other.AllowHostsRegexp)
                ) && 
                (
                    FilterMethods == other.FilterMethods ||
                    FilterMethods != null &&
                    FilterMethods.Equals(other.FilterMethods)
                ) && 
                (
                    ExcludeAgentsRegexp == other.ExcludeAgentsRegexp ||
                    ExcludeAgentsRegexp != null &&
                    ExcludeAgentsRegexp.Equals(other.ExcludeAgentsRegexp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AllowEmpty != null)
                    hashCode = hashCode * 59 + AllowEmpty.GetHashCode();
                    if (AllowHosts != null)
                    hashCode = hashCode * 59 + AllowHosts.GetHashCode();
                    if (AllowHostsRegexp != null)
                    hashCode = hashCode * 59 + AllowHostsRegexp.GetHashCode();
                    if (FilterMethods != null)
                    hashCode = hashCode * 59 + FilterMethods.GetHashCode();
                    if (ExcludeAgentsRegexp != null)
                    hashCode = hashCode * 59 + ExcludeAgentsRegexp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingSecurityImplReferrerFilterProperties left, OrgApacheSlingSecurityImplReferrerFilterProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingSecurityImplReferrerFilterProperties left, OrgApacheSlingSecurityImplReferrerFilterProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
