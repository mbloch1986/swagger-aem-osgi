/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingTracerInternalLogTracerProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingTracerInternalLogTracerProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingTracerInternalLogTracerProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingTracerInternalLogTracerProperties
    : public ModelBase
{
public:
    OrgApacheSlingTracerInternalLogTracerProperties();
    virtual ~OrgApacheSlingTracerInternalLogTracerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingTracerInternalLogTracerProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getTracerSets() const;
    bool tracerSetsIsSet() const;
    void unsetTracerSets();
    void setTracerSets(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();
    void setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getServletEnabled() const;
    bool servletEnabledIsSet() const;
    void unsetServletEnabled();
    void setServletEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRecordingCacheSizeInMB() const;
    bool recordingCacheSizeInMBIsSet() const;
    void unsetRecordingCacheSizeInMB();
    void setRecordingCacheSizeInMB(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRecordingCacheDurationInSecs() const;
    bool recordingCacheDurationInSecsIsSet() const;
    void unsetRecordingCacheDurationInSecs();
    void setRecordingCacheDurationInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getRecordingCompressionEnabled() const;
    bool recordingCompressionEnabledIsSet() const;
    void unsetRecordingCompressionEnabled();
    void setRecordingCompressionEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGzipResponse() const;
    bool gzipResponseIsSet() const;
    void unsetGzipResponse();
    void setGzipResponse(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_TracerSets;
    bool m_TracerSetsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enabled;
    bool m_EnabledIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_ServletEnabled;
    bool m_ServletEnabledIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_RecordingCacheSizeInMB;
    bool m_RecordingCacheSizeInMBIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_RecordingCacheDurationInSecs;
    bool m_RecordingCacheDurationInSecsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_RecordingCompressionEnabled;
    bool m_RecordingCompressionEnabledIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_GzipResponse;
    bool m_GzipResponseIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingTracerInternalLogTracerProperties_H_ */
