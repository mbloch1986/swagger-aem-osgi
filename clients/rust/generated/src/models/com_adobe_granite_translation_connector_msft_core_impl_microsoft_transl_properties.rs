/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
  #[serde(rename = "translationFactory")]
  translation_factory: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "defaultConnectorLabel")]
  default_connector_label: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "defaultConnectorAttribution")]
  default_connector_attribution: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "defaultConnectorWorkspaceId")]
  default_connector_workspace_id: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "defaultConnectorSubscriptionKey")]
  default_connector_subscription_key: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "languageMapLocation")]
  language_map_location: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "categoryMapLocation")]
  category_map_location: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "retryAttempts")]
  retry_attempts: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "timeoutCount")]
  timeout_count: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
  pub fn new() -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
      translation_factory: None,
      default_connector_label: None,
      default_connector_attribution: None,
      default_connector_workspace_id: None,
      default_connector_subscription_key: None,
      language_map_location: None,
      category_map_location: None,
      retry_attempts: None,
      timeout_count: None
    }
  }

  pub fn set_translation_factory(&mut self, translation_factory: ::models::ConfigNodePropertyString) {
    self.translation_factory = Some(translation_factory);
  }

  pub fn with_translation_factory(mut self, translation_factory: ::models::ConfigNodePropertyString) -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    self.translation_factory = Some(translation_factory);
    self
  }

  pub fn translation_factory(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.translation_factory.as_ref()
  }

  pub fn reset_translation_factory(&mut self) {
    self.translation_factory = None;
  }

  pub fn set_default_connector_label(&mut self, default_connector_label: ::models::ConfigNodePropertyString) {
    self.default_connector_label = Some(default_connector_label);
  }

  pub fn with_default_connector_label(mut self, default_connector_label: ::models::ConfigNodePropertyString) -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    self.default_connector_label = Some(default_connector_label);
    self
  }

  pub fn default_connector_label(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_connector_label.as_ref()
  }

  pub fn reset_default_connector_label(&mut self) {
    self.default_connector_label = None;
  }

  pub fn set_default_connector_attribution(&mut self, default_connector_attribution: ::models::ConfigNodePropertyString) {
    self.default_connector_attribution = Some(default_connector_attribution);
  }

  pub fn with_default_connector_attribution(mut self, default_connector_attribution: ::models::ConfigNodePropertyString) -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    self.default_connector_attribution = Some(default_connector_attribution);
    self
  }

  pub fn default_connector_attribution(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_connector_attribution.as_ref()
  }

  pub fn reset_default_connector_attribution(&mut self) {
    self.default_connector_attribution = None;
  }

  pub fn set_default_connector_workspace_id(&mut self, default_connector_workspace_id: ::models::ConfigNodePropertyString) {
    self.default_connector_workspace_id = Some(default_connector_workspace_id);
  }

  pub fn with_default_connector_workspace_id(mut self, default_connector_workspace_id: ::models::ConfigNodePropertyString) -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    self.default_connector_workspace_id = Some(default_connector_workspace_id);
    self
  }

  pub fn default_connector_workspace_id(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_connector_workspace_id.as_ref()
  }

  pub fn reset_default_connector_workspace_id(&mut self) {
    self.default_connector_workspace_id = None;
  }

  pub fn set_default_connector_subscription_key(&mut self, default_connector_subscription_key: ::models::ConfigNodePropertyString) {
    self.default_connector_subscription_key = Some(default_connector_subscription_key);
  }

  pub fn with_default_connector_subscription_key(mut self, default_connector_subscription_key: ::models::ConfigNodePropertyString) -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    self.default_connector_subscription_key = Some(default_connector_subscription_key);
    self
  }

  pub fn default_connector_subscription_key(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_connector_subscription_key.as_ref()
  }

  pub fn reset_default_connector_subscription_key(&mut self) {
    self.default_connector_subscription_key = None;
  }

  pub fn set_language_map_location(&mut self, language_map_location: ::models::ConfigNodePropertyString) {
    self.language_map_location = Some(language_map_location);
  }

  pub fn with_language_map_location(mut self, language_map_location: ::models::ConfigNodePropertyString) -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    self.language_map_location = Some(language_map_location);
    self
  }

  pub fn language_map_location(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.language_map_location.as_ref()
  }

  pub fn reset_language_map_location(&mut self) {
    self.language_map_location = None;
  }

  pub fn set_category_map_location(&mut self, category_map_location: ::models::ConfigNodePropertyString) {
    self.category_map_location = Some(category_map_location);
  }

  pub fn with_category_map_location(mut self, category_map_location: ::models::ConfigNodePropertyString) -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    self.category_map_location = Some(category_map_location);
    self
  }

  pub fn category_map_location(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.category_map_location.as_ref()
  }

  pub fn reset_category_map_location(&mut self) {
    self.category_map_location = None;
  }

  pub fn set_retry_attempts(&mut self, retry_attempts: ::models::ConfigNodePropertyInteger) {
    self.retry_attempts = Some(retry_attempts);
  }

  pub fn with_retry_attempts(mut self, retry_attempts: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    self.retry_attempts = Some(retry_attempts);
    self
  }

  pub fn retry_attempts(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.retry_attempts.as_ref()
  }

  pub fn reset_retry_attempts(&mut self) {
    self.retry_attempts = None;
  }

  pub fn set_timeout_count(&mut self, timeout_count: ::models::ConfigNodePropertyInteger) {
    self.timeout_count = Some(timeout_count);
  }

  pub fn with_timeout_count(mut self, timeout_count: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    self.timeout_count = Some(timeout_count);
    self
  }

  pub fn timeout_count(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.timeout_count.as_ref()
  }

  pub fn reset_timeout_count(&mut self) {
    self.timeout_count = None;
  }

}



