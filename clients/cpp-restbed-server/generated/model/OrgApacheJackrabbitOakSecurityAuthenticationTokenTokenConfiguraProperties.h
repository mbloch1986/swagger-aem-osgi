/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.h
 *
 * 
 */

#ifndef OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_
#define OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties
{
public:
    OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties();
    virtual ~OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTokenExpiration() const;
    void setTokenExpiration(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTokenLength() const;
    void setTokenLength(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getTokenRefresh() const;
    void setTokenRefresh(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getTokenCleanupThreshold() const;
    void setTokenCleanupThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPasswordHashAlgorithm() const;
    void setPasswordHashAlgorithm(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordHashIterations() const;
    void setPasswordHashIterations(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordSaltSize() const;
    void setPasswordSaltSize(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_TokenExpiration;
    std::shared_ptr<ConfigNodePropertyString> m_TokenLength;
    std::shared_ptr<ConfigNodePropertyBoolean> m_TokenRefresh;
    std::shared_ptr<ConfigNodePropertyInteger> m_TokenCleanupThreshold;
    std::shared_ptr<ConfigNodePropertyString> m_PasswordHashAlgorithm;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordHashIterations;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordSaltSize;
};

}
}
}
}

#endif /* OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_ */
