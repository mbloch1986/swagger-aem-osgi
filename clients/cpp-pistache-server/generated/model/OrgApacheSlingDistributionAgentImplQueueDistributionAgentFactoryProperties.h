/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties_H_
#define OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties
    : public ModelBase
{
public:
    OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties();
    virtual ~OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getName() const;
    void setName(ConfigNodePropertyString const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getTitle() const;
    void setTitle(ConfigNodePropertyString const& value);
    bool titleIsSet() const;
    void unsetTitle();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getDetails() const;
    void setDetails(ConfigNodePropertyString const& value);
    bool detailsIsSet() const;
    void unsetDetails();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getEnabled() const;
    void setEnabled(ConfigNodePropertyBoolean const& value);
    bool enabledIsSet() const;
    void unsetEnabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getServiceName() const;
    void setServiceName(ConfigNodePropertyString const& value);
    bool serviceNameIsSet() const;
    void unsetServiceName();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getLogLevel() const;
    void setLogLevel(ConfigNodePropertyDropDown const& value);
    bool logLevelIsSet() const;
    void unsetLog_level();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getAllowedRoots() const;
    void setAllowedRoots(ConfigNodePropertyArray const& value);
    bool allowedRootsIsSet() const;
    void unsetAllowed_roots();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getRequestAuthorizationStrategyTarget() const;
    void setRequestAuthorizationStrategyTarget(ConfigNodePropertyString const& value);
    bool requestAuthorizationStrategyTargetIsSet() const;
    void unsetRequestAuthorizationStrategy_target();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getQueueProviderFactoryTarget() const;
    void setQueueProviderFactoryTarget(ConfigNodePropertyString const& value);
    bool queueProviderFactoryTargetIsSet() const;
    void unsetQueueProviderFactory_target();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getPackageBuilderTarget() const;
    void setPackageBuilderTarget(ConfigNodePropertyString const& value);
    bool packageBuilderTargetIsSet() const;
    void unsetPackageBuilder_target();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getTriggersTarget() const;
    void setTriggersTarget(ConfigNodePropertyString const& value);
    bool triggersTargetIsSet() const;
    void unsetTriggers_target();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getPriorityQueues() const;
    void setPriorityQueues(ConfigNodePropertyArray const& value);
    bool priorityQueuesIsSet() const;
    void unsetPriorityQueues();

protected:
    ConfigNodePropertyString m_Name;
    bool m_NameIsSet;
    ConfigNodePropertyString m_Title;
    bool m_TitleIsSet;
    ConfigNodePropertyString m_Details;
    bool m_DetailsIsSet;
    ConfigNodePropertyBoolean m_Enabled;
    bool m_EnabledIsSet;
    ConfigNodePropertyString m_ServiceName;
    bool m_ServiceNameIsSet;
    ConfigNodePropertyDropDown m_Log_level;
    bool m_Log_levelIsSet;
    ConfigNodePropertyArray m_Allowed_roots;
    bool m_Allowed_rootsIsSet;
    ConfigNodePropertyString m_RequestAuthorizationStrategy_target;
    bool m_RequestAuthorizationStrategy_targetIsSet;
    ConfigNodePropertyString m_QueueProviderFactory_target;
    bool m_QueueProviderFactory_targetIsSet;
    ConfigNodePropertyString m_PackageBuilder_target;
    bool m_PackageBuilder_targetIsSet;
    ConfigNodePropertyString m_Triggers_target;
    bool m_Triggers_targetIsSet;
    ConfigNodePropertyArray m_PriorityQueues;
    bool m_PriorityQueuesIsSet;
};

}
}
}
}

#endif /* OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties_H_ */
