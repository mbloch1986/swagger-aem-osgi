/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraemosgi4j.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyArray;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyBoolean;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyDropDown;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyFloat;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyInteger;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyString;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
 */
public class ComAdobeCqScreensMqActivemqImplArtemisJMSProviderPropertiesTest {
    private final ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties model = new ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();

    /**
     * Model tests for ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
     */
    @Test
    public void testComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties() {
        // TODO: test ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
    }

    /**
     * Test the property 'serviceRanking'
     */
    @Test
    public void serviceRankingTest() {
        // TODO: test serviceRanking
    }

    /**
     * Test the property 'globalSize'
     */
    @Test
    public void globalSizeTest() {
        // TODO: test globalSize
    }

    /**
     * Test the property 'maxDiskUsage'
     */
    @Test
    public void maxDiskUsageTest() {
        // TODO: test maxDiskUsage
    }

    /**
     * Test the property 'persistenceEnabled'
     */
    @Test
    public void persistenceEnabledTest() {
        // TODO: test persistenceEnabled
    }

    /**
     * Test the property 'threadPoolMaxSize'
     */
    @Test
    public void threadPoolMaxSizeTest() {
        // TODO: test threadPoolMaxSize
    }

    /**
     * Test the property 'scheduledThreadPoolMaxSize'
     */
    @Test
    public void scheduledThreadPoolMaxSizeTest() {
        // TODO: test scheduledThreadPoolMaxSize
    }

    /**
     * Test the property 'gracefulShutdownTimeout'
     */
    @Test
    public void gracefulShutdownTimeoutTest() {
        // TODO: test gracefulShutdownTimeout
    }

    /**
     * Test the property 'queues'
     */
    @Test
    public void queuesTest() {
        // TODO: test queues
    }

    /**
     * Test the property 'topics'
     */
    @Test
    public void topicsTest() {
        // TODO: test topics
    }

    /**
     * Test the property 'addressesMaxDeliveryAttempts'
     */
    @Test
    public void addressesMaxDeliveryAttemptsTest() {
        // TODO: test addressesMaxDeliveryAttempts
    }

    /**
     * Test the property 'addressesExpiryDelay'
     */
    @Test
    public void addressesExpiryDelayTest() {
        // TODO: test addressesExpiryDelay
    }

    /**
     * Test the property 'addressesAddressFullMessagePolicy'
     */
    @Test
    public void addressesAddressFullMessagePolicyTest() {
        // TODO: test addressesAddressFullMessagePolicy
    }

    /**
     * Test the property 'addressesMaxSizeBytes'
     */
    @Test
    public void addressesMaxSizeBytesTest() {
        // TODO: test addressesMaxSizeBytes
    }

    /**
     * Test the property 'addressesPageSizeBytes'
     */
    @Test
    public void addressesPageSizeBytesTest() {
        // TODO: test addressesPageSizeBytes
    }

    /**
     * Test the property 'addressesPageCacheMaxSize'
     */
    @Test
    public void addressesPageCacheMaxSizeTest() {
        // TODO: test addressesPageCacheMaxSize
    }

    /**
     * Test the property 'clusterUser'
     */
    @Test
    public void clusterUserTest() {
        // TODO: test clusterUser
    }

    /**
     * Test the property 'clusterPassword'
     */
    @Test
    public void clusterPasswordTest() {
        // TODO: test clusterPassword
    }

    /**
     * Test the property 'clusterCallTimeout'
     */
    @Test
    public void clusterCallTimeoutTest() {
        // TODO: test clusterCallTimeout
    }

    /**
     * Test the property 'clusterCallFailoverTimeout'
     */
    @Test
    public void clusterCallFailoverTimeoutTest() {
        // TODO: test clusterCallFailoverTimeout
    }

    /**
     * Test the property 'clusterClientFailureCheckPeriod'
     */
    @Test
    public void clusterClientFailureCheckPeriodTest() {
        // TODO: test clusterClientFailureCheckPeriod
    }

    /**
     * Test the property 'clusterNotificationAttempts'
     */
    @Test
    public void clusterNotificationAttemptsTest() {
        // TODO: test clusterNotificationAttempts
    }

    /**
     * Test the property 'clusterNotificationInterval'
     */
    @Test
    public void clusterNotificationIntervalTest() {
        // TODO: test clusterNotificationInterval
    }

    /**
     * Test the property 'idCacheSize'
     */
    @Test
    public void idCacheSizeTest() {
        // TODO: test idCacheSize
    }

    /**
     * Test the property 'clusterConfirmationWindowSize'
     */
    @Test
    public void clusterConfirmationWindowSizeTest() {
        // TODO: test clusterConfirmationWindowSize
    }

    /**
     * Test the property 'clusterConnectionTtl'
     */
    @Test
    public void clusterConnectionTtlTest() {
        // TODO: test clusterConnectionTtl
    }

    /**
     * Test the property 'clusterDuplicateDetection'
     */
    @Test
    public void clusterDuplicateDetectionTest() {
        // TODO: test clusterDuplicateDetection
    }

    /**
     * Test the property 'clusterInitialConnectAttempts'
     */
    @Test
    public void clusterInitialConnectAttemptsTest() {
        // TODO: test clusterInitialConnectAttempts
    }

    /**
     * Test the property 'clusterMaxRetryInterval'
     */
    @Test
    public void clusterMaxRetryIntervalTest() {
        // TODO: test clusterMaxRetryInterval
    }

    /**
     * Test the property 'clusterMinLargeMessageSize'
     */
    @Test
    public void clusterMinLargeMessageSizeTest() {
        // TODO: test clusterMinLargeMessageSize
    }

    /**
     * Test the property 'clusterProducerWindowSize'
     */
    @Test
    public void clusterProducerWindowSizeTest() {
        // TODO: test clusterProducerWindowSize
    }

    /**
     * Test the property 'clusterReconnectAttempts'
     */
    @Test
    public void clusterReconnectAttemptsTest() {
        // TODO: test clusterReconnectAttempts
    }

    /**
     * Test the property 'clusterRetryInterval'
     */
    @Test
    public void clusterRetryIntervalTest() {
        // TODO: test clusterRetryInterval
    }

    /**
     * Test the property 'clusterRetryIntervalMultiplier'
     */
    @Test
    public void clusterRetryIntervalMultiplierTest() {
        // TODO: test clusterRetryIntervalMultiplier
    }

}
