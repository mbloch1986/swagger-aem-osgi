/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties :  IEquatable<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties" /> class.
        /// </summary>
        /// <param name="parameterWhitelist">parameterWhitelist.</param>
        /// <param name="parameterWhitelistPrefixes">parameterWhitelistPrefixes.</param>
        /// <param name="binaryParameterWhitelist">binaryParameterWhitelist.</param>
        /// <param name="modifierWhitelist">modifierWhitelist.</param>
        /// <param name="operationWhitelist">operationWhitelist.</param>
        /// <param name="operationWhitelistPrefixes">operationWhitelistPrefixes.</param>
        /// <param name="typehintWhitelist">typehintWhitelist.</param>
        /// <param name="resourcetypeWhitelist">resourcetypeWhitelist.</param>
        public ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties(ConfigNodePropertyArray parameterWhitelist = default(ConfigNodePropertyArray), ConfigNodePropertyArray parameterWhitelistPrefixes = default(ConfigNodePropertyArray), ConfigNodePropertyArray binaryParameterWhitelist = default(ConfigNodePropertyArray), ConfigNodePropertyArray modifierWhitelist = default(ConfigNodePropertyArray), ConfigNodePropertyArray operationWhitelist = default(ConfigNodePropertyArray), ConfigNodePropertyArray operationWhitelistPrefixes = default(ConfigNodePropertyArray), ConfigNodePropertyArray typehintWhitelist = default(ConfigNodePropertyArray), ConfigNodePropertyArray resourcetypeWhitelist = default(ConfigNodePropertyArray))
        {
            this.ParameterWhitelist = parameterWhitelist;
            this.ParameterWhitelistPrefixes = parameterWhitelistPrefixes;
            this.BinaryParameterWhitelist = binaryParameterWhitelist;
            this.ModifierWhitelist = modifierWhitelist;
            this.OperationWhitelist = operationWhitelist;
            this.OperationWhitelistPrefixes = operationWhitelistPrefixes;
            this.TypehintWhitelist = typehintWhitelist;
            this.ResourcetypeWhitelist = resourcetypeWhitelist;
        }
        
        /// <summary>
        /// Gets or Sets ParameterWhitelist
        /// </summary>
        [DataMember(Name="parameter.whitelist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ParameterWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets ParameterWhitelistPrefixes
        /// </summary>
        [DataMember(Name="parameter.whitelist.prefixes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ParameterWhitelistPrefixes { get; set; }

        /// <summary>
        /// Gets or Sets BinaryParameterWhitelist
        /// </summary>
        [DataMember(Name="binary.parameter.whitelist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray BinaryParameterWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets ModifierWhitelist
        /// </summary>
        [DataMember(Name="modifier.whitelist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ModifierWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets OperationWhitelist
        /// </summary>
        [DataMember(Name="operation.whitelist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray OperationWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets OperationWhitelistPrefixes
        /// </summary>
        [DataMember(Name="operation.whitelist.prefixes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray OperationWhitelistPrefixes { get; set; }

        /// <summary>
        /// Gets or Sets TypehintWhitelist
        /// </summary>
        [DataMember(Name="typehint.whitelist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray TypehintWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets ResourcetypeWhitelist
        /// </summary>
        [DataMember(Name="resourcetype.whitelist", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ResourcetypeWhitelist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {\n");
            sb.Append("  ParameterWhitelist: ").Append(ParameterWhitelist).Append("\n");
            sb.Append("  ParameterWhitelistPrefixes: ").Append(ParameterWhitelistPrefixes).Append("\n");
            sb.Append("  BinaryParameterWhitelist: ").Append(BinaryParameterWhitelist).Append("\n");
            sb.Append("  ModifierWhitelist: ").Append(ModifierWhitelist).Append("\n");
            sb.Append("  OperationWhitelist: ").Append(OperationWhitelist).Append("\n");
            sb.Append("  OperationWhitelistPrefixes: ").Append(OperationWhitelistPrefixes).Append("\n");
            sb.Append("  TypehintWhitelist: ").Append(TypehintWhitelist).Append("\n");
            sb.Append("  ResourcetypeWhitelist: ").Append(ResourcetypeWhitelist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParameterWhitelist == input.ParameterWhitelist ||
                    (this.ParameterWhitelist != null &&
                    this.ParameterWhitelist.Equals(input.ParameterWhitelist))
                ) && 
                (
                    this.ParameterWhitelistPrefixes == input.ParameterWhitelistPrefixes ||
                    (this.ParameterWhitelistPrefixes != null &&
                    this.ParameterWhitelistPrefixes.Equals(input.ParameterWhitelistPrefixes))
                ) && 
                (
                    this.BinaryParameterWhitelist == input.BinaryParameterWhitelist ||
                    (this.BinaryParameterWhitelist != null &&
                    this.BinaryParameterWhitelist.Equals(input.BinaryParameterWhitelist))
                ) && 
                (
                    this.ModifierWhitelist == input.ModifierWhitelist ||
                    (this.ModifierWhitelist != null &&
                    this.ModifierWhitelist.Equals(input.ModifierWhitelist))
                ) && 
                (
                    this.OperationWhitelist == input.OperationWhitelist ||
                    (this.OperationWhitelist != null &&
                    this.OperationWhitelist.Equals(input.OperationWhitelist))
                ) && 
                (
                    this.OperationWhitelistPrefixes == input.OperationWhitelistPrefixes ||
                    (this.OperationWhitelistPrefixes != null &&
                    this.OperationWhitelistPrefixes.Equals(input.OperationWhitelistPrefixes))
                ) && 
                (
                    this.TypehintWhitelist == input.TypehintWhitelist ||
                    (this.TypehintWhitelist != null &&
                    this.TypehintWhitelist.Equals(input.TypehintWhitelist))
                ) && 
                (
                    this.ResourcetypeWhitelist == input.ResourcetypeWhitelist ||
                    (this.ResourcetypeWhitelist != null &&
                    this.ResourcetypeWhitelist.Equals(input.ResourcetypeWhitelist))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParameterWhitelist != null)
                    hashCode = hashCode * 59 + this.ParameterWhitelist.GetHashCode();
                if (this.ParameterWhitelistPrefixes != null)
                    hashCode = hashCode * 59 + this.ParameterWhitelistPrefixes.GetHashCode();
                if (this.BinaryParameterWhitelist != null)
                    hashCode = hashCode * 59 + this.BinaryParameterWhitelist.GetHashCode();
                if (this.ModifierWhitelist != null)
                    hashCode = hashCode * 59 + this.ModifierWhitelist.GetHashCode();
                if (this.OperationWhitelist != null)
                    hashCode = hashCode * 59 + this.OperationWhitelist.GetHashCode();
                if (this.OperationWhitelistPrefixes != null)
                    hashCode = hashCode * 59 + this.OperationWhitelistPrefixes.GetHashCode();
                if (this.TypehintWhitelist != null)
                    hashCode = hashCode * 59 + this.TypehintWhitelist.GetHashCode();
                if (this.ResourcetypeWhitelist != null)
                    hashCode = hashCode * 59 + this.ResourcetypeWhitelist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
