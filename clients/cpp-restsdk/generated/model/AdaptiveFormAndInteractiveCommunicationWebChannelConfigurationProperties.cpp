/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties()
{
    m_ShowPlaceholderIsSet = false;
    m_MaximumCacheEntriesIsSet = false;
    m_Af_scripting_compatversionIsSet = false;
    m_MakeFileNameUniqueIsSet = false;
    m_GeneratingCompliantDataIsSet = false;
}

AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::~AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties()
{
}

void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::validate()
{
    // TODO: implement validation
}

web::json::value AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ShowPlaceholderIsSet)
    {
        val[utility::conversions::to_string_t("showPlaceholder")] = ModelBase::toJson(m_ShowPlaceholder);
    }
    if(m_MaximumCacheEntriesIsSet)
    {
        val[utility::conversions::to_string_t("maximumCacheEntries")] = ModelBase::toJson(m_MaximumCacheEntries);
    }
    if(m_Af_scripting_compatversionIsSet)
    {
        val[utility::conversions::to_string_t("af.scripting.compatversion")] = ModelBase::toJson(m_Af_scripting_compatversion);
    }
    if(m_MakeFileNameUniqueIsSet)
    {
        val[utility::conversions::to_string_t("makeFileNameUnique")] = ModelBase::toJson(m_MakeFileNameUnique);
    }
    if(m_GeneratingCompliantDataIsSet)
    {
        val[utility::conversions::to_string_t("generatingCompliantData")] = ModelBase::toJson(m_GeneratingCompliantData);
    }

    return val;
}

void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("showPlaceholder")))
    {
        if(!val[utility::conversions::to_string_t("showPlaceholder")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("showPlaceholder")]);
            setShowPlaceholder( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maximumCacheEntries")))
    {
        if(!val[utility::conversions::to_string_t("maximumCacheEntries")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maximumCacheEntries")]);
            setMaximumCacheEntries( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("af.scripting.compatversion")))
    {
        if(!val[utility::conversions::to_string_t("af.scripting.compatversion")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("af.scripting.compatversion")]);
            setAfScriptingCompatversion( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("makeFileNameUnique")))
    {
        if(!val[utility::conversions::to_string_t("makeFileNameUnique")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("makeFileNameUnique")]);
            setMakeFileNameUnique( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("generatingCompliantData")))
    {
        if(!val[utility::conversions::to_string_t("generatingCompliantData")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("generatingCompliantData")]);
            setGeneratingCompliantData( newItem );
        }
    }
}

void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ShowPlaceholderIsSet)
    {
        if (m_ShowPlaceholder.get())
        {
            m_ShowPlaceholder->toMultipart(multipart, utility::conversions::to_string_t("showPlaceholder."));
        }
    }
    if(m_MaximumCacheEntriesIsSet)
    {
        if (m_MaximumCacheEntries.get())
        {
            m_MaximumCacheEntries->toMultipart(multipart, utility::conversions::to_string_t("maximumCacheEntries."));
        }
    }
    if(m_Af_scripting_compatversionIsSet)
    {
        if (m_Af_scripting_compatversion.get())
        {
            m_Af_scripting_compatversion->toMultipart(multipart, utility::conversions::to_string_t("af.scripting.compatversion."));
        }
    }
    if(m_MakeFileNameUniqueIsSet)
    {
        if (m_MakeFileNameUnique.get())
        {
            m_MakeFileNameUnique->toMultipart(multipart, utility::conversions::to_string_t("makeFileNameUnique."));
        }
    }
    if(m_GeneratingCompliantDataIsSet)
    {
        if (m_GeneratingCompliantData.get())
        {
            m_GeneratingCompliantData->toMultipart(multipart, utility::conversions::to_string_t("generatingCompliantData."));
        }
    }
}

void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("showPlaceholder")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("showPlaceholder")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("showPlaceholder."));
            setShowPlaceholder( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maximumCacheEntries")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maximumCacheEntries")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maximumCacheEntries."));
            setMaximumCacheEntries( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("af.scripting.compatversion")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("af.scripting.compatversion")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("af.scripting.compatversion."));
            setAfScriptingCompatversion( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("makeFileNameUnique")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("makeFileNameUnique")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("makeFileNameUnique."));
            setMakeFileNameUnique( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("generatingCompliantData")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("generatingCompliantData")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("generatingCompliantData."));
            setGeneratingCompliantData( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getShowPlaceholder() const
{
    return m_ShowPlaceholder;
}


void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setShowPlaceholder(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_ShowPlaceholder = value;
    m_ShowPlaceholderIsSet = true;
}
bool AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::showPlaceholderIsSet() const
{
    return m_ShowPlaceholderIsSet;
}

void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::unsetShowPlaceholder()
{
    m_ShowPlaceholderIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getMaximumCacheEntries() const
{
    return m_MaximumCacheEntries;
}


void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setMaximumCacheEntries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaximumCacheEntries = value;
    m_MaximumCacheEntriesIsSet = true;
}
bool AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::maximumCacheEntriesIsSet() const
{
    return m_MaximumCacheEntriesIsSet;
}

void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::unsetMaximumCacheEntries()
{
    m_MaximumCacheEntriesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getAfScriptingCompatversion() const
{
    return m_Af_scripting_compatversion;
}


void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setAfScriptingCompatversion(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Af_scripting_compatversion = value;
    m_Af_scripting_compatversionIsSet = true;
}
bool AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::afScriptingCompatversionIsSet() const
{
    return m_Af_scripting_compatversionIsSet;
}

void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::unsetAf_scripting_compatversion()
{
    m_Af_scripting_compatversionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getMakeFileNameUnique() const
{
    return m_MakeFileNameUnique;
}


void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setMakeFileNameUnique(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_MakeFileNameUnique = value;
    m_MakeFileNameUniqueIsSet = true;
}
bool AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::makeFileNameUniqueIsSet() const
{
    return m_MakeFileNameUniqueIsSet;
}

void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::unsetMakeFileNameUnique()
{
    m_MakeFileNameUniqueIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::getGeneratingCompliantData() const
{
    return m_GeneratingCompliantData;
}


void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::setGeneratingCompliantData(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_GeneratingCompliantData = value;
    m_GeneratingCompliantDataIsSet = true;
}
bool AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::generatingCompliantDataIsSet() const
{
    return m_GeneratingCompliantDataIsSet;
}

void AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties::unsetGeneratingCompliantData()
{
    m_GeneratingCompliantDataIsSet = false;
}

}
}
}
}

