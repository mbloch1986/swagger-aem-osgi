/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties()
{
    m_Event_topicsIsSet = false;
    m_Event_filterIsSet = false;
    m_Translate_listener_typeIsSet = false;
    m_Translate_property_listIsSet = false;
    m_PoolSizeIsSet = false;
    m_MaxPoolSizeIsSet = false;
    m_QueueSizeIsSet = false;
    m_KeepAliveTimeIsSet = false;
    
}

ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::~ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties()
{
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Event_topicsIsSet)
    {
        val["event.topics"] = ModelBase::toJson(m_Event_topics);
    }
    if(m_Event_filterIsSet)
    {
        val["event.filter"] = ModelBase::toJson(m_Event_filter);
    }
    if(m_Translate_listener_typeIsSet)
    {
        val["translate.listener.type"] = ModelBase::toJson(m_Translate_listener_type);
    }
    if(m_Translate_property_listIsSet)
    {
        val["translate.property.list"] = ModelBase::toJson(m_Translate_property_list);
    }
    if(m_PoolSizeIsSet)
    {
        val["poolSize"] = ModelBase::toJson(m_PoolSize);
    }
    if(m_MaxPoolSizeIsSet)
    {
        val["maxPoolSize"] = ModelBase::toJson(m_MaxPoolSize);
    }
    if(m_QueueSizeIsSet)
    {
        val["queueSize"] = ModelBase::toJson(m_QueueSize);
    }
    if(m_KeepAliveTimeIsSet)
    {
        val["keepAliveTime"] = ModelBase::toJson(m_KeepAliveTime);
    }
    

    return val;
}

void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::fromJson(nlohmann::json& val)
{
    if(val.find("event.topics") != val.end())
    {
        if(!val["event.topics"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["event.topics"]);
            setEventTopics( newItem );
        }
        
    }
    if(val.find("event.filter") != val.end())
    {
        if(!val["event.filter"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["event.filter"]);
            setEventFilter( newItem );
        }
        
    }
    if(val.find("translate.listener.type") != val.end())
    {
        if(!val["translate.listener.type"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["translate.listener.type"]);
            setTranslateListenerType( newItem );
        }
        
    }
    if(val.find("translate.property.list") != val.end())
    {
        if(!val["translate.property.list"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["translate.property.list"]);
            setTranslatePropertyList( newItem );
        }
        
    }
    if(val.find("poolSize") != val.end())
    {
        if(!val["poolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["poolSize"]);
            setPoolSize( newItem );
        }
        
    }
    if(val.find("maxPoolSize") != val.end())
    {
        if(!val["maxPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxPoolSize"]);
            setMaxPoolSize( newItem );
        }
        
    }
    if(val.find("queueSize") != val.end())
    {
        if(!val["queueSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["queueSize"]);
            setQueueSize( newItem );
        }
        
    }
    if(val.find("keepAliveTime") != val.end())
    {
        if(!val["keepAliveTime"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["keepAliveTime"]);
            setKeepAliveTime( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getEventTopics() const
{
    return m_Event_topics;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setEventTopics(ConfigNodePropertyString const& value)
{
    m_Event_topics = value;
    m_Event_topicsIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::eventTopicsIsSet() const
{
    return m_Event_topicsIsSet;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetEvent_topics()
{
    m_Event_topicsIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getEventFilter() const
{
    return m_Event_filter;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setEventFilter(ConfigNodePropertyString const& value)
{
    m_Event_filter = value;
    m_Event_filterIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::eventFilterIsSet() const
{
    return m_Event_filterIsSet;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetEvent_filter()
{
    m_Event_filterIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getTranslateListenerType() const
{
    return m_Translate_listener_type;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setTranslateListenerType(ConfigNodePropertyArray const& value)
{
    m_Translate_listener_type = value;
    m_Translate_listener_typeIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::translateListenerTypeIsSet() const
{
    return m_Translate_listener_typeIsSet;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetTranslate_listener_type()
{
    m_Translate_listener_typeIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getTranslatePropertyList() const
{
    return m_Translate_property_list;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setTranslatePropertyList(ConfigNodePropertyArray const& value)
{
    m_Translate_property_list = value;
    m_Translate_property_listIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::translatePropertyListIsSet() const
{
    return m_Translate_property_listIsSet;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetTranslate_property_list()
{
    m_Translate_property_listIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getPoolSize() const
{
    return m_PoolSize;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setPoolSize(ConfigNodePropertyInteger const& value)
{
    m_PoolSize = value;
    m_PoolSizeIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::poolSizeIsSet() const
{
    return m_PoolSizeIsSet;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetPoolSize()
{
    m_PoolSizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getMaxPoolSize() const
{
    return m_MaxPoolSize;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setMaxPoolSize(ConfigNodePropertyInteger const& value)
{
    m_MaxPoolSize = value;
    m_MaxPoolSizeIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::maxPoolSizeIsSet() const
{
    return m_MaxPoolSizeIsSet;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetMaxPoolSize()
{
    m_MaxPoolSizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getQueueSize() const
{
    return m_QueueSize;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setQueueSize(ConfigNodePropertyInteger const& value)
{
    m_QueueSize = value;
    m_QueueSizeIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::queueSizeIsSet() const
{
    return m_QueueSizeIsSet;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetQueueSize()
{
    m_QueueSizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::getKeepAliveTime() const
{
    return m_KeepAliveTime;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::setKeepAliveTime(ConfigNodePropertyInteger const& value)
{
    m_KeepAliveTime = value;
    m_KeepAliveTimeIsSet = true;
}
bool ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::keepAliveTimeIsSet() const
{
    return m_KeepAliveTimeIsSet;
}
void ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties::unsetKeepAliveTime()
{
    m_KeepAliveTimeIsSet = false;
}

}
}
}
}

