/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties() {
    init();
}

OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::~OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties() {
    this->cleanup();
}

void
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::init() {
    aem_mcm_campaign_form_constraints = new OAIConfigNodePropertyArray();
    m_aem_mcm_campaign_form_constraints_isSet = false;
    aem_mcm_campaign_public_url = new OAIConfigNodePropertyString();
    m_aem_mcm_campaign_public_url_isSet = false;
    aem_mcm_campaign_relaxed_ssl = new OAIConfigNodePropertyBoolean();
    m_aem_mcm_campaign_relaxed_ssl_isSet = false;
}

void
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::cleanup() {
    if(aem_mcm_campaign_form_constraints != nullptr) { 
        delete aem_mcm_campaign_form_constraints;
    }
    if(aem_mcm_campaign_public_url != nullptr) { 
        delete aem_mcm_campaign_public_url;
    }
    if(aem_mcm_campaign_relaxed_ssl != nullptr) { 
        delete aem_mcm_campaign_relaxed_ssl;
    }
}

OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties*
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&aem_mcm_campaign_form_constraints, pJson["aem.mcm.campaign.formConstraints"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&aem_mcm_campaign_public_url, pJson["aem.mcm.campaign.publicUrl"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&aem_mcm_campaign_relaxed_ssl, pJson["aem.mcm.campaign.relaxedSSL"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::asJsonObject() {
    QJsonObject obj;
    if((aem_mcm_campaign_form_constraints != nullptr) && (aem_mcm_campaign_form_constraints->isSet())){
        toJsonValue(QString("aem.mcm.campaign.formConstraints"), aem_mcm_campaign_form_constraints, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((aem_mcm_campaign_public_url != nullptr) && (aem_mcm_campaign_public_url->isSet())){
        toJsonValue(QString("aem.mcm.campaign.publicUrl"), aem_mcm_campaign_public_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((aem_mcm_campaign_relaxed_ssl != nullptr) && (aem_mcm_campaign_relaxed_ssl->isSet())){
        toJsonValue(QString("aem.mcm.campaign.relaxedSSL"), aem_mcm_campaign_relaxed_ssl, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::getAemMcmCampaignFormConstraints() {
    return aem_mcm_campaign_form_constraints;
}
void
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::setAemMcmCampaignFormConstraints(OAIConfigNodePropertyArray* aem_mcm_campaign_form_constraints) {
    this->aem_mcm_campaign_form_constraints = aem_mcm_campaign_form_constraints;
    this->m_aem_mcm_campaign_form_constraints_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::getAemMcmCampaignPublicUrl() {
    return aem_mcm_campaign_public_url;
}
void
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::setAemMcmCampaignPublicUrl(OAIConfigNodePropertyString* aem_mcm_campaign_public_url) {
    this->aem_mcm_campaign_public_url = aem_mcm_campaign_public_url;
    this->m_aem_mcm_campaign_public_url_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::getAemMcmCampaignRelaxedSsl() {
    return aem_mcm_campaign_relaxed_ssl;
}
void
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::setAemMcmCampaignRelaxedSsl(OAIConfigNodePropertyBoolean* aem_mcm_campaign_relaxed_ssl) {
    this->aem_mcm_campaign_relaxed_ssl = aem_mcm_campaign_relaxed_ssl;
    this->m_aem_mcm_campaign_relaxed_ssl_isSet = true;
}


bool
OAIComDayCqMcmCampaignImplIntegrationConfigImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(aem_mcm_campaign_form_constraints != nullptr && aem_mcm_campaign_form_constraints->isSet()){ isObjectUpdated = true; break;}
        if(aem_mcm_campaign_public_url != nullptr && aem_mcm_campaign_public_url->isSet()){ isObjectUpdated = true; break;}
        if(aem_mcm_campaign_relaxed_ssl != nullptr && aem_mcm_campaign_relaxed_ssl->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

