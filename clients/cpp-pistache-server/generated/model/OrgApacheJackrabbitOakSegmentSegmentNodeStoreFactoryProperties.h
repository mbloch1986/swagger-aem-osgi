/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties.h
 *
 * 
 */

#ifndef OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties_H_
#define OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties();
    virtual ~OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getRepositoryHome() const;
    void setRepositoryHome(ConfigNodePropertyString const& value);
    bool repositoryHomeIsSet() const;
    void unsetRepository_home();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getTarmkMode() const;
    void setTarmkMode(ConfigNodePropertyString const& value);
    bool tarmkModeIsSet() const;
    void unsetTarmk_mode();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getTarmkSize() const;
    void setTarmkSize(ConfigNodePropertyInteger const& value);
    bool tarmkSizeIsSet() const;
    void unsetTarmk_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getSegmentCacheSize() const;
    void setSegmentCacheSize(ConfigNodePropertyInteger const& value);
    bool segmentCacheSizeIsSet() const;
    void unsetSegmentCache_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getStringCacheSize() const;
    void setStringCacheSize(ConfigNodePropertyInteger const& value);
    bool stringCacheSizeIsSet() const;
    void unsetStringCache_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getTemplateCacheSize() const;
    void setTemplateCacheSize(ConfigNodePropertyInteger const& value);
    bool templateCacheSizeIsSet() const;
    void unsetTemplateCache_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getStringDeduplicationCacheSize() const;
    void setStringDeduplicationCacheSize(ConfigNodePropertyInteger const& value);
    bool stringDeduplicationCacheSizeIsSet() const;
    void unsetStringDeduplicationCache_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getTemplateDeduplicationCacheSize() const;
    void setTemplateDeduplicationCacheSize(ConfigNodePropertyInteger const& value);
    bool templateDeduplicationCacheSizeIsSet() const;
    void unsetTemplateDeduplicationCache_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getNodeDeduplicationCacheSize() const;
    void setNodeDeduplicationCacheSize(ConfigNodePropertyInteger const& value);
    bool nodeDeduplicationCacheSizeIsSet() const;
    void unsetNodeDeduplicationCache_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getPauseCompaction() const;
    void setPauseCompaction(ConfigNodePropertyBoolean const& value);
    bool pauseCompactionIsSet() const;
    void unsetPauseCompaction();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCompactionRetryCount() const;
    void setCompactionRetryCount(ConfigNodePropertyInteger const& value);
    bool compactionRetryCountIsSet() const;
    void unsetCompaction_retryCount();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCompactionForceTimeout() const;
    void setCompactionForceTimeout(ConfigNodePropertyInteger const& value);
    bool compactionForceTimeoutIsSet() const;
    void unsetCompaction_force_timeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCompactionSizeDeltaEstimation() const;
    void setCompactionSizeDeltaEstimation(ConfigNodePropertyInteger const& value);
    bool compactionSizeDeltaEstimationIsSet() const;
    void unsetCompaction_sizeDeltaEstimation();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getCompactionDisableEstimation() const;
    void setCompactionDisableEstimation(ConfigNodePropertyBoolean const& value);
    bool compactionDisableEstimationIsSet() const;
    void unsetCompaction_disableEstimation();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCompactionRetainedGenerations() const;
    void setCompactionRetainedGenerations(ConfigNodePropertyInteger const& value);
    bool compactionRetainedGenerationsIsSet() const;
    void unsetCompaction_retainedGenerations();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCompactionMemoryThreshold() const;
    void setCompactionMemoryThreshold(ConfigNodePropertyInteger const& value);
    bool compactionMemoryThresholdIsSet() const;
    void unsetCompaction_memoryThreshold();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCompactionProgressLog() const;
    void setCompactionProgressLog(ConfigNodePropertyInteger const& value);
    bool compactionProgressLogIsSet() const;
    void unsetCompaction_progressLog();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getStandby() const;
    void setStandby(ConfigNodePropertyBoolean const& value);
    bool standbyIsSet() const;
    void unsetStandby();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getCustomBlobStore() const;
    void setCustomBlobStore(ConfigNodePropertyBoolean const& value);
    bool customBlobStoreIsSet() const;
    void unsetCustomBlobStore();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getCustomSegmentStore() const;
    void setCustomSegmentStore(ConfigNodePropertyBoolean const& value);
    bool customSegmentStoreIsSet() const;
    void unsetCustomSegmentStore();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getSplitPersistence() const;
    void setSplitPersistence(ConfigNodePropertyBoolean const& value);
    bool splitPersistenceIsSet() const;
    void unsetSplitPersistence();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getRepositoryBackupDir() const;
    void setRepositoryBackupDir(ConfigNodePropertyString const& value);
    bool repositoryBackupDirIsSet() const;
    void unsetRepository_backup_dir();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getBlobGcMaxAgeInSecs() const;
    void setBlobGcMaxAgeInSecs(ConfigNodePropertyInteger const& value);
    bool blobGcMaxAgeInSecsIsSet() const;
    void unsetBlobGcMaxAgeInSecs();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getBlobTrackSnapshotIntervalInSecs() const;
    void setBlobTrackSnapshotIntervalInSecs(ConfigNodePropertyInteger const& value);
    bool blobTrackSnapshotIntervalInSecsIsSet() const;
    void unsetBlobTrackSnapshotIntervalInSecs();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getRole() const;
    void setRole(ConfigNodePropertyString const& value);
    bool roleIsSet() const;
    void unsetRole();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getRegisterDescriptors() const;
    void setRegisterDescriptors(ConfigNodePropertyBoolean const& value);
    bool registerDescriptorsIsSet() const;
    void unsetRegisterDescriptors();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getDispatchChanges() const;
    void setDispatchChanges(ConfigNodePropertyBoolean const& value);
    bool dispatchChangesIsSet() const;
    void unsetDispatchChanges();

protected:
    ConfigNodePropertyString m_Repository_home;
    bool m_Repository_homeIsSet;
    ConfigNodePropertyString m_Tarmk_mode;
    bool m_Tarmk_modeIsSet;
    ConfigNodePropertyInteger m_Tarmk_size;
    bool m_Tarmk_sizeIsSet;
    ConfigNodePropertyInteger m_SegmentCache_size;
    bool m_SegmentCache_sizeIsSet;
    ConfigNodePropertyInteger m_StringCache_size;
    bool m_StringCache_sizeIsSet;
    ConfigNodePropertyInteger m_TemplateCache_size;
    bool m_TemplateCache_sizeIsSet;
    ConfigNodePropertyInteger m_StringDeduplicationCache_size;
    bool m_StringDeduplicationCache_sizeIsSet;
    ConfigNodePropertyInteger m_TemplateDeduplicationCache_size;
    bool m_TemplateDeduplicationCache_sizeIsSet;
    ConfigNodePropertyInteger m_NodeDeduplicationCache_size;
    bool m_NodeDeduplicationCache_sizeIsSet;
    ConfigNodePropertyBoolean m_PauseCompaction;
    bool m_PauseCompactionIsSet;
    ConfigNodePropertyInteger m_Compaction_retryCount;
    bool m_Compaction_retryCountIsSet;
    ConfigNodePropertyInteger m_Compaction_force_timeout;
    bool m_Compaction_force_timeoutIsSet;
    ConfigNodePropertyInteger m_Compaction_sizeDeltaEstimation;
    bool m_Compaction_sizeDeltaEstimationIsSet;
    ConfigNodePropertyBoolean m_Compaction_disableEstimation;
    bool m_Compaction_disableEstimationIsSet;
    ConfigNodePropertyInteger m_Compaction_retainedGenerations;
    bool m_Compaction_retainedGenerationsIsSet;
    ConfigNodePropertyInteger m_Compaction_memoryThreshold;
    bool m_Compaction_memoryThresholdIsSet;
    ConfigNodePropertyInteger m_Compaction_progressLog;
    bool m_Compaction_progressLogIsSet;
    ConfigNodePropertyBoolean m_Standby;
    bool m_StandbyIsSet;
    ConfigNodePropertyBoolean m_CustomBlobStore;
    bool m_CustomBlobStoreIsSet;
    ConfigNodePropertyBoolean m_CustomSegmentStore;
    bool m_CustomSegmentStoreIsSet;
    ConfigNodePropertyBoolean m_SplitPersistence;
    bool m_SplitPersistenceIsSet;
    ConfigNodePropertyString m_Repository_backup_dir;
    bool m_Repository_backup_dirIsSet;
    ConfigNodePropertyInteger m_BlobGcMaxAgeInSecs;
    bool m_BlobGcMaxAgeInSecsIsSet;
    ConfigNodePropertyInteger m_BlobTrackSnapshotIntervalInSecs;
    bool m_BlobTrackSnapshotIntervalInSecsIsSet;
    ConfigNodePropertyString m_Role;
    bool m_RoleIsSet;
    ConfigNodePropertyBoolean m_RegisterDescriptors;
    bool m_RegisterDescriptorsIsSet;
    ConfigNodePropertyBoolean m_DispatchChanges;
    bool m_DispatchChangesIsSet;
};

}
}
}
}

#endif /* OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties_H_ */
