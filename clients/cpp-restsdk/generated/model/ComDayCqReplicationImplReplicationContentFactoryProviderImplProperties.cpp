/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties()
{
    m_Replication_content_useFileStorageIsSet = false;
    m_Replication_content_maxCommitAttemptsIsSet = false;
}

ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::~ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties()
{
}

void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Replication_content_useFileStorageIsSet)
    {
        val[utility::conversions::to_string_t("replication.content.useFileStorage")] = ModelBase::toJson(m_Replication_content_useFileStorage);
    }
    if(m_Replication_content_maxCommitAttemptsIsSet)
    {
        val[utility::conversions::to_string_t("replication.content.maxCommitAttempts")] = ModelBase::toJson(m_Replication_content_maxCommitAttempts);
    }

    return val;
}

void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("replication.content.useFileStorage")))
    {
        if(!val[utility::conversions::to_string_t("replication.content.useFileStorage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("replication.content.useFileStorage")]);
            setReplicationContentUseFileStorage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("replication.content.maxCommitAttempts")))
    {
        if(!val[utility::conversions::to_string_t("replication.content.maxCommitAttempts")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("replication.content.maxCommitAttempts")]);
            setReplicationContentMaxCommitAttempts( newItem );
        }
    }
}

void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Replication_content_useFileStorageIsSet)
    {
        if (m_Replication_content_useFileStorage.get())
        {
            m_Replication_content_useFileStorage->toMultipart(multipart, utility::conversions::to_string_t("replication.content.useFileStorage."));
        }
    }
    if(m_Replication_content_maxCommitAttemptsIsSet)
    {
        if (m_Replication_content_maxCommitAttempts.get())
        {
            m_Replication_content_maxCommitAttempts->toMultipart(multipart, utility::conversions::to_string_t("replication.content.maxCommitAttempts."));
        }
    }
}

void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("replication.content.useFileStorage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("replication.content.useFileStorage")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("replication.content.useFileStorage."));
            setReplicationContentUseFileStorage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("replication.content.maxCommitAttempts")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("replication.content.maxCommitAttempts")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("replication.content.maxCommitAttempts."));
            setReplicationContentMaxCommitAttempts( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::getReplicationContentUseFileStorage() const
{
    return m_Replication_content_useFileStorage;
}


void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::setReplicationContentUseFileStorage(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Replication_content_useFileStorage = value;
    m_Replication_content_useFileStorageIsSet = true;
}
bool ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::replicationContentUseFileStorageIsSet() const
{
    return m_Replication_content_useFileStorageIsSet;
}

void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::unsetReplication_content_useFileStorage()
{
    m_Replication_content_useFileStorageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::getReplicationContentMaxCommitAttempts() const
{
    return m_Replication_content_maxCommitAttempts;
}


void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::setReplicationContentMaxCommitAttempts(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Replication_content_maxCommitAttempts = value;
    m_Replication_content_maxCommitAttemptsIsSet = true;
}
bool ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::replicationContentMaxCommitAttemptsIsSet() const
{
    return m_Replication_content_maxCommitAttemptsIsSet;
}

void ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties::unsetReplication_content_maxCommitAttempts()
{
    m_Replication_content_maxCommitAttemptsIsSet = false;
}

}
}
}
}

