/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
  #[serde(rename = "permissionsJr2")]
  permissions_jr2: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "importBehavior")]
  import_behavior: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "readPaths")]
  read_paths: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "administrativePrincipals")]
  administrative_principals: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "configurationRanking")]
  configuration_ranking: Option<::models::ConfigNodePropertyInteger>
}

impl OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
  pub fn new() -> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
    OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
      permissions_jr2: None,
      import_behavior: None,
      read_paths: None,
      administrative_principals: None,
      configuration_ranking: None
    }
  }

  pub fn set_permissions_jr2(&mut self, permissions_jr2: ::models::ConfigNodePropertyDropDown) {
    self.permissions_jr2 = Some(permissions_jr2);
  }

  pub fn with_permissions_jr2(mut self, permissions_jr2: ::models::ConfigNodePropertyDropDown) -> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
    self.permissions_jr2 = Some(permissions_jr2);
    self
  }

  pub fn permissions_jr2(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.permissions_jr2.as_ref()
  }

  pub fn reset_permissions_jr2(&mut self) {
    self.permissions_jr2 = None;
  }

  pub fn set_import_behavior(&mut self, import_behavior: ::models::ConfigNodePropertyDropDown) {
    self.import_behavior = Some(import_behavior);
  }

  pub fn with_import_behavior(mut self, import_behavior: ::models::ConfigNodePropertyDropDown) -> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
    self.import_behavior = Some(import_behavior);
    self
  }

  pub fn import_behavior(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.import_behavior.as_ref()
  }

  pub fn reset_import_behavior(&mut self) {
    self.import_behavior = None;
  }

  pub fn set_read_paths(&mut self, read_paths: ::models::ConfigNodePropertyArray) {
    self.read_paths = Some(read_paths);
  }

  pub fn with_read_paths(mut self, read_paths: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
    self.read_paths = Some(read_paths);
    self
  }

  pub fn read_paths(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.read_paths.as_ref()
  }

  pub fn reset_read_paths(&mut self) {
    self.read_paths = None;
  }

  pub fn set_administrative_principals(&mut self, administrative_principals: ::models::ConfigNodePropertyArray) {
    self.administrative_principals = Some(administrative_principals);
  }

  pub fn with_administrative_principals(mut self, administrative_principals: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
    self.administrative_principals = Some(administrative_principals);
    self
  }

  pub fn administrative_principals(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.administrative_principals.as_ref()
  }

  pub fn reset_administrative_principals(&mut self) {
    self.administrative_principals = None;
  }

  pub fn set_configuration_ranking(&mut self, configuration_ranking: ::models::ConfigNodePropertyInteger) {
    self.configuration_ranking = Some(configuration_ranking);
  }

  pub fn with_configuration_ranking(mut self, configuration_ranking: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
    self.configuration_ranking = Some(configuration_ranking);
    self
  }

  pub fn configuration_ranking(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.configuration_ranking.as_ref()
  }

  pub fn reset_configuration_ranking(&mut self) {
    self.configuration_ranking = None;
  }

}



