/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties {
  #[serde(rename = "whitelist.name")]
  whitelist_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "whitelist.bundles")]
  whitelist_bundles: Option<::models::ConfigNodePropertyArray>
}

impl OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties {
  pub fn new() -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties {
    OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties {
      whitelist_name: None,
      whitelist_bundles: None
    }
  }

  pub fn set_whitelist_name(&mut self, whitelist_name: ::models::ConfigNodePropertyString) {
    self.whitelist_name = Some(whitelist_name);
  }

  pub fn with_whitelist_name(mut self, whitelist_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties {
    self.whitelist_name = Some(whitelist_name);
    self
  }

  pub fn whitelist_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.whitelist_name.as_ref()
  }

  pub fn reset_whitelist_name(&mut self) {
    self.whitelist_name = None;
  }

  pub fn set_whitelist_bundles(&mut self, whitelist_bundles: ::models::ConfigNodePropertyArray) {
    self.whitelist_bundles = Some(whitelist_bundles);
  }

  pub fn with_whitelist_bundles(mut self, whitelist_bundles: ::models::ConfigNodePropertyArray) -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties {
    self.whitelist_bundles = Some(whitelist_bundles);
    self
  }

  pub fn whitelist_bundles(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.whitelist_bundles.as_ref()
  }

  pub fn reset_whitelist_bundles(&mut self) {
    self.whitelist_bundles = None;
  }

}



