/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NodeSwaggerAemOsgi);
  }
}(this, function(expect, NodeSwaggerAemOsgi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties', function() {
    it('should create an instance of ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties', function() {
      // uncomment below and update the code to test ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be.a(NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties);
    });

    it('should have the property messageProperties (base name: "message.properties")', function() {
      // uncomment below and update the code to test the property messageProperties
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property messageBoxSizeLimit (base name: "messageBoxSizeLimit")', function() {
      // uncomment below and update the code to test the property messageBoxSizeLimit
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property messageCountLimit (base name: "messageCountLimit")', function() {
      // uncomment below and update the code to test the property messageCountLimit
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property notifyFailure (base name: "notifyFailure")', function() {
      // uncomment below and update the code to test the property notifyFailure
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property failureMessageFrom (base name: "failureMessageFrom")', function() {
      // uncomment below and update the code to test the property failureMessageFrom
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property failureTemplatePath (base name: "failureTemplatePath")', function() {
      // uncomment below and update the code to test the property failureTemplatePath
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxRetries (base name: "maxRetries")', function() {
      // uncomment below and update the code to test the property maxRetries
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property minWaitBetweenRetries (base name: "minWaitBetweenRetries")', function() {
      // uncomment below and update the code to test the property minWaitBetweenRetries
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property countUpdatePoolSize (base name: "countUpdatePoolSize")', function() {
      // uncomment below and update the code to test the property countUpdatePoolSize
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property inboxPath (base name: "inbox.path")', function() {
      // uncomment below and update the code to test the property inboxPath
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property sentitemsPath (base name: "sentitems.path")', function() {
      // uncomment below and update the code to test the property sentitemsPath
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property supportAttachments (base name: "supportAttachments")', function() {
      // uncomment below and update the code to test the property supportAttachments
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property supportGroupMessaging (base name: "supportGroupMessaging")', function() {
      // uncomment below and update the code to test the property supportGroupMessaging
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxTotalRecipients (base name: "maxTotalRecipients")', function() {
      // uncomment below and update the code to test the property maxTotalRecipients
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property batchSize (base name: "batchSize")', function() {
      // uncomment below and update the code to test the property batchSize
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxTotalAttachmentSize (base name: "maxTotalAttachmentSize")', function() {
      // uncomment below and update the code to test the property maxTotalAttachmentSize
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property attachmentTypeBlacklist (base name: "attachmentTypeBlacklist")', function() {
      // uncomment below and update the code to test the property attachmentTypeBlacklist
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property allowedAttachmentTypes (base name: "allowedAttachmentTypes")', function() {
      // uncomment below and update the code to test the property allowedAttachmentTypes
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property serviceSelector (base name: "serviceSelector")', function() {
      // uncomment below and update the code to test the property serviceSelector
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

    it('should have the property fieldWhitelist (base name: "fieldWhitelist")', function() {
      // uncomment below and update the code to test the property fieldWhitelist
      //var instane = new NodeSwaggerAemOsgi.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationsServiceImplProperties();
      //expect(instance).to.be();
    });

  });

}));
