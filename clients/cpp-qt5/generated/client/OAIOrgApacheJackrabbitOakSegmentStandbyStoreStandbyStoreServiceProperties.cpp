/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties() {
    init();
}

OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::~OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::init() {
    org_apache_sling_installer_configuration_persist = new OAIConfigNodePropertyBoolean();
    m_org_apache_sling_installer_configuration_persist_isSet = false;
    mode = new OAIConfigNodePropertyDropDown();
    m_mode_isSet = false;
    port = new OAIConfigNodePropertyInteger();
    m_port_isSet = false;
    primary_host = new OAIConfigNodePropertyString();
    m_primary_host_isSet = false;
    interval = new OAIConfigNodePropertyInteger();
    m_interval_isSet = false;
    primary_allowed_client_ip_ranges = new OAIConfigNodePropertyArray();
    m_primary_allowed_client_ip_ranges_isSet = false;
    secure = new OAIConfigNodePropertyBoolean();
    m_secure_isSet = false;
    standby_readtimeout = new OAIConfigNodePropertyInteger();
    m_standby_readtimeout_isSet = false;
    standby_autoclean = new OAIConfigNodePropertyBoolean();
    m_standby_autoclean_isSet = false;
}

void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::cleanup() {
    if(org_apache_sling_installer_configuration_persist != nullptr) { 
        delete org_apache_sling_installer_configuration_persist;
    }
    if(mode != nullptr) { 
        delete mode;
    }
    if(port != nullptr) { 
        delete port;
    }
    if(primary_host != nullptr) { 
        delete primary_host;
    }
    if(interval != nullptr) { 
        delete interval;
    }
    if(primary_allowed_client_ip_ranges != nullptr) { 
        delete primary_allowed_client_ip_ranges;
    }
    if(secure != nullptr) { 
        delete secure;
    }
    if(standby_readtimeout != nullptr) { 
        delete standby_readtimeout;
    }
    if(standby_autoclean != nullptr) { 
        delete standby_autoclean;
    }
}

OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties*
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&org_apache_sling_installer_configuration_persist, pJson["org.apache.sling.installer.configuration.persist"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&mode, pJson["mode"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&port, pJson["port"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&primary_host, pJson["primary.host"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&interval, pJson["interval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&primary_allowed_client_ip_ranges, pJson["primary.allowed-client-ip-ranges"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&secure, pJson["secure"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&standby_readtimeout, pJson["standby.readtimeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&standby_autoclean, pJson["standby.autoclean"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((org_apache_sling_installer_configuration_persist != nullptr) && (org_apache_sling_installer_configuration_persist->isSet())){
        toJsonValue(QString("org.apache.sling.installer.configuration.persist"), org_apache_sling_installer_configuration_persist, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((mode != nullptr) && (mode->isSet())){
        toJsonValue(QString("mode"), mode, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((port != nullptr) && (port->isSet())){
        toJsonValue(QString("port"), port, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((primary_host != nullptr) && (primary_host->isSet())){
        toJsonValue(QString("primary.host"), primary_host, obj, QString("OAIConfigNodePropertyString"));
    }
    if((interval != nullptr) && (interval->isSet())){
        toJsonValue(QString("interval"), interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((primary_allowed_client_ip_ranges != nullptr) && (primary_allowed_client_ip_ranges->isSet())){
        toJsonValue(QString("primary.allowed-client-ip-ranges"), primary_allowed_client_ip_ranges, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((secure != nullptr) && (secure->isSet())){
        toJsonValue(QString("secure"), secure, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((standby_readtimeout != nullptr) && (standby_readtimeout->isSet())){
        toJsonValue(QString("standby.readtimeout"), standby_readtimeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((standby_autoclean != nullptr) && (standby_autoclean->isSet())){
        toJsonValue(QString("standby.autoclean"), standby_autoclean, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getOrgApacheSlingInstallerConfigurationPersist() {
    return org_apache_sling_installer_configuration_persist;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setOrgApacheSlingInstallerConfigurationPersist(OAIConfigNodePropertyBoolean* org_apache_sling_installer_configuration_persist) {
    this->org_apache_sling_installer_configuration_persist = org_apache_sling_installer_configuration_persist;
    this->m_org_apache_sling_installer_configuration_persist_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getMode() {
    return mode;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setMode(OAIConfigNodePropertyDropDown* mode) {
    this->mode = mode;
    this->m_mode_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPort() {
    return port;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPort(OAIConfigNodePropertyInteger* port) {
    this->port = port;
    this->m_port_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPrimaryHost() {
    return primary_host;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPrimaryHost(OAIConfigNodePropertyString* primary_host) {
    this->primary_host = primary_host;
    this->m_primary_host_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getInterval() {
    return interval;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setInterval(OAIConfigNodePropertyInteger* interval) {
    this->interval = interval;
    this->m_interval_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getPrimaryAllowedClientIpRanges() {
    return primary_allowed_client_ip_ranges;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setPrimaryAllowedClientIpRanges(OAIConfigNodePropertyArray* primary_allowed_client_ip_ranges) {
    this->primary_allowed_client_ip_ranges = primary_allowed_client_ip_ranges;
    this->m_primary_allowed_client_ip_ranges_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getSecure() {
    return secure;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setSecure(OAIConfigNodePropertyBoolean* secure) {
    this->secure = secure;
    this->m_secure_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getStandbyReadtimeout() {
    return standby_readtimeout;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setStandbyReadtimeout(OAIConfigNodePropertyInteger* standby_readtimeout) {
    this->standby_readtimeout = standby_readtimeout;
    this->m_standby_readtimeout_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::getStandbyAutoclean() {
    return standby_autoclean;
}
void
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::setStandbyAutoclean(OAIConfigNodePropertyBoolean* standby_autoclean) {
    this->standby_autoclean = standby_autoclean;
    this->m_standby_autoclean_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(org_apache_sling_installer_configuration_persist != nullptr && org_apache_sling_installer_configuration_persist->isSet()){ isObjectUpdated = true; break;}
        if(mode != nullptr && mode->isSet()){ isObjectUpdated = true; break;}
        if(port != nullptr && port->isSet()){ isObjectUpdated = true; break;}
        if(primary_host != nullptr && primary_host->isSet()){ isObjectUpdated = true; break;}
        if(interval != nullptr && interval->isSet()){ isObjectUpdated = true; break;}
        if(primary_allowed_client_ip_ranges != nullptr && primary_allowed_client_ip_ranges->isSet()){ isObjectUpdated = true; break;}
        if(secure != nullptr && secure->isSet()){ isObjectUpdated = true; break;}
        if(standby_readtimeout != nullptr && standby_readtimeout->isSet()){ isObjectUpdated = true; break;}
        if(standby_autoclean != nullptr && standby_autoclean->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

