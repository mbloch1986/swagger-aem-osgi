/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties :  IEquatable<OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties" /> class.
        /// </summary>
        /// <param name="jasperCompilerTargetVM">jasperCompilerTargetVM.</param>
        /// <param name="jasperCompilerSourceVM">jasperCompilerSourceVM.</param>
        /// <param name="jasperClassdebuginfo">jasperClassdebuginfo.</param>
        /// <param name="jasperEnablePooling">jasperEnablePooling.</param>
        /// <param name="jasperIeClassId">jasperIeClassId.</param>
        /// <param name="jasperGenStringAsCharArray">jasperGenStringAsCharArray.</param>
        /// <param name="jasperKeepgenerated">jasperKeepgenerated.</param>
        /// <param name="jasperMappedfile">jasperMappedfile.</param>
        /// <param name="jasperTrimSpaces">jasperTrimSpaces.</param>
        /// <param name="jasperDisplaySourceFragments">jasperDisplaySourceFragments.</param>
        /// <param name="defaultIsSession">defaultIsSession.</param>
        public OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties(ConfigNodePropertyString jasperCompilerTargetVM = default(ConfigNodePropertyString), ConfigNodePropertyString jasperCompilerSourceVM = default(ConfigNodePropertyString), ConfigNodePropertyBoolean jasperClassdebuginfo = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean jasperEnablePooling = default(ConfigNodePropertyBoolean), ConfigNodePropertyString jasperIeClassId = default(ConfigNodePropertyString), ConfigNodePropertyBoolean jasperGenStringAsCharArray = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean jasperKeepgenerated = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean jasperMappedfile = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean jasperTrimSpaces = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean jasperDisplaySourceFragments = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean defaultIsSession = default(ConfigNodePropertyBoolean))
        {
            this.JasperCompilerTargetVM = jasperCompilerTargetVM;
            this.JasperCompilerSourceVM = jasperCompilerSourceVM;
            this.JasperClassdebuginfo = jasperClassdebuginfo;
            this.JasperEnablePooling = jasperEnablePooling;
            this.JasperIeClassId = jasperIeClassId;
            this.JasperGenStringAsCharArray = jasperGenStringAsCharArray;
            this.JasperKeepgenerated = jasperKeepgenerated;
            this.JasperMappedfile = jasperMappedfile;
            this.JasperTrimSpaces = jasperTrimSpaces;
            this.JasperDisplaySourceFragments = jasperDisplaySourceFragments;
            this.DefaultIsSession = defaultIsSession;
        }
        
        /// <summary>
        /// Gets or Sets JasperCompilerTargetVM
        /// </summary>
        [DataMember(Name="jasper.compilerTargetVM", EmitDefaultValue=false)]
        public ConfigNodePropertyString JasperCompilerTargetVM { get; set; }

        /// <summary>
        /// Gets or Sets JasperCompilerSourceVM
        /// </summary>
        [DataMember(Name="jasper.compilerSourceVM", EmitDefaultValue=false)]
        public ConfigNodePropertyString JasperCompilerSourceVM { get; set; }

        /// <summary>
        /// Gets or Sets JasperClassdebuginfo
        /// </summary>
        [DataMember(Name="jasper.classdebuginfo", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean JasperClassdebuginfo { get; set; }

        /// <summary>
        /// Gets or Sets JasperEnablePooling
        /// </summary>
        [DataMember(Name="jasper.enablePooling", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean JasperEnablePooling { get; set; }

        /// <summary>
        /// Gets or Sets JasperIeClassId
        /// </summary>
        [DataMember(Name="jasper.ieClassId", EmitDefaultValue=false)]
        public ConfigNodePropertyString JasperIeClassId { get; set; }

        /// <summary>
        /// Gets or Sets JasperGenStringAsCharArray
        /// </summary>
        [DataMember(Name="jasper.genStringAsCharArray", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean JasperGenStringAsCharArray { get; set; }

        /// <summary>
        /// Gets or Sets JasperKeepgenerated
        /// </summary>
        [DataMember(Name="jasper.keepgenerated", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean JasperKeepgenerated { get; set; }

        /// <summary>
        /// Gets or Sets JasperMappedfile
        /// </summary>
        [DataMember(Name="jasper.mappedfile", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean JasperMappedfile { get; set; }

        /// <summary>
        /// Gets or Sets JasperTrimSpaces
        /// </summary>
        [DataMember(Name="jasper.trimSpaces", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean JasperTrimSpaces { get; set; }

        /// <summary>
        /// Gets or Sets JasperDisplaySourceFragments
        /// </summary>
        [DataMember(Name="jasper.displaySourceFragments", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean JasperDisplaySourceFragments { get; set; }

        /// <summary>
        /// Gets or Sets DefaultIsSession
        /// </summary>
        [DataMember(Name="default.is.session", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DefaultIsSession { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties {\n");
            sb.Append("  JasperCompilerTargetVM: ").Append(JasperCompilerTargetVM).Append("\n");
            sb.Append("  JasperCompilerSourceVM: ").Append(JasperCompilerSourceVM).Append("\n");
            sb.Append("  JasperClassdebuginfo: ").Append(JasperClassdebuginfo).Append("\n");
            sb.Append("  JasperEnablePooling: ").Append(JasperEnablePooling).Append("\n");
            sb.Append("  JasperIeClassId: ").Append(JasperIeClassId).Append("\n");
            sb.Append("  JasperGenStringAsCharArray: ").Append(JasperGenStringAsCharArray).Append("\n");
            sb.Append("  JasperKeepgenerated: ").Append(JasperKeepgenerated).Append("\n");
            sb.Append("  JasperMappedfile: ").Append(JasperMappedfile).Append("\n");
            sb.Append("  JasperTrimSpaces: ").Append(JasperTrimSpaces).Append("\n");
            sb.Append("  JasperDisplaySourceFragments: ").Append(JasperDisplaySourceFragments).Append("\n");
            sb.Append("  DefaultIsSession: ").Append(DefaultIsSession).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JasperCompilerTargetVM == input.JasperCompilerTargetVM ||
                    (this.JasperCompilerTargetVM != null &&
                    this.JasperCompilerTargetVM.Equals(input.JasperCompilerTargetVM))
                ) && 
                (
                    this.JasperCompilerSourceVM == input.JasperCompilerSourceVM ||
                    (this.JasperCompilerSourceVM != null &&
                    this.JasperCompilerSourceVM.Equals(input.JasperCompilerSourceVM))
                ) && 
                (
                    this.JasperClassdebuginfo == input.JasperClassdebuginfo ||
                    (this.JasperClassdebuginfo != null &&
                    this.JasperClassdebuginfo.Equals(input.JasperClassdebuginfo))
                ) && 
                (
                    this.JasperEnablePooling == input.JasperEnablePooling ||
                    (this.JasperEnablePooling != null &&
                    this.JasperEnablePooling.Equals(input.JasperEnablePooling))
                ) && 
                (
                    this.JasperIeClassId == input.JasperIeClassId ||
                    (this.JasperIeClassId != null &&
                    this.JasperIeClassId.Equals(input.JasperIeClassId))
                ) && 
                (
                    this.JasperGenStringAsCharArray == input.JasperGenStringAsCharArray ||
                    (this.JasperGenStringAsCharArray != null &&
                    this.JasperGenStringAsCharArray.Equals(input.JasperGenStringAsCharArray))
                ) && 
                (
                    this.JasperKeepgenerated == input.JasperKeepgenerated ||
                    (this.JasperKeepgenerated != null &&
                    this.JasperKeepgenerated.Equals(input.JasperKeepgenerated))
                ) && 
                (
                    this.JasperMappedfile == input.JasperMappedfile ||
                    (this.JasperMappedfile != null &&
                    this.JasperMappedfile.Equals(input.JasperMappedfile))
                ) && 
                (
                    this.JasperTrimSpaces == input.JasperTrimSpaces ||
                    (this.JasperTrimSpaces != null &&
                    this.JasperTrimSpaces.Equals(input.JasperTrimSpaces))
                ) && 
                (
                    this.JasperDisplaySourceFragments == input.JasperDisplaySourceFragments ||
                    (this.JasperDisplaySourceFragments != null &&
                    this.JasperDisplaySourceFragments.Equals(input.JasperDisplaySourceFragments))
                ) && 
                (
                    this.DefaultIsSession == input.DefaultIsSession ||
                    (this.DefaultIsSession != null &&
                    this.DefaultIsSession.Equals(input.DefaultIsSession))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JasperCompilerTargetVM != null)
                    hashCode = hashCode * 59 + this.JasperCompilerTargetVM.GetHashCode();
                if (this.JasperCompilerSourceVM != null)
                    hashCode = hashCode * 59 + this.JasperCompilerSourceVM.GetHashCode();
                if (this.JasperClassdebuginfo != null)
                    hashCode = hashCode * 59 + this.JasperClassdebuginfo.GetHashCode();
                if (this.JasperEnablePooling != null)
                    hashCode = hashCode * 59 + this.JasperEnablePooling.GetHashCode();
                if (this.JasperIeClassId != null)
                    hashCode = hashCode * 59 + this.JasperIeClassId.GetHashCode();
                if (this.JasperGenStringAsCharArray != null)
                    hashCode = hashCode * 59 + this.JasperGenStringAsCharArray.GetHashCode();
                if (this.JasperKeepgenerated != null)
                    hashCode = hashCode * 59 + this.JasperKeepgenerated.GetHashCode();
                if (this.JasperMappedfile != null)
                    hashCode = hashCode * 59 + this.JasperMappedfile.GetHashCode();
                if (this.JasperTrimSpaces != null)
                    hashCode = hashCode * 59 + this.JasperTrimSpaces.GetHashCode();
                if (this.JasperDisplaySourceFragments != null)
                    hashCode = hashCode * 59 + this.JasperDisplaySourceFragments.GetHashCode();
                if (this.DefaultIsSession != null)
                    hashCode = hashCode * 59 + this.DefaultIsSession.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
