/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheFelixHttpSslfilterSslFil
 */
public class OASOrgApacheFelixHttpSslfilterSslFil implements OAS.MappedProperties {
    /**
     * Get sslForwardHeader
     * @return sslForwardHeader
     */
    public OASConfigNodePropertyString sslForwardHeader { get; set; }

    /**
     * Get sslForwardValue
     * @return sslForwardValue
     */
    public OASConfigNodePropertyString sslForwardValue { get; set; }

    /**
     * Get sslForwardCertHeader
     * @return sslForwardCertHeader
     */
    public OASConfigNodePropertyString sslForwardCertHeader { get; set; }

    /**
     * Get rewriteAbsoluteUrls
     * @return rewriteAbsoluteUrls
     */
    public OASConfigNodePropertyBoolean rewriteAbsoluteUrls { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'ssl-forward.header' => 'sslForwardHeader',
        'ssl-forward.value' => 'sslForwardValue',
        'ssl-forward-cert.header' => 'sslForwardCertHeader',
        'rewrite.absolute.urls' => 'rewriteAbsoluteUrls'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASOrgApacheFelixHttpSslfilterSslFil getExample() {
        OASOrgApacheFelixHttpSslfilterSslFil orgApacheFelixHttpSslfilterSslFilterProperties = new OASOrgApacheFelixHttpSslfilterSslFil();
          orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardHeader = OASConfigNodePropertyString.getExample();
          orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardValue = OASConfigNodePropertyString.getExample();
          orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardCertHeader = OASConfigNodePropertyString.getExample();
          orgApacheFelixHttpSslfilterSslFilterProperties.rewriteAbsoluteUrls = OASConfigNodePropertyBoolean.getExample();
        return orgApacheFelixHttpSslfilterSslFilterProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheFelixHttpSslfilterSslFil) {           
            OASOrgApacheFelixHttpSslfilterSslFil orgApacheFelixHttpSslfilterSslFilterProperties = (OASOrgApacheFelixHttpSslfilterSslFil) obj;
            return this.sslForwardHeader == orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardHeader
                && this.sslForwardValue == orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardValue
                && this.sslForwardCertHeader == orgApacheFelixHttpSslfilterSslFilterProperties.sslForwardCertHeader
                && this.rewriteAbsoluteUrls == orgApacheFelixHttpSslfilterSslFilterProperties.rewriteAbsoluteUrls;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (sslForwardHeader == null ? 0 : System.hashCode(sslForwardHeader));
        hashCode = (17 * hashCode) + (sslForwardValue == null ? 0 : System.hashCode(sslForwardValue));
        hashCode = (17 * hashCode) + (sslForwardCertHeader == null ? 0 : System.hashCode(sslForwardCertHeader));
        hashCode = (17 * hashCode) + (rewriteAbsoluteUrls == null ? 0 : System.hashCode(rewriteAbsoluteUrls));
        return hashCode;
    }
}

