/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqDamIdsImplIDSPoolManagerImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamIdsImplIDSPoolManagerImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamIdsImplIDSPoolManagerImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqDamIdsImplIDSPoolManagerImplProperties
    : public ModelBase
{
public:
    ComDayCqDamIdsImplIDSPoolManagerImplProperties();
    virtual ~ComDayCqDamIdsImplIDSPoolManagerImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqDamIdsImplIDSPoolManagerImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxErrorsToBlacklist() const;
    bool maxErrorsToBlacklistIsSet() const;
    void unsetMax_errors_to_blacklist();
    void setMaxErrorsToBlacklist(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRetryIntervalToWhitelist() const;
    bool retryIntervalToWhitelistIsSet() const;
    void unsetRetry_interval_to_whitelist();
    void setRetryIntervalToWhitelist(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getConnectTimeout() const;
    bool connectTimeoutIsSet() const;
    void unsetConnect_timeout();
    void setConnectTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSocketTimeout() const;
    bool socketTimeoutIsSet() const;
    void unsetSocket_timeout();
    void setSocketTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getProcessLabel() const;
    bool processLabelIsSet() const;
    void unsetProcess_label();
    void setProcessLabel(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getConnectionUseMax() const;
    bool connectionUseMaxIsSet() const;
    void unsetConnection_use_max();
    void setConnectionUseMax(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Max_errors_to_blacklist;
    bool m_Max_errors_to_blacklistIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Retry_interval_to_whitelist;
    bool m_Retry_interval_to_whitelistIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Connect_timeout;
    bool m_Connect_timeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Socket_timeout;
    bool m_Socket_timeoutIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Process_label;
    bool m_Process_labelIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Connection_use_max;
    bool m_Connection_use_maxIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqDamIdsImplIDSPoolManagerImplProperties_H_ */
