/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
  #[serde(rename = "enable")]
  enable: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "agent.configuration")]
  agent_configuration: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "context.path")]
  context_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "disabled.cipher.suites")]
  disabled_cipher_suites: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "enabled.cipher.suites")]
  enabled_cipher_suites: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
  pub fn new() -> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
    ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
      enable: None,
      agent_configuration: None,
      context_path: None,
      disabled_cipher_suites: None,
      enabled_cipher_suites: None
    }
  }

  pub fn set_enable(&mut self, enable: ::models::ConfigNodePropertyBoolean) {
    self.enable = Some(enable);
  }

  pub fn with_enable(mut self, enable: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
    self.enable = Some(enable);
    self
  }

  pub fn enable(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable.as_ref()
  }

  pub fn reset_enable(&mut self) {
    self.enable = None;
  }

  pub fn set_agent_configuration(&mut self, agent_configuration: ::models::ConfigNodePropertyArray) {
    self.agent_configuration = Some(agent_configuration);
  }

  pub fn with_agent_configuration(mut self, agent_configuration: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
    self.agent_configuration = Some(agent_configuration);
    self
  }

  pub fn agent_configuration(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.agent_configuration.as_ref()
  }

  pub fn reset_agent_configuration(&mut self) {
    self.agent_configuration = None;
  }

  pub fn set_context_path(&mut self, context_path: ::models::ConfigNodePropertyString) {
    self.context_path = Some(context_path);
  }

  pub fn with_context_path(mut self, context_path: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
    self.context_path = Some(context_path);
    self
  }

  pub fn context_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.context_path.as_ref()
  }

  pub fn reset_context_path(&mut self) {
    self.context_path = None;
  }

  pub fn set_disabled_cipher_suites(&mut self, disabled_cipher_suites: ::models::ConfigNodePropertyArray) {
    self.disabled_cipher_suites = Some(disabled_cipher_suites);
  }

  pub fn with_disabled_cipher_suites(mut self, disabled_cipher_suites: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
    self.disabled_cipher_suites = Some(disabled_cipher_suites);
    self
  }

  pub fn disabled_cipher_suites(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.disabled_cipher_suites.as_ref()
  }

  pub fn reset_disabled_cipher_suites(&mut self) {
    self.disabled_cipher_suites = None;
  }

  pub fn set_enabled_cipher_suites(&mut self, enabled_cipher_suites: ::models::ConfigNodePropertyArray) {
    self.enabled_cipher_suites = Some(enabled_cipher_suites);
  }

  pub fn with_enabled_cipher_suites(mut self, enabled_cipher_suites: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
    self.enabled_cipher_suites = Some(enabled_cipher_suites);
    self
  }

  pub fn enabled_cipher_suites(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.enabled_cipher_suites.as_ref()
  }

  pub fn reset_enabled_cipher_suites(&mut self) {
    self.enabled_cipher_suites = None;
  }

}



