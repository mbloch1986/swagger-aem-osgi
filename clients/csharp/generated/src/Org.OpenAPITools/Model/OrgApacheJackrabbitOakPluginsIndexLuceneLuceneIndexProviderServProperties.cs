/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties :  IEquatable<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties" /> class.
        /// </summary>
        /// <param name="disabled">disabled.</param>
        /// <param name="debug">debug.</param>
        /// <param name="localIndexDir">localIndexDir.</param>
        /// <param name="enableOpenIndexAsync">enableOpenIndexAsync.</param>
        /// <param name="threadPoolSize">threadPoolSize.</param>
        /// <param name="prefetchIndexFiles">prefetchIndexFiles.</param>
        /// <param name="extractedTextCacheSizeInMB">extractedTextCacheSizeInMB.</param>
        /// <param name="extractedTextCacheExpiryInSecs">extractedTextCacheExpiryInSecs.</param>
        /// <param name="alwaysUsePreExtractedCache">alwaysUsePreExtractedCache.</param>
        /// <param name="booleanClauseLimit">booleanClauseLimit.</param>
        /// <param name="enableHybridIndexing">enableHybridIndexing.</param>
        /// <param name="hybridQueueSize">hybridQueueSize.</param>
        /// <param name="disableStoredIndexDefinition">disableStoredIndexDefinition.</param>
        /// <param name="deletedBlobsCollectionEnabled">deletedBlobsCollectionEnabled.</param>
        /// <param name="propIndexCleanerIntervalInSecs">propIndexCleanerIntervalInSecs.</param>
        /// <param name="enableSingleBlobIndexFiles">enableSingleBlobIndexFiles.</param>
        public OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties(ConfigNodePropertyBoolean disabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean debug = default(ConfigNodePropertyBoolean), ConfigNodePropertyString localIndexDir = default(ConfigNodePropertyString), ConfigNodePropertyBoolean enableOpenIndexAsync = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger threadPoolSize = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean prefetchIndexFiles = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger extractedTextCacheSizeInMB = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger extractedTextCacheExpiryInSecs = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean alwaysUsePreExtractedCache = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger booleanClauseLimit = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean enableHybridIndexing = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger hybridQueueSize = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean disableStoredIndexDefinition = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean deletedBlobsCollectionEnabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger propIndexCleanerIntervalInSecs = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean enableSingleBlobIndexFiles = default(ConfigNodePropertyBoolean))
        {
            this.Disabled = disabled;
            this.Debug = debug;
            this.LocalIndexDir = localIndexDir;
            this.EnableOpenIndexAsync = enableOpenIndexAsync;
            this.ThreadPoolSize = threadPoolSize;
            this.PrefetchIndexFiles = prefetchIndexFiles;
            this.ExtractedTextCacheSizeInMB = extractedTextCacheSizeInMB;
            this.ExtractedTextCacheExpiryInSecs = extractedTextCacheExpiryInSecs;
            this.AlwaysUsePreExtractedCache = alwaysUsePreExtractedCache;
            this.BooleanClauseLimit = booleanClauseLimit;
            this.EnableHybridIndexing = enableHybridIndexing;
            this.HybridQueueSize = hybridQueueSize;
            this.DisableStoredIndexDefinition = disableStoredIndexDefinition;
            this.DeletedBlobsCollectionEnabled = deletedBlobsCollectionEnabled;
            this.PropIndexCleanerIntervalInSecs = propIndexCleanerIntervalInSecs;
            this.EnableSingleBlobIndexFiles = enableSingleBlobIndexFiles;
        }
        
        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name="disabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean Disabled { get; set; }

        /// <summary>
        /// Gets or Sets Debug
        /// </summary>
        [DataMember(Name="debug", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean Debug { get; set; }

        /// <summary>
        /// Gets or Sets LocalIndexDir
        /// </summary>
        [DataMember(Name="localIndexDir", EmitDefaultValue=false)]
        public ConfigNodePropertyString LocalIndexDir { get; set; }

        /// <summary>
        /// Gets or Sets EnableOpenIndexAsync
        /// </summary>
        [DataMember(Name="enableOpenIndexAsync", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableOpenIndexAsync { get; set; }

        /// <summary>
        /// Gets or Sets ThreadPoolSize
        /// </summary>
        [DataMember(Name="threadPoolSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ThreadPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets PrefetchIndexFiles
        /// </summary>
        [DataMember(Name="prefetchIndexFiles", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean PrefetchIndexFiles { get; set; }

        /// <summary>
        /// Gets or Sets ExtractedTextCacheSizeInMB
        /// </summary>
        [DataMember(Name="extractedTextCacheSizeInMB", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ExtractedTextCacheSizeInMB { get; set; }

        /// <summary>
        /// Gets or Sets ExtractedTextCacheExpiryInSecs
        /// </summary>
        [DataMember(Name="extractedTextCacheExpiryInSecs", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ExtractedTextCacheExpiryInSecs { get; set; }

        /// <summary>
        /// Gets or Sets AlwaysUsePreExtractedCache
        /// </summary>
        [DataMember(Name="alwaysUsePreExtractedCache", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean AlwaysUsePreExtractedCache { get; set; }

        /// <summary>
        /// Gets or Sets BooleanClauseLimit
        /// </summary>
        [DataMember(Name="booleanClauseLimit", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger BooleanClauseLimit { get; set; }

        /// <summary>
        /// Gets or Sets EnableHybridIndexing
        /// </summary>
        [DataMember(Name="enableHybridIndexing", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableHybridIndexing { get; set; }

        /// <summary>
        /// Gets or Sets HybridQueueSize
        /// </summary>
        [DataMember(Name="hybridQueueSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger HybridQueueSize { get; set; }

        /// <summary>
        /// Gets or Sets DisableStoredIndexDefinition
        /// </summary>
        [DataMember(Name="disableStoredIndexDefinition", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DisableStoredIndexDefinition { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBlobsCollectionEnabled
        /// </summary>
        [DataMember(Name="deletedBlobsCollectionEnabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean DeletedBlobsCollectionEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PropIndexCleanerIntervalInSecs
        /// </summary>
        [DataMember(Name="propIndexCleanerIntervalInSecs", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PropIndexCleanerIntervalInSecs { get; set; }

        /// <summary>
        /// Gets or Sets EnableSingleBlobIndexFiles
        /// </summary>
        [DataMember(Name="enableSingleBlobIndexFiles", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableSingleBlobIndexFiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  LocalIndexDir: ").Append(LocalIndexDir).Append("\n");
            sb.Append("  EnableOpenIndexAsync: ").Append(EnableOpenIndexAsync).Append("\n");
            sb.Append("  ThreadPoolSize: ").Append(ThreadPoolSize).Append("\n");
            sb.Append("  PrefetchIndexFiles: ").Append(PrefetchIndexFiles).Append("\n");
            sb.Append("  ExtractedTextCacheSizeInMB: ").Append(ExtractedTextCacheSizeInMB).Append("\n");
            sb.Append("  ExtractedTextCacheExpiryInSecs: ").Append(ExtractedTextCacheExpiryInSecs).Append("\n");
            sb.Append("  AlwaysUsePreExtractedCache: ").Append(AlwaysUsePreExtractedCache).Append("\n");
            sb.Append("  BooleanClauseLimit: ").Append(BooleanClauseLimit).Append("\n");
            sb.Append("  EnableHybridIndexing: ").Append(EnableHybridIndexing).Append("\n");
            sb.Append("  HybridQueueSize: ").Append(HybridQueueSize).Append("\n");
            sb.Append("  DisableStoredIndexDefinition: ").Append(DisableStoredIndexDefinition).Append("\n");
            sb.Append("  DeletedBlobsCollectionEnabled: ").Append(DeletedBlobsCollectionEnabled).Append("\n");
            sb.Append("  PropIndexCleanerIntervalInSecs: ").Append(PropIndexCleanerIntervalInSecs).Append("\n");
            sb.Append("  EnableSingleBlobIndexFiles: ").Append(EnableSingleBlobIndexFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Disabled == input.Disabled ||
                    (this.Disabled != null &&
                    this.Disabled.Equals(input.Disabled))
                ) && 
                (
                    this.Debug == input.Debug ||
                    (this.Debug != null &&
                    this.Debug.Equals(input.Debug))
                ) && 
                (
                    this.LocalIndexDir == input.LocalIndexDir ||
                    (this.LocalIndexDir != null &&
                    this.LocalIndexDir.Equals(input.LocalIndexDir))
                ) && 
                (
                    this.EnableOpenIndexAsync == input.EnableOpenIndexAsync ||
                    (this.EnableOpenIndexAsync != null &&
                    this.EnableOpenIndexAsync.Equals(input.EnableOpenIndexAsync))
                ) && 
                (
                    this.ThreadPoolSize == input.ThreadPoolSize ||
                    (this.ThreadPoolSize != null &&
                    this.ThreadPoolSize.Equals(input.ThreadPoolSize))
                ) && 
                (
                    this.PrefetchIndexFiles == input.PrefetchIndexFiles ||
                    (this.PrefetchIndexFiles != null &&
                    this.PrefetchIndexFiles.Equals(input.PrefetchIndexFiles))
                ) && 
                (
                    this.ExtractedTextCacheSizeInMB == input.ExtractedTextCacheSizeInMB ||
                    (this.ExtractedTextCacheSizeInMB != null &&
                    this.ExtractedTextCacheSizeInMB.Equals(input.ExtractedTextCacheSizeInMB))
                ) && 
                (
                    this.ExtractedTextCacheExpiryInSecs == input.ExtractedTextCacheExpiryInSecs ||
                    (this.ExtractedTextCacheExpiryInSecs != null &&
                    this.ExtractedTextCacheExpiryInSecs.Equals(input.ExtractedTextCacheExpiryInSecs))
                ) && 
                (
                    this.AlwaysUsePreExtractedCache == input.AlwaysUsePreExtractedCache ||
                    (this.AlwaysUsePreExtractedCache != null &&
                    this.AlwaysUsePreExtractedCache.Equals(input.AlwaysUsePreExtractedCache))
                ) && 
                (
                    this.BooleanClauseLimit == input.BooleanClauseLimit ||
                    (this.BooleanClauseLimit != null &&
                    this.BooleanClauseLimit.Equals(input.BooleanClauseLimit))
                ) && 
                (
                    this.EnableHybridIndexing == input.EnableHybridIndexing ||
                    (this.EnableHybridIndexing != null &&
                    this.EnableHybridIndexing.Equals(input.EnableHybridIndexing))
                ) && 
                (
                    this.HybridQueueSize == input.HybridQueueSize ||
                    (this.HybridQueueSize != null &&
                    this.HybridQueueSize.Equals(input.HybridQueueSize))
                ) && 
                (
                    this.DisableStoredIndexDefinition == input.DisableStoredIndexDefinition ||
                    (this.DisableStoredIndexDefinition != null &&
                    this.DisableStoredIndexDefinition.Equals(input.DisableStoredIndexDefinition))
                ) && 
                (
                    this.DeletedBlobsCollectionEnabled == input.DeletedBlobsCollectionEnabled ||
                    (this.DeletedBlobsCollectionEnabled != null &&
                    this.DeletedBlobsCollectionEnabled.Equals(input.DeletedBlobsCollectionEnabled))
                ) && 
                (
                    this.PropIndexCleanerIntervalInSecs == input.PropIndexCleanerIntervalInSecs ||
                    (this.PropIndexCleanerIntervalInSecs != null &&
                    this.PropIndexCleanerIntervalInSecs.Equals(input.PropIndexCleanerIntervalInSecs))
                ) && 
                (
                    this.EnableSingleBlobIndexFiles == input.EnableSingleBlobIndexFiles ||
                    (this.EnableSingleBlobIndexFiles != null &&
                    this.EnableSingleBlobIndexFiles.Equals(input.EnableSingleBlobIndexFiles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Disabled != null)
                    hashCode = hashCode * 59 + this.Disabled.GetHashCode();
                if (this.Debug != null)
                    hashCode = hashCode * 59 + this.Debug.GetHashCode();
                if (this.LocalIndexDir != null)
                    hashCode = hashCode * 59 + this.LocalIndexDir.GetHashCode();
                if (this.EnableOpenIndexAsync != null)
                    hashCode = hashCode * 59 + this.EnableOpenIndexAsync.GetHashCode();
                if (this.ThreadPoolSize != null)
                    hashCode = hashCode * 59 + this.ThreadPoolSize.GetHashCode();
                if (this.PrefetchIndexFiles != null)
                    hashCode = hashCode * 59 + this.PrefetchIndexFiles.GetHashCode();
                if (this.ExtractedTextCacheSizeInMB != null)
                    hashCode = hashCode * 59 + this.ExtractedTextCacheSizeInMB.GetHashCode();
                if (this.ExtractedTextCacheExpiryInSecs != null)
                    hashCode = hashCode * 59 + this.ExtractedTextCacheExpiryInSecs.GetHashCode();
                if (this.AlwaysUsePreExtractedCache != null)
                    hashCode = hashCode * 59 + this.AlwaysUsePreExtractedCache.GetHashCode();
                if (this.BooleanClauseLimit != null)
                    hashCode = hashCode * 59 + this.BooleanClauseLimit.GetHashCode();
                if (this.EnableHybridIndexing != null)
                    hashCode = hashCode * 59 + this.EnableHybridIndexing.GetHashCode();
                if (this.HybridQueueSize != null)
                    hashCode = hashCode * 59 + this.HybridQueueSize.GetHashCode();
                if (this.DisableStoredIndexDefinition != null)
                    hashCode = hashCode * 59 + this.DisableStoredIndexDefinition.GetHashCode();
                if (this.DeletedBlobsCollectionEnabled != null)
                    hashCode = hashCode * 59 + this.DeletedBlobsCollectionEnabled.GetHashCode();
                if (this.PropIndexCleanerIntervalInSecs != null)
                    hashCode = hashCode * 59 + this.PropIndexCleanerIntervalInSecs.GetHashCode();
                if (this.EnableSingleBlobIndexFiles != null)
                    hashCode = hashCode * 59 + this.EnableSingleBlobIndexFiles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
