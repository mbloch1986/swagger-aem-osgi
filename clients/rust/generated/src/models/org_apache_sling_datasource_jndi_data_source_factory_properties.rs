/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
  #[serde(rename = "datasource.name")]
  datasource_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "datasource.svc.prop.name")]
  datasource_svc_prop_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "datasource.jndi.name")]
  datasource_jndi_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "jndi.properties")]
  jndi_properties: Option<::models::ConfigNodePropertyArray>
}

impl OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
  pub fn new() -> OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
    OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
      datasource_name: None,
      datasource_svc_prop_name: None,
      datasource_jndi_name: None,
      jndi_properties: None
    }
  }

  pub fn set_datasource_name(&mut self, datasource_name: ::models::ConfigNodePropertyString) {
    self.datasource_name = Some(datasource_name);
  }

  pub fn with_datasource_name(mut self, datasource_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
    self.datasource_name = Some(datasource_name);
    self
  }

  pub fn datasource_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.datasource_name.as_ref()
  }

  pub fn reset_datasource_name(&mut self) {
    self.datasource_name = None;
  }

  pub fn set_datasource_svc_prop_name(&mut self, datasource_svc_prop_name: ::models::ConfigNodePropertyString) {
    self.datasource_svc_prop_name = Some(datasource_svc_prop_name);
  }

  pub fn with_datasource_svc_prop_name(mut self, datasource_svc_prop_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
    self.datasource_svc_prop_name = Some(datasource_svc_prop_name);
    self
  }

  pub fn datasource_svc_prop_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.datasource_svc_prop_name.as_ref()
  }

  pub fn reset_datasource_svc_prop_name(&mut self) {
    self.datasource_svc_prop_name = None;
  }

  pub fn set_datasource_jndi_name(&mut self, datasource_jndi_name: ::models::ConfigNodePropertyString) {
    self.datasource_jndi_name = Some(datasource_jndi_name);
  }

  pub fn with_datasource_jndi_name(mut self, datasource_jndi_name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
    self.datasource_jndi_name = Some(datasource_jndi_name);
    self
  }

  pub fn datasource_jndi_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.datasource_jndi_name.as_ref()
  }

  pub fn reset_datasource_jndi_name(&mut self) {
    self.datasource_jndi_name = None;
  }

  pub fn set_jndi_properties(&mut self, jndi_properties: ::models::ConfigNodePropertyArray) {
    self.jndi_properties = Some(jndi_properties);
  }

  pub fn with_jndi_properties(mut self, jndi_properties: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
    self.jndi_properties = Some(jndi_properties);
    self
  }

  pub fn jndi_properties(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.jndi_properties.as_ref()
  }

  pub fn reset_jndi_properties(&mut self) {
    self.jndi_properties = None;
  }

}



