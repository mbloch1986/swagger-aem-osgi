/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties.h
 *
 * 
 */

#ifndef OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties_H_
#define OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyDropDown.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties: public OAIObject {
public:
    OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties();
    OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties(QString json);
    ~OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getPath();
    void setPath(OAIConfigNodePropertyString* path);

    OAIConfigNodePropertyDropDown* getTokenRequiredAttr();
    void setTokenRequiredAttr(OAIConfigNodePropertyDropDown* token_required_attr);

    OAIConfigNodePropertyString* getTokenAlternateUrl();
    void setTokenAlternateUrl(OAIConfigNodePropertyString* token_alternate_url);

    OAIConfigNodePropertyBoolean* getTokenEncapsulated();
    void setTokenEncapsulated(OAIConfigNodePropertyBoolean* token_encapsulated);

    OAIConfigNodePropertyArray* getSkipTokenRefresh();
    void setSkipTokenRefresh(OAIConfigNodePropertyArray* skip_token_refresh);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* path;
    bool m_path_isSet;

    OAIConfigNodePropertyDropDown* token_required_attr;
    bool m_token_required_attr_isSet;

    OAIConfigNodePropertyString* token_alternate_url;
    bool m_token_alternate_url_isSet;

    OAIConfigNodePropertyBoolean* token_encapsulated;
    bool m_token_encapsulated_isSet;

    OAIConfigNodePropertyArray* skip_token_refresh;
    bool m_skip_token_refresh_isSet;

};

}

#endif /* OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties_H_ */
