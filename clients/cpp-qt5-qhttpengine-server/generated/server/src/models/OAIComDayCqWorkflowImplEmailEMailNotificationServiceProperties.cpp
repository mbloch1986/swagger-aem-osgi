/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties() {
    this->init();
}

OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::~OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties() {
    
}

void
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::init() {
    m_from_address_isSet = false;
    m_host_prefix_isSet = false;
    m_notify_onabort_isSet = false;
    m_notify_oncomplete_isSet = false;
    m_notify_oncontainercomplete_isSet = false;
    m_notify_useronly_isSet = false;
}

void
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(from_address, json[QString("from.address")]);
    
    ::OpenAPI::fromJsonValue(host_prefix, json[QString("host.prefix")]);
    
    ::OpenAPI::fromJsonValue(notify_onabort, json[QString("notify.onabort")]);
    
    ::OpenAPI::fromJsonValue(notify_oncomplete, json[QString("notify.oncomplete")]);
    
    ::OpenAPI::fromJsonValue(notify_oncontainercomplete, json[QString("notify.oncontainercomplete")]);
    
    ::OpenAPI::fromJsonValue(notify_useronly, json[QString("notify.useronly")]);
    
}

QString
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::asJsonObject() const {
    QJsonObject obj;
	if(from_address.isSet()){
        obj.insert(QString("from.address"), ::OpenAPI::toJsonValue(from_address));
    }
	if(host_prefix.isSet()){
        obj.insert(QString("host.prefix"), ::OpenAPI::toJsonValue(host_prefix));
    }
	if(notify_onabort.isSet()){
        obj.insert(QString("notify.onabort"), ::OpenAPI::toJsonValue(notify_onabort));
    }
	if(notify_oncomplete.isSet()){
        obj.insert(QString("notify.oncomplete"), ::OpenAPI::toJsonValue(notify_oncomplete));
    }
	if(notify_oncontainercomplete.isSet()){
        obj.insert(QString("notify.oncontainercomplete"), ::OpenAPI::toJsonValue(notify_oncontainercomplete));
    }
	if(notify_useronly.isSet()){
        obj.insert(QString("notify.useronly"), ::OpenAPI::toJsonValue(notify_useronly));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getFromAddress() const {
    return from_address;
}
void
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setFromAddress(const OAIConfigNodePropertyString &from_address) {
    this->from_address = from_address;
    this->m_from_address_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getHostPrefix() const {
    return host_prefix;
}
void
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setHostPrefix(const OAIConfigNodePropertyString &host_prefix) {
    this->host_prefix = host_prefix;
    this->m_host_prefix_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getNotifyOnabort() const {
    return notify_onabort;
}
void
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setNotifyOnabort(const OAIConfigNodePropertyBoolean &notify_onabort) {
    this->notify_onabort = notify_onabort;
    this->m_notify_onabort_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getNotifyOncomplete() const {
    return notify_oncomplete;
}
void
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setNotifyOncomplete(const OAIConfigNodePropertyBoolean &notify_oncomplete) {
    this->notify_oncomplete = notify_oncomplete;
    this->m_notify_oncomplete_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getNotifyOncontainercomplete() const {
    return notify_oncontainercomplete;
}
void
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setNotifyOncontainercomplete(const OAIConfigNodePropertyBoolean &notify_oncontainercomplete) {
    this->notify_oncontainercomplete = notify_oncontainercomplete;
    this->m_notify_oncontainercomplete_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::getNotifyUseronly() const {
    return notify_useronly;
}
void
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::setNotifyUseronly(const OAIConfigNodePropertyBoolean &notify_useronly) {
    this->notify_useronly = notify_useronly;
    this->m_notify_useronly_isSet = true;
}


bool
OAIComDayCqWorkflowImplEmailEMailNotificationServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(from_address.isSet()){ isObjectUpdated = true; break;}
    
        if(host_prefix.isSet()){ isObjectUpdated = true; break;}
    
        if(notify_onabort.isSet()){ isObjectUpdated = true; break;}
    
        if(notify_oncomplete.isSet()){ isObjectUpdated = true; break;}
    
        if(notify_oncontainercomplete.isSet()){ isObjectUpdated = true; break;}
    
        if(notify_useronly.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

