/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties {
  #[serde(rename = "notify.onupdate")]
  notify_onupdate: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "notify.oncomplete")]
  notify_oncomplete: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties {
  pub fn new() -> ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties {
    ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties {
      notify_onupdate: None,
      notify_oncomplete: None
    }
  }

  pub fn set_notify_onupdate(&mut self, notify_onupdate: ::models::ConfigNodePropertyBoolean) {
    self.notify_onupdate = Some(notify_onupdate);
  }

  pub fn with_notify_onupdate(mut self, notify_onupdate: ::models::ConfigNodePropertyBoolean) -> ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties {
    self.notify_onupdate = Some(notify_onupdate);
    self
  }

  pub fn notify_onupdate(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.notify_onupdate.as_ref()
  }

  pub fn reset_notify_onupdate(&mut self) {
    self.notify_onupdate = None;
  }

  pub fn set_notify_oncomplete(&mut self, notify_oncomplete: ::models::ConfigNodePropertyBoolean) {
    self.notify_oncomplete = Some(notify_oncomplete);
  }

  pub fn with_notify_oncomplete(mut self, notify_oncomplete: ::models::ConfigNodePropertyBoolean) -> ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties {
    self.notify_oncomplete = Some(notify_oncomplete);
    self
  }

  pub fn notify_oncomplete(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.notify_oncomplete.as_ref()
  }

  pub fn reset_notify_oncomplete(&mut self) {
    self.notify_oncomplete = None;
  }

}



