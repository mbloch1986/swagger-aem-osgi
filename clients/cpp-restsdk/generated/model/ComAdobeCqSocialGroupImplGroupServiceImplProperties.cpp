/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialGroupImplGroupServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialGroupImplGroupServiceImplProperties::ComAdobeCqSocialGroupImplGroupServiceImplProperties()
{
    m_MaxWaitTimeIsSet = false;
    m_MinWaitBetweenRetriesIsSet = false;
}

ComAdobeCqSocialGroupImplGroupServiceImplProperties::~ComAdobeCqSocialGroupImplGroupServiceImplProperties()
{
}

void ComAdobeCqSocialGroupImplGroupServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialGroupImplGroupServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MaxWaitTimeIsSet)
    {
        val[utility::conversions::to_string_t("maxWaitTime")] = ModelBase::toJson(m_MaxWaitTime);
    }
    if(m_MinWaitBetweenRetriesIsSet)
    {
        val[utility::conversions::to_string_t("minWaitBetweenRetries")] = ModelBase::toJson(m_MinWaitBetweenRetries);
    }

    return val;
}

void ComAdobeCqSocialGroupImplGroupServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("maxWaitTime")))
    {
        if(!val[utility::conversions::to_string_t("maxWaitTime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxWaitTime")]);
            setMaxWaitTime( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minWaitBetweenRetries")))
    {
        if(!val[utility::conversions::to_string_t("minWaitBetweenRetries")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("minWaitBetweenRetries")]);
            setMinWaitBetweenRetries( newItem );
        }
    }
}

void ComAdobeCqSocialGroupImplGroupServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MaxWaitTimeIsSet)
    {
        if (m_MaxWaitTime.get())
        {
            m_MaxWaitTime->toMultipart(multipart, utility::conversions::to_string_t("maxWaitTime."));
        }
    }
    if(m_MinWaitBetweenRetriesIsSet)
    {
        if (m_MinWaitBetweenRetries.get())
        {
            m_MinWaitBetweenRetries->toMultipart(multipart, utility::conversions::to_string_t("minWaitBetweenRetries."));
        }
    }
}

void ComAdobeCqSocialGroupImplGroupServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("maxWaitTime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxWaitTime")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxWaitTime."));
            setMaxWaitTime( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minWaitBetweenRetries")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("minWaitBetweenRetries")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("minWaitBetweenRetries."));
            setMinWaitBetweenRetries( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialGroupImplGroupServiceImplProperties::getMaxWaitTime() const
{
    return m_MaxWaitTime;
}


void ComAdobeCqSocialGroupImplGroupServiceImplProperties::setMaxWaitTime(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxWaitTime = value;
    m_MaxWaitTimeIsSet = true;
}
bool ComAdobeCqSocialGroupImplGroupServiceImplProperties::maxWaitTimeIsSet() const
{
    return m_MaxWaitTimeIsSet;
}

void ComAdobeCqSocialGroupImplGroupServiceImplProperties::unsetMaxWaitTime()
{
    m_MaxWaitTimeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialGroupImplGroupServiceImplProperties::getMinWaitBetweenRetries() const
{
    return m_MinWaitBetweenRetries;
}


void ComAdobeCqSocialGroupImplGroupServiceImplProperties::setMinWaitBetweenRetries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinWaitBetweenRetries = value;
    m_MinWaitBetweenRetriesIsSet = true;
}
bool ComAdobeCqSocialGroupImplGroupServiceImplProperties::minWaitBetweenRetriesIsSet() const
{
    return m_MinWaitBetweenRetriesIsSet;
}

void ComAdobeCqSocialGroupImplGroupServiceImplProperties::unsetMinWaitBetweenRetries()
{
    m_MinWaitBetweenRetriesIsSet = false;
}

}
}
}
}

