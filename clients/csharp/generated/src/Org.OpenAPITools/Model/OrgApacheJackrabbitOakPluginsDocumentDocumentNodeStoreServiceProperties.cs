/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties :  IEquatable<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties" /> class.
        /// </summary>
        /// <param name="mongouri">mongouri.</param>
        /// <param name="db">db.</param>
        /// <param name="socketKeepAlive">socketKeepAlive.</param>
        /// <param name="cache">cache.</param>
        /// <param name="nodeCachePercentage">nodeCachePercentage.</param>
        /// <param name="prevDocCachePercentage">prevDocCachePercentage.</param>
        /// <param name="childrenCachePercentage">childrenCachePercentage.</param>
        /// <param name="diffCachePercentage">diffCachePercentage.</param>
        /// <param name="cacheSegmentCount">cacheSegmentCount.</param>
        /// <param name="cacheStackMoveDistance">cacheStackMoveDistance.</param>
        /// <param name="blobCacheSize">blobCacheSize.</param>
        /// <param name="persistentCache">persistentCache.</param>
        /// <param name="journalCache">journalCache.</param>
        /// <param name="customBlobStore">customBlobStore.</param>
        /// <param name="journalGCInterval">journalGCInterval.</param>
        /// <param name="journalGCMaxAge">journalGCMaxAge.</param>
        /// <param name="prefetchExternalChanges">prefetchExternalChanges.</param>
        /// <param name="role">role.</param>
        /// <param name="versionGcMaxAgeInSecs">versionGcMaxAgeInSecs.</param>
        /// <param name="versionGCExpression">versionGCExpression.</param>
        /// <param name="versionGCTimeLimitInSecs">versionGCTimeLimitInSecs.</param>
        /// <param name="blobGcMaxAgeInSecs">blobGcMaxAgeInSecs.</param>
        /// <param name="blobTrackSnapshotIntervalInSecs">blobTrackSnapshotIntervalInSecs.</param>
        /// <param name="repositoryHome">repositoryHome.</param>
        /// <param name="maxReplicationLagInSecs">maxReplicationLagInSecs.</param>
        /// <param name="documentStoreType">documentStoreType.</param>
        /// <param name="bundlingDisabled">bundlingDisabled.</param>
        /// <param name="updateLimit">updateLimit.</param>
        /// <param name="persistentCacheIncludes">persistentCacheIncludes.</param>
        /// <param name="leaseCheckMode">leaseCheckMode.</param>
        public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties(ConfigNodePropertyString mongouri = default(ConfigNodePropertyString), ConfigNodePropertyString db = default(ConfigNodePropertyString), ConfigNodePropertyBoolean socketKeepAlive = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger cache = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger nodeCachePercentage = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger prevDocCachePercentage = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger childrenCachePercentage = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger diffCachePercentage = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cacheSegmentCount = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cacheStackMoveDistance = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger blobCacheSize = default(ConfigNodePropertyInteger), ConfigNodePropertyString persistentCache = default(ConfigNodePropertyString), ConfigNodePropertyString journalCache = default(ConfigNodePropertyString), ConfigNodePropertyBoolean customBlobStore = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger journalGCInterval = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger journalGCMaxAge = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean prefetchExternalChanges = default(ConfigNodePropertyBoolean), ConfigNodePropertyString role = default(ConfigNodePropertyString), ConfigNodePropertyInteger versionGcMaxAgeInSecs = default(ConfigNodePropertyInteger), ConfigNodePropertyString versionGCExpression = default(ConfigNodePropertyString), ConfigNodePropertyInteger versionGCTimeLimitInSecs = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger blobGcMaxAgeInSecs = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger blobTrackSnapshotIntervalInSecs = default(ConfigNodePropertyInteger), ConfigNodePropertyString repositoryHome = default(ConfigNodePropertyString), ConfigNodePropertyInteger maxReplicationLagInSecs = default(ConfigNodePropertyInteger), ConfigNodePropertyDropDown documentStoreType = default(ConfigNodePropertyDropDown), ConfigNodePropertyBoolean bundlingDisabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger updateLimit = default(ConfigNodePropertyInteger), ConfigNodePropertyArray persistentCacheIncludes = default(ConfigNodePropertyArray), ConfigNodePropertyDropDown leaseCheckMode = default(ConfigNodePropertyDropDown))
        {
            this.Mongouri = mongouri;
            this.Db = db;
            this.SocketKeepAlive = socketKeepAlive;
            this.Cache = cache;
            this.NodeCachePercentage = nodeCachePercentage;
            this.PrevDocCachePercentage = prevDocCachePercentage;
            this.ChildrenCachePercentage = childrenCachePercentage;
            this.DiffCachePercentage = diffCachePercentage;
            this.CacheSegmentCount = cacheSegmentCount;
            this.CacheStackMoveDistance = cacheStackMoveDistance;
            this.BlobCacheSize = blobCacheSize;
            this.PersistentCache = persistentCache;
            this.JournalCache = journalCache;
            this.CustomBlobStore = customBlobStore;
            this.JournalGCInterval = journalGCInterval;
            this.JournalGCMaxAge = journalGCMaxAge;
            this.PrefetchExternalChanges = prefetchExternalChanges;
            this.Role = role;
            this.VersionGcMaxAgeInSecs = versionGcMaxAgeInSecs;
            this.VersionGCExpression = versionGCExpression;
            this.VersionGCTimeLimitInSecs = versionGCTimeLimitInSecs;
            this.BlobGcMaxAgeInSecs = blobGcMaxAgeInSecs;
            this.BlobTrackSnapshotIntervalInSecs = blobTrackSnapshotIntervalInSecs;
            this.RepositoryHome = repositoryHome;
            this.MaxReplicationLagInSecs = maxReplicationLagInSecs;
            this.DocumentStoreType = documentStoreType;
            this.BundlingDisabled = bundlingDisabled;
            this.UpdateLimit = updateLimit;
            this.PersistentCacheIncludes = persistentCacheIncludes;
            this.LeaseCheckMode = leaseCheckMode;
        }
        
        /// <summary>
        /// Gets or Sets Mongouri
        /// </summary>
        [DataMember(Name="mongouri", EmitDefaultValue=false)]
        public ConfigNodePropertyString Mongouri { get; set; }

        /// <summary>
        /// Gets or Sets Db
        /// </summary>
        [DataMember(Name="db", EmitDefaultValue=false)]
        public ConfigNodePropertyString Db { get; set; }

        /// <summary>
        /// Gets or Sets SocketKeepAlive
        /// </summary>
        [DataMember(Name="socketKeepAlive", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SocketKeepAlive { get; set; }

        /// <summary>
        /// Gets or Sets Cache
        /// </summary>
        [DataMember(Name="cache", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger Cache { get; set; }

        /// <summary>
        /// Gets or Sets NodeCachePercentage
        /// </summary>
        [DataMember(Name="nodeCachePercentage", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger NodeCachePercentage { get; set; }

        /// <summary>
        /// Gets or Sets PrevDocCachePercentage
        /// </summary>
        [DataMember(Name="prevDocCachePercentage", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PrevDocCachePercentage { get; set; }

        /// <summary>
        /// Gets or Sets ChildrenCachePercentage
        /// </summary>
        [DataMember(Name="childrenCachePercentage", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ChildrenCachePercentage { get; set; }

        /// <summary>
        /// Gets or Sets DiffCachePercentage
        /// </summary>
        [DataMember(Name="diffCachePercentage", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger DiffCachePercentage { get; set; }

        /// <summary>
        /// Gets or Sets CacheSegmentCount
        /// </summary>
        [DataMember(Name="cacheSegmentCount", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CacheSegmentCount { get; set; }

        /// <summary>
        /// Gets or Sets CacheStackMoveDistance
        /// </summary>
        [DataMember(Name="cacheStackMoveDistance", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CacheStackMoveDistance { get; set; }

        /// <summary>
        /// Gets or Sets BlobCacheSize
        /// </summary>
        [DataMember(Name="blobCacheSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger BlobCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets PersistentCache
        /// </summary>
        [DataMember(Name="persistentCache", EmitDefaultValue=false)]
        public ConfigNodePropertyString PersistentCache { get; set; }

        /// <summary>
        /// Gets or Sets JournalCache
        /// </summary>
        [DataMember(Name="journalCache", EmitDefaultValue=false)]
        public ConfigNodePropertyString JournalCache { get; set; }

        /// <summary>
        /// Gets or Sets CustomBlobStore
        /// </summary>
        [DataMember(Name="customBlobStore", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean CustomBlobStore { get; set; }

        /// <summary>
        /// Gets or Sets JournalGCInterval
        /// </summary>
        [DataMember(Name="journalGCInterval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger JournalGCInterval { get; set; }

        /// <summary>
        /// Gets or Sets JournalGCMaxAge
        /// </summary>
        [DataMember(Name="journalGCMaxAge", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger JournalGCMaxAge { get; set; }

        /// <summary>
        /// Gets or Sets PrefetchExternalChanges
        /// </summary>
        [DataMember(Name="prefetchExternalChanges", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean PrefetchExternalChanges { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public ConfigNodePropertyString Role { get; set; }

        /// <summary>
        /// Gets or Sets VersionGcMaxAgeInSecs
        /// </summary>
        [DataMember(Name="versionGcMaxAgeInSecs", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger VersionGcMaxAgeInSecs { get; set; }

        /// <summary>
        /// Gets or Sets VersionGCExpression
        /// </summary>
        [DataMember(Name="versionGCExpression", EmitDefaultValue=false)]
        public ConfigNodePropertyString VersionGCExpression { get; set; }

        /// <summary>
        /// Gets or Sets VersionGCTimeLimitInSecs
        /// </summary>
        [DataMember(Name="versionGCTimeLimitInSecs", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger VersionGCTimeLimitInSecs { get; set; }

        /// <summary>
        /// Gets or Sets BlobGcMaxAgeInSecs
        /// </summary>
        [DataMember(Name="blobGcMaxAgeInSecs", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger BlobGcMaxAgeInSecs { get; set; }

        /// <summary>
        /// Gets or Sets BlobTrackSnapshotIntervalInSecs
        /// </summary>
        [DataMember(Name="blobTrackSnapshotIntervalInSecs", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger BlobTrackSnapshotIntervalInSecs { get; set; }

        /// <summary>
        /// Gets or Sets RepositoryHome
        /// </summary>
        [DataMember(Name="repository.home", EmitDefaultValue=false)]
        public ConfigNodePropertyString RepositoryHome { get; set; }

        /// <summary>
        /// Gets or Sets MaxReplicationLagInSecs
        /// </summary>
        [DataMember(Name="maxReplicationLagInSecs", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxReplicationLagInSecs { get; set; }

        /// <summary>
        /// Gets or Sets DocumentStoreType
        /// </summary>
        [DataMember(Name="documentStoreType", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown DocumentStoreType { get; set; }

        /// <summary>
        /// Gets or Sets BundlingDisabled
        /// </summary>
        [DataMember(Name="bundlingDisabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean BundlingDisabled { get; set; }

        /// <summary>
        /// Gets or Sets UpdateLimit
        /// </summary>
        [DataMember(Name="updateLimit", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger UpdateLimit { get; set; }

        /// <summary>
        /// Gets or Sets PersistentCacheIncludes
        /// </summary>
        [DataMember(Name="persistentCacheIncludes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray PersistentCacheIncludes { get; set; }

        /// <summary>
        /// Gets or Sets LeaseCheckMode
        /// </summary>
        [DataMember(Name="leaseCheckMode", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown LeaseCheckMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {\n");
            sb.Append("  Mongouri: ").Append(Mongouri).Append("\n");
            sb.Append("  Db: ").Append(Db).Append("\n");
            sb.Append("  SocketKeepAlive: ").Append(SocketKeepAlive).Append("\n");
            sb.Append("  Cache: ").Append(Cache).Append("\n");
            sb.Append("  NodeCachePercentage: ").Append(NodeCachePercentage).Append("\n");
            sb.Append("  PrevDocCachePercentage: ").Append(PrevDocCachePercentage).Append("\n");
            sb.Append("  ChildrenCachePercentage: ").Append(ChildrenCachePercentage).Append("\n");
            sb.Append("  DiffCachePercentage: ").Append(DiffCachePercentage).Append("\n");
            sb.Append("  CacheSegmentCount: ").Append(CacheSegmentCount).Append("\n");
            sb.Append("  CacheStackMoveDistance: ").Append(CacheStackMoveDistance).Append("\n");
            sb.Append("  BlobCacheSize: ").Append(BlobCacheSize).Append("\n");
            sb.Append("  PersistentCache: ").Append(PersistentCache).Append("\n");
            sb.Append("  JournalCache: ").Append(JournalCache).Append("\n");
            sb.Append("  CustomBlobStore: ").Append(CustomBlobStore).Append("\n");
            sb.Append("  JournalGCInterval: ").Append(JournalGCInterval).Append("\n");
            sb.Append("  JournalGCMaxAge: ").Append(JournalGCMaxAge).Append("\n");
            sb.Append("  PrefetchExternalChanges: ").Append(PrefetchExternalChanges).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  VersionGcMaxAgeInSecs: ").Append(VersionGcMaxAgeInSecs).Append("\n");
            sb.Append("  VersionGCExpression: ").Append(VersionGCExpression).Append("\n");
            sb.Append("  VersionGCTimeLimitInSecs: ").Append(VersionGCTimeLimitInSecs).Append("\n");
            sb.Append("  BlobGcMaxAgeInSecs: ").Append(BlobGcMaxAgeInSecs).Append("\n");
            sb.Append("  BlobTrackSnapshotIntervalInSecs: ").Append(BlobTrackSnapshotIntervalInSecs).Append("\n");
            sb.Append("  RepositoryHome: ").Append(RepositoryHome).Append("\n");
            sb.Append("  MaxReplicationLagInSecs: ").Append(MaxReplicationLagInSecs).Append("\n");
            sb.Append("  DocumentStoreType: ").Append(DocumentStoreType).Append("\n");
            sb.Append("  BundlingDisabled: ").Append(BundlingDisabled).Append("\n");
            sb.Append("  UpdateLimit: ").Append(UpdateLimit).Append("\n");
            sb.Append("  PersistentCacheIncludes: ").Append(PersistentCacheIncludes).Append("\n");
            sb.Append("  LeaseCheckMode: ").Append(LeaseCheckMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mongouri == input.Mongouri ||
                    (this.Mongouri != null &&
                    this.Mongouri.Equals(input.Mongouri))
                ) && 
                (
                    this.Db == input.Db ||
                    (this.Db != null &&
                    this.Db.Equals(input.Db))
                ) && 
                (
                    this.SocketKeepAlive == input.SocketKeepAlive ||
                    (this.SocketKeepAlive != null &&
                    this.SocketKeepAlive.Equals(input.SocketKeepAlive))
                ) && 
                (
                    this.Cache == input.Cache ||
                    (this.Cache != null &&
                    this.Cache.Equals(input.Cache))
                ) && 
                (
                    this.NodeCachePercentage == input.NodeCachePercentage ||
                    (this.NodeCachePercentage != null &&
                    this.NodeCachePercentage.Equals(input.NodeCachePercentage))
                ) && 
                (
                    this.PrevDocCachePercentage == input.PrevDocCachePercentage ||
                    (this.PrevDocCachePercentage != null &&
                    this.PrevDocCachePercentage.Equals(input.PrevDocCachePercentage))
                ) && 
                (
                    this.ChildrenCachePercentage == input.ChildrenCachePercentage ||
                    (this.ChildrenCachePercentage != null &&
                    this.ChildrenCachePercentage.Equals(input.ChildrenCachePercentage))
                ) && 
                (
                    this.DiffCachePercentage == input.DiffCachePercentage ||
                    (this.DiffCachePercentage != null &&
                    this.DiffCachePercentage.Equals(input.DiffCachePercentage))
                ) && 
                (
                    this.CacheSegmentCount == input.CacheSegmentCount ||
                    (this.CacheSegmentCount != null &&
                    this.CacheSegmentCount.Equals(input.CacheSegmentCount))
                ) && 
                (
                    this.CacheStackMoveDistance == input.CacheStackMoveDistance ||
                    (this.CacheStackMoveDistance != null &&
                    this.CacheStackMoveDistance.Equals(input.CacheStackMoveDistance))
                ) && 
                (
                    this.BlobCacheSize == input.BlobCacheSize ||
                    (this.BlobCacheSize != null &&
                    this.BlobCacheSize.Equals(input.BlobCacheSize))
                ) && 
                (
                    this.PersistentCache == input.PersistentCache ||
                    (this.PersistentCache != null &&
                    this.PersistentCache.Equals(input.PersistentCache))
                ) && 
                (
                    this.JournalCache == input.JournalCache ||
                    (this.JournalCache != null &&
                    this.JournalCache.Equals(input.JournalCache))
                ) && 
                (
                    this.CustomBlobStore == input.CustomBlobStore ||
                    (this.CustomBlobStore != null &&
                    this.CustomBlobStore.Equals(input.CustomBlobStore))
                ) && 
                (
                    this.JournalGCInterval == input.JournalGCInterval ||
                    (this.JournalGCInterval != null &&
                    this.JournalGCInterval.Equals(input.JournalGCInterval))
                ) && 
                (
                    this.JournalGCMaxAge == input.JournalGCMaxAge ||
                    (this.JournalGCMaxAge != null &&
                    this.JournalGCMaxAge.Equals(input.JournalGCMaxAge))
                ) && 
                (
                    this.PrefetchExternalChanges == input.PrefetchExternalChanges ||
                    (this.PrefetchExternalChanges != null &&
                    this.PrefetchExternalChanges.Equals(input.PrefetchExternalChanges))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.VersionGcMaxAgeInSecs == input.VersionGcMaxAgeInSecs ||
                    (this.VersionGcMaxAgeInSecs != null &&
                    this.VersionGcMaxAgeInSecs.Equals(input.VersionGcMaxAgeInSecs))
                ) && 
                (
                    this.VersionGCExpression == input.VersionGCExpression ||
                    (this.VersionGCExpression != null &&
                    this.VersionGCExpression.Equals(input.VersionGCExpression))
                ) && 
                (
                    this.VersionGCTimeLimitInSecs == input.VersionGCTimeLimitInSecs ||
                    (this.VersionGCTimeLimitInSecs != null &&
                    this.VersionGCTimeLimitInSecs.Equals(input.VersionGCTimeLimitInSecs))
                ) && 
                (
                    this.BlobGcMaxAgeInSecs == input.BlobGcMaxAgeInSecs ||
                    (this.BlobGcMaxAgeInSecs != null &&
                    this.BlobGcMaxAgeInSecs.Equals(input.BlobGcMaxAgeInSecs))
                ) && 
                (
                    this.BlobTrackSnapshotIntervalInSecs == input.BlobTrackSnapshotIntervalInSecs ||
                    (this.BlobTrackSnapshotIntervalInSecs != null &&
                    this.BlobTrackSnapshotIntervalInSecs.Equals(input.BlobTrackSnapshotIntervalInSecs))
                ) && 
                (
                    this.RepositoryHome == input.RepositoryHome ||
                    (this.RepositoryHome != null &&
                    this.RepositoryHome.Equals(input.RepositoryHome))
                ) && 
                (
                    this.MaxReplicationLagInSecs == input.MaxReplicationLagInSecs ||
                    (this.MaxReplicationLagInSecs != null &&
                    this.MaxReplicationLagInSecs.Equals(input.MaxReplicationLagInSecs))
                ) && 
                (
                    this.DocumentStoreType == input.DocumentStoreType ||
                    (this.DocumentStoreType != null &&
                    this.DocumentStoreType.Equals(input.DocumentStoreType))
                ) && 
                (
                    this.BundlingDisabled == input.BundlingDisabled ||
                    (this.BundlingDisabled != null &&
                    this.BundlingDisabled.Equals(input.BundlingDisabled))
                ) && 
                (
                    this.UpdateLimit == input.UpdateLimit ||
                    (this.UpdateLimit != null &&
                    this.UpdateLimit.Equals(input.UpdateLimit))
                ) && 
                (
                    this.PersistentCacheIncludes == input.PersistentCacheIncludes ||
                    (this.PersistentCacheIncludes != null &&
                    this.PersistentCacheIncludes.Equals(input.PersistentCacheIncludes))
                ) && 
                (
                    this.LeaseCheckMode == input.LeaseCheckMode ||
                    (this.LeaseCheckMode != null &&
                    this.LeaseCheckMode.Equals(input.LeaseCheckMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mongouri != null)
                    hashCode = hashCode * 59 + this.Mongouri.GetHashCode();
                if (this.Db != null)
                    hashCode = hashCode * 59 + this.Db.GetHashCode();
                if (this.SocketKeepAlive != null)
                    hashCode = hashCode * 59 + this.SocketKeepAlive.GetHashCode();
                if (this.Cache != null)
                    hashCode = hashCode * 59 + this.Cache.GetHashCode();
                if (this.NodeCachePercentage != null)
                    hashCode = hashCode * 59 + this.NodeCachePercentage.GetHashCode();
                if (this.PrevDocCachePercentage != null)
                    hashCode = hashCode * 59 + this.PrevDocCachePercentage.GetHashCode();
                if (this.ChildrenCachePercentage != null)
                    hashCode = hashCode * 59 + this.ChildrenCachePercentage.GetHashCode();
                if (this.DiffCachePercentage != null)
                    hashCode = hashCode * 59 + this.DiffCachePercentage.GetHashCode();
                if (this.CacheSegmentCount != null)
                    hashCode = hashCode * 59 + this.CacheSegmentCount.GetHashCode();
                if (this.CacheStackMoveDistance != null)
                    hashCode = hashCode * 59 + this.CacheStackMoveDistance.GetHashCode();
                if (this.BlobCacheSize != null)
                    hashCode = hashCode * 59 + this.BlobCacheSize.GetHashCode();
                if (this.PersistentCache != null)
                    hashCode = hashCode * 59 + this.PersistentCache.GetHashCode();
                if (this.JournalCache != null)
                    hashCode = hashCode * 59 + this.JournalCache.GetHashCode();
                if (this.CustomBlobStore != null)
                    hashCode = hashCode * 59 + this.CustomBlobStore.GetHashCode();
                if (this.JournalGCInterval != null)
                    hashCode = hashCode * 59 + this.JournalGCInterval.GetHashCode();
                if (this.JournalGCMaxAge != null)
                    hashCode = hashCode * 59 + this.JournalGCMaxAge.GetHashCode();
                if (this.PrefetchExternalChanges != null)
                    hashCode = hashCode * 59 + this.PrefetchExternalChanges.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.VersionGcMaxAgeInSecs != null)
                    hashCode = hashCode * 59 + this.VersionGcMaxAgeInSecs.GetHashCode();
                if (this.VersionGCExpression != null)
                    hashCode = hashCode * 59 + this.VersionGCExpression.GetHashCode();
                if (this.VersionGCTimeLimitInSecs != null)
                    hashCode = hashCode * 59 + this.VersionGCTimeLimitInSecs.GetHashCode();
                if (this.BlobGcMaxAgeInSecs != null)
                    hashCode = hashCode * 59 + this.BlobGcMaxAgeInSecs.GetHashCode();
                if (this.BlobTrackSnapshotIntervalInSecs != null)
                    hashCode = hashCode * 59 + this.BlobTrackSnapshotIntervalInSecs.GetHashCode();
                if (this.RepositoryHome != null)
                    hashCode = hashCode * 59 + this.RepositoryHome.GetHashCode();
                if (this.MaxReplicationLagInSecs != null)
                    hashCode = hashCode * 59 + this.MaxReplicationLagInSecs.GetHashCode();
                if (this.DocumentStoreType != null)
                    hashCode = hashCode * 59 + this.DocumentStoreType.GetHashCode();
                if (this.BundlingDisabled != null)
                    hashCode = hashCode * 59 + this.BundlingDisabled.GetHashCode();
                if (this.UpdateLimit != null)
                    hashCode = hashCode * 59 + this.UpdateLimit.GetHashCode();
                if (this.PersistentCacheIncludes != null)
                    hashCode = hashCode * 59 + this.PersistentCacheIncludes.GetHashCode();
                if (this.LeaseCheckMode != null)
                    hashCode = hashCode * 59 + this.LeaseCheckMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
