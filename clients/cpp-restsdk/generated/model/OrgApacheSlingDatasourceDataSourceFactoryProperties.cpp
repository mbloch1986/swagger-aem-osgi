/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDatasourceDataSourceFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDatasourceDataSourceFactoryProperties::OrgApacheSlingDatasourceDataSourceFactoryProperties()
{
    m_Datasource_nameIsSet = false;
    m_Datasource_svc_prop_nameIsSet = false;
    m_DriverClassNameIsSet = false;
    m_UrlIsSet = false;
    m_UsernameIsSet = false;
    m_PasswordIsSet = false;
    m_DefaultAutoCommitIsSet = false;
    m_DefaultReadOnlyIsSet = false;
    m_DefaultTransactionIsolationIsSet = false;
    m_DefaultCatalogIsSet = false;
    m_MaxActiveIsSet = false;
    m_MaxIdleIsSet = false;
    m_MinIdleIsSet = false;
    m_InitialSizeIsSet = false;
    m_MaxWaitIsSet = false;
    m_MaxAgeIsSet = false;
    m_TestOnBorrowIsSet = false;
    m_TestOnReturnIsSet = false;
    m_TestWhileIdleIsSet = false;
    m_ValidationQueryIsSet = false;
    m_ValidationQueryTimeoutIsSet = false;
    m_TimeBetweenEvictionRunsMillisIsSet = false;
    m_MinEvictableIdleTimeMillisIsSet = false;
    m_ConnectionPropertiesIsSet = false;
    m_InitSQLIsSet = false;
    m_JdbcInterceptorsIsSet = false;
    m_ValidationIntervalIsSet = false;
    m_LogValidationErrorsIsSet = false;
    m_Datasource_svc_propertiesIsSet = false;
}

OrgApacheSlingDatasourceDataSourceFactoryProperties::~OrgApacheSlingDatasourceDataSourceFactoryProperties()
{
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDatasourceDataSourceFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Datasource_nameIsSet)
    {
        val[utility::conversions::to_string_t("datasource.name")] = ModelBase::toJson(m_Datasource_name);
    }
    if(m_Datasource_svc_prop_nameIsSet)
    {
        val[utility::conversions::to_string_t("datasource.svc.prop.name")] = ModelBase::toJson(m_Datasource_svc_prop_name);
    }
    if(m_DriverClassNameIsSet)
    {
        val[utility::conversions::to_string_t("driverClassName")] = ModelBase::toJson(m_DriverClassName);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    }
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_Password);
    }
    if(m_DefaultAutoCommitIsSet)
    {
        val[utility::conversions::to_string_t("defaultAutoCommit")] = ModelBase::toJson(m_DefaultAutoCommit);
    }
    if(m_DefaultReadOnlyIsSet)
    {
        val[utility::conversions::to_string_t("defaultReadOnly")] = ModelBase::toJson(m_DefaultReadOnly);
    }
    if(m_DefaultTransactionIsolationIsSet)
    {
        val[utility::conversions::to_string_t("defaultTransactionIsolation")] = ModelBase::toJson(m_DefaultTransactionIsolation);
    }
    if(m_DefaultCatalogIsSet)
    {
        val[utility::conversions::to_string_t("defaultCatalog")] = ModelBase::toJson(m_DefaultCatalog);
    }
    if(m_MaxActiveIsSet)
    {
        val[utility::conversions::to_string_t("maxActive")] = ModelBase::toJson(m_MaxActive);
    }
    if(m_MaxIdleIsSet)
    {
        val[utility::conversions::to_string_t("maxIdle")] = ModelBase::toJson(m_MaxIdle);
    }
    if(m_MinIdleIsSet)
    {
        val[utility::conversions::to_string_t("minIdle")] = ModelBase::toJson(m_MinIdle);
    }
    if(m_InitialSizeIsSet)
    {
        val[utility::conversions::to_string_t("initialSize")] = ModelBase::toJson(m_InitialSize);
    }
    if(m_MaxWaitIsSet)
    {
        val[utility::conversions::to_string_t("maxWait")] = ModelBase::toJson(m_MaxWait);
    }
    if(m_MaxAgeIsSet)
    {
        val[utility::conversions::to_string_t("maxAge")] = ModelBase::toJson(m_MaxAge);
    }
    if(m_TestOnBorrowIsSet)
    {
        val[utility::conversions::to_string_t("testOnBorrow")] = ModelBase::toJson(m_TestOnBorrow);
    }
    if(m_TestOnReturnIsSet)
    {
        val[utility::conversions::to_string_t("testOnReturn")] = ModelBase::toJson(m_TestOnReturn);
    }
    if(m_TestWhileIdleIsSet)
    {
        val[utility::conversions::to_string_t("testWhileIdle")] = ModelBase::toJson(m_TestWhileIdle);
    }
    if(m_ValidationQueryIsSet)
    {
        val[utility::conversions::to_string_t("validationQuery")] = ModelBase::toJson(m_ValidationQuery);
    }
    if(m_ValidationQueryTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("validationQueryTimeout")] = ModelBase::toJson(m_ValidationQueryTimeout);
    }
    if(m_TimeBetweenEvictionRunsMillisIsSet)
    {
        val[utility::conversions::to_string_t("timeBetweenEvictionRunsMillis")] = ModelBase::toJson(m_TimeBetweenEvictionRunsMillis);
    }
    if(m_MinEvictableIdleTimeMillisIsSet)
    {
        val[utility::conversions::to_string_t("minEvictableIdleTimeMillis")] = ModelBase::toJson(m_MinEvictableIdleTimeMillis);
    }
    if(m_ConnectionPropertiesIsSet)
    {
        val[utility::conversions::to_string_t("connectionProperties")] = ModelBase::toJson(m_ConnectionProperties);
    }
    if(m_InitSQLIsSet)
    {
        val[utility::conversions::to_string_t("initSQL")] = ModelBase::toJson(m_InitSQL);
    }
    if(m_JdbcInterceptorsIsSet)
    {
        val[utility::conversions::to_string_t("jdbcInterceptors")] = ModelBase::toJson(m_JdbcInterceptors);
    }
    if(m_ValidationIntervalIsSet)
    {
        val[utility::conversions::to_string_t("validationInterval")] = ModelBase::toJson(m_ValidationInterval);
    }
    if(m_LogValidationErrorsIsSet)
    {
        val[utility::conversions::to_string_t("logValidationErrors")] = ModelBase::toJson(m_LogValidationErrors);
    }
    if(m_Datasource_svc_propertiesIsSet)
    {
        val[utility::conversions::to_string_t("datasource.svc.properties")] = ModelBase::toJson(m_Datasource_svc_properties);
    }

    return val;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("datasource.name")))
    {
        if(!val[utility::conversions::to_string_t("datasource.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("datasource.name")]);
            setDatasourceName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("datasource.svc.prop.name")))
    {
        if(!val[utility::conversions::to_string_t("datasource.svc.prop.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("datasource.svc.prop.name")]);
            setDatasourceSvcPropName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("driverClassName")))
    {
        if(!val[utility::conversions::to_string_t("driverClassName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("driverClassName")]);
            setDriverClassName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        if(!val[utility::conversions::to_string_t("url")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("url")]);
            setUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        if(!val[utility::conversions::to_string_t("username")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("username")]);
            setUsername( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("password")))
    {
        if(!val[utility::conversions::to_string_t("password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("password")]);
            setPassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultAutoCommit")))
    {
        if(!val[utility::conversions::to_string_t("defaultAutoCommit")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultAutoCommit")]);
            setDefaultAutoCommit( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultReadOnly")))
    {
        if(!val[utility::conversions::to_string_t("defaultReadOnly")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultReadOnly")]);
            setDefaultReadOnly( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultTransactionIsolation")))
    {
        if(!val[utility::conversions::to_string_t("defaultTransactionIsolation")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultTransactionIsolation")]);
            setDefaultTransactionIsolation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultCatalog")))
    {
        if(!val[utility::conversions::to_string_t("defaultCatalog")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultCatalog")]);
            setDefaultCatalog( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxActive")))
    {
        if(!val[utility::conversions::to_string_t("maxActive")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxActive")]);
            setMaxActive( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxIdle")))
    {
        if(!val[utility::conversions::to_string_t("maxIdle")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxIdle")]);
            setMaxIdle( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minIdle")))
    {
        if(!val[utility::conversions::to_string_t("minIdle")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("minIdle")]);
            setMinIdle( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("initialSize")))
    {
        if(!val[utility::conversions::to_string_t("initialSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("initialSize")]);
            setInitialSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxWait")))
    {
        if(!val[utility::conversions::to_string_t("maxWait")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxWait")]);
            setMaxWait( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxAge")))
    {
        if(!val[utility::conversions::to_string_t("maxAge")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxAge")]);
            setMaxAge( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("testOnBorrow")))
    {
        if(!val[utility::conversions::to_string_t("testOnBorrow")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("testOnBorrow")]);
            setTestOnBorrow( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("testOnReturn")))
    {
        if(!val[utility::conversions::to_string_t("testOnReturn")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("testOnReturn")]);
            setTestOnReturn( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("testWhileIdle")))
    {
        if(!val[utility::conversions::to_string_t("testWhileIdle")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("testWhileIdle")]);
            setTestWhileIdle( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validationQuery")))
    {
        if(!val[utility::conversions::to_string_t("validationQuery")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("validationQuery")]);
            setValidationQuery( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validationQueryTimeout")))
    {
        if(!val[utility::conversions::to_string_t("validationQueryTimeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("validationQueryTimeout")]);
            setValidationQueryTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timeBetweenEvictionRunsMillis")))
    {
        if(!val[utility::conversions::to_string_t("timeBetweenEvictionRunsMillis")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("timeBetweenEvictionRunsMillis")]);
            setTimeBetweenEvictionRunsMillis( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minEvictableIdleTimeMillis")))
    {
        if(!val[utility::conversions::to_string_t("minEvictableIdleTimeMillis")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("minEvictableIdleTimeMillis")]);
            setMinEvictableIdleTimeMillis( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connectionProperties")))
    {
        if(!val[utility::conversions::to_string_t("connectionProperties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("connectionProperties")]);
            setConnectionProperties( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("initSQL")))
    {
        if(!val[utility::conversions::to_string_t("initSQL")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("initSQL")]);
            setInitSQL( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jdbcInterceptors")))
    {
        if(!val[utility::conversions::to_string_t("jdbcInterceptors")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jdbcInterceptors")]);
            setJdbcInterceptors( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validationInterval")))
    {
        if(!val[utility::conversions::to_string_t("validationInterval")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("validationInterval")]);
            setValidationInterval( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("logValidationErrors")))
    {
        if(!val[utility::conversions::to_string_t("logValidationErrors")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("logValidationErrors")]);
            setLogValidationErrors( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("datasource.svc.properties")))
    {
        if(!val[utility::conversions::to_string_t("datasource.svc.properties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("datasource.svc.properties")]);
            setDatasourceSvcProperties( newItem );
        }
    }
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Datasource_nameIsSet)
    {
        if (m_Datasource_name.get())
        {
            m_Datasource_name->toMultipart(multipart, utility::conversions::to_string_t("datasource.name."));
        }
    }
    if(m_Datasource_svc_prop_nameIsSet)
    {
        if (m_Datasource_svc_prop_name.get())
        {
            m_Datasource_svc_prop_name->toMultipart(multipart, utility::conversions::to_string_t("datasource.svc.prop.name."));
        }
    }
    if(m_DriverClassNameIsSet)
    {
        if (m_DriverClassName.get())
        {
            m_DriverClassName->toMultipart(multipart, utility::conversions::to_string_t("driverClassName."));
        }
    }
    if(m_UrlIsSet)
    {
        if (m_Url.get())
        {
            m_Url->toMultipart(multipart, utility::conversions::to_string_t("url."));
        }
    }
    if(m_UsernameIsSet)
    {
        if (m_Username.get())
        {
            m_Username->toMultipart(multipart, utility::conversions::to_string_t("username."));
        }
    }
    if(m_PasswordIsSet)
    {
        if (m_Password.get())
        {
            m_Password->toMultipart(multipart, utility::conversions::to_string_t("password."));
        }
    }
    if(m_DefaultAutoCommitIsSet)
    {
        if (m_DefaultAutoCommit.get())
        {
            m_DefaultAutoCommit->toMultipart(multipart, utility::conversions::to_string_t("defaultAutoCommit."));
        }
    }
    if(m_DefaultReadOnlyIsSet)
    {
        if (m_DefaultReadOnly.get())
        {
            m_DefaultReadOnly->toMultipart(multipart, utility::conversions::to_string_t("defaultReadOnly."));
        }
    }
    if(m_DefaultTransactionIsolationIsSet)
    {
        if (m_DefaultTransactionIsolation.get())
        {
            m_DefaultTransactionIsolation->toMultipart(multipart, utility::conversions::to_string_t("defaultTransactionIsolation."));
        }
    }
    if(m_DefaultCatalogIsSet)
    {
        if (m_DefaultCatalog.get())
        {
            m_DefaultCatalog->toMultipart(multipart, utility::conversions::to_string_t("defaultCatalog."));
        }
    }
    if(m_MaxActiveIsSet)
    {
        if (m_MaxActive.get())
        {
            m_MaxActive->toMultipart(multipart, utility::conversions::to_string_t("maxActive."));
        }
    }
    if(m_MaxIdleIsSet)
    {
        if (m_MaxIdle.get())
        {
            m_MaxIdle->toMultipart(multipart, utility::conversions::to_string_t("maxIdle."));
        }
    }
    if(m_MinIdleIsSet)
    {
        if (m_MinIdle.get())
        {
            m_MinIdle->toMultipart(multipart, utility::conversions::to_string_t("minIdle."));
        }
    }
    if(m_InitialSizeIsSet)
    {
        if (m_InitialSize.get())
        {
            m_InitialSize->toMultipart(multipart, utility::conversions::to_string_t("initialSize."));
        }
    }
    if(m_MaxWaitIsSet)
    {
        if (m_MaxWait.get())
        {
            m_MaxWait->toMultipart(multipart, utility::conversions::to_string_t("maxWait."));
        }
    }
    if(m_MaxAgeIsSet)
    {
        if (m_MaxAge.get())
        {
            m_MaxAge->toMultipart(multipart, utility::conversions::to_string_t("maxAge."));
        }
    }
    if(m_TestOnBorrowIsSet)
    {
        if (m_TestOnBorrow.get())
        {
            m_TestOnBorrow->toMultipart(multipart, utility::conversions::to_string_t("testOnBorrow."));
        }
    }
    if(m_TestOnReturnIsSet)
    {
        if (m_TestOnReturn.get())
        {
            m_TestOnReturn->toMultipart(multipart, utility::conversions::to_string_t("testOnReturn."));
        }
    }
    if(m_TestWhileIdleIsSet)
    {
        if (m_TestWhileIdle.get())
        {
            m_TestWhileIdle->toMultipart(multipart, utility::conversions::to_string_t("testWhileIdle."));
        }
    }
    if(m_ValidationQueryIsSet)
    {
        if (m_ValidationQuery.get())
        {
            m_ValidationQuery->toMultipart(multipart, utility::conversions::to_string_t("validationQuery."));
        }
    }
    if(m_ValidationQueryTimeoutIsSet)
    {
        if (m_ValidationQueryTimeout.get())
        {
            m_ValidationQueryTimeout->toMultipart(multipart, utility::conversions::to_string_t("validationQueryTimeout."));
        }
    }
    if(m_TimeBetweenEvictionRunsMillisIsSet)
    {
        if (m_TimeBetweenEvictionRunsMillis.get())
        {
            m_TimeBetweenEvictionRunsMillis->toMultipart(multipart, utility::conversions::to_string_t("timeBetweenEvictionRunsMillis."));
        }
    }
    if(m_MinEvictableIdleTimeMillisIsSet)
    {
        if (m_MinEvictableIdleTimeMillis.get())
        {
            m_MinEvictableIdleTimeMillis->toMultipart(multipart, utility::conversions::to_string_t("minEvictableIdleTimeMillis."));
        }
    }
    if(m_ConnectionPropertiesIsSet)
    {
        if (m_ConnectionProperties.get())
        {
            m_ConnectionProperties->toMultipart(multipart, utility::conversions::to_string_t("connectionProperties."));
        }
    }
    if(m_InitSQLIsSet)
    {
        if (m_InitSQL.get())
        {
            m_InitSQL->toMultipart(multipart, utility::conversions::to_string_t("initSQL."));
        }
    }
    if(m_JdbcInterceptorsIsSet)
    {
        if (m_JdbcInterceptors.get())
        {
            m_JdbcInterceptors->toMultipart(multipart, utility::conversions::to_string_t("jdbcInterceptors."));
        }
    }
    if(m_ValidationIntervalIsSet)
    {
        if (m_ValidationInterval.get())
        {
            m_ValidationInterval->toMultipart(multipart, utility::conversions::to_string_t("validationInterval."));
        }
    }
    if(m_LogValidationErrorsIsSet)
    {
        if (m_LogValidationErrors.get())
        {
            m_LogValidationErrors->toMultipart(multipart, utility::conversions::to_string_t("logValidationErrors."));
        }
    }
    if(m_Datasource_svc_propertiesIsSet)
    {
        if (m_Datasource_svc_properties.get())
        {
            m_Datasource_svc_properties->toMultipart(multipart, utility::conversions::to_string_t("datasource.svc.properties."));
        }
    }
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("datasource.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("datasource.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("datasource.name."));
            setDatasourceName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("datasource.svc.prop.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("datasource.svc.prop.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("datasource.svc.prop.name."));
            setDatasourceSvcPropName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("driverClassName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("driverClassName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("driverClassName."));
            setDriverClassName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("url")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("url."));
            setUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("username")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("username")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("username."));
            setUsername( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("password."));
            setPassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultAutoCommit")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultAutoCommit")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultAutoCommit."));
            setDefaultAutoCommit( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultReadOnly")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultReadOnly")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultReadOnly."));
            setDefaultReadOnly( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultTransactionIsolation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultTransactionIsolation")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultTransactionIsolation."));
            setDefaultTransactionIsolation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultCatalog")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultCatalog")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultCatalog."));
            setDefaultCatalog( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxActive")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxActive")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxActive."));
            setMaxActive( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxIdle")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxIdle")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxIdle."));
            setMaxIdle( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minIdle")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("minIdle")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("minIdle."));
            setMinIdle( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initialSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("initialSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("initialSize."));
            setInitialSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxWait")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxWait")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxWait."));
            setMaxWait( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxAge")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxAge")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxAge."));
            setMaxAge( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("testOnBorrow")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("testOnBorrow")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("testOnBorrow."));
            setTestOnBorrow( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("testOnReturn")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("testOnReturn")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("testOnReturn."));
            setTestOnReturn( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("testWhileIdle")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("testWhileIdle")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("testWhileIdle."));
            setTestWhileIdle( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validationQuery")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("validationQuery")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("validationQuery."));
            setValidationQuery( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validationQueryTimeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("validationQueryTimeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("validationQueryTimeout."));
            setValidationQueryTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timeBetweenEvictionRunsMillis")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("timeBetweenEvictionRunsMillis")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("timeBetweenEvictionRunsMillis."));
            setTimeBetweenEvictionRunsMillis( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minEvictableIdleTimeMillis")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("minEvictableIdleTimeMillis")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("minEvictableIdleTimeMillis."));
            setMinEvictableIdleTimeMillis( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connectionProperties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("connectionProperties")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("connectionProperties."));
            setConnectionProperties( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initSQL")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("initSQL")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("initSQL."));
            setInitSQL( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jdbcInterceptors")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jdbcInterceptors")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jdbcInterceptors."));
            setJdbcInterceptors( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validationInterval")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("validationInterval")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("validationInterval."));
            setValidationInterval( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("logValidationErrors")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("logValidationErrors")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("logValidationErrors."));
            setLogValidationErrors( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("datasource.svc.properties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("datasource.svc.properties")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("datasource.svc.properties."));
            setDatasourceSvcProperties( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceName() const
{
    return m_Datasource_name;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Datasource_name = value;
    m_Datasource_nameIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::datasourceNameIsSet() const
{
    return m_Datasource_nameIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetDatasource_name()
{
    m_Datasource_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceSvcPropName() const
{
    return m_Datasource_svc_prop_name;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceSvcPropName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Datasource_svc_prop_name = value;
    m_Datasource_svc_prop_nameIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::datasourceSvcPropNameIsSet() const
{
    return m_Datasource_svc_prop_nameIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetDatasource_svc_prop_name()
{
    m_Datasource_svc_prop_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDriverClassName() const
{
    return m_DriverClassName;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDriverClassName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_DriverClassName = value;
    m_DriverClassNameIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::driverClassNameIsSet() const
{
    return m_DriverClassNameIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetDriverClassName()
{
    m_DriverClassNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getUrl() const
{
    return m_Url;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::urlIsSet() const
{
    return m_UrlIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetUrl()
{
    m_UrlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getUsername() const
{
    return m_Username;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setUsername(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetUsername()
{
    m_UsernameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getPassword() const
{
    return m_Password;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetPassword()
{
    m_PasswordIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultAutoCommit() const
{
    return m_DefaultAutoCommit;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultAutoCommit(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_DefaultAutoCommit = value;
    m_DefaultAutoCommitIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::defaultAutoCommitIsSet() const
{
    return m_DefaultAutoCommitIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetDefaultAutoCommit()
{
    m_DefaultAutoCommitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultReadOnly() const
{
    return m_DefaultReadOnly;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultReadOnly(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_DefaultReadOnly = value;
    m_DefaultReadOnlyIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::defaultReadOnlyIsSet() const
{
    return m_DefaultReadOnlyIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetDefaultReadOnly()
{
    m_DefaultReadOnlyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultTransactionIsolation() const
{
    return m_DefaultTransactionIsolation;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultTransactionIsolation(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_DefaultTransactionIsolation = value;
    m_DefaultTransactionIsolationIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::defaultTransactionIsolationIsSet() const
{
    return m_DefaultTransactionIsolationIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetDefaultTransactionIsolation()
{
    m_DefaultTransactionIsolationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDefaultCatalog() const
{
    return m_DefaultCatalog;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDefaultCatalog(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_DefaultCatalog = value;
    m_DefaultCatalogIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::defaultCatalogIsSet() const
{
    return m_DefaultCatalogIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetDefaultCatalog()
{
    m_DefaultCatalogIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxActive() const
{
    return m_MaxActive;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxActive(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxActive = value;
    m_MaxActiveIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::maxActiveIsSet() const
{
    return m_MaxActiveIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetMaxActive()
{
    m_MaxActiveIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxIdle() const
{
    return m_MaxIdle;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxIdle(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxIdle = value;
    m_MaxIdleIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::maxIdleIsSet() const
{
    return m_MaxIdleIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetMaxIdle()
{
    m_MaxIdleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMinIdle() const
{
    return m_MinIdle;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMinIdle(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinIdle = value;
    m_MinIdleIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::minIdleIsSet() const
{
    return m_MinIdleIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetMinIdle()
{
    m_MinIdleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getInitialSize() const
{
    return m_InitialSize;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setInitialSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_InitialSize = value;
    m_InitialSizeIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::initialSizeIsSet() const
{
    return m_InitialSizeIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetInitialSize()
{
    m_InitialSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxWait() const
{
    return m_MaxWait;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxWait(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxWait = value;
    m_MaxWaitIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::maxWaitIsSet() const
{
    return m_MaxWaitIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetMaxWait()
{
    m_MaxWaitIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMaxAge() const
{
    return m_MaxAge;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxAge = value;
    m_MaxAgeIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::maxAgeIsSet() const
{
    return m_MaxAgeIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetMaxAge()
{
    m_MaxAgeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDatasourceDataSourceFactoryProperties::getTestOnBorrow() const
{
    return m_TestOnBorrow;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setTestOnBorrow(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_TestOnBorrow = value;
    m_TestOnBorrowIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::testOnBorrowIsSet() const
{
    return m_TestOnBorrowIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetTestOnBorrow()
{
    m_TestOnBorrowIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDatasourceDataSourceFactoryProperties::getTestOnReturn() const
{
    return m_TestOnReturn;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setTestOnReturn(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_TestOnReturn = value;
    m_TestOnReturnIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::testOnReturnIsSet() const
{
    return m_TestOnReturnIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetTestOnReturn()
{
    m_TestOnReturnIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDatasourceDataSourceFactoryProperties::getTestWhileIdle() const
{
    return m_TestWhileIdle;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setTestWhileIdle(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_TestWhileIdle = value;
    m_TestWhileIdleIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::testWhileIdleIsSet() const
{
    return m_TestWhileIdleIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetTestWhileIdle()
{
    m_TestWhileIdleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationQuery() const
{
    return m_ValidationQuery;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationQuery(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ValidationQuery = value;
    m_ValidationQueryIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::validationQueryIsSet() const
{
    return m_ValidationQueryIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetValidationQuery()
{
    m_ValidationQueryIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationQueryTimeout() const
{
    return m_ValidationQueryTimeout;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationQueryTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ValidationQueryTimeout = value;
    m_ValidationQueryTimeoutIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::validationQueryTimeoutIsSet() const
{
    return m_ValidationQueryTimeoutIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetValidationQueryTimeout()
{
    m_ValidationQueryTimeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getTimeBetweenEvictionRunsMillis() const
{
    return m_TimeBetweenEvictionRunsMillis;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setTimeBetweenEvictionRunsMillis(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_TimeBetweenEvictionRunsMillis = value;
    m_TimeBetweenEvictionRunsMillisIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::timeBetweenEvictionRunsMillisIsSet() const
{
    return m_TimeBetweenEvictionRunsMillisIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetTimeBetweenEvictionRunsMillis()
{
    m_TimeBetweenEvictionRunsMillisIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getMinEvictableIdleTimeMillis() const
{
    return m_MinEvictableIdleTimeMillis;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setMinEvictableIdleTimeMillis(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinEvictableIdleTimeMillis = value;
    m_MinEvictableIdleTimeMillisIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::minEvictableIdleTimeMillisIsSet() const
{
    return m_MinEvictableIdleTimeMillisIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetMinEvictableIdleTimeMillis()
{
    m_MinEvictableIdleTimeMillisIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getConnectionProperties() const
{
    return m_ConnectionProperties;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setConnectionProperties(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_ConnectionProperties = value;
    m_ConnectionPropertiesIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::connectionPropertiesIsSet() const
{
    return m_ConnectionPropertiesIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetConnectionProperties()
{
    m_ConnectionPropertiesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getInitSQL() const
{
    return m_InitSQL;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setInitSQL(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_InitSQL = value;
    m_InitSQLIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::initSQLIsSet() const
{
    return m_InitSQLIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetInitSQL()
{
    m_InitSQLIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceDataSourceFactoryProperties::getJdbcInterceptors() const
{
    return m_JdbcInterceptors;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setJdbcInterceptors(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_JdbcInterceptors = value;
    m_JdbcInterceptorsIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::jdbcInterceptorsIsSet() const
{
    return m_JdbcInterceptorsIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetJdbcInterceptors()
{
    m_JdbcInterceptorsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDatasourceDataSourceFactoryProperties::getValidationInterval() const
{
    return m_ValidationInterval;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setValidationInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ValidationInterval = value;
    m_ValidationIntervalIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::validationIntervalIsSet() const
{
    return m_ValidationIntervalIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetValidationInterval()
{
    m_ValidationIntervalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDatasourceDataSourceFactoryProperties::getLogValidationErrors() const
{
    return m_LogValidationErrors;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setLogValidationErrors(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_LogValidationErrors = value;
    m_LogValidationErrorsIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::logValidationErrorsIsSet() const
{
    return m_LogValidationErrorsIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetLogValidationErrors()
{
    m_LogValidationErrorsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDatasourceDataSourceFactoryProperties::getDatasourceSvcProperties() const
{
    return m_Datasource_svc_properties;
}


void OrgApacheSlingDatasourceDataSourceFactoryProperties::setDatasourceSvcProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Datasource_svc_properties = value;
    m_Datasource_svc_propertiesIsSet = true;
}
bool OrgApacheSlingDatasourceDataSourceFactoryProperties::datasourceSvcPropertiesIsSet() const
{
    return m_Datasource_svc_propertiesIsSet;
}

void OrgApacheSlingDatasourceDataSourceFactoryProperties::unsetDatasource_svc_properties()
{
    m_Datasource_svc_propertiesIsSet = false;
}

}
}
}
}

