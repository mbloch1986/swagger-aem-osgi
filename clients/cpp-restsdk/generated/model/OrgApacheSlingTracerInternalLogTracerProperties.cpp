/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingTracerInternalLogTracerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingTracerInternalLogTracerProperties::OrgApacheSlingTracerInternalLogTracerProperties()
{
    m_TracerSetsIsSet = false;
    m_EnabledIsSet = false;
    m_ServletEnabledIsSet = false;
    m_RecordingCacheSizeInMBIsSet = false;
    m_RecordingCacheDurationInSecsIsSet = false;
    m_RecordingCompressionEnabledIsSet = false;
    m_GzipResponseIsSet = false;
}

OrgApacheSlingTracerInternalLogTracerProperties::~OrgApacheSlingTracerInternalLogTracerProperties()
{
}

void OrgApacheSlingTracerInternalLogTracerProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingTracerInternalLogTracerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TracerSetsIsSet)
    {
        val[utility::conversions::to_string_t("tracerSets")] = ModelBase::toJson(m_TracerSets);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_ServletEnabledIsSet)
    {
        val[utility::conversions::to_string_t("servletEnabled")] = ModelBase::toJson(m_ServletEnabled);
    }
    if(m_RecordingCacheSizeInMBIsSet)
    {
        val[utility::conversions::to_string_t("recordingCacheSizeInMB")] = ModelBase::toJson(m_RecordingCacheSizeInMB);
    }
    if(m_RecordingCacheDurationInSecsIsSet)
    {
        val[utility::conversions::to_string_t("recordingCacheDurationInSecs")] = ModelBase::toJson(m_RecordingCacheDurationInSecs);
    }
    if(m_RecordingCompressionEnabledIsSet)
    {
        val[utility::conversions::to_string_t("recordingCompressionEnabled")] = ModelBase::toJson(m_RecordingCompressionEnabled);
    }
    if(m_GzipResponseIsSet)
    {
        val[utility::conversions::to_string_t("gzipResponse")] = ModelBase::toJson(m_GzipResponse);
    }

    return val;
}

void OrgApacheSlingTracerInternalLogTracerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("tracerSets")))
    {
        if(!val[utility::conversions::to_string_t("tracerSets")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("tracerSets")]);
            setTracerSets( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        if(!val[utility::conversions::to_string_t("enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enabled")]);
            setEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("servletEnabled")))
    {
        if(!val[utility::conversions::to_string_t("servletEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("servletEnabled")]);
            setServletEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("recordingCacheSizeInMB")))
    {
        if(!val[utility::conversions::to_string_t("recordingCacheSizeInMB")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("recordingCacheSizeInMB")]);
            setRecordingCacheSizeInMB( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("recordingCacheDurationInSecs")))
    {
        if(!val[utility::conversions::to_string_t("recordingCacheDurationInSecs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("recordingCacheDurationInSecs")]);
            setRecordingCacheDurationInSecs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("recordingCompressionEnabled")))
    {
        if(!val[utility::conversions::to_string_t("recordingCompressionEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("recordingCompressionEnabled")]);
            setRecordingCompressionEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("gzipResponse")))
    {
        if(!val[utility::conversions::to_string_t("gzipResponse")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("gzipResponse")]);
            setGzipResponse( newItem );
        }
    }
}

void OrgApacheSlingTracerInternalLogTracerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TracerSetsIsSet)
    {
        if (m_TracerSets.get())
        {
            m_TracerSets->toMultipart(multipart, utility::conversions::to_string_t("tracerSets."));
        }
    }
    if(m_EnabledIsSet)
    {
        if (m_Enabled.get())
        {
            m_Enabled->toMultipart(multipart, utility::conversions::to_string_t("enabled."));
        }
    }
    if(m_ServletEnabledIsSet)
    {
        if (m_ServletEnabled.get())
        {
            m_ServletEnabled->toMultipart(multipart, utility::conversions::to_string_t("servletEnabled."));
        }
    }
    if(m_RecordingCacheSizeInMBIsSet)
    {
        if (m_RecordingCacheSizeInMB.get())
        {
            m_RecordingCacheSizeInMB->toMultipart(multipart, utility::conversions::to_string_t("recordingCacheSizeInMB."));
        }
    }
    if(m_RecordingCacheDurationInSecsIsSet)
    {
        if (m_RecordingCacheDurationInSecs.get())
        {
            m_RecordingCacheDurationInSecs->toMultipart(multipart, utility::conversions::to_string_t("recordingCacheDurationInSecs."));
        }
    }
    if(m_RecordingCompressionEnabledIsSet)
    {
        if (m_RecordingCompressionEnabled.get())
        {
            m_RecordingCompressionEnabled->toMultipart(multipart, utility::conversions::to_string_t("recordingCompressionEnabled."));
        }
    }
    if(m_GzipResponseIsSet)
    {
        if (m_GzipResponse.get())
        {
            m_GzipResponse->toMultipart(multipart, utility::conversions::to_string_t("gzipResponse."));
        }
    }
}

void OrgApacheSlingTracerInternalLogTracerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("tracerSets")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("tracerSets")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("tracerSets."));
            setTracerSets( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabled."));
            setEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("servletEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("servletEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("servletEnabled."));
            setServletEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("recordingCacheSizeInMB")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("recordingCacheSizeInMB")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("recordingCacheSizeInMB."));
            setRecordingCacheSizeInMB( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("recordingCacheDurationInSecs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("recordingCacheDurationInSecs")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("recordingCacheDurationInSecs."));
            setRecordingCacheDurationInSecs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("recordingCompressionEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("recordingCompressionEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("recordingCompressionEnabled."));
            setRecordingCompressionEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("gzipResponse")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("gzipResponse")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("gzipResponse."));
            setGzipResponse( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingTracerInternalLogTracerProperties::getTracerSets() const
{
    return m_TracerSets;
}


void OrgApacheSlingTracerInternalLogTracerProperties::setTracerSets(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_TracerSets = value;
    m_TracerSetsIsSet = true;
}
bool OrgApacheSlingTracerInternalLogTracerProperties::tracerSetsIsSet() const
{
    return m_TracerSetsIsSet;
}

void OrgApacheSlingTracerInternalLogTracerProperties::unsetTracerSets()
{
    m_TracerSetsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingTracerInternalLogTracerProperties::getEnabled() const
{
    return m_Enabled;
}


void OrgApacheSlingTracerInternalLogTracerProperties::setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingTracerInternalLogTracerProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void OrgApacheSlingTracerInternalLogTracerProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingTracerInternalLogTracerProperties::getServletEnabled() const
{
    return m_ServletEnabled;
}


void OrgApacheSlingTracerInternalLogTracerProperties::setServletEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_ServletEnabled = value;
    m_ServletEnabledIsSet = true;
}
bool OrgApacheSlingTracerInternalLogTracerProperties::servletEnabledIsSet() const
{
    return m_ServletEnabledIsSet;
}

void OrgApacheSlingTracerInternalLogTracerProperties::unsetServletEnabled()
{
    m_ServletEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingTracerInternalLogTracerProperties::getRecordingCacheSizeInMB() const
{
    return m_RecordingCacheSizeInMB;
}


void OrgApacheSlingTracerInternalLogTracerProperties::setRecordingCacheSizeInMB(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_RecordingCacheSizeInMB = value;
    m_RecordingCacheSizeInMBIsSet = true;
}
bool OrgApacheSlingTracerInternalLogTracerProperties::recordingCacheSizeInMBIsSet() const
{
    return m_RecordingCacheSizeInMBIsSet;
}

void OrgApacheSlingTracerInternalLogTracerProperties::unsetRecordingCacheSizeInMB()
{
    m_RecordingCacheSizeInMBIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingTracerInternalLogTracerProperties::getRecordingCacheDurationInSecs() const
{
    return m_RecordingCacheDurationInSecs;
}


void OrgApacheSlingTracerInternalLogTracerProperties::setRecordingCacheDurationInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_RecordingCacheDurationInSecs = value;
    m_RecordingCacheDurationInSecsIsSet = true;
}
bool OrgApacheSlingTracerInternalLogTracerProperties::recordingCacheDurationInSecsIsSet() const
{
    return m_RecordingCacheDurationInSecsIsSet;
}

void OrgApacheSlingTracerInternalLogTracerProperties::unsetRecordingCacheDurationInSecs()
{
    m_RecordingCacheDurationInSecsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingTracerInternalLogTracerProperties::getRecordingCompressionEnabled() const
{
    return m_RecordingCompressionEnabled;
}


void OrgApacheSlingTracerInternalLogTracerProperties::setRecordingCompressionEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_RecordingCompressionEnabled = value;
    m_RecordingCompressionEnabledIsSet = true;
}
bool OrgApacheSlingTracerInternalLogTracerProperties::recordingCompressionEnabledIsSet() const
{
    return m_RecordingCompressionEnabledIsSet;
}

void OrgApacheSlingTracerInternalLogTracerProperties::unsetRecordingCompressionEnabled()
{
    m_RecordingCompressionEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingTracerInternalLogTracerProperties::getGzipResponse() const
{
    return m_GzipResponse;
}


void OrgApacheSlingTracerInternalLogTracerProperties::setGzipResponse(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_GzipResponse = value;
    m_GzipResponseIsSet = true;
}
bool OrgApacheSlingTracerInternalLogTracerProperties::gzipResponseIsSet() const
{
    return m_GzipResponseIsSet;
}

void OrgApacheSlingTracerInternalLogTracerProperties::unsetGzipResponse()
{
    m_GzipResponseIsSet = false;
}

}
}
}
}

