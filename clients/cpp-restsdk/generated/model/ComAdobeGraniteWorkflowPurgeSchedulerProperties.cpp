/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteWorkflowPurgeSchedulerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteWorkflowPurgeSchedulerProperties::ComAdobeGraniteWorkflowPurgeSchedulerProperties()
{
    m_Scheduledpurge_nameIsSet = false;
    m_Scheduledpurge_workflowStatusIsSet = false;
    m_Scheduledpurge_modelIdsIsSet = false;
    m_Scheduledpurge_daysoldIsSet = false;
}

ComAdobeGraniteWorkflowPurgeSchedulerProperties::~ComAdobeGraniteWorkflowPurgeSchedulerProperties()
{
}

void ComAdobeGraniteWorkflowPurgeSchedulerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteWorkflowPurgeSchedulerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Scheduledpurge_nameIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.name")] = ModelBase::toJson(m_Scheduledpurge_name);
    }
    if(m_Scheduledpurge_workflowStatusIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.workflowStatus")] = ModelBase::toJson(m_Scheduledpurge_workflowStatus);
    }
    if(m_Scheduledpurge_modelIdsIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.modelIds")] = ModelBase::toJson(m_Scheduledpurge_modelIds);
    }
    if(m_Scheduledpurge_daysoldIsSet)
    {
        val[utility::conversions::to_string_t("scheduledpurge.daysold")] = ModelBase::toJson(m_Scheduledpurge_daysold);
    }

    return val;
}

void ComAdobeGraniteWorkflowPurgeSchedulerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.name")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.name")]);
            setScheduledpurgeName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.workflowStatus")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.workflowStatus")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.workflowStatus")]);
            setScheduledpurgeWorkflowStatus( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.modelIds")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.modelIds")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.modelIds")]);
            setScheduledpurgeModelIds( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledpurge.daysold")))
    {
        if(!val[utility::conversions::to_string_t("scheduledpurge.daysold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduledpurge.daysold")]);
            setScheduledpurgeDaysold( newItem );
        }
    }
}

void ComAdobeGraniteWorkflowPurgeSchedulerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Scheduledpurge_nameIsSet)
    {
        if (m_Scheduledpurge_name.get())
        {
            m_Scheduledpurge_name->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.name."));
        }
    }
    if(m_Scheduledpurge_workflowStatusIsSet)
    {
        if (m_Scheduledpurge_workflowStatus.get())
        {
            m_Scheduledpurge_workflowStatus->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.workflowStatus."));
        }
    }
    if(m_Scheduledpurge_modelIdsIsSet)
    {
        if (m_Scheduledpurge_modelIds.get())
        {
            m_Scheduledpurge_modelIds->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.modelIds."));
        }
    }
    if(m_Scheduledpurge_daysoldIsSet)
    {
        if (m_Scheduledpurge_daysold.get())
        {
            m_Scheduledpurge_daysold->toMultipart(multipart, utility::conversions::to_string_t("scheduledpurge.daysold."));
        }
    }
}

void ComAdobeGraniteWorkflowPurgeSchedulerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.name."));
            setScheduledpurgeName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.workflowStatus")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.workflowStatus")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.workflowStatus."));
            setScheduledpurgeWorkflowStatus( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.modelIds")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.modelIds")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.modelIds."));
            setScheduledpurgeModelIds( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.daysold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduledpurge.daysold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduledpurge.daysold."));
            setScheduledpurgeDaysold( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteWorkflowPurgeSchedulerProperties::getScheduledpurgeName() const
{
    return m_Scheduledpurge_name;
}


void ComAdobeGraniteWorkflowPurgeSchedulerProperties::setScheduledpurgeName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Scheduledpurge_name = value;
    m_Scheduledpurge_nameIsSet = true;
}
bool ComAdobeGraniteWorkflowPurgeSchedulerProperties::scheduledpurgeNameIsSet() const
{
    return m_Scheduledpurge_nameIsSet;
}

void ComAdobeGraniteWorkflowPurgeSchedulerProperties::unsetScheduledpurge_name()
{
    m_Scheduledpurge_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeGraniteWorkflowPurgeSchedulerProperties::getScheduledpurgeWorkflowStatus() const
{
    return m_Scheduledpurge_workflowStatus;
}


void ComAdobeGraniteWorkflowPurgeSchedulerProperties::setScheduledpurgeWorkflowStatus(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Scheduledpurge_workflowStatus = value;
    m_Scheduledpurge_workflowStatusIsSet = true;
}
bool ComAdobeGraniteWorkflowPurgeSchedulerProperties::scheduledpurgeWorkflowStatusIsSet() const
{
    return m_Scheduledpurge_workflowStatusIsSet;
}

void ComAdobeGraniteWorkflowPurgeSchedulerProperties::unsetScheduledpurge_workflowStatus()
{
    m_Scheduledpurge_workflowStatusIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteWorkflowPurgeSchedulerProperties::getScheduledpurgeModelIds() const
{
    return m_Scheduledpurge_modelIds;
}


void ComAdobeGraniteWorkflowPurgeSchedulerProperties::setScheduledpurgeModelIds(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Scheduledpurge_modelIds = value;
    m_Scheduledpurge_modelIdsIsSet = true;
}
bool ComAdobeGraniteWorkflowPurgeSchedulerProperties::scheduledpurgeModelIdsIsSet() const
{
    return m_Scheduledpurge_modelIdsIsSet;
}

void ComAdobeGraniteWorkflowPurgeSchedulerProperties::unsetScheduledpurge_modelIds()
{
    m_Scheduledpurge_modelIdsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteWorkflowPurgeSchedulerProperties::getScheduledpurgeDaysold() const
{
    return m_Scheduledpurge_daysold;
}


void ComAdobeGraniteWorkflowPurgeSchedulerProperties::setScheduledpurgeDaysold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Scheduledpurge_daysold = value;
    m_Scheduledpurge_daysoldIsSet = true;
}
bool ComAdobeGraniteWorkflowPurgeSchedulerProperties::scheduledpurgeDaysoldIsSet() const
{
    return m_Scheduledpurge_daysoldIsSet;
}

void ComAdobeGraniteWorkflowPurgeSchedulerProperties::unsetScheduledpurge_daysold()
{
    m_Scheduledpurge_daysoldIsSet = false;
}

}
}
}
}

