/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingServletsPostImplSlingPostServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::OAIOrgApacheSlingServletsPostImplSlingPostServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::OAIOrgApacheSlingServletsPostImplSlingPostServletProperties() {
    init();
}

OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::~OAIOrgApacheSlingServletsPostImplSlingPostServletProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::init() {
    servlet_post_date_formats = new OAIConfigNodePropertyArray();
    m_servlet_post_date_formats_isSet = false;
    servlet_post_node_name_hints = new OAIConfigNodePropertyArray();
    m_servlet_post_node_name_hints_isSet = false;
    servlet_post_node_name_max_length = new OAIConfigNodePropertyInteger();
    m_servlet_post_node_name_max_length_isSet = false;
    servlet_post_checkin_new_versionable_nodes = new OAIConfigNodePropertyBoolean();
    m_servlet_post_checkin_new_versionable_nodes_isSet = false;
    servlet_post_auto_checkout = new OAIConfigNodePropertyBoolean();
    m_servlet_post_auto_checkout_isSet = false;
    servlet_post_auto_checkin = new OAIConfigNodePropertyBoolean();
    m_servlet_post_auto_checkin_isSet = false;
    servlet_post_ignore_pattern = new OAIConfigNodePropertyString();
    m_servlet_post_ignore_pattern_isSet = false;
}

void
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::cleanup() {
    if(servlet_post_date_formats != nullptr) { 
        delete servlet_post_date_formats;
    }
    if(servlet_post_node_name_hints != nullptr) { 
        delete servlet_post_node_name_hints;
    }
    if(servlet_post_node_name_max_length != nullptr) { 
        delete servlet_post_node_name_max_length;
    }
    if(servlet_post_checkin_new_versionable_nodes != nullptr) { 
        delete servlet_post_checkin_new_versionable_nodes;
    }
    if(servlet_post_auto_checkout != nullptr) { 
        delete servlet_post_auto_checkout;
    }
    if(servlet_post_auto_checkin != nullptr) { 
        delete servlet_post_auto_checkin;
    }
    if(servlet_post_ignore_pattern != nullptr) { 
        delete servlet_post_ignore_pattern;
    }
}

OAIOrgApacheSlingServletsPostImplSlingPostServletProperties*
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&servlet_post_date_formats, pJson["servlet.post.dateFormats"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&servlet_post_node_name_hints, pJson["servlet.post.nodeNameHints"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&servlet_post_node_name_max_length, pJson["servlet.post.nodeNameMaxLength"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&servlet_post_checkin_new_versionable_nodes, pJson["servlet.post.checkinNewVersionableNodes"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&servlet_post_auto_checkout, pJson["servlet.post.autoCheckout"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&servlet_post_auto_checkin, pJson["servlet.post.autoCheckin"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&servlet_post_ignore_pattern, pJson["servlet.post.ignorePattern"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::asJsonObject() {
    QJsonObject obj;
    if((servlet_post_date_formats != nullptr) && (servlet_post_date_formats->isSet())){
        toJsonValue(QString("servlet.post.dateFormats"), servlet_post_date_formats, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((servlet_post_node_name_hints != nullptr) && (servlet_post_node_name_hints->isSet())){
        toJsonValue(QString("servlet.post.nodeNameHints"), servlet_post_node_name_hints, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((servlet_post_node_name_max_length != nullptr) && (servlet_post_node_name_max_length->isSet())){
        toJsonValue(QString("servlet.post.nodeNameMaxLength"), servlet_post_node_name_max_length, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((servlet_post_checkin_new_versionable_nodes != nullptr) && (servlet_post_checkin_new_versionable_nodes->isSet())){
        toJsonValue(QString("servlet.post.checkinNewVersionableNodes"), servlet_post_checkin_new_versionable_nodes, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((servlet_post_auto_checkout != nullptr) && (servlet_post_auto_checkout->isSet())){
        toJsonValue(QString("servlet.post.autoCheckout"), servlet_post_auto_checkout, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((servlet_post_auto_checkin != nullptr) && (servlet_post_auto_checkin->isSet())){
        toJsonValue(QString("servlet.post.autoCheckin"), servlet_post_auto_checkin, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((servlet_post_ignore_pattern != nullptr) && (servlet_post_ignore_pattern->isSet())){
        toJsonValue(QString("servlet.post.ignorePattern"), servlet_post_ignore_pattern, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostDateFormats() {
    return servlet_post_date_formats;
}
void
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostDateFormats(OAIConfigNodePropertyArray* servlet_post_date_formats) {
    this->servlet_post_date_formats = servlet_post_date_formats;
    this->m_servlet_post_date_formats_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostNodeNameHints() {
    return servlet_post_node_name_hints;
}
void
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostNodeNameHints(OAIConfigNodePropertyArray* servlet_post_node_name_hints) {
    this->servlet_post_node_name_hints = servlet_post_node_name_hints;
    this->m_servlet_post_node_name_hints_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostNodeNameMaxLength() {
    return servlet_post_node_name_max_length;
}
void
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostNodeNameMaxLength(OAIConfigNodePropertyInteger* servlet_post_node_name_max_length) {
    this->servlet_post_node_name_max_length = servlet_post_node_name_max_length;
    this->m_servlet_post_node_name_max_length_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostCheckinNewVersionableNodes() {
    return servlet_post_checkin_new_versionable_nodes;
}
void
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostCheckinNewVersionableNodes(OAIConfigNodePropertyBoolean* servlet_post_checkin_new_versionable_nodes) {
    this->servlet_post_checkin_new_versionable_nodes = servlet_post_checkin_new_versionable_nodes;
    this->m_servlet_post_checkin_new_versionable_nodes_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostAutoCheckout() {
    return servlet_post_auto_checkout;
}
void
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostAutoCheckout(OAIConfigNodePropertyBoolean* servlet_post_auto_checkout) {
    this->servlet_post_auto_checkout = servlet_post_auto_checkout;
    this->m_servlet_post_auto_checkout_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostAutoCheckin() {
    return servlet_post_auto_checkin;
}
void
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostAutoCheckin(OAIConfigNodePropertyBoolean* servlet_post_auto_checkin) {
    this->servlet_post_auto_checkin = servlet_post_auto_checkin;
    this->m_servlet_post_auto_checkin_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::getServletPostIgnorePattern() {
    return servlet_post_ignore_pattern;
}
void
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::setServletPostIgnorePattern(OAIConfigNodePropertyString* servlet_post_ignore_pattern) {
    this->servlet_post_ignore_pattern = servlet_post_ignore_pattern;
    this->m_servlet_post_ignore_pattern_isSet = true;
}


bool
OAIOrgApacheSlingServletsPostImplSlingPostServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(servlet_post_date_formats != nullptr && servlet_post_date_formats->isSet()){ isObjectUpdated = true; break;}
        if(servlet_post_node_name_hints != nullptr && servlet_post_node_name_hints->isSet()){ isObjectUpdated = true; break;}
        if(servlet_post_node_name_max_length != nullptr && servlet_post_node_name_max_length->isSet()){ isObjectUpdated = true; break;}
        if(servlet_post_checkin_new_versionable_nodes != nullptr && servlet_post_checkin_new_versionable_nodes->isSet()){ isObjectUpdated = true; break;}
        if(servlet_post_auto_checkout != nullptr && servlet_post_auto_checkout->isSet()){ isObjectUpdated = true; break;}
        if(servlet_post_auto_checkin != nullptr && servlet_post_auto_checkin->isSet()){ isObjectUpdated = true; break;}
        if(servlet_post_ignore_pattern != nullptr && servlet_post_ignore_pattern->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

