/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties :  IEquatable<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties" /> class.
        /// </summary>
        /// <param name="cqAnalyticsTestandtargetApiUrl">cqAnalyticsTestandtargetApiUrl.</param>
        /// <param name="cqAnalyticsTestandtargetTimeout">cqAnalyticsTestandtargetTimeout.</param>
        /// <param name="cqAnalyticsTestandtargetSockettimeout">cqAnalyticsTestandtargetSockettimeout.</param>
        /// <param name="cqAnalyticsTestandtargetRecommendationsUrlReplace">cqAnalyticsTestandtargetRecommendationsUrlReplace.</param>
        /// <param name="cqAnalyticsTestandtargetRecommendationsUrlReplacewith">cqAnalyticsTestandtargetRecommendationsUrlReplacewith.</param>
        public ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties(ConfigNodePropertyString cqAnalyticsTestandtargetApiUrl = default(ConfigNodePropertyString), ConfigNodePropertyInteger cqAnalyticsTestandtargetTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger cqAnalyticsTestandtargetSockettimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyString cqAnalyticsTestandtargetRecommendationsUrlReplace = default(ConfigNodePropertyString), ConfigNodePropertyString cqAnalyticsTestandtargetRecommendationsUrlReplacewith = default(ConfigNodePropertyString))
        {
            this.CqAnalyticsTestandtargetApiUrl = cqAnalyticsTestandtargetApiUrl;
            this.CqAnalyticsTestandtargetTimeout = cqAnalyticsTestandtargetTimeout;
            this.CqAnalyticsTestandtargetSockettimeout = cqAnalyticsTestandtargetSockettimeout;
            this.CqAnalyticsTestandtargetRecommendationsUrlReplace = cqAnalyticsTestandtargetRecommendationsUrlReplace;
            this.CqAnalyticsTestandtargetRecommendationsUrlReplacewith = cqAnalyticsTestandtargetRecommendationsUrlReplacewith;
        }
        
        /// <summary>
        /// Gets or Sets CqAnalyticsTestandtargetApiUrl
        /// </summary>
        [DataMember(Name="cq.analytics.testandtarget.api.url", EmitDefaultValue=false)]
        public ConfigNodePropertyString CqAnalyticsTestandtargetApiUrl { get; set; }

        /// <summary>
        /// Gets or Sets CqAnalyticsTestandtargetTimeout
        /// </summary>
        [DataMember(Name="cq.analytics.testandtarget.timeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqAnalyticsTestandtargetTimeout { get; set; }

        /// <summary>
        /// Gets or Sets CqAnalyticsTestandtargetSockettimeout
        /// </summary>
        [DataMember(Name="cq.analytics.testandtarget.sockettimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqAnalyticsTestandtargetSockettimeout { get; set; }

        /// <summary>
        /// Gets or Sets CqAnalyticsTestandtargetRecommendationsUrlReplace
        /// </summary>
        [DataMember(Name="cq.analytics.testandtarget.recommendations.url.replace", EmitDefaultValue=false)]
        public ConfigNodePropertyString CqAnalyticsTestandtargetRecommendationsUrlReplace { get; set; }

        /// <summary>
        /// Gets or Sets CqAnalyticsTestandtargetRecommendationsUrlReplacewith
        /// </summary>
        [DataMember(Name="cq.analytics.testandtarget.recommendations.url.replacewith", EmitDefaultValue=false)]
        public ConfigNodePropertyString CqAnalyticsTestandtargetRecommendationsUrlReplacewith { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties {\n");
            sb.Append("  CqAnalyticsTestandtargetApiUrl: ").Append(CqAnalyticsTestandtargetApiUrl).Append("\n");
            sb.Append("  CqAnalyticsTestandtargetTimeout: ").Append(CqAnalyticsTestandtargetTimeout).Append("\n");
            sb.Append("  CqAnalyticsTestandtargetSockettimeout: ").Append(CqAnalyticsTestandtargetSockettimeout).Append("\n");
            sb.Append("  CqAnalyticsTestandtargetRecommendationsUrlReplace: ").Append(CqAnalyticsTestandtargetRecommendationsUrlReplace).Append("\n");
            sb.Append("  CqAnalyticsTestandtargetRecommendationsUrlReplacewith: ").Append(CqAnalyticsTestandtargetRecommendationsUrlReplacewith).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CqAnalyticsTestandtargetApiUrl == input.CqAnalyticsTestandtargetApiUrl ||
                    (this.CqAnalyticsTestandtargetApiUrl != null &&
                    this.CqAnalyticsTestandtargetApiUrl.Equals(input.CqAnalyticsTestandtargetApiUrl))
                ) && 
                (
                    this.CqAnalyticsTestandtargetTimeout == input.CqAnalyticsTestandtargetTimeout ||
                    (this.CqAnalyticsTestandtargetTimeout != null &&
                    this.CqAnalyticsTestandtargetTimeout.Equals(input.CqAnalyticsTestandtargetTimeout))
                ) && 
                (
                    this.CqAnalyticsTestandtargetSockettimeout == input.CqAnalyticsTestandtargetSockettimeout ||
                    (this.CqAnalyticsTestandtargetSockettimeout != null &&
                    this.CqAnalyticsTestandtargetSockettimeout.Equals(input.CqAnalyticsTestandtargetSockettimeout))
                ) && 
                (
                    this.CqAnalyticsTestandtargetRecommendationsUrlReplace == input.CqAnalyticsTestandtargetRecommendationsUrlReplace ||
                    (this.CqAnalyticsTestandtargetRecommendationsUrlReplace != null &&
                    this.CqAnalyticsTestandtargetRecommendationsUrlReplace.Equals(input.CqAnalyticsTestandtargetRecommendationsUrlReplace))
                ) && 
                (
                    this.CqAnalyticsTestandtargetRecommendationsUrlReplacewith == input.CqAnalyticsTestandtargetRecommendationsUrlReplacewith ||
                    (this.CqAnalyticsTestandtargetRecommendationsUrlReplacewith != null &&
                    this.CqAnalyticsTestandtargetRecommendationsUrlReplacewith.Equals(input.CqAnalyticsTestandtargetRecommendationsUrlReplacewith))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CqAnalyticsTestandtargetApiUrl != null)
                    hashCode = hashCode * 59 + this.CqAnalyticsTestandtargetApiUrl.GetHashCode();
                if (this.CqAnalyticsTestandtargetTimeout != null)
                    hashCode = hashCode * 59 + this.CqAnalyticsTestandtargetTimeout.GetHashCode();
                if (this.CqAnalyticsTestandtargetSockettimeout != null)
                    hashCode = hashCode * 59 + this.CqAnalyticsTestandtargetSockettimeout.GetHashCode();
                if (this.CqAnalyticsTestandtargetRecommendationsUrlReplace != null)
                    hashCode = hashCode * 59 + this.CqAnalyticsTestandtargetRecommendationsUrlReplace.GetHashCode();
                if (this.CqAnalyticsTestandtargetRecommendationsUrlReplacewith != null)
                    hashCode = hashCode * 59 + this.CqAnalyticsTestandtargetRecommendationsUrlReplacewith.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
