/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
  #[serde(rename = "pattern.time")]
  pattern_time: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "pattern.newline")]
  pattern_newline: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "pattern.dayOfMonth")]
  pattern_day_of_month: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "pattern.month")]
  pattern_month: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "pattern.year")]
  pattern_year: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "pattern.date")]
  pattern_date: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "pattern.dateTime")]
  pattern_date_time: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "pattern.email")]
  pattern_email: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
  pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
    ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
      pattern_time: None,
      pattern_newline: None,
      pattern_day_of_month: None,
      pattern_month: None,
      pattern_year: None,
      pattern_date: None,
      pattern_date_time: None,
      pattern_email: None
    }
  }

  pub fn set_pattern_time(&mut self, pattern_time: ::models::ConfigNodePropertyString) {
    self.pattern_time = Some(pattern_time);
  }

  pub fn with_pattern_time(mut self, pattern_time: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
    self.pattern_time = Some(pattern_time);
    self
  }

  pub fn pattern_time(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pattern_time.as_ref()
  }

  pub fn reset_pattern_time(&mut self) {
    self.pattern_time = None;
  }

  pub fn set_pattern_newline(&mut self, pattern_newline: ::models::ConfigNodePropertyString) {
    self.pattern_newline = Some(pattern_newline);
  }

  pub fn with_pattern_newline(mut self, pattern_newline: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
    self.pattern_newline = Some(pattern_newline);
    self
  }

  pub fn pattern_newline(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pattern_newline.as_ref()
  }

  pub fn reset_pattern_newline(&mut self) {
    self.pattern_newline = None;
  }

  pub fn set_pattern_day_of_month(&mut self, pattern_day_of_month: ::models::ConfigNodePropertyString) {
    self.pattern_day_of_month = Some(pattern_day_of_month);
  }

  pub fn with_pattern_day_of_month(mut self, pattern_day_of_month: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
    self.pattern_day_of_month = Some(pattern_day_of_month);
    self
  }

  pub fn pattern_day_of_month(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pattern_day_of_month.as_ref()
  }

  pub fn reset_pattern_day_of_month(&mut self) {
    self.pattern_day_of_month = None;
  }

  pub fn set_pattern_month(&mut self, pattern_month: ::models::ConfigNodePropertyString) {
    self.pattern_month = Some(pattern_month);
  }

  pub fn with_pattern_month(mut self, pattern_month: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
    self.pattern_month = Some(pattern_month);
    self
  }

  pub fn pattern_month(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pattern_month.as_ref()
  }

  pub fn reset_pattern_month(&mut self) {
    self.pattern_month = None;
  }

  pub fn set_pattern_year(&mut self, pattern_year: ::models::ConfigNodePropertyString) {
    self.pattern_year = Some(pattern_year);
  }

  pub fn with_pattern_year(mut self, pattern_year: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
    self.pattern_year = Some(pattern_year);
    self
  }

  pub fn pattern_year(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pattern_year.as_ref()
  }

  pub fn reset_pattern_year(&mut self) {
    self.pattern_year = None;
  }

  pub fn set_pattern_date(&mut self, pattern_date: ::models::ConfigNodePropertyString) {
    self.pattern_date = Some(pattern_date);
  }

  pub fn with_pattern_date(mut self, pattern_date: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
    self.pattern_date = Some(pattern_date);
    self
  }

  pub fn pattern_date(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pattern_date.as_ref()
  }

  pub fn reset_pattern_date(&mut self) {
    self.pattern_date = None;
  }

  pub fn set_pattern_date_time(&mut self, pattern_date_time: ::models::ConfigNodePropertyString) {
    self.pattern_date_time = Some(pattern_date_time);
  }

  pub fn with_pattern_date_time(mut self, pattern_date_time: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
    self.pattern_date_time = Some(pattern_date_time);
    self
  }

  pub fn pattern_date_time(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pattern_date_time.as_ref()
  }

  pub fn reset_pattern_date_time(&mut self) {
    self.pattern_date_time = None;
  }

  pub fn set_pattern_email(&mut self, pattern_email: ::models::ConfigNodePropertyString) {
    self.pattern_email = Some(pattern_email);
  }

  pub fn with_pattern_email(mut self, pattern_email: ::models::ConfigNodePropertyString) -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
    self.pattern_email = Some(pattern_email);
    self
  }

  pub fn pattern_email(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.pattern_email.as_ref()
  }

  pub fn reset_pattern_email(&mut self) {
    self.pattern_email = None;
  }

}



