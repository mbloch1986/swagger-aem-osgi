/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties()
{
    m_IncludedPathsIsSet = false;
    m_EnableAsyncObserverIsSet = false;
    m_ObserverQueueSizeIsSet = false;
}

OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::~OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties()
{
}

void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IncludedPathsIsSet)
    {
        val[utility::conversions::to_string_t("includedPaths")] = ModelBase::toJson(m_IncludedPaths);
    }
    if(m_EnableAsyncObserverIsSet)
    {
        val[utility::conversions::to_string_t("enableAsyncObserver")] = ModelBase::toJson(m_EnableAsyncObserver);
    }
    if(m_ObserverQueueSizeIsSet)
    {
        val[utility::conversions::to_string_t("observerQueueSize")] = ModelBase::toJson(m_ObserverQueueSize);
    }

    return val;
}

void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("includedPaths")))
    {
        if(!val[utility::conversions::to_string_t("includedPaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("includedPaths")]);
            setIncludedPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enableAsyncObserver")))
    {
        if(!val[utility::conversions::to_string_t("enableAsyncObserver")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enableAsyncObserver")]);
            setEnableAsyncObserver( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("observerQueueSize")))
    {
        if(!val[utility::conversions::to_string_t("observerQueueSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("observerQueueSize")]);
            setObserverQueueSize( newItem );
        }
    }
}

void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IncludedPathsIsSet)
    {
        if (m_IncludedPaths.get())
        {
            m_IncludedPaths->toMultipart(multipart, utility::conversions::to_string_t("includedPaths."));
        }
    }
    if(m_EnableAsyncObserverIsSet)
    {
        if (m_EnableAsyncObserver.get())
        {
            m_EnableAsyncObserver->toMultipart(multipart, utility::conversions::to_string_t("enableAsyncObserver."));
        }
    }
    if(m_ObserverQueueSizeIsSet)
    {
        if (m_ObserverQueueSize.get())
        {
            m_ObserverQueueSize->toMultipart(multipart, utility::conversions::to_string_t("observerQueueSize."));
        }
    }
}

void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("includedPaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("includedPaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("includedPaths."));
            setIncludedPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enableAsyncObserver")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enableAsyncObserver")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enableAsyncObserver."));
            setEnableAsyncObserver( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("observerQueueSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("observerQueueSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("observerQueueSize."));
            setObserverQueueSize( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::getIncludedPaths() const
{
    return m_IncludedPaths;
}


void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::setIncludedPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_IncludedPaths = value;
    m_IncludedPathsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::includedPathsIsSet() const
{
    return m_IncludedPathsIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::unsetIncludedPaths()
{
    m_IncludedPathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::getEnableAsyncObserver() const
{
    return m_EnableAsyncObserver;
}


void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::setEnableAsyncObserver(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableAsyncObserver = value;
    m_EnableAsyncObserverIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::enableAsyncObserverIsSet() const
{
    return m_EnableAsyncObserverIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::unsetEnableAsyncObserver()
{
    m_EnableAsyncObserverIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::getObserverQueueSize() const
{
    return m_ObserverQueueSize;
}


void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::setObserverQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ObserverQueueSize = value;
    m_ObserverQueueSizeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::observerQueueSizeIsSet() const
{
    return m_ObserverQueueSizeIsSet;
}

void OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::unsetObserverQueueSize()
{
    m_ObserverQueueSizeIsSet = false;
}

}
}
}
}

