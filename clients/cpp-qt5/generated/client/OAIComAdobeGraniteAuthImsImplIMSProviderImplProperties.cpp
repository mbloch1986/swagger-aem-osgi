/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties() {
    init();
}

OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::~OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::init() {
    oauth_provider_id = new OAIConfigNodePropertyString();
    m_oauth_provider_id_isSet = false;
    oauth_provider_ims_authorization_url = new OAIConfigNodePropertyString();
    m_oauth_provider_ims_authorization_url_isSet = false;
    oauth_provider_ims_token_url = new OAIConfigNodePropertyString();
    m_oauth_provider_ims_token_url_isSet = false;
    oauth_provider_ims_profile_url = new OAIConfigNodePropertyString();
    m_oauth_provider_ims_profile_url_isSet = false;
    oauth_provider_ims_extended_details_urls = new OAIConfigNodePropertyArray();
    m_oauth_provider_ims_extended_details_urls_isSet = false;
    oauth_provider_ims_validate_token_url = new OAIConfigNodePropertyString();
    m_oauth_provider_ims_validate_token_url_isSet = false;
    oauth_provider_ims_session_property = new OAIConfigNodePropertyString();
    m_oauth_provider_ims_session_property_isSet = false;
    oauth_provider_ims_service_token_client_id = new OAIConfigNodePropertyString();
    m_oauth_provider_ims_service_token_client_id_isSet = false;
    oauth_provider_ims_service_token_client_secret = new OAIConfigNodePropertyString();
    m_oauth_provider_ims_service_token_client_secret_isSet = false;
    oauth_provider_ims_service_token = new OAIConfigNodePropertyString();
    m_oauth_provider_ims_service_token_isSet = false;
    ims_org_ref = new OAIConfigNodePropertyString();
    m_ims_org_ref_isSet = false;
    ims_group_mapping = new OAIConfigNodePropertyArray();
    m_ims_group_mapping_isSet = false;
    oauth_provider_ims_only_license_group = new OAIConfigNodePropertyBoolean();
    m_oauth_provider_ims_only_license_group_isSet = false;
}

void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::cleanup() {
    if(oauth_provider_id != nullptr) { 
        delete oauth_provider_id;
    }
    if(oauth_provider_ims_authorization_url != nullptr) { 
        delete oauth_provider_ims_authorization_url;
    }
    if(oauth_provider_ims_token_url != nullptr) { 
        delete oauth_provider_ims_token_url;
    }
    if(oauth_provider_ims_profile_url != nullptr) { 
        delete oauth_provider_ims_profile_url;
    }
    if(oauth_provider_ims_extended_details_urls != nullptr) { 
        delete oauth_provider_ims_extended_details_urls;
    }
    if(oauth_provider_ims_validate_token_url != nullptr) { 
        delete oauth_provider_ims_validate_token_url;
    }
    if(oauth_provider_ims_session_property != nullptr) { 
        delete oauth_provider_ims_session_property;
    }
    if(oauth_provider_ims_service_token_client_id != nullptr) { 
        delete oauth_provider_ims_service_token_client_id;
    }
    if(oauth_provider_ims_service_token_client_secret != nullptr) { 
        delete oauth_provider_ims_service_token_client_secret;
    }
    if(oauth_provider_ims_service_token != nullptr) { 
        delete oauth_provider_ims_service_token;
    }
    if(ims_org_ref != nullptr) { 
        delete ims_org_ref;
    }
    if(ims_group_mapping != nullptr) { 
        delete ims_group_mapping;
    }
    if(oauth_provider_ims_only_license_group != nullptr) { 
        delete oauth_provider_ims_only_license_group;
    }
}

OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&oauth_provider_id, pJson["oauth.provider.id"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_provider_ims_authorization_url, pJson["oauth.provider.ims.authorization.url"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_provider_ims_token_url, pJson["oauth.provider.ims.token.url"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_provider_ims_profile_url, pJson["oauth.provider.ims.profile.url"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_provider_ims_extended_details_urls, pJson["oauth.provider.ims.extended.details.urls"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&oauth_provider_ims_validate_token_url, pJson["oauth.provider.ims.validate.token.url"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_provider_ims_session_property, pJson["oauth.provider.ims.session.property"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_provider_ims_service_token_client_id, pJson["oauth.provider.ims.service.token.client.id"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_provider_ims_service_token_client_secret, pJson["oauth.provider.ims.service.token.client.secret"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&oauth_provider_ims_service_token, pJson["oauth.provider.ims.service.token"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&ims_org_ref, pJson["ims.org.ref"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&ims_group_mapping, pJson["ims.group.mapping"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&oauth_provider_ims_only_license_group, pJson["oauth.provider.ims.only.license.group"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::asJsonObject() {
    QJsonObject obj;
    if((oauth_provider_id != nullptr) && (oauth_provider_id->isSet())){
        toJsonValue(QString("oauth.provider.id"), oauth_provider_id, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_provider_ims_authorization_url != nullptr) && (oauth_provider_ims_authorization_url->isSet())){
        toJsonValue(QString("oauth.provider.ims.authorization.url"), oauth_provider_ims_authorization_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_provider_ims_token_url != nullptr) && (oauth_provider_ims_token_url->isSet())){
        toJsonValue(QString("oauth.provider.ims.token.url"), oauth_provider_ims_token_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_provider_ims_profile_url != nullptr) && (oauth_provider_ims_profile_url->isSet())){
        toJsonValue(QString("oauth.provider.ims.profile.url"), oauth_provider_ims_profile_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_provider_ims_extended_details_urls != nullptr) && (oauth_provider_ims_extended_details_urls->isSet())){
        toJsonValue(QString("oauth.provider.ims.extended.details.urls"), oauth_provider_ims_extended_details_urls, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((oauth_provider_ims_validate_token_url != nullptr) && (oauth_provider_ims_validate_token_url->isSet())){
        toJsonValue(QString("oauth.provider.ims.validate.token.url"), oauth_provider_ims_validate_token_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_provider_ims_session_property != nullptr) && (oauth_provider_ims_session_property->isSet())){
        toJsonValue(QString("oauth.provider.ims.session.property"), oauth_provider_ims_session_property, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_provider_ims_service_token_client_id != nullptr) && (oauth_provider_ims_service_token_client_id->isSet())){
        toJsonValue(QString("oauth.provider.ims.service.token.client.id"), oauth_provider_ims_service_token_client_id, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_provider_ims_service_token_client_secret != nullptr) && (oauth_provider_ims_service_token_client_secret->isSet())){
        toJsonValue(QString("oauth.provider.ims.service.token.client.secret"), oauth_provider_ims_service_token_client_secret, obj, QString("OAIConfigNodePropertyString"));
    }
    if((oauth_provider_ims_service_token != nullptr) && (oauth_provider_ims_service_token->isSet())){
        toJsonValue(QString("oauth.provider.ims.service.token"), oauth_provider_ims_service_token, obj, QString("OAIConfigNodePropertyString"));
    }
    if((ims_org_ref != nullptr) && (ims_org_ref->isSet())){
        toJsonValue(QString("ims.org.ref"), ims_org_ref, obj, QString("OAIConfigNodePropertyString"));
    }
    if((ims_group_mapping != nullptr) && (ims_group_mapping->isSet())){
        toJsonValue(QString("ims.group.mapping"), ims_group_mapping, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((oauth_provider_ims_only_license_group != nullptr) && (oauth_provider_ims_only_license_group->isSet())){
        toJsonValue(QString("oauth.provider.ims.only.license.group"), oauth_provider_ims_only_license_group, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderId() {
    return oauth_provider_id;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderId(OAIConfigNodePropertyString* oauth_provider_id) {
    this->oauth_provider_id = oauth_provider_id;
    this->m_oauth_provider_id_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsAuthorizationUrl() {
    return oauth_provider_ims_authorization_url;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsAuthorizationUrl(OAIConfigNodePropertyString* oauth_provider_ims_authorization_url) {
    this->oauth_provider_ims_authorization_url = oauth_provider_ims_authorization_url;
    this->m_oauth_provider_ims_authorization_url_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsTokenUrl() {
    return oauth_provider_ims_token_url;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsTokenUrl(OAIConfigNodePropertyString* oauth_provider_ims_token_url) {
    this->oauth_provider_ims_token_url = oauth_provider_ims_token_url;
    this->m_oauth_provider_ims_token_url_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsProfileUrl() {
    return oauth_provider_ims_profile_url;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsProfileUrl(OAIConfigNodePropertyString* oauth_provider_ims_profile_url) {
    this->oauth_provider_ims_profile_url = oauth_provider_ims_profile_url;
    this->m_oauth_provider_ims_profile_url_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsExtendedDetailsUrls() {
    return oauth_provider_ims_extended_details_urls;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsExtendedDetailsUrls(OAIConfigNodePropertyArray* oauth_provider_ims_extended_details_urls) {
    this->oauth_provider_ims_extended_details_urls = oauth_provider_ims_extended_details_urls;
    this->m_oauth_provider_ims_extended_details_urls_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsValidateTokenUrl() {
    return oauth_provider_ims_validate_token_url;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsValidateTokenUrl(OAIConfigNodePropertyString* oauth_provider_ims_validate_token_url) {
    this->oauth_provider_ims_validate_token_url = oauth_provider_ims_validate_token_url;
    this->m_oauth_provider_ims_validate_token_url_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsSessionProperty() {
    return oauth_provider_ims_session_property;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsSessionProperty(OAIConfigNodePropertyString* oauth_provider_ims_session_property) {
    this->oauth_provider_ims_session_property = oauth_provider_ims_session_property;
    this->m_oauth_provider_ims_session_property_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsServiceTokenClientId() {
    return oauth_provider_ims_service_token_client_id;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsServiceTokenClientId(OAIConfigNodePropertyString* oauth_provider_ims_service_token_client_id) {
    this->oauth_provider_ims_service_token_client_id = oauth_provider_ims_service_token_client_id;
    this->m_oauth_provider_ims_service_token_client_id_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsServiceTokenClientSecret() {
    return oauth_provider_ims_service_token_client_secret;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsServiceTokenClientSecret(OAIConfigNodePropertyString* oauth_provider_ims_service_token_client_secret) {
    this->oauth_provider_ims_service_token_client_secret = oauth_provider_ims_service_token_client_secret;
    this->m_oauth_provider_ims_service_token_client_secret_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsServiceToken() {
    return oauth_provider_ims_service_token;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsServiceToken(OAIConfigNodePropertyString* oauth_provider_ims_service_token) {
    this->oauth_provider_ims_service_token = oauth_provider_ims_service_token;
    this->m_oauth_provider_ims_service_token_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getImsOrgRef() {
    return ims_org_ref;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setImsOrgRef(OAIConfigNodePropertyString* ims_org_ref) {
    this->ims_org_ref = ims_org_ref;
    this->m_ims_org_ref_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getImsGroupMapping() {
    return ims_group_mapping;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setImsGroupMapping(OAIConfigNodePropertyArray* ims_group_mapping) {
    this->ims_group_mapping = ims_group_mapping;
    this->m_ims_group_mapping_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::getOauthProviderImsOnlyLicenseGroup() {
    return oauth_provider_ims_only_license_group;
}
void
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::setOauthProviderImsOnlyLicenseGroup(OAIConfigNodePropertyBoolean* oauth_provider_ims_only_license_group) {
    this->oauth_provider_ims_only_license_group = oauth_provider_ims_only_license_group;
    this->m_oauth_provider_ims_only_license_group_isSet = true;
}


bool
OAIComAdobeGraniteAuthImsImplIMSProviderImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(oauth_provider_id != nullptr && oauth_provider_id->isSet()){ isObjectUpdated = true; break;}
        if(oauth_provider_ims_authorization_url != nullptr && oauth_provider_ims_authorization_url->isSet()){ isObjectUpdated = true; break;}
        if(oauth_provider_ims_token_url != nullptr && oauth_provider_ims_token_url->isSet()){ isObjectUpdated = true; break;}
        if(oauth_provider_ims_profile_url != nullptr && oauth_provider_ims_profile_url->isSet()){ isObjectUpdated = true; break;}
        if(oauth_provider_ims_extended_details_urls != nullptr && oauth_provider_ims_extended_details_urls->isSet()){ isObjectUpdated = true; break;}
        if(oauth_provider_ims_validate_token_url != nullptr && oauth_provider_ims_validate_token_url->isSet()){ isObjectUpdated = true; break;}
        if(oauth_provider_ims_session_property != nullptr && oauth_provider_ims_session_property->isSet()){ isObjectUpdated = true; break;}
        if(oauth_provider_ims_service_token_client_id != nullptr && oauth_provider_ims_service_token_client_id->isSet()){ isObjectUpdated = true; break;}
        if(oauth_provider_ims_service_token_client_secret != nullptr && oauth_provider_ims_service_token_client_secret->isSet()){ isObjectUpdated = true; break;}
        if(oauth_provider_ims_service_token != nullptr && oauth_provider_ims_service_token->isSet()){ isObjectUpdated = true; break;}
        if(ims_org_ref != nullptr && ims_org_ref->isSet()){ isObjectUpdated = true; break;}
        if(ims_group_mapping != nullptr && ims_group_mapping->isSet()){ isObjectUpdated = true; break;}
        if(oauth_provider_ims_only_license_group != nullptr && oauth_provider_ims_only_license_group->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

