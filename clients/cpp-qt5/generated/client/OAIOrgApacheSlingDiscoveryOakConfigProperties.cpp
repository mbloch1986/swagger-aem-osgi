/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDiscoveryOakConfigProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDiscoveryOakConfigProperties::OAIOrgApacheSlingDiscoveryOakConfigProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingDiscoveryOakConfigProperties::OAIOrgApacheSlingDiscoveryOakConfigProperties() {
    init();
}

OAIOrgApacheSlingDiscoveryOakConfigProperties::~OAIOrgApacheSlingDiscoveryOakConfigProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingDiscoveryOakConfigProperties::init() {
    connector_ping_timeout = new OAIConfigNodePropertyInteger();
    m_connector_ping_timeout_isSet = false;
    connector_ping_interval = new OAIConfigNodePropertyInteger();
    m_connector_ping_interval_isSet = false;
    discovery_lite_check_interval = new OAIConfigNodePropertyInteger();
    m_discovery_lite_check_interval_isSet = false;
    cluster_sync_service_timeout = new OAIConfigNodePropertyInteger();
    m_cluster_sync_service_timeout_isSet = false;
    cluster_sync_service_interval = new OAIConfigNodePropertyInteger();
    m_cluster_sync_service_interval_isSet = false;
    enable_sync_token = new OAIConfigNodePropertyBoolean();
    m_enable_sync_token_isSet = false;
    min_event_delay = new OAIConfigNodePropertyInteger();
    m_min_event_delay_isSet = false;
    socket_connect_timeout = new OAIConfigNodePropertyInteger();
    m_socket_connect_timeout_isSet = false;
    so_timeout = new OAIConfigNodePropertyInteger();
    m_so_timeout_isSet = false;
    topology_connector_urls = new OAIConfigNodePropertyArray();
    m_topology_connector_urls_isSet = false;
    topology_connector_whitelist = new OAIConfigNodePropertyArray();
    m_topology_connector_whitelist_isSet = false;
    auto_stop_local_loop_enabled = new OAIConfigNodePropertyBoolean();
    m_auto_stop_local_loop_enabled_isSet = false;
    gzip_connector_requests_enabled = new OAIConfigNodePropertyBoolean();
    m_gzip_connector_requests_enabled_isSet = false;
    hmac_enabled = new OAIConfigNodePropertyBoolean();
    m_hmac_enabled_isSet = false;
    enable_encryption = new OAIConfigNodePropertyBoolean();
    m_enable_encryption_isSet = false;
    shared_key = new OAIConfigNodePropertyString();
    m_shared_key_isSet = false;
    hmac_shared_key_ttl = new OAIConfigNodePropertyInteger();
    m_hmac_shared_key_ttl_isSet = false;
    backoff_standby_factor = new OAIConfigNodePropertyString();
    m_backoff_standby_factor_isSet = false;
    backoff_stable_factor = new OAIConfigNodePropertyString();
    m_backoff_stable_factor_isSet = false;
}

void
OAIOrgApacheSlingDiscoveryOakConfigProperties::cleanup() {
    if(connector_ping_timeout != nullptr) { 
        delete connector_ping_timeout;
    }
    if(connector_ping_interval != nullptr) { 
        delete connector_ping_interval;
    }
    if(discovery_lite_check_interval != nullptr) { 
        delete discovery_lite_check_interval;
    }
    if(cluster_sync_service_timeout != nullptr) { 
        delete cluster_sync_service_timeout;
    }
    if(cluster_sync_service_interval != nullptr) { 
        delete cluster_sync_service_interval;
    }
    if(enable_sync_token != nullptr) { 
        delete enable_sync_token;
    }
    if(min_event_delay != nullptr) { 
        delete min_event_delay;
    }
    if(socket_connect_timeout != nullptr) { 
        delete socket_connect_timeout;
    }
    if(so_timeout != nullptr) { 
        delete so_timeout;
    }
    if(topology_connector_urls != nullptr) { 
        delete topology_connector_urls;
    }
    if(topology_connector_whitelist != nullptr) { 
        delete topology_connector_whitelist;
    }
    if(auto_stop_local_loop_enabled != nullptr) { 
        delete auto_stop_local_loop_enabled;
    }
    if(gzip_connector_requests_enabled != nullptr) { 
        delete gzip_connector_requests_enabled;
    }
    if(hmac_enabled != nullptr) { 
        delete hmac_enabled;
    }
    if(enable_encryption != nullptr) { 
        delete enable_encryption;
    }
    if(shared_key != nullptr) { 
        delete shared_key;
    }
    if(hmac_shared_key_ttl != nullptr) { 
        delete hmac_shared_key_ttl;
    }
    if(backoff_standby_factor != nullptr) { 
        delete backoff_standby_factor;
    }
    if(backoff_stable_factor != nullptr) { 
        delete backoff_stable_factor;
    }
}

OAIOrgApacheSlingDiscoveryOakConfigProperties*
OAIOrgApacheSlingDiscoveryOakConfigProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingDiscoveryOakConfigProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&connector_ping_timeout, pJson["connectorPingTimeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&connector_ping_interval, pJson["connectorPingInterval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&discovery_lite_check_interval, pJson["discoveryLiteCheckInterval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_sync_service_timeout, pJson["clusterSyncServiceTimeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&cluster_sync_service_interval, pJson["clusterSyncServiceInterval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&enable_sync_token, pJson["enableSyncToken"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&min_event_delay, pJson["minEventDelay"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&socket_connect_timeout, pJson["socketConnectTimeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&so_timeout, pJson["soTimeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&topology_connector_urls, pJson["topologyConnectorUrls"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&topology_connector_whitelist, pJson["topologyConnectorWhitelist"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&auto_stop_local_loop_enabled, pJson["autoStopLocalLoopEnabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&gzip_connector_requests_enabled, pJson["gzipConnectorRequestsEnabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&hmac_enabled, pJson["hmacEnabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&enable_encryption, pJson["enableEncryption"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&shared_key, pJson["sharedKey"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&hmac_shared_key_ttl, pJson["hmacSharedKeyTTL"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&backoff_standby_factor, pJson["backoffStandbyFactor"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&backoff_stable_factor, pJson["backoffStableFactor"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingDiscoveryOakConfigProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDiscoveryOakConfigProperties::asJsonObject() {
    QJsonObject obj;
    if((connector_ping_timeout != nullptr) && (connector_ping_timeout->isSet())){
        toJsonValue(QString("connectorPingTimeout"), connector_ping_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((connector_ping_interval != nullptr) && (connector_ping_interval->isSet())){
        toJsonValue(QString("connectorPingInterval"), connector_ping_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((discovery_lite_check_interval != nullptr) && (discovery_lite_check_interval->isSet())){
        toJsonValue(QString("discoveryLiteCheckInterval"), discovery_lite_check_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_sync_service_timeout != nullptr) && (cluster_sync_service_timeout->isSet())){
        toJsonValue(QString("clusterSyncServiceTimeout"), cluster_sync_service_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((cluster_sync_service_interval != nullptr) && (cluster_sync_service_interval->isSet())){
        toJsonValue(QString("clusterSyncServiceInterval"), cluster_sync_service_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((enable_sync_token != nullptr) && (enable_sync_token->isSet())){
        toJsonValue(QString("enableSyncToken"), enable_sync_token, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((min_event_delay != nullptr) && (min_event_delay->isSet())){
        toJsonValue(QString("minEventDelay"), min_event_delay, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((socket_connect_timeout != nullptr) && (socket_connect_timeout->isSet())){
        toJsonValue(QString("socketConnectTimeout"), socket_connect_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((so_timeout != nullptr) && (so_timeout->isSet())){
        toJsonValue(QString("soTimeout"), so_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((topology_connector_urls != nullptr) && (topology_connector_urls->isSet())){
        toJsonValue(QString("topologyConnectorUrls"), topology_connector_urls, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((topology_connector_whitelist != nullptr) && (topology_connector_whitelist->isSet())){
        toJsonValue(QString("topologyConnectorWhitelist"), topology_connector_whitelist, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((auto_stop_local_loop_enabled != nullptr) && (auto_stop_local_loop_enabled->isSet())){
        toJsonValue(QString("autoStopLocalLoopEnabled"), auto_stop_local_loop_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((gzip_connector_requests_enabled != nullptr) && (gzip_connector_requests_enabled->isSet())){
        toJsonValue(QString("gzipConnectorRequestsEnabled"), gzip_connector_requests_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((hmac_enabled != nullptr) && (hmac_enabled->isSet())){
        toJsonValue(QString("hmacEnabled"), hmac_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((enable_encryption != nullptr) && (enable_encryption->isSet())){
        toJsonValue(QString("enableEncryption"), enable_encryption, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((shared_key != nullptr) && (shared_key->isSet())){
        toJsonValue(QString("sharedKey"), shared_key, obj, QString("OAIConfigNodePropertyString"));
    }
    if((hmac_shared_key_ttl != nullptr) && (hmac_shared_key_ttl->isSet())){
        toJsonValue(QString("hmacSharedKeyTTL"), hmac_shared_key_ttl, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((backoff_standby_factor != nullptr) && (backoff_standby_factor->isSet())){
        toJsonValue(QString("backoffStandbyFactor"), backoff_standby_factor, obj, QString("OAIConfigNodePropertyString"));
    }
    if((backoff_stable_factor != nullptr) && (backoff_stable_factor->isSet())){
        toJsonValue(QString("backoffStableFactor"), backoff_stable_factor, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getConnectorPingTimeout() {
    return connector_ping_timeout;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setConnectorPingTimeout(OAIConfigNodePropertyInteger* connector_ping_timeout) {
    this->connector_ping_timeout = connector_ping_timeout;
    this->m_connector_ping_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getConnectorPingInterval() {
    return connector_ping_interval;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setConnectorPingInterval(OAIConfigNodePropertyInteger* connector_ping_interval) {
    this->connector_ping_interval = connector_ping_interval;
    this->m_connector_ping_interval_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getDiscoveryLiteCheckInterval() {
    return discovery_lite_check_interval;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setDiscoveryLiteCheckInterval(OAIConfigNodePropertyInteger* discovery_lite_check_interval) {
    this->discovery_lite_check_interval = discovery_lite_check_interval;
    this->m_discovery_lite_check_interval_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getClusterSyncServiceTimeout() {
    return cluster_sync_service_timeout;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setClusterSyncServiceTimeout(OAIConfigNodePropertyInteger* cluster_sync_service_timeout) {
    this->cluster_sync_service_timeout = cluster_sync_service_timeout;
    this->m_cluster_sync_service_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getClusterSyncServiceInterval() {
    return cluster_sync_service_interval;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setClusterSyncServiceInterval(OAIConfigNodePropertyInteger* cluster_sync_service_interval) {
    this->cluster_sync_service_interval = cluster_sync_service_interval;
    this->m_cluster_sync_service_interval_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getEnableSyncToken() {
    return enable_sync_token;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setEnableSyncToken(OAIConfigNodePropertyBoolean* enable_sync_token) {
    this->enable_sync_token = enable_sync_token;
    this->m_enable_sync_token_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getMinEventDelay() {
    return min_event_delay;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setMinEventDelay(OAIConfigNodePropertyInteger* min_event_delay) {
    this->min_event_delay = min_event_delay;
    this->m_min_event_delay_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getSocketConnectTimeout() {
    return socket_connect_timeout;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setSocketConnectTimeout(OAIConfigNodePropertyInteger* socket_connect_timeout) {
    this->socket_connect_timeout = socket_connect_timeout;
    this->m_socket_connect_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getSoTimeout() {
    return so_timeout;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setSoTimeout(OAIConfigNodePropertyInteger* so_timeout) {
    this->so_timeout = so_timeout;
    this->m_so_timeout_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getTopologyConnectorUrls() {
    return topology_connector_urls;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setTopologyConnectorUrls(OAIConfigNodePropertyArray* topology_connector_urls) {
    this->topology_connector_urls = topology_connector_urls;
    this->m_topology_connector_urls_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getTopologyConnectorWhitelist() {
    return topology_connector_whitelist;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setTopologyConnectorWhitelist(OAIConfigNodePropertyArray* topology_connector_whitelist) {
    this->topology_connector_whitelist = topology_connector_whitelist;
    this->m_topology_connector_whitelist_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getAutoStopLocalLoopEnabled() {
    return auto_stop_local_loop_enabled;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setAutoStopLocalLoopEnabled(OAIConfigNodePropertyBoolean* auto_stop_local_loop_enabled) {
    this->auto_stop_local_loop_enabled = auto_stop_local_loop_enabled;
    this->m_auto_stop_local_loop_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getGzipConnectorRequestsEnabled() {
    return gzip_connector_requests_enabled;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setGzipConnectorRequestsEnabled(OAIConfigNodePropertyBoolean* gzip_connector_requests_enabled) {
    this->gzip_connector_requests_enabled = gzip_connector_requests_enabled;
    this->m_gzip_connector_requests_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getHmacEnabled() {
    return hmac_enabled;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setHmacEnabled(OAIConfigNodePropertyBoolean* hmac_enabled) {
    this->hmac_enabled = hmac_enabled;
    this->m_hmac_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getEnableEncryption() {
    return enable_encryption;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setEnableEncryption(OAIConfigNodePropertyBoolean* enable_encryption) {
    this->enable_encryption = enable_encryption;
    this->m_enable_encryption_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getSharedKey() {
    return shared_key;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setSharedKey(OAIConfigNodePropertyString* shared_key) {
    this->shared_key = shared_key;
    this->m_shared_key_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getHmacSharedKeyTtl() {
    return hmac_shared_key_ttl;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setHmacSharedKeyTtl(OAIConfigNodePropertyInteger* hmac_shared_key_ttl) {
    this->hmac_shared_key_ttl = hmac_shared_key_ttl;
    this->m_hmac_shared_key_ttl_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getBackoffStandbyFactor() {
    return backoff_standby_factor;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setBackoffStandbyFactor(OAIConfigNodePropertyString* backoff_standby_factor) {
    this->backoff_standby_factor = backoff_standby_factor;
    this->m_backoff_standby_factor_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDiscoveryOakConfigProperties::getBackoffStableFactor() {
    return backoff_stable_factor;
}
void
OAIOrgApacheSlingDiscoveryOakConfigProperties::setBackoffStableFactor(OAIConfigNodePropertyString* backoff_stable_factor) {
    this->backoff_stable_factor = backoff_stable_factor;
    this->m_backoff_stable_factor_isSet = true;
}


bool
OAIOrgApacheSlingDiscoveryOakConfigProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(connector_ping_timeout != nullptr && connector_ping_timeout->isSet()){ isObjectUpdated = true; break;}
        if(connector_ping_interval != nullptr && connector_ping_interval->isSet()){ isObjectUpdated = true; break;}
        if(discovery_lite_check_interval != nullptr && discovery_lite_check_interval->isSet()){ isObjectUpdated = true; break;}
        if(cluster_sync_service_timeout != nullptr && cluster_sync_service_timeout->isSet()){ isObjectUpdated = true; break;}
        if(cluster_sync_service_interval != nullptr && cluster_sync_service_interval->isSet()){ isObjectUpdated = true; break;}
        if(enable_sync_token != nullptr && enable_sync_token->isSet()){ isObjectUpdated = true; break;}
        if(min_event_delay != nullptr && min_event_delay->isSet()){ isObjectUpdated = true; break;}
        if(socket_connect_timeout != nullptr && socket_connect_timeout->isSet()){ isObjectUpdated = true; break;}
        if(so_timeout != nullptr && so_timeout->isSet()){ isObjectUpdated = true; break;}
        if(topology_connector_urls != nullptr && topology_connector_urls->isSet()){ isObjectUpdated = true; break;}
        if(topology_connector_whitelist != nullptr && topology_connector_whitelist->isSet()){ isObjectUpdated = true; break;}
        if(auto_stop_local_loop_enabled != nullptr && auto_stop_local_loop_enabled->isSet()){ isObjectUpdated = true; break;}
        if(gzip_connector_requests_enabled != nullptr && gzip_connector_requests_enabled->isSet()){ isObjectUpdated = true; break;}
        if(hmac_enabled != nullptr && hmac_enabled->isSet()){ isObjectUpdated = true; break;}
        if(enable_encryption != nullptr && enable_encryption->isSet()){ isObjectUpdated = true; break;}
        if(shared_key != nullptr && shared_key->isSet()){ isObjectUpdated = true; break;}
        if(hmac_shared_key_ttl != nullptr && hmac_shared_key_ttl->isSet()){ isObjectUpdated = true; break;}
        if(backoff_standby_factor != nullptr && backoff_standby_factor->isSet()){ isObjectUpdated = true; break;}
        if(backoff_stable_factor != nullptr && backoff_stable_factor->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

