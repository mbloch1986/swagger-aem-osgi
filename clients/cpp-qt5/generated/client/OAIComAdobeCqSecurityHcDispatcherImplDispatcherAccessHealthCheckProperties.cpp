/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties() {
    init();
}

OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::~OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::init() {
    hc_tags = new OAIConfigNodePropertyArray();
    m_hc_tags_isSet = false;
    dispatcher_address = new OAIConfigNodePropertyString();
    m_dispatcher_address_isSet = false;
    dispatcher_filter_allowed = new OAIConfigNodePropertyArray();
    m_dispatcher_filter_allowed_isSet = false;
    dispatcher_filter_blocked = new OAIConfigNodePropertyArray();
    m_dispatcher_filter_blocked_isSet = false;
}

void
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::cleanup() {
    if(hc_tags != nullptr) { 
        delete hc_tags;
    }
    if(dispatcher_address != nullptr) { 
        delete dispatcher_address;
    }
    if(dispatcher_filter_allowed != nullptr) { 
        delete dispatcher_filter_allowed;
    }
    if(dispatcher_filter_blocked != nullptr) { 
        delete dispatcher_filter_blocked;
    }
}

OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties*
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&hc_tags, pJson["hc.tags"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&dispatcher_address, pJson["dispatcher.address"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&dispatcher_filter_allowed, pJson["dispatcher.filter.allowed"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&dispatcher_filter_blocked, pJson["dispatcher.filter.blocked"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::asJsonObject() {
    QJsonObject obj;
    if((hc_tags != nullptr) && (hc_tags->isSet())){
        toJsonValue(QString("hc.tags"), hc_tags, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((dispatcher_address != nullptr) && (dispatcher_address->isSet())){
        toJsonValue(QString("dispatcher.address"), dispatcher_address, obj, QString("OAIConfigNodePropertyString"));
    }
    if((dispatcher_filter_allowed != nullptr) && (dispatcher_filter_allowed->isSet())){
        toJsonValue(QString("dispatcher.filter.allowed"), dispatcher_filter_allowed, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((dispatcher_filter_blocked != nullptr) && (dispatcher_filter_blocked->isSet())){
        toJsonValue(QString("dispatcher.filter.blocked"), dispatcher_filter_blocked, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getHcTags() {
    return hc_tags;
}
void
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setHcTags(OAIConfigNodePropertyArray* hc_tags) {
    this->hc_tags = hc_tags;
    this->m_hc_tags_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getDispatcherAddress() {
    return dispatcher_address;
}
void
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setDispatcherAddress(OAIConfigNodePropertyString* dispatcher_address) {
    this->dispatcher_address = dispatcher_address;
    this->m_dispatcher_address_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getDispatcherFilterAllowed() {
    return dispatcher_filter_allowed;
}
void
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setDispatcherFilterAllowed(OAIConfigNodePropertyArray* dispatcher_filter_allowed) {
    this->dispatcher_filter_allowed = dispatcher_filter_allowed;
    this->m_dispatcher_filter_allowed_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getDispatcherFilterBlocked() {
    return dispatcher_filter_blocked;
}
void
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setDispatcherFilterBlocked(OAIConfigNodePropertyArray* dispatcher_filter_blocked) {
    this->dispatcher_filter_blocked = dispatcher_filter_blocked;
    this->m_dispatcher_filter_blocked_isSet = true;
}


bool
OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(hc_tags != nullptr && hc_tags->isSet()){ isObjectUpdated = true; break;}
        if(dispatcher_address != nullptr && dispatcher_address->isSet()){ isObjectUpdated = true; break;}
        if(dispatcher_filter_allowed != nullptr && dispatcher_filter_allowed->isSet()){ isObjectUpdated = true; break;}
        if(dispatcher_filter_blocked != nullptr && dispatcher_filter_blocked->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

