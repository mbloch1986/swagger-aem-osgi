/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties :  IEquatable<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="endpoints">endpoints.</param>
        /// <param name="transportSecretProviderTarget">transportSecretProviderTarget.</param>
        public OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties(ConfigNodePropertyString name = default(ConfigNodePropertyString), ConfigNodePropertyArray endpoints = default(ConfigNodePropertyArray), ConfigNodePropertyString transportSecretProviderTarget = default(ConfigNodePropertyString))
        {
            this.Name = name;
            this.Endpoints = endpoints;
            this.TransportSecretProviderTarget = transportSecretProviderTarget;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public ConfigNodePropertyString Name { get; set; }

        /// <summary>
        /// Gets or Sets Endpoints
        /// </summary>
        [DataMember(Name="endpoints", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Endpoints { get; set; }

        /// <summary>
        /// Gets or Sets TransportSecretProviderTarget
        /// </summary>
        [DataMember(Name="transportSecretProvider.target", EmitDefaultValue=false)]
        public ConfigNodePropertyString TransportSecretProviderTarget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  TransportSecretProviderTarget: ").Append(TransportSecretProviderTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Endpoints == input.Endpoints ||
                    (this.Endpoints != null &&
                    this.Endpoints.Equals(input.Endpoints))
                ) && 
                (
                    this.TransportSecretProviderTarget == input.TransportSecretProviderTarget ||
                    (this.TransportSecretProviderTarget != null &&
                    this.TransportSecretProviderTarget.Equals(input.TransportSecretProviderTarget))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.TransportSecretProviderTarget != null)
                    hashCode = hashCode * 59 + this.TransportSecretProviderTarget.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
