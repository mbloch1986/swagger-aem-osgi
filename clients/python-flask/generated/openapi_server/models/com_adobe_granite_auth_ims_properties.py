# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.config_node_property_string import ConfigNodePropertyString  # noqa: F401,E501
from openapi_server import util


class ComAdobeGraniteAuthImsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configid: ConfigNodePropertyString=None, scope: ConfigNodePropertyString=None):  # noqa: E501
        """ComAdobeGraniteAuthImsProperties - a model defined in OpenAPI

        :param configid: The configid of this ComAdobeGraniteAuthImsProperties.  # noqa: E501
        :type configid: ConfigNodePropertyString
        :param scope: The scope of this ComAdobeGraniteAuthImsProperties.  # noqa: E501
        :type scope: ConfigNodePropertyString
        """
        self.openapi_types = {
            'configid': ConfigNodePropertyString,
            'scope': ConfigNodePropertyString
        }

        self.attribute_map = {
            'configid': 'configid',
            'scope': 'scope'
        }

        self._configid = configid
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt) -> 'ComAdobeGraniteAuthImsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The comAdobeGraniteAuthImsProperties of this ComAdobeGraniteAuthImsProperties.  # noqa: E501
        :rtype: ComAdobeGraniteAuthImsProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configid(self) -> ConfigNodePropertyString:
        """Gets the configid of this ComAdobeGraniteAuthImsProperties.


        :return: The configid of this ComAdobeGraniteAuthImsProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._configid

    @configid.setter
    def configid(self, configid: ConfigNodePropertyString):
        """Sets the configid of this ComAdobeGraniteAuthImsProperties.


        :param configid: The configid of this ComAdobeGraniteAuthImsProperties.
        :type configid: ConfigNodePropertyString
        """

        self._configid = configid

    @property
    def scope(self) -> ConfigNodePropertyString:
        """Gets the scope of this ComAdobeGraniteAuthImsProperties.


        :return: The scope of this ComAdobeGraniteAuthImsProperties.
        :rtype: ConfigNodePropertyString
        """
        return self._scope

    @scope.setter
    def scope(self, scope: ConfigNodePropertyString):
        """Sets the scope of this ComAdobeGraniteAuthImsProperties.


        :param scope: The scope of this ComAdobeGraniteAuthImsProperties.
        :type scope: ConfigNodePropertyString
        """

        self._scope = scope
