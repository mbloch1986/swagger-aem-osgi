/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteMonitoringImplScriptConfigImplProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteMonitoringImplScriptConfigImplProperties :  IEquatable<ComAdobeGraniteMonitoringImplScriptConfigImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteMonitoringImplScriptConfigImplProperties" /> class.
        /// </summary>
        /// <param name="scriptFilename">scriptFilename.</param>
        /// <param name="scriptDisplay">scriptDisplay.</param>
        /// <param name="scriptPath">scriptPath.</param>
        /// <param name="scriptPlatform">scriptPlatform.</param>
        /// <param name="interval">interval.</param>
        /// <param name="jmxdomain">jmxdomain.</param>
        public ComAdobeGraniteMonitoringImplScriptConfigImplProperties(ConfigNodePropertyString scriptFilename = default(ConfigNodePropertyString), ConfigNodePropertyString scriptDisplay = default(ConfigNodePropertyString), ConfigNodePropertyString scriptPath = default(ConfigNodePropertyString), ConfigNodePropertyArray scriptPlatform = default(ConfigNodePropertyArray), ConfigNodePropertyInteger interval = default(ConfigNodePropertyInteger), ConfigNodePropertyString jmxdomain = default(ConfigNodePropertyString))
        {
            this.ScriptFilename = scriptFilename;
            this.ScriptDisplay = scriptDisplay;
            this.ScriptPath = scriptPath;
            this.ScriptPlatform = scriptPlatform;
            this.Interval = interval;
            this.Jmxdomain = jmxdomain;
        }
        
        /// <summary>
        /// Gets or Sets ScriptFilename
        /// </summary>
        [DataMember(Name="script.filename", EmitDefaultValue=false)]
        public ConfigNodePropertyString ScriptFilename { get; set; }

        /// <summary>
        /// Gets or Sets ScriptDisplay
        /// </summary>
        [DataMember(Name="script.display", EmitDefaultValue=false)]
        public ConfigNodePropertyString ScriptDisplay { get; set; }

        /// <summary>
        /// Gets or Sets ScriptPath
        /// </summary>
        [DataMember(Name="script.path", EmitDefaultValue=false)]
        public ConfigNodePropertyString ScriptPath { get; set; }

        /// <summary>
        /// Gets or Sets ScriptPlatform
        /// </summary>
        [DataMember(Name="script.platform", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ScriptPlatform { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name="interval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger Interval { get; set; }

        /// <summary>
        /// Gets or Sets Jmxdomain
        /// </summary>
        [DataMember(Name="jmxdomain", EmitDefaultValue=false)]
        public ConfigNodePropertyString Jmxdomain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteMonitoringImplScriptConfigImplProperties {\n");
            sb.Append("  ScriptFilename: ").Append(ScriptFilename).Append("\n");
            sb.Append("  ScriptDisplay: ").Append(ScriptDisplay).Append("\n");
            sb.Append("  ScriptPath: ").Append(ScriptPath).Append("\n");
            sb.Append("  ScriptPlatform: ").Append(ScriptPlatform).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Jmxdomain: ").Append(Jmxdomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteMonitoringImplScriptConfigImplProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteMonitoringImplScriptConfigImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteMonitoringImplScriptConfigImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteMonitoringImplScriptConfigImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScriptFilename == input.ScriptFilename ||
                    (this.ScriptFilename != null &&
                    this.ScriptFilename.Equals(input.ScriptFilename))
                ) && 
                (
                    this.ScriptDisplay == input.ScriptDisplay ||
                    (this.ScriptDisplay != null &&
                    this.ScriptDisplay.Equals(input.ScriptDisplay))
                ) && 
                (
                    this.ScriptPath == input.ScriptPath ||
                    (this.ScriptPath != null &&
                    this.ScriptPath.Equals(input.ScriptPath))
                ) && 
                (
                    this.ScriptPlatform == input.ScriptPlatform ||
                    (this.ScriptPlatform != null &&
                    this.ScriptPlatform.Equals(input.ScriptPlatform))
                ) && 
                (
                    this.Interval == input.Interval ||
                    (this.Interval != null &&
                    this.Interval.Equals(input.Interval))
                ) && 
                (
                    this.Jmxdomain == input.Jmxdomain ||
                    (this.Jmxdomain != null &&
                    this.Jmxdomain.Equals(input.Jmxdomain))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScriptFilename != null)
                    hashCode = hashCode * 59 + this.ScriptFilename.GetHashCode();
                if (this.ScriptDisplay != null)
                    hashCode = hashCode * 59 + this.ScriptDisplay.GetHashCode();
                if (this.ScriptPath != null)
                    hashCode = hashCode * 59 + this.ScriptPath.GetHashCode();
                if (this.ScriptPlatform != null)
                    hashCode = hashCode * 59 + this.ScriptPlatform.GetHashCode();
                if (this.Interval != null)
                    hashCode = hashCode * 59 + this.Interval.GetHashCode();
                if (this.Jmxdomain != null)
                    hashCode = hashCode * 59 + this.Jmxdomain.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
