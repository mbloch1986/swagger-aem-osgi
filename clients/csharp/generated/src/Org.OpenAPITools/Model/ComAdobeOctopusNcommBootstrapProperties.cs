/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeOctopusNcommBootstrapProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeOctopusNcommBootstrapProperties :  IEquatable<ComAdobeOctopusNcommBootstrapProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeOctopusNcommBootstrapProperties" /> class.
        /// </summary>
        /// <param name="maxConnections">maxConnections.</param>
        /// <param name="maxRequests">maxRequests.</param>
        /// <param name="requestTimeout">requestTimeout.</param>
        /// <param name="requestRetries">requestRetries.</param>
        /// <param name="launchTimeout">launchTimeout.</param>
        public ComAdobeOctopusNcommBootstrapProperties(ConfigNodePropertyInteger maxConnections = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger maxRequests = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger requestTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger requestRetries = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger launchTimeout = default(ConfigNodePropertyInteger))
        {
            this.MaxConnections = maxConnections;
            this.MaxRequests = maxRequests;
            this.RequestTimeout = requestTimeout;
            this.RequestRetries = requestRetries;
            this.LaunchTimeout = launchTimeout;
        }
        
        /// <summary>
        /// Gets or Sets MaxConnections
        /// </summary>
        [DataMember(Name="maxConnections", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxConnections { get; set; }

        /// <summary>
        /// Gets or Sets MaxRequests
        /// </summary>
        [DataMember(Name="maxRequests", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxRequests { get; set; }

        /// <summary>
        /// Gets or Sets RequestTimeout
        /// </summary>
        [DataMember(Name="requestTimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RequestTimeout { get; set; }

        /// <summary>
        /// Gets or Sets RequestRetries
        /// </summary>
        [DataMember(Name="requestRetries", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger RequestRetries { get; set; }

        /// <summary>
        /// Gets or Sets LaunchTimeout
        /// </summary>
        [DataMember(Name="launchTimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger LaunchTimeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeOctopusNcommBootstrapProperties {\n");
            sb.Append("  MaxConnections: ").Append(MaxConnections).Append("\n");
            sb.Append("  MaxRequests: ").Append(MaxRequests).Append("\n");
            sb.Append("  RequestTimeout: ").Append(RequestTimeout).Append("\n");
            sb.Append("  RequestRetries: ").Append(RequestRetries).Append("\n");
            sb.Append("  LaunchTimeout: ").Append(LaunchTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeOctopusNcommBootstrapProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeOctopusNcommBootstrapProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeOctopusNcommBootstrapProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeOctopusNcommBootstrapProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxConnections == input.MaxConnections ||
                    (this.MaxConnections != null &&
                    this.MaxConnections.Equals(input.MaxConnections))
                ) && 
                (
                    this.MaxRequests == input.MaxRequests ||
                    (this.MaxRequests != null &&
                    this.MaxRequests.Equals(input.MaxRequests))
                ) && 
                (
                    this.RequestTimeout == input.RequestTimeout ||
                    (this.RequestTimeout != null &&
                    this.RequestTimeout.Equals(input.RequestTimeout))
                ) && 
                (
                    this.RequestRetries == input.RequestRetries ||
                    (this.RequestRetries != null &&
                    this.RequestRetries.Equals(input.RequestRetries))
                ) && 
                (
                    this.LaunchTimeout == input.LaunchTimeout ||
                    (this.LaunchTimeout != null &&
                    this.LaunchTimeout.Equals(input.LaunchTimeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxConnections != null)
                    hashCode = hashCode * 59 + this.MaxConnections.GetHashCode();
                if (this.MaxRequests != null)
                    hashCode = hashCode * 59 + this.MaxRequests.GetHashCode();
                if (this.RequestTimeout != null)
                    hashCode = hashCode * 59 + this.RequestTimeout.GetHashCode();
                if (this.RequestRetries != null)
                    hashCode = hashCode * 59 + this.RequestRetries.GetHashCode();
                if (this.LaunchTimeout != null)
                    hashCode = hashCode * 59 + this.LaunchTimeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
