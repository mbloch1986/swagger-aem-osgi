/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties
    : public ModelBase
{
public:
    OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties();
    virtual ~OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMinPoolSize() const;
    bool minPoolSizeIsSet() const;
    void unsetMinPoolSize();
    void setMinPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxPoolSize() const;
    bool maxPoolSizeIsSet() const;
    void unsetMaxPoolSize();
    void setMaxPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getQueueSize() const;
    bool queueSizeIsSet() const;
    void unsetQueueSize();
    void setQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxThreadAge() const;
    bool maxThreadAgeIsSet() const;
    void unsetMaxThreadAge();
    void setMaxThreadAge(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getKeepAliveTime() const;
    bool keepAliveTimeIsSet() const;
    void unsetKeepAliveTime();
    void setKeepAliveTime(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getBlockPolicy() const;
    bool blockPolicyIsSet() const;
    void unsetBlockPolicy();
    void setBlockPolicy(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getShutdownGraceful() const;
    bool shutdownGracefulIsSet() const;
    void unsetShutdownGraceful();
    void setShutdownGraceful(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDaemon() const;
    bool daemonIsSet() const;
    void unsetDaemon();
    void setDaemon(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getShutdownWaitTime() const;
    bool shutdownWaitTimeIsSet() const;
    void unsetShutdownWaitTime();
    void setShutdownWaitTime(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();
    void setPriority(std::shared_ptr<ConfigNodePropertyDropDown> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Name;
    bool m_NameIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MinPoolSize;
    bool m_MinPoolSizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxPoolSize;
    bool m_MaxPoolSizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_QueueSize;
    bool m_QueueSizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxThreadAge;
    bool m_MaxThreadAgeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_KeepAliveTime;
    bool m_KeepAliveTimeIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_BlockPolicy;
    bool m_BlockPolicyIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_ShutdownGraceful;
    bool m_ShutdownGracefulIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Daemon;
    bool m_DaemonIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ShutdownWaitTime;
    bool m_ShutdownWaitTimeIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Priority;
    bool m_PriorityIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H_ */
