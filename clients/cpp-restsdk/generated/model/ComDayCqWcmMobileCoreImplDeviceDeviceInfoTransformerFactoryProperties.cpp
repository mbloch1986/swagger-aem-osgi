/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties()
{
    m_Device_info_transformer_enabledIsSet = false;
    m_Device_info_transformer_css_styleIsSet = false;
}

ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::~ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties()
{
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Device_info_transformer_enabledIsSet)
    {
        val[utility::conversions::to_string_t("device.info.transformer.enabled")] = ModelBase::toJson(m_Device_info_transformer_enabled);
    }
    if(m_Device_info_transformer_css_styleIsSet)
    {
        val[utility::conversions::to_string_t("device.info.transformer.css.style")] = ModelBase::toJson(m_Device_info_transformer_css_style);
    }

    return val;
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("device.info.transformer.enabled")))
    {
        if(!val[utility::conversions::to_string_t("device.info.transformer.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("device.info.transformer.enabled")]);
            setDeviceInfoTransformerEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("device.info.transformer.css.style")))
    {
        if(!val[utility::conversions::to_string_t("device.info.transformer.css.style")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("device.info.transformer.css.style")]);
            setDeviceInfoTransformerCssStyle( newItem );
        }
    }
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Device_info_transformer_enabledIsSet)
    {
        if (m_Device_info_transformer_enabled.get())
        {
            m_Device_info_transformer_enabled->toMultipart(multipart, utility::conversions::to_string_t("device.info.transformer.enabled."));
        }
    }
    if(m_Device_info_transformer_css_styleIsSet)
    {
        if (m_Device_info_transformer_css_style.get())
        {
            m_Device_info_transformer_css_style->toMultipart(multipart, utility::conversions::to_string_t("device.info.transformer.css.style."));
        }
    }
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("device.info.transformer.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("device.info.transformer.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("device.info.transformer.enabled."));
            setDeviceInfoTransformerEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("device.info.transformer.css.style")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("device.info.transformer.css.style")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("device.info.transformer.css.style."));
            setDeviceInfoTransformerCssStyle( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::getDeviceInfoTransformerEnabled() const
{
    return m_Device_info_transformer_enabled;
}


void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::setDeviceInfoTransformerEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Device_info_transformer_enabled = value;
    m_Device_info_transformer_enabledIsSet = true;
}
bool ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::deviceInfoTransformerEnabledIsSet() const
{
    return m_Device_info_transformer_enabledIsSet;
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::unsetDevice_info_transformer_enabled()
{
    m_Device_info_transformer_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::getDeviceInfoTransformerCssStyle() const
{
    return m_Device_info_transformer_css_style;
}


void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::setDeviceInfoTransformerCssStyle(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Device_info_transformer_css_style = value;
    m_Device_info_transformer_css_styleIsSet = true;
}
bool ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::deviceInfoTransformerCssStyleIsSet() const
{
    return m_Device_info_transformer_css_styleIsSet;
}

void ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties::unsetDevice_info_transformer_css_style()
{
    m_Device_info_transformer_css_styleIsSet = false;
}

}
}
}
}

