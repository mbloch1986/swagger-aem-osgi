<?php
/**
 * ComAdobeGraniteThreaddumpThreadDumpCollectorProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeGraniteThreaddumpThreadDumpCollectorProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeGraniteThreaddumpThreadDumpCollectorProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeGraniteThreaddumpThreadDumpCollectorProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scheduler_period' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'scheduler_run_on' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'granite_threaddump_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'granite_threaddump_dumps_per_file' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'granite_threaddump_enable_gzip_compression' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'granite_threaddump_enable_directories_compression' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'granite_threaddump_enable_j_stack' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'granite_threaddump_max_backup_days' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'granite_threaddump_backup_clean_trigger' => '\OpenAPI\Client\Model\ConfigNodePropertyString'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'scheduler_period' => null,
        'scheduler_run_on' => null,
        'granite_threaddump_enabled' => null,
        'granite_threaddump_dumps_per_file' => null,
        'granite_threaddump_enable_gzip_compression' => null,
        'granite_threaddump_enable_directories_compression' => null,
        'granite_threaddump_enable_j_stack' => null,
        'granite_threaddump_max_backup_days' => null,
        'granite_threaddump_backup_clean_trigger' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scheduler_period' => 'scheduler.period',
        'scheduler_run_on' => 'scheduler.runOn',
        'granite_threaddump_enabled' => 'granite.threaddump.enabled',
        'granite_threaddump_dumps_per_file' => 'granite.threaddump.dumpsPerFile',
        'granite_threaddump_enable_gzip_compression' => 'granite.threaddump.enableGzipCompression',
        'granite_threaddump_enable_directories_compression' => 'granite.threaddump.enableDirectoriesCompression',
        'granite_threaddump_enable_j_stack' => 'granite.threaddump.enableJStack',
        'granite_threaddump_max_backup_days' => 'granite.threaddump.maxBackupDays',
        'granite_threaddump_backup_clean_trigger' => 'granite.threaddump.backupCleanTrigger'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scheduler_period' => 'setSchedulerPeriod',
        'scheduler_run_on' => 'setSchedulerRunOn',
        'granite_threaddump_enabled' => 'setGraniteThreaddumpEnabled',
        'granite_threaddump_dumps_per_file' => 'setGraniteThreaddumpDumpsPerFile',
        'granite_threaddump_enable_gzip_compression' => 'setGraniteThreaddumpEnableGzipCompression',
        'granite_threaddump_enable_directories_compression' => 'setGraniteThreaddumpEnableDirectoriesCompression',
        'granite_threaddump_enable_j_stack' => 'setGraniteThreaddumpEnableJStack',
        'granite_threaddump_max_backup_days' => 'setGraniteThreaddumpMaxBackupDays',
        'granite_threaddump_backup_clean_trigger' => 'setGraniteThreaddumpBackupCleanTrigger'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scheduler_period' => 'getSchedulerPeriod',
        'scheduler_run_on' => 'getSchedulerRunOn',
        'granite_threaddump_enabled' => 'getGraniteThreaddumpEnabled',
        'granite_threaddump_dumps_per_file' => 'getGraniteThreaddumpDumpsPerFile',
        'granite_threaddump_enable_gzip_compression' => 'getGraniteThreaddumpEnableGzipCompression',
        'granite_threaddump_enable_directories_compression' => 'getGraniteThreaddumpEnableDirectoriesCompression',
        'granite_threaddump_enable_j_stack' => 'getGraniteThreaddumpEnableJStack',
        'granite_threaddump_max_backup_days' => 'getGraniteThreaddumpMaxBackupDays',
        'granite_threaddump_backup_clean_trigger' => 'getGraniteThreaddumpBackupCleanTrigger'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scheduler_period'] = isset($data['scheduler_period']) ? $data['scheduler_period'] : null;
        $this->container['scheduler_run_on'] = isset($data['scheduler_run_on']) ? $data['scheduler_run_on'] : null;
        $this->container['granite_threaddump_enabled'] = isset($data['granite_threaddump_enabled']) ? $data['granite_threaddump_enabled'] : null;
        $this->container['granite_threaddump_dumps_per_file'] = isset($data['granite_threaddump_dumps_per_file']) ? $data['granite_threaddump_dumps_per_file'] : null;
        $this->container['granite_threaddump_enable_gzip_compression'] = isset($data['granite_threaddump_enable_gzip_compression']) ? $data['granite_threaddump_enable_gzip_compression'] : null;
        $this->container['granite_threaddump_enable_directories_compression'] = isset($data['granite_threaddump_enable_directories_compression']) ? $data['granite_threaddump_enable_directories_compression'] : null;
        $this->container['granite_threaddump_enable_j_stack'] = isset($data['granite_threaddump_enable_j_stack']) ? $data['granite_threaddump_enable_j_stack'] : null;
        $this->container['granite_threaddump_max_backup_days'] = isset($data['granite_threaddump_max_backup_days']) ? $data['granite_threaddump_max_backup_days'] : null;
        $this->container['granite_threaddump_backup_clean_trigger'] = isset($data['granite_threaddump_backup_clean_trigger']) ? $data['granite_threaddump_backup_clean_trigger'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scheduler_period
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getSchedulerPeriod()
    {
        return $this->container['scheduler_period'];
    }

    /**
     * Sets scheduler_period
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $scheduler_period scheduler_period
     *
     * @return $this
     */
    public function setSchedulerPeriod($scheduler_period)
    {
        $this->container['scheduler_period'] = $scheduler_period;

        return $this;
    }

    /**
     * Gets scheduler_run_on
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getSchedulerRunOn()
    {
        return $this->container['scheduler_run_on'];
    }

    /**
     * Sets scheduler_run_on
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $scheduler_run_on scheduler_run_on
     *
     * @return $this
     */
    public function setSchedulerRunOn($scheduler_run_on)
    {
        $this->container['scheduler_run_on'] = $scheduler_run_on;

        return $this;
    }

    /**
     * Gets granite_threaddump_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getGraniteThreaddumpEnabled()
    {
        return $this->container['granite_threaddump_enabled'];
    }

    /**
     * Sets granite_threaddump_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $granite_threaddump_enabled granite_threaddump_enabled
     *
     * @return $this
     */
    public function setGraniteThreaddumpEnabled($granite_threaddump_enabled)
    {
        $this->container['granite_threaddump_enabled'] = $granite_threaddump_enabled;

        return $this;
    }

    /**
     * Gets granite_threaddump_dumps_per_file
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getGraniteThreaddumpDumpsPerFile()
    {
        return $this->container['granite_threaddump_dumps_per_file'];
    }

    /**
     * Sets granite_threaddump_dumps_per_file
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $granite_threaddump_dumps_per_file granite_threaddump_dumps_per_file
     *
     * @return $this
     */
    public function setGraniteThreaddumpDumpsPerFile($granite_threaddump_dumps_per_file)
    {
        $this->container['granite_threaddump_dumps_per_file'] = $granite_threaddump_dumps_per_file;

        return $this;
    }

    /**
     * Gets granite_threaddump_enable_gzip_compression
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getGraniteThreaddumpEnableGzipCompression()
    {
        return $this->container['granite_threaddump_enable_gzip_compression'];
    }

    /**
     * Sets granite_threaddump_enable_gzip_compression
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $granite_threaddump_enable_gzip_compression granite_threaddump_enable_gzip_compression
     *
     * @return $this
     */
    public function setGraniteThreaddumpEnableGzipCompression($granite_threaddump_enable_gzip_compression)
    {
        $this->container['granite_threaddump_enable_gzip_compression'] = $granite_threaddump_enable_gzip_compression;

        return $this;
    }

    /**
     * Gets granite_threaddump_enable_directories_compression
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getGraniteThreaddumpEnableDirectoriesCompression()
    {
        return $this->container['granite_threaddump_enable_directories_compression'];
    }

    /**
     * Sets granite_threaddump_enable_directories_compression
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $granite_threaddump_enable_directories_compression granite_threaddump_enable_directories_compression
     *
     * @return $this
     */
    public function setGraniteThreaddumpEnableDirectoriesCompression($granite_threaddump_enable_directories_compression)
    {
        $this->container['granite_threaddump_enable_directories_compression'] = $granite_threaddump_enable_directories_compression;

        return $this;
    }

    /**
     * Gets granite_threaddump_enable_j_stack
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getGraniteThreaddumpEnableJStack()
    {
        return $this->container['granite_threaddump_enable_j_stack'];
    }

    /**
     * Sets granite_threaddump_enable_j_stack
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $granite_threaddump_enable_j_stack granite_threaddump_enable_j_stack
     *
     * @return $this
     */
    public function setGraniteThreaddumpEnableJStack($granite_threaddump_enable_j_stack)
    {
        $this->container['granite_threaddump_enable_j_stack'] = $granite_threaddump_enable_j_stack;

        return $this;
    }

    /**
     * Gets granite_threaddump_max_backup_days
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getGraniteThreaddumpMaxBackupDays()
    {
        return $this->container['granite_threaddump_max_backup_days'];
    }

    /**
     * Sets granite_threaddump_max_backup_days
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $granite_threaddump_max_backup_days granite_threaddump_max_backup_days
     *
     * @return $this
     */
    public function setGraniteThreaddumpMaxBackupDays($granite_threaddump_max_backup_days)
    {
        $this->container['granite_threaddump_max_backup_days'] = $granite_threaddump_max_backup_days;

        return $this;
    }

    /**
     * Gets granite_threaddump_backup_clean_trigger
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getGraniteThreaddumpBackupCleanTrigger()
    {
        return $this->container['granite_threaddump_backup_clean_trigger'];
    }

    /**
     * Sets granite_threaddump_backup_clean_trigger
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $granite_threaddump_backup_clean_trigger granite_threaddump_backup_clean_trigger
     *
     * @return $this
     */
    public function setGraniteThreaddumpBackupCleanTrigger($granite_threaddump_backup_clean_trigger)
    {
        $this->container['granite_threaddump_backup_clean_trigger'] = $granite_threaddump_backup_clean_trigger;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


