/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheSlingDistributionSeriali
 */
public class OASOrgApacheSlingDistributionSeriali implements OAS.MappedProperties {
    /**
     * Get name
     * @return name
     */
    public OASConfigNodePropertyString name { get; set; }

    /**
     * Get r_type
     * @return r_type
     */
    public OASConfigNodePropertyDropDown r_type { get; set; }

    /**
     * Get importMode
     * @return importMode
     */
    public OASConfigNodePropertyString importMode { get; set; }

    /**
     * Get aclHandling
     * @return aclHandling
     */
    public OASConfigNodePropertyString aclHandling { get; set; }

    /**
     * Get packageRoots
     * @return packageRoots
     */
    public OASConfigNodePropertyString packageRoots { get; set; }

    /**
     * Get packageFilters
     * @return packageFilters
     */
    public OASConfigNodePropertyArray packageFilters { get; set; }

    /**
     * Get propertyFilters
     * @return propertyFilters
     */
    public OASConfigNodePropertyArray propertyFilters { get; set; }

    /**
     * Get tempFsFolder
     * @return tempFsFolder
     */
    public OASConfigNodePropertyString tempFsFolder { get; set; }

    /**
     * Get useBinaryReferences
     * @return useBinaryReferences
     */
    public OASConfigNodePropertyBoolean useBinaryReferences { get; set; }

    /**
     * Get autoSaveThreshold
     * @return autoSaveThreshold
     */
    public OASConfigNodePropertyInteger autoSaveThreshold { get; set; }

    /**
     * Get cleanupDelay
     * @return cleanupDelay
     */
    public OASConfigNodePropertyInteger cleanupDelay { get; set; }

    /**
     * Get fileThreshold
     * @return fileThreshold
     */
    public OASConfigNodePropertyInteger fileThreshold { get; set; }

    /**
     * Get MEGA_BYTES
     * @return MEGA_BYTES
     */
    public OASConfigNodePropertyDropDown MEGA_BYTES { get; set; }

    /**
     * Get useOffHeapMemory
     * @return useOffHeapMemory
     */
    public OASConfigNodePropertyBoolean useOffHeapMemory { get; set; }

    /**
     * Get digestAlgorithm
     * @return digestAlgorithm
     */
    public OASConfigNodePropertyDropDown digestAlgorithm { get; set; }

    /**
     * Get monitoringQueueSize
     * @return monitoringQueueSize
     */
    public OASConfigNodePropertyInteger monitoringQueueSize { get; set; }

    /**
     * Get pathsMapping
     * @return pathsMapping
     */
    public OASConfigNodePropertyArray pathsMapping { get; set; }

    /**
     * Get strictImport
     * @return strictImport
     */
    public OASConfigNodePropertyBoolean strictImport { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'type' => 'r_type',
        'package.roots' => 'packageRoots',
        'package.filters' => 'packageFilters',
        'property.filters' => 'propertyFilters'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASOrgApacheSlingDistributionSeriali getExample() {
        OASOrgApacheSlingDistributionSeriali orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties = new OASOrgApacheSlingDistributionSeriali();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.name = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.r_type = OASConfigNodePropertyDropDown.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.importMode = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.aclHandling = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.packageRoots = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.packageFilters = OASConfigNodePropertyArray.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.propertyFilters = OASConfigNodePropertyArray.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.tempFsFolder = OASConfigNodePropertyString.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.useBinaryReferences = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.autoSaveThreshold = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.cleanupDelay = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.fileThreshold = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.MEGA_BYTES = OASConfigNodePropertyDropDown.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.useOffHeapMemory = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.digestAlgorithm = OASConfigNodePropertyDropDown.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.monitoringQueueSize = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.pathsMapping = OASConfigNodePropertyArray.getExample();
          orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.strictImport = OASConfigNodePropertyBoolean.getExample();
        return orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheSlingDistributionSeriali) {           
            OASOrgApacheSlingDistributionSeriali orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties = (OASOrgApacheSlingDistributionSeriali) obj;
            return this.name == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.name
                && this.r_type == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.r_type
                && this.importMode == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.importMode
                && this.aclHandling == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.aclHandling
                && this.packageRoots == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.packageRoots
                && this.packageFilters == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.packageFilters
                && this.propertyFilters == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.propertyFilters
                && this.tempFsFolder == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.tempFsFolder
                && this.useBinaryReferences == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.useBinaryReferences
                && this.autoSaveThreshold == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.autoSaveThreshold
                && this.cleanupDelay == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.cleanupDelay
                && this.fileThreshold == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.fileThreshold
                && this.MEGA_BYTES == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.MEGA_BYTES
                && this.useOffHeapMemory == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.useOffHeapMemory
                && this.digestAlgorithm == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.digestAlgorithm
                && this.monitoringQueueSize == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.monitoringQueueSize
                && this.pathsMapping == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.pathsMapping
                && this.strictImport == orgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.strictImport;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (r_type == null ? 0 : System.hashCode(r_type));
        hashCode = (17 * hashCode) + (importMode == null ? 0 : System.hashCode(importMode));
        hashCode = (17 * hashCode) + (aclHandling == null ? 0 : System.hashCode(aclHandling));
        hashCode = (17 * hashCode) + (packageRoots == null ? 0 : System.hashCode(packageRoots));
        hashCode = (17 * hashCode) + (packageFilters == null ? 0 : System.hashCode(packageFilters));
        hashCode = (17 * hashCode) + (propertyFilters == null ? 0 : System.hashCode(propertyFilters));
        hashCode = (17 * hashCode) + (tempFsFolder == null ? 0 : System.hashCode(tempFsFolder));
        hashCode = (17 * hashCode) + (useBinaryReferences == null ? 0 : System.hashCode(useBinaryReferences));
        hashCode = (17 * hashCode) + (autoSaveThreshold == null ? 0 : System.hashCode(autoSaveThreshold));
        hashCode = (17 * hashCode) + (cleanupDelay == null ? 0 : System.hashCode(cleanupDelay));
        hashCode = (17 * hashCode) + (fileThreshold == null ? 0 : System.hashCode(fileThreshold));
        hashCode = (17 * hashCode) + (MEGA_BYTES == null ? 0 : System.hashCode(MEGA_BYTES));
        hashCode = (17 * hashCode) + (useOffHeapMemory == null ? 0 : System.hashCode(useOffHeapMemory));
        hashCode = (17 * hashCode) + (digestAlgorithm == null ? 0 : System.hashCode(digestAlgorithm));
        hashCode = (17 * hashCode) + (monitoringQueueSize == null ? 0 : System.hashCode(monitoringQueueSize));
        hashCode = (17 * hashCode) + (pathsMapping == null ? 0 : System.hashCode(pathsMapping));
        hashCode = (17 * hashCode) + (strictImport == null ? 0 : System.hashCode(strictImport));
        return hashCode;
    }
}

