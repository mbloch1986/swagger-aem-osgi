/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.h
 *
 * 
 */

#ifndef OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_
#define OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties();
    virtual ~OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getTokenExpiration() const;
    void setTokenExpiration(ConfigNodePropertyString const& value);
    bool tokenExpirationIsSet() const;
    void unsetTokenExpiration();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getTokenLength() const;
    void setTokenLength(ConfigNodePropertyString const& value);
    bool tokenLengthIsSet() const;
    void unsetTokenLength();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getTokenRefresh() const;
    void setTokenRefresh(ConfigNodePropertyBoolean const& value);
    bool tokenRefreshIsSet() const;
    void unsetTokenRefresh();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getTokenCleanupThreshold() const;
    void setTokenCleanupThreshold(ConfigNodePropertyInteger const& value);
    bool tokenCleanupThresholdIsSet() const;
    void unsetTokenCleanupThreshold();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getPasswordHashAlgorithm() const;
    void setPasswordHashAlgorithm(ConfigNodePropertyString const& value);
    bool passwordHashAlgorithmIsSet() const;
    void unsetPasswordHashAlgorithm();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getPasswordHashIterations() const;
    void setPasswordHashIterations(ConfigNodePropertyInteger const& value);
    bool passwordHashIterationsIsSet() const;
    void unsetPasswordHashIterations();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getPasswordSaltSize() const;
    void setPasswordSaltSize(ConfigNodePropertyInteger const& value);
    bool passwordSaltSizeIsSet() const;
    void unsetPasswordSaltSize();

protected:
    ConfigNodePropertyString m_TokenExpiration;
    bool m_TokenExpirationIsSet;
    ConfigNodePropertyString m_TokenLength;
    bool m_TokenLengthIsSet;
    ConfigNodePropertyBoolean m_TokenRefresh;
    bool m_TokenRefreshIsSet;
    ConfigNodePropertyInteger m_TokenCleanupThreshold;
    bool m_TokenCleanupThresholdIsSet;
    ConfigNodePropertyString m_PasswordHashAlgorithm;
    bool m_PasswordHashAlgorithmIsSet;
    ConfigNodePropertyInteger m_PasswordHashIterations;
    bool m_PasswordHashIterationsIsSet;
    ConfigNodePropertyInteger m_PasswordSaltSize;
    bool m_PasswordSaltSizeIsSet;
};

}
}
}
}

#endif /* OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_ */
