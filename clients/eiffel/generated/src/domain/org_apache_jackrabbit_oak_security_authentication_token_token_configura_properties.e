note
 description:"[
		Adobe Experience Manager OSGI config (AEM) API
 		Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
  		OpenAPI spec version: 1.0.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ORG_APACHE_JACKRABBIT_OAK_SECURITY_AUTHENTICATION_TOKEN_TOKEN_CONFIGURA_PROPERTIES 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    token_expiration: detachable CONFIG_NODE_PROPERTY_STRING 
      
    token_length: detachable CONFIG_NODE_PROPERTY_STRING 
      
    token_refresh: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    token_cleanup_threshold: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    password_hash_algorithm: detachable CONFIG_NODE_PROPERTY_STRING 
      
    password_hash_iterations: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    password_salt_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      

feature -- Change Element  
 
    set_token_expiration (a_name: like token_expiration)
        -- Set 'token_expiration' with 'a_name'.
      do
        token_expiration := a_name
      ensure
        token_expiration_set: token_expiration = a_name		
      end

    set_token_length (a_name: like token_length)
        -- Set 'token_length' with 'a_name'.
      do
        token_length := a_name
      ensure
        token_length_set: token_length = a_name		
      end

    set_token_refresh (a_name: like token_refresh)
        -- Set 'token_refresh' with 'a_name'.
      do
        token_refresh := a_name
      ensure
        token_refresh_set: token_refresh = a_name		
      end

    set_token_cleanup_threshold (a_name: like token_cleanup_threshold)
        -- Set 'token_cleanup_threshold' with 'a_name'.
      do
        token_cleanup_threshold := a_name
      ensure
        token_cleanup_threshold_set: token_cleanup_threshold = a_name		
      end

    set_password_hash_algorithm (a_name: like password_hash_algorithm)
        -- Set 'password_hash_algorithm' with 'a_name'.
      do
        password_hash_algorithm := a_name
      ensure
        password_hash_algorithm_set: password_hash_algorithm = a_name		
      end

    set_password_hash_iterations (a_name: like password_hash_iterations)
        -- Set 'password_hash_iterations' with 'a_name'.
      do
        password_hash_iterations := a_name
      ensure
        password_hash_iterations_set: password_hash_iterations = a_name		
      end

    set_password_salt_size (a_name: like password_salt_size)
        -- Set 'password_salt_size' with 'a_name'.
      do
        password_salt_size := a_name
      ensure
        password_salt_size_set: password_salt_size = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ORG_APACHE_JACKRABBIT_OAK_SECURITY_AUTHENTICATION_TOKEN_TOKEN_CONFIGURA_PROPERTIES%N")
        if attached token_expiration as l_token_expiration then
          Result.append ("%Ntoken_expiration:")
          Result.append (l_token_expiration.out)
          Result.append ("%N")    
        end  
        if attached token_length as l_token_length then
          Result.append ("%Ntoken_length:")
          Result.append (l_token_length.out)
          Result.append ("%N")    
        end  
        if attached token_refresh as l_token_refresh then
          Result.append ("%Ntoken_refresh:")
          Result.append (l_token_refresh.out)
          Result.append ("%N")    
        end  
        if attached token_cleanup_threshold as l_token_cleanup_threshold then
          Result.append ("%Ntoken_cleanup_threshold:")
          Result.append (l_token_cleanup_threshold.out)
          Result.append ("%N")    
        end  
        if attached password_hash_algorithm as l_password_hash_algorithm then
          Result.append ("%Npassword_hash_algorithm:")
          Result.append (l_password_hash_algorithm.out)
          Result.append ("%N")    
        end  
        if attached password_hash_iterations as l_password_hash_iterations then
          Result.append ("%Npassword_hash_iterations:")
          Result.append (l_password_hash_iterations.out)
          Result.append ("%N")    
        end  
        if attached password_salt_size as l_password_salt_size then
          Result.append ("%Npassword_salt_size:")
          Result.append (l_password_salt_size.out)
          Result.append ("%N")    
        end  
      end
end


