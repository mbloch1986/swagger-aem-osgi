/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties() {
    this->init();
}

OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::~OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties() {
    
}

void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::init() {
    m_query_limit_in_memory_isSet = false;
    m_query_limit_reads_isSet = false;
    m_query_fail_traversal_isSet = false;
    m_fast_query_size_isSet = false;
}

void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(query_limit_in_memory, json[QString("queryLimitInMemory")]);
    
    ::OpenAPI::fromJsonValue(query_limit_reads, json[QString("queryLimitReads")]);
    
    ::OpenAPI::fromJsonValue(query_fail_traversal, json[QString("queryFailTraversal")]);
    
    ::OpenAPI::fromJsonValue(fast_query_size, json[QString("fastQuerySize")]);
    
}

QString
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::asJsonObject() const {
    QJsonObject obj;
	if(query_limit_in_memory.isSet()){
        obj.insert(QString("queryLimitInMemory"), ::OpenAPI::toJsonValue(query_limit_in_memory));
    }
	if(query_limit_reads.isSet()){
        obj.insert(QString("queryLimitReads"), ::OpenAPI::toJsonValue(query_limit_reads));
    }
	if(query_fail_traversal.isSet()){
        obj.insert(QString("queryFailTraversal"), ::OpenAPI::toJsonValue(query_fail_traversal));
    }
	if(fast_query_size.isSet()){
        obj.insert(QString("fastQuerySize"), ::OpenAPI::toJsonValue(fast_query_size));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getQueryLimitInMemory() const {
    return query_limit_in_memory;
}
void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setQueryLimitInMemory(const OAIConfigNodePropertyInteger &query_limit_in_memory) {
    this->query_limit_in_memory = query_limit_in_memory;
    this->m_query_limit_in_memory_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getQueryLimitReads() const {
    return query_limit_reads;
}
void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setQueryLimitReads(const OAIConfigNodePropertyInteger &query_limit_reads) {
    this->query_limit_reads = query_limit_reads;
    this->m_query_limit_reads_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getQueryFailTraversal() const {
    return query_fail_traversal;
}
void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setQueryFailTraversal(const OAIConfigNodePropertyBoolean &query_fail_traversal) {
    this->query_fail_traversal = query_fail_traversal;
    this->m_query_fail_traversal_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getFastQuerySize() const {
    return fast_query_size;
}
void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setFastQuerySize(const OAIConfigNodePropertyBoolean &fast_query_size) {
    this->fast_query_size = fast_query_size;
    this->m_fast_query_size_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(query_limit_in_memory.isSet()){ isObjectUpdated = true; break;}
    
        if(query_limit_reads.isSet()){ isObjectUpdated = true; break;}
    
        if(query_fail_traversal.isSet()){ isObjectUpdated = true; break;}
    
        if(fast_query_size.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

