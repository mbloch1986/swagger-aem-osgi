/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties :  IEquatable<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties" /> class.
        /// </summary>
        /// <param name="providerName">providerName.</param>
        /// <param name="hostName">hostName.</param>
        /// <param name="hostPort">hostPort.</param>
        /// <param name="hostSsl">hostSsl.</param>
        /// <param name="hostTls">hostTls.</param>
        /// <param name="hostNoCertCheck">hostNoCertCheck.</param>
        /// <param name="bindDn">bindDn.</param>
        /// <param name="bindPassword">bindPassword.</param>
        /// <param name="searchTimeout">searchTimeout.</param>
        /// <param name="adminPoolMaxActive">adminPoolMaxActive.</param>
        /// <param name="adminPoolLookupOnValidate">adminPoolLookupOnValidate.</param>
        /// <param name="userPoolMaxActive">userPoolMaxActive.</param>
        /// <param name="userPoolLookupOnValidate">userPoolLookupOnValidate.</param>
        /// <param name="userBaseDN">userBaseDN.</param>
        /// <param name="userObjectclass">userObjectclass.</param>
        /// <param name="userIdAttribute">userIdAttribute.</param>
        /// <param name="userExtraFilter">userExtraFilter.</param>
        /// <param name="userMakeDnPath">userMakeDnPath.</param>
        /// <param name="groupBaseDN">groupBaseDN.</param>
        /// <param name="groupObjectclass">groupObjectclass.</param>
        /// <param name="groupNameAttribute">groupNameAttribute.</param>
        /// <param name="groupExtraFilter">groupExtraFilter.</param>
        /// <param name="groupMakeDnPath">groupMakeDnPath.</param>
        /// <param name="groupMemberAttribute">groupMemberAttribute.</param>
        /// <param name="useUidForExtId">useUidForExtId.</param>
        /// <param name="customattributes">customattributes.</param>
        public OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties(ConfigNodePropertyString providerName = default(ConfigNodePropertyString), ConfigNodePropertyString hostName = default(ConfigNodePropertyString), ConfigNodePropertyInteger hostPort = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean hostSsl = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean hostTls = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean hostNoCertCheck = default(ConfigNodePropertyBoolean), ConfigNodePropertyString bindDn = default(ConfigNodePropertyString), ConfigNodePropertyString bindPassword = default(ConfigNodePropertyString), ConfigNodePropertyString searchTimeout = default(ConfigNodePropertyString), ConfigNodePropertyInteger adminPoolMaxActive = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean adminPoolLookupOnValidate = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger userPoolMaxActive = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean userPoolLookupOnValidate = default(ConfigNodePropertyBoolean), ConfigNodePropertyString userBaseDN = default(ConfigNodePropertyString), ConfigNodePropertyArray userObjectclass = default(ConfigNodePropertyArray), ConfigNodePropertyString userIdAttribute = default(ConfigNodePropertyString), ConfigNodePropertyString userExtraFilter = default(ConfigNodePropertyString), ConfigNodePropertyBoolean userMakeDnPath = default(ConfigNodePropertyBoolean), ConfigNodePropertyString groupBaseDN = default(ConfigNodePropertyString), ConfigNodePropertyArray groupObjectclass = default(ConfigNodePropertyArray), ConfigNodePropertyString groupNameAttribute = default(ConfigNodePropertyString), ConfigNodePropertyString groupExtraFilter = default(ConfigNodePropertyString), ConfigNodePropertyBoolean groupMakeDnPath = default(ConfigNodePropertyBoolean), ConfigNodePropertyString groupMemberAttribute = default(ConfigNodePropertyString), ConfigNodePropertyBoolean useUidForExtId = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray customattributes = default(ConfigNodePropertyArray))
        {
            this.ProviderName = providerName;
            this.HostName = hostName;
            this.HostPort = hostPort;
            this.HostSsl = hostSsl;
            this.HostTls = hostTls;
            this.HostNoCertCheck = hostNoCertCheck;
            this.BindDn = bindDn;
            this.BindPassword = bindPassword;
            this.SearchTimeout = searchTimeout;
            this.AdminPoolMaxActive = adminPoolMaxActive;
            this.AdminPoolLookupOnValidate = adminPoolLookupOnValidate;
            this.UserPoolMaxActive = userPoolMaxActive;
            this.UserPoolLookupOnValidate = userPoolLookupOnValidate;
            this.UserBaseDN = userBaseDN;
            this.UserObjectclass = userObjectclass;
            this.UserIdAttribute = userIdAttribute;
            this.UserExtraFilter = userExtraFilter;
            this.UserMakeDnPath = userMakeDnPath;
            this.GroupBaseDN = groupBaseDN;
            this.GroupObjectclass = groupObjectclass;
            this.GroupNameAttribute = groupNameAttribute;
            this.GroupExtraFilter = groupExtraFilter;
            this.GroupMakeDnPath = groupMakeDnPath;
            this.GroupMemberAttribute = groupMemberAttribute;
            this.UseUidForExtId = useUidForExtId;
            this.Customattributes = customattributes;
        }
        
        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [DataMember(Name="provider.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString ProviderName { get; set; }

        /// <summary>
        /// Gets or Sets HostName
        /// </summary>
        [DataMember(Name="host.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString HostName { get; set; }

        /// <summary>
        /// Gets or Sets HostPort
        /// </summary>
        [DataMember(Name="host.port", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger HostPort { get; set; }

        /// <summary>
        /// Gets or Sets HostSsl
        /// </summary>
        [DataMember(Name="host.ssl", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean HostSsl { get; set; }

        /// <summary>
        /// Gets or Sets HostTls
        /// </summary>
        [DataMember(Name="host.tls", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean HostTls { get; set; }

        /// <summary>
        /// Gets or Sets HostNoCertCheck
        /// </summary>
        [DataMember(Name="host.noCertCheck", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean HostNoCertCheck { get; set; }

        /// <summary>
        /// Gets or Sets BindDn
        /// </summary>
        [DataMember(Name="bind.dn", EmitDefaultValue=false)]
        public ConfigNodePropertyString BindDn { get; set; }

        /// <summary>
        /// Gets or Sets BindPassword
        /// </summary>
        [DataMember(Name="bind.password", EmitDefaultValue=false)]
        public ConfigNodePropertyString BindPassword { get; set; }

        /// <summary>
        /// Gets or Sets SearchTimeout
        /// </summary>
        [DataMember(Name="searchTimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyString SearchTimeout { get; set; }

        /// <summary>
        /// Gets or Sets AdminPoolMaxActive
        /// </summary>
        [DataMember(Name="adminPool.maxActive", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger AdminPoolMaxActive { get; set; }

        /// <summary>
        /// Gets or Sets AdminPoolLookupOnValidate
        /// </summary>
        [DataMember(Name="adminPool.lookupOnValidate", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean AdminPoolLookupOnValidate { get; set; }

        /// <summary>
        /// Gets or Sets UserPoolMaxActive
        /// </summary>
        [DataMember(Name="userPool.maxActive", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger UserPoolMaxActive { get; set; }

        /// <summary>
        /// Gets or Sets UserPoolLookupOnValidate
        /// </summary>
        [DataMember(Name="userPool.lookupOnValidate", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean UserPoolLookupOnValidate { get; set; }

        /// <summary>
        /// Gets or Sets UserBaseDN
        /// </summary>
        [DataMember(Name="user.baseDN", EmitDefaultValue=false)]
        public ConfigNodePropertyString UserBaseDN { get; set; }

        /// <summary>
        /// Gets or Sets UserObjectclass
        /// </summary>
        [DataMember(Name="user.objectclass", EmitDefaultValue=false)]
        public ConfigNodePropertyArray UserObjectclass { get; set; }

        /// <summary>
        /// Gets or Sets UserIdAttribute
        /// </summary>
        [DataMember(Name="user.idAttribute", EmitDefaultValue=false)]
        public ConfigNodePropertyString UserIdAttribute { get; set; }

        /// <summary>
        /// Gets or Sets UserExtraFilter
        /// </summary>
        [DataMember(Name="user.extraFilter", EmitDefaultValue=false)]
        public ConfigNodePropertyString UserExtraFilter { get; set; }

        /// <summary>
        /// Gets or Sets UserMakeDnPath
        /// </summary>
        [DataMember(Name="user.makeDnPath", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean UserMakeDnPath { get; set; }

        /// <summary>
        /// Gets or Sets GroupBaseDN
        /// </summary>
        [DataMember(Name="group.baseDN", EmitDefaultValue=false)]
        public ConfigNodePropertyString GroupBaseDN { get; set; }

        /// <summary>
        /// Gets or Sets GroupObjectclass
        /// </summary>
        [DataMember(Name="group.objectclass", EmitDefaultValue=false)]
        public ConfigNodePropertyArray GroupObjectclass { get; set; }

        /// <summary>
        /// Gets or Sets GroupNameAttribute
        /// </summary>
        [DataMember(Name="group.nameAttribute", EmitDefaultValue=false)]
        public ConfigNodePropertyString GroupNameAttribute { get; set; }

        /// <summary>
        /// Gets or Sets GroupExtraFilter
        /// </summary>
        [DataMember(Name="group.extraFilter", EmitDefaultValue=false)]
        public ConfigNodePropertyString GroupExtraFilter { get; set; }

        /// <summary>
        /// Gets or Sets GroupMakeDnPath
        /// </summary>
        [DataMember(Name="group.makeDnPath", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean GroupMakeDnPath { get; set; }

        /// <summary>
        /// Gets or Sets GroupMemberAttribute
        /// </summary>
        [DataMember(Name="group.memberAttribute", EmitDefaultValue=false)]
        public ConfigNodePropertyString GroupMemberAttribute { get; set; }

        /// <summary>
        /// Gets or Sets UseUidForExtId
        /// </summary>
        [DataMember(Name="useUidForExtId", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean UseUidForExtId { get; set; }

        /// <summary>
        /// Gets or Sets Customattributes
        /// </summary>
        [DataMember(Name="customattributes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Customattributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  HostPort: ").Append(HostPort).Append("\n");
            sb.Append("  HostSsl: ").Append(HostSsl).Append("\n");
            sb.Append("  HostTls: ").Append(HostTls).Append("\n");
            sb.Append("  HostNoCertCheck: ").Append(HostNoCertCheck).Append("\n");
            sb.Append("  BindDn: ").Append(BindDn).Append("\n");
            sb.Append("  BindPassword: ").Append(BindPassword).Append("\n");
            sb.Append("  SearchTimeout: ").Append(SearchTimeout).Append("\n");
            sb.Append("  AdminPoolMaxActive: ").Append(AdminPoolMaxActive).Append("\n");
            sb.Append("  AdminPoolLookupOnValidate: ").Append(AdminPoolLookupOnValidate).Append("\n");
            sb.Append("  UserPoolMaxActive: ").Append(UserPoolMaxActive).Append("\n");
            sb.Append("  UserPoolLookupOnValidate: ").Append(UserPoolLookupOnValidate).Append("\n");
            sb.Append("  UserBaseDN: ").Append(UserBaseDN).Append("\n");
            sb.Append("  UserObjectclass: ").Append(UserObjectclass).Append("\n");
            sb.Append("  UserIdAttribute: ").Append(UserIdAttribute).Append("\n");
            sb.Append("  UserExtraFilter: ").Append(UserExtraFilter).Append("\n");
            sb.Append("  UserMakeDnPath: ").Append(UserMakeDnPath).Append("\n");
            sb.Append("  GroupBaseDN: ").Append(GroupBaseDN).Append("\n");
            sb.Append("  GroupObjectclass: ").Append(GroupObjectclass).Append("\n");
            sb.Append("  GroupNameAttribute: ").Append(GroupNameAttribute).Append("\n");
            sb.Append("  GroupExtraFilter: ").Append(GroupExtraFilter).Append("\n");
            sb.Append("  GroupMakeDnPath: ").Append(GroupMakeDnPath).Append("\n");
            sb.Append("  GroupMemberAttribute: ").Append(GroupMemberAttribute).Append("\n");
            sb.Append("  UseUidForExtId: ").Append(UseUidForExtId).Append("\n");
            sb.Append("  Customattributes: ").Append(Customattributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProviderName == input.ProviderName ||
                    (this.ProviderName != null &&
                    this.ProviderName.Equals(input.ProviderName))
                ) && 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.HostPort == input.HostPort ||
                    (this.HostPort != null &&
                    this.HostPort.Equals(input.HostPort))
                ) && 
                (
                    this.HostSsl == input.HostSsl ||
                    (this.HostSsl != null &&
                    this.HostSsl.Equals(input.HostSsl))
                ) && 
                (
                    this.HostTls == input.HostTls ||
                    (this.HostTls != null &&
                    this.HostTls.Equals(input.HostTls))
                ) && 
                (
                    this.HostNoCertCheck == input.HostNoCertCheck ||
                    (this.HostNoCertCheck != null &&
                    this.HostNoCertCheck.Equals(input.HostNoCertCheck))
                ) && 
                (
                    this.BindDn == input.BindDn ||
                    (this.BindDn != null &&
                    this.BindDn.Equals(input.BindDn))
                ) && 
                (
                    this.BindPassword == input.BindPassword ||
                    (this.BindPassword != null &&
                    this.BindPassword.Equals(input.BindPassword))
                ) && 
                (
                    this.SearchTimeout == input.SearchTimeout ||
                    (this.SearchTimeout != null &&
                    this.SearchTimeout.Equals(input.SearchTimeout))
                ) && 
                (
                    this.AdminPoolMaxActive == input.AdminPoolMaxActive ||
                    (this.AdminPoolMaxActive != null &&
                    this.AdminPoolMaxActive.Equals(input.AdminPoolMaxActive))
                ) && 
                (
                    this.AdminPoolLookupOnValidate == input.AdminPoolLookupOnValidate ||
                    (this.AdminPoolLookupOnValidate != null &&
                    this.AdminPoolLookupOnValidate.Equals(input.AdminPoolLookupOnValidate))
                ) && 
                (
                    this.UserPoolMaxActive == input.UserPoolMaxActive ||
                    (this.UserPoolMaxActive != null &&
                    this.UserPoolMaxActive.Equals(input.UserPoolMaxActive))
                ) && 
                (
                    this.UserPoolLookupOnValidate == input.UserPoolLookupOnValidate ||
                    (this.UserPoolLookupOnValidate != null &&
                    this.UserPoolLookupOnValidate.Equals(input.UserPoolLookupOnValidate))
                ) && 
                (
                    this.UserBaseDN == input.UserBaseDN ||
                    (this.UserBaseDN != null &&
                    this.UserBaseDN.Equals(input.UserBaseDN))
                ) && 
                (
                    this.UserObjectclass == input.UserObjectclass ||
                    (this.UserObjectclass != null &&
                    this.UserObjectclass.Equals(input.UserObjectclass))
                ) && 
                (
                    this.UserIdAttribute == input.UserIdAttribute ||
                    (this.UserIdAttribute != null &&
                    this.UserIdAttribute.Equals(input.UserIdAttribute))
                ) && 
                (
                    this.UserExtraFilter == input.UserExtraFilter ||
                    (this.UserExtraFilter != null &&
                    this.UserExtraFilter.Equals(input.UserExtraFilter))
                ) && 
                (
                    this.UserMakeDnPath == input.UserMakeDnPath ||
                    (this.UserMakeDnPath != null &&
                    this.UserMakeDnPath.Equals(input.UserMakeDnPath))
                ) && 
                (
                    this.GroupBaseDN == input.GroupBaseDN ||
                    (this.GroupBaseDN != null &&
                    this.GroupBaseDN.Equals(input.GroupBaseDN))
                ) && 
                (
                    this.GroupObjectclass == input.GroupObjectclass ||
                    (this.GroupObjectclass != null &&
                    this.GroupObjectclass.Equals(input.GroupObjectclass))
                ) && 
                (
                    this.GroupNameAttribute == input.GroupNameAttribute ||
                    (this.GroupNameAttribute != null &&
                    this.GroupNameAttribute.Equals(input.GroupNameAttribute))
                ) && 
                (
                    this.GroupExtraFilter == input.GroupExtraFilter ||
                    (this.GroupExtraFilter != null &&
                    this.GroupExtraFilter.Equals(input.GroupExtraFilter))
                ) && 
                (
                    this.GroupMakeDnPath == input.GroupMakeDnPath ||
                    (this.GroupMakeDnPath != null &&
                    this.GroupMakeDnPath.Equals(input.GroupMakeDnPath))
                ) && 
                (
                    this.GroupMemberAttribute == input.GroupMemberAttribute ||
                    (this.GroupMemberAttribute != null &&
                    this.GroupMemberAttribute.Equals(input.GroupMemberAttribute))
                ) && 
                (
                    this.UseUidForExtId == input.UseUidForExtId ||
                    (this.UseUidForExtId != null &&
                    this.UseUidForExtId.Equals(input.UseUidForExtId))
                ) && 
                (
                    this.Customattributes == input.Customattributes ||
                    (this.Customattributes != null &&
                    this.Customattributes.Equals(input.Customattributes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProviderName != null)
                    hashCode = hashCode * 59 + this.ProviderName.GetHashCode();
                if (this.HostName != null)
                    hashCode = hashCode * 59 + this.HostName.GetHashCode();
                if (this.HostPort != null)
                    hashCode = hashCode * 59 + this.HostPort.GetHashCode();
                if (this.HostSsl != null)
                    hashCode = hashCode * 59 + this.HostSsl.GetHashCode();
                if (this.HostTls != null)
                    hashCode = hashCode * 59 + this.HostTls.GetHashCode();
                if (this.HostNoCertCheck != null)
                    hashCode = hashCode * 59 + this.HostNoCertCheck.GetHashCode();
                if (this.BindDn != null)
                    hashCode = hashCode * 59 + this.BindDn.GetHashCode();
                if (this.BindPassword != null)
                    hashCode = hashCode * 59 + this.BindPassword.GetHashCode();
                if (this.SearchTimeout != null)
                    hashCode = hashCode * 59 + this.SearchTimeout.GetHashCode();
                if (this.AdminPoolMaxActive != null)
                    hashCode = hashCode * 59 + this.AdminPoolMaxActive.GetHashCode();
                if (this.AdminPoolLookupOnValidate != null)
                    hashCode = hashCode * 59 + this.AdminPoolLookupOnValidate.GetHashCode();
                if (this.UserPoolMaxActive != null)
                    hashCode = hashCode * 59 + this.UserPoolMaxActive.GetHashCode();
                if (this.UserPoolLookupOnValidate != null)
                    hashCode = hashCode * 59 + this.UserPoolLookupOnValidate.GetHashCode();
                if (this.UserBaseDN != null)
                    hashCode = hashCode * 59 + this.UserBaseDN.GetHashCode();
                if (this.UserObjectclass != null)
                    hashCode = hashCode * 59 + this.UserObjectclass.GetHashCode();
                if (this.UserIdAttribute != null)
                    hashCode = hashCode * 59 + this.UserIdAttribute.GetHashCode();
                if (this.UserExtraFilter != null)
                    hashCode = hashCode * 59 + this.UserExtraFilter.GetHashCode();
                if (this.UserMakeDnPath != null)
                    hashCode = hashCode * 59 + this.UserMakeDnPath.GetHashCode();
                if (this.GroupBaseDN != null)
                    hashCode = hashCode * 59 + this.GroupBaseDN.GetHashCode();
                if (this.GroupObjectclass != null)
                    hashCode = hashCode * 59 + this.GroupObjectclass.GetHashCode();
                if (this.GroupNameAttribute != null)
                    hashCode = hashCode * 59 + this.GroupNameAttribute.GetHashCode();
                if (this.GroupExtraFilter != null)
                    hashCode = hashCode * 59 + this.GroupExtraFilter.GetHashCode();
                if (this.GroupMakeDnPath != null)
                    hashCode = hashCode * 59 + this.GroupMakeDnPath.GetHashCode();
                if (this.GroupMemberAttribute != null)
                    hashCode = hashCode * 59 + this.GroupMemberAttribute.GetHashCode();
                if (this.UseUidForExtId != null)
                    hashCode = hashCode * 59 + this.UseUidForExtId.GetHashCode();
                if (this.Customattributes != null)
                    hashCode = hashCode * 59 + this.Customattributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
