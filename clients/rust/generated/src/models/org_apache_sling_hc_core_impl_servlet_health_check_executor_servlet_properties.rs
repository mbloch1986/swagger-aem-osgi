/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {
  #[serde(rename = "servletPath")]
  servlet_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "disabled")]
  disabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "cors.accessControlAllowOrigin")]
  cors_access_control_allow_origin: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {
  pub fn new() -> OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {
    OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {
      servlet_path: None,
      disabled: None,
      cors_access_control_allow_origin: None
    }
  }

  pub fn set_servlet_path(&mut self, servlet_path: ::models::ConfigNodePropertyString) {
    self.servlet_path = Some(servlet_path);
  }

  pub fn with_servlet_path(mut self, servlet_path: ::models::ConfigNodePropertyString) -> OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {
    self.servlet_path = Some(servlet_path);
    self
  }

  pub fn servlet_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.servlet_path.as_ref()
  }

  pub fn reset_servlet_path(&mut self) {
    self.servlet_path = None;
  }

  pub fn set_disabled(&mut self, disabled: ::models::ConfigNodePropertyBoolean) {
    self.disabled = Some(disabled);
  }

  pub fn with_disabled(mut self, disabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {
    self.disabled = Some(disabled);
    self
  }

  pub fn disabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.disabled.as_ref()
  }

  pub fn reset_disabled(&mut self) {
    self.disabled = None;
  }

  pub fn set_cors_access_control_allow_origin(&mut self, cors_access_control_allow_origin: ::models::ConfigNodePropertyString) {
    self.cors_access_control_allow_origin = Some(cors_access_control_allow_origin);
  }

  pub fn with_cors_access_control_allow_origin(mut self, cors_access_control_allow_origin: ::models::ConfigNodePropertyString) -> OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {
    self.cors_access_control_allow_origin = Some(cors_access_control_allow_origin);
    self
  }

  pub fn cors_access_control_allow_origin(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cors_access_control_allow_origin.as_ref()
  }

  pub fn reset_cors_access_control_allow_origin(&mut self) {
    self.cors_access_control_allow_origin = None;
  }

}



