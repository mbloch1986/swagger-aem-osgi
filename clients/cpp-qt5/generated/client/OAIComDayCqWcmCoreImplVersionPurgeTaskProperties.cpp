/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmCoreImplVersionPurgeTaskProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::OAIComDayCqWcmCoreImplVersionPurgeTaskProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::OAIComDayCqWcmCoreImplVersionPurgeTaskProperties() {
    init();
}

OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::~OAIComDayCqWcmCoreImplVersionPurgeTaskProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::init() {
    versionpurge_paths = new OAIConfigNodePropertyArray();
    m_versionpurge_paths_isSet = false;
    versionpurge_recursive = new OAIConfigNodePropertyBoolean();
    m_versionpurge_recursive_isSet = false;
    versionpurge_max_versions = new OAIConfigNodePropertyInteger();
    m_versionpurge_max_versions_isSet = false;
    versionpurge_min_versions = new OAIConfigNodePropertyInteger();
    m_versionpurge_min_versions_isSet = false;
    versionpurge_max_age_days = new OAIConfigNodePropertyInteger();
    m_versionpurge_max_age_days_isSet = false;
}

void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::cleanup() {
    if(versionpurge_paths != nullptr) { 
        delete versionpurge_paths;
    }
    if(versionpurge_recursive != nullptr) { 
        delete versionpurge_recursive;
    }
    if(versionpurge_max_versions != nullptr) { 
        delete versionpurge_max_versions;
    }
    if(versionpurge_min_versions != nullptr) { 
        delete versionpurge_min_versions;
    }
    if(versionpurge_max_age_days != nullptr) { 
        delete versionpurge_max_age_days;
    }
}

OAIComDayCqWcmCoreImplVersionPurgeTaskProperties*
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&versionpurge_paths, pJson["versionpurge.paths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&versionpurge_recursive, pJson["versionpurge.recursive"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&versionpurge_max_versions, pJson["versionpurge.maxVersions"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&versionpurge_min_versions, pJson["versionpurge.minVersions"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&versionpurge_max_age_days, pJson["versionpurge.maxAgeDays"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::asJsonObject() {
    QJsonObject obj;
    if((versionpurge_paths != nullptr) && (versionpurge_paths->isSet())){
        toJsonValue(QString("versionpurge.paths"), versionpurge_paths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((versionpurge_recursive != nullptr) && (versionpurge_recursive->isSet())){
        toJsonValue(QString("versionpurge.recursive"), versionpurge_recursive, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((versionpurge_max_versions != nullptr) && (versionpurge_max_versions->isSet())){
        toJsonValue(QString("versionpurge.maxVersions"), versionpurge_max_versions, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((versionpurge_min_versions != nullptr) && (versionpurge_min_versions->isSet())){
        toJsonValue(QString("versionpurge.minVersions"), versionpurge_min_versions, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((versionpurge_max_age_days != nullptr) && (versionpurge_max_age_days->isSet())){
        toJsonValue(QString("versionpurge.maxAgeDays"), versionpurge_max_age_days, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgePaths() {
    return versionpurge_paths;
}
void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgePaths(OAIConfigNodePropertyArray* versionpurge_paths) {
    this->versionpurge_paths = versionpurge_paths;
    this->m_versionpurge_paths_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeRecursive() {
    return versionpurge_recursive;
}
void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeRecursive(OAIConfigNodePropertyBoolean* versionpurge_recursive) {
    this->versionpurge_recursive = versionpurge_recursive;
    this->m_versionpurge_recursive_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMaxVersions() {
    return versionpurge_max_versions;
}
void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMaxVersions(OAIConfigNodePropertyInteger* versionpurge_max_versions) {
    this->versionpurge_max_versions = versionpurge_max_versions;
    this->m_versionpurge_max_versions_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMinVersions() {
    return versionpurge_min_versions;
}
void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMinVersions(OAIConfigNodePropertyInteger* versionpurge_min_versions) {
    this->versionpurge_min_versions = versionpurge_min_versions;
    this->m_versionpurge_min_versions_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMaxAgeDays() {
    return versionpurge_max_age_days;
}
void
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMaxAgeDays(OAIConfigNodePropertyInteger* versionpurge_max_age_days) {
    this->versionpurge_max_age_days = versionpurge_max_age_days;
    this->m_versionpurge_max_age_days_isSet = true;
}


bool
OAIComDayCqWcmCoreImplVersionPurgeTaskProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(versionpurge_paths != nullptr && versionpurge_paths->isSet()){ isObjectUpdated = true; break;}
        if(versionpurge_recursive != nullptr && versionpurge_recursive->isSet()){ isObjectUpdated = true; break;}
        if(versionpurge_max_versions != nullptr && versionpurge_max_versions->isSet()){ isObjectUpdated = true; break;}
        if(versionpurge_min_versions != nullptr && versionpurge_min_versions->isSet()){ isObjectUpdated = true; break;}
        if(versionpurge_max_age_days != nullptr && versionpurge_max_age_days->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

