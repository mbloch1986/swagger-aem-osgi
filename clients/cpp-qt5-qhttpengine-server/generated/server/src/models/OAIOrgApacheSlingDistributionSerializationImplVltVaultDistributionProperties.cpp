/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties() {
    this->init();
}

OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::~OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties() {
    
}

void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::init() {
    m_name_isSet = false;
    m_type_isSet = false;
    m_import_mode_isSet = false;
    m_acl_handling_isSet = false;
    m_package_roots_isSet = false;
    m_package_filters_isSet = false;
    m_property_filters_isSet = false;
    m_temp_fs_folder_isSet = false;
    m_use_binary_references_isSet = false;
    m_auto_save_threshold_isSet = false;
    m_cleanup_delay_isSet = false;
    m_file_threshold_isSet = false;
    m_mega_bytes_isSet = false;
    m_use_off_heap_memory_isSet = false;
    m_digest_algorithm_isSet = false;
    m_monitoring_queue_size_isSet = false;
    m_paths_mapping_isSet = false;
    m_strict_import_isSet = false;
}

void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    
    ::OpenAPI::fromJsonValue(import_mode, json[QString("importMode")]);
    
    ::OpenAPI::fromJsonValue(acl_handling, json[QString("aclHandling")]);
    
    ::OpenAPI::fromJsonValue(package_roots, json[QString("package.roots")]);
    
    ::OpenAPI::fromJsonValue(package_filters, json[QString("package.filters")]);
    
    ::OpenAPI::fromJsonValue(property_filters, json[QString("property.filters")]);
    
    ::OpenAPI::fromJsonValue(temp_fs_folder, json[QString("tempFsFolder")]);
    
    ::OpenAPI::fromJsonValue(use_binary_references, json[QString("useBinaryReferences")]);
    
    ::OpenAPI::fromJsonValue(auto_save_threshold, json[QString("autoSaveThreshold")]);
    
    ::OpenAPI::fromJsonValue(cleanup_delay, json[QString("cleanupDelay")]);
    
    ::OpenAPI::fromJsonValue(file_threshold, json[QString("fileThreshold")]);
    
    ::OpenAPI::fromJsonValue(mega_bytes, json[QString("MEGA_BYTES")]);
    
    ::OpenAPI::fromJsonValue(use_off_heap_memory, json[QString("useOffHeapMemory")]);
    
    ::OpenAPI::fromJsonValue(digest_algorithm, json[QString("digestAlgorithm")]);
    
    ::OpenAPI::fromJsonValue(monitoring_queue_size, json[QString("monitoringQueueSize")]);
    
    ::OpenAPI::fromJsonValue(paths_mapping, json[QString("pathsMapping")]);
    
    ::OpenAPI::fromJsonValue(strict_import, json[QString("strictImport")]);
    
}

QString
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::asJsonObject() const {
    QJsonObject obj;
	if(name.isSet()){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(type.isSet()){
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
	if(import_mode.isSet()){
        obj.insert(QString("importMode"), ::OpenAPI::toJsonValue(import_mode));
    }
	if(acl_handling.isSet()){
        obj.insert(QString("aclHandling"), ::OpenAPI::toJsonValue(acl_handling));
    }
	if(package_roots.isSet()){
        obj.insert(QString("package.roots"), ::OpenAPI::toJsonValue(package_roots));
    }
	if(package_filters.isSet()){
        obj.insert(QString("package.filters"), ::OpenAPI::toJsonValue(package_filters));
    }
	if(property_filters.isSet()){
        obj.insert(QString("property.filters"), ::OpenAPI::toJsonValue(property_filters));
    }
	if(temp_fs_folder.isSet()){
        obj.insert(QString("tempFsFolder"), ::OpenAPI::toJsonValue(temp_fs_folder));
    }
	if(use_binary_references.isSet()){
        obj.insert(QString("useBinaryReferences"), ::OpenAPI::toJsonValue(use_binary_references));
    }
	if(auto_save_threshold.isSet()){
        obj.insert(QString("autoSaveThreshold"), ::OpenAPI::toJsonValue(auto_save_threshold));
    }
	if(cleanup_delay.isSet()){
        obj.insert(QString("cleanupDelay"), ::OpenAPI::toJsonValue(cleanup_delay));
    }
	if(file_threshold.isSet()){
        obj.insert(QString("fileThreshold"), ::OpenAPI::toJsonValue(file_threshold));
    }
	if(mega_bytes.isSet()){
        obj.insert(QString("MEGA_BYTES"), ::OpenAPI::toJsonValue(mega_bytes));
    }
	if(use_off_heap_memory.isSet()){
        obj.insert(QString("useOffHeapMemory"), ::OpenAPI::toJsonValue(use_off_heap_memory));
    }
	if(digest_algorithm.isSet()){
        obj.insert(QString("digestAlgorithm"), ::OpenAPI::toJsonValue(digest_algorithm));
    }
	if(monitoring_queue_size.isSet()){
        obj.insert(QString("monitoringQueueSize"), ::OpenAPI::toJsonValue(monitoring_queue_size));
    }
	if(paths_mapping.isSet()){
        obj.insert(QString("pathsMapping"), ::OpenAPI::toJsonValue(paths_mapping));
    }
	if(strict_import.isSet()){
        obj.insert(QString("strictImport"), ::OpenAPI::toJsonValue(strict_import));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getName() const {
    return name;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setName(const OAIConfigNodePropertyString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getType() const {
    return type;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setType(const OAIConfigNodePropertyDropDown &type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getImportMode() const {
    return import_mode;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setImportMode(const OAIConfigNodePropertyString &import_mode) {
    this->import_mode = import_mode;
    this->m_import_mode_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getAclHandling() const {
    return acl_handling;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setAclHandling(const OAIConfigNodePropertyString &acl_handling) {
    this->acl_handling = acl_handling;
    this->m_acl_handling_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getPackageRoots() const {
    return package_roots;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setPackageRoots(const OAIConfigNodePropertyString &package_roots) {
    this->package_roots = package_roots;
    this->m_package_roots_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getPackageFilters() const {
    return package_filters;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setPackageFilters(const OAIConfigNodePropertyArray &package_filters) {
    this->package_filters = package_filters;
    this->m_package_filters_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getPropertyFilters() const {
    return property_filters;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setPropertyFilters(const OAIConfigNodePropertyArray &property_filters) {
    this->property_filters = property_filters;
    this->m_property_filters_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getTempFsFolder() const {
    return temp_fs_folder;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setTempFsFolder(const OAIConfigNodePropertyString &temp_fs_folder) {
    this->temp_fs_folder = temp_fs_folder;
    this->m_temp_fs_folder_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getUseBinaryReferences() const {
    return use_binary_references;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setUseBinaryReferences(const OAIConfigNodePropertyBoolean &use_binary_references) {
    this->use_binary_references = use_binary_references;
    this->m_use_binary_references_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getAutoSaveThreshold() const {
    return auto_save_threshold;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setAutoSaveThreshold(const OAIConfigNodePropertyInteger &auto_save_threshold) {
    this->auto_save_threshold = auto_save_threshold;
    this->m_auto_save_threshold_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getCleanupDelay() const {
    return cleanup_delay;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setCleanupDelay(const OAIConfigNodePropertyInteger &cleanup_delay) {
    this->cleanup_delay = cleanup_delay;
    this->m_cleanup_delay_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getFileThreshold() const {
    return file_threshold;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setFileThreshold(const OAIConfigNodePropertyInteger &file_threshold) {
    this->file_threshold = file_threshold;
    this->m_file_threshold_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getMegaBytes() const {
    return mega_bytes;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setMegaBytes(const OAIConfigNodePropertyDropDown &mega_bytes) {
    this->mega_bytes = mega_bytes;
    this->m_mega_bytes_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getUseOffHeapMemory() const {
    return use_off_heap_memory;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setUseOffHeapMemory(const OAIConfigNodePropertyBoolean &use_off_heap_memory) {
    this->use_off_heap_memory = use_off_heap_memory;
    this->m_use_off_heap_memory_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getDigestAlgorithm() const {
    return digest_algorithm;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setDigestAlgorithm(const OAIConfigNodePropertyDropDown &digest_algorithm) {
    this->digest_algorithm = digest_algorithm;
    this->m_digest_algorithm_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getMonitoringQueueSize() const {
    return monitoring_queue_size;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setMonitoringQueueSize(const OAIConfigNodePropertyInteger &monitoring_queue_size) {
    this->monitoring_queue_size = monitoring_queue_size;
    this->m_monitoring_queue_size_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getPathsMapping() const {
    return paths_mapping;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setPathsMapping(const OAIConfigNodePropertyArray &paths_mapping) {
    this->paths_mapping = paths_mapping;
    this->m_paths_mapping_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::getStrictImport() const {
    return strict_import;
}
void
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::setStrictImport(const OAIConfigNodePropertyBoolean &strict_import) {
    this->strict_import = strict_import;
    this->m_strict_import_isSet = true;
}


bool
OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(name.isSet()){ isObjectUpdated = true; break;}
    
        if(type.isSet()){ isObjectUpdated = true; break;}
    
        if(import_mode.isSet()){ isObjectUpdated = true; break;}
    
        if(acl_handling.isSet()){ isObjectUpdated = true; break;}
    
        if(package_roots.isSet()){ isObjectUpdated = true; break;}
    
        if(package_filters.isSet()){ isObjectUpdated = true; break;}
    
        if(property_filters.isSet()){ isObjectUpdated = true; break;}
    
        if(temp_fs_folder.isSet()){ isObjectUpdated = true; break;}
    
        if(use_binary_references.isSet()){ isObjectUpdated = true; break;}
    
        if(auto_save_threshold.isSet()){ isObjectUpdated = true; break;}
    
        if(cleanup_delay.isSet()){ isObjectUpdated = true; break;}
    
        if(file_threshold.isSet()){ isObjectUpdated = true; break;}
    
        if(mega_bytes.isSet()){ isObjectUpdated = true; break;}
    
        if(use_off_heap_memory.isSet()){ isObjectUpdated = true; break;}
    
        if(digest_algorithm.isSet()){ isObjectUpdated = true; break;}
    
        if(monitoring_queue_size.isSet()){ isObjectUpdated = true; break;}
    
        if(paths_mapping.isSet()){ isObjectUpdated = true; break;}
    
        if(strict_import.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

