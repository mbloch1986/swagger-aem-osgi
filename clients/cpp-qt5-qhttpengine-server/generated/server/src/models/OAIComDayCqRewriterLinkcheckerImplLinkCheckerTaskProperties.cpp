/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties() {
    this->init();
}

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::~OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties() {
    
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::init() {
    m_scheduler_period_isSet = false;
    m_scheduler_concurrent_isSet = false;
    m_good_link_test_interval_isSet = false;
    m_bad_link_test_interval_isSet = false;
    m_link_unused_interval_isSet = false;
    m_connection_timeout_isSet = false;
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(scheduler_period, json[QString("scheduler.period")]);
    
    ::OpenAPI::fromJsonValue(scheduler_concurrent, json[QString("scheduler.concurrent")]);
    
    ::OpenAPI::fromJsonValue(good_link_test_interval, json[QString("good_link_test_interval")]);
    
    ::OpenAPI::fromJsonValue(bad_link_test_interval, json[QString("bad_link_test_interval")]);
    
    ::OpenAPI::fromJsonValue(link_unused_interval, json[QString("link_unused_interval")]);
    
    ::OpenAPI::fromJsonValue(connection_timeout, json[QString("connection.timeout")]);
    
}

QString
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::asJsonObject() const {
    QJsonObject obj;
	if(scheduler_period.isSet()){
        obj.insert(QString("scheduler.period"), ::OpenAPI::toJsonValue(scheduler_period));
    }
	if(scheduler_concurrent.isSet()){
        obj.insert(QString("scheduler.concurrent"), ::OpenAPI::toJsonValue(scheduler_concurrent));
    }
	if(good_link_test_interval.isSet()){
        obj.insert(QString("good_link_test_interval"), ::OpenAPI::toJsonValue(good_link_test_interval));
    }
	if(bad_link_test_interval.isSet()){
        obj.insert(QString("bad_link_test_interval"), ::OpenAPI::toJsonValue(bad_link_test_interval));
    }
	if(link_unused_interval.isSet()){
        obj.insert(QString("link_unused_interval"), ::OpenAPI::toJsonValue(link_unused_interval));
    }
	if(connection_timeout.isSet()){
        obj.insert(QString("connection.timeout"), ::OpenAPI::toJsonValue(connection_timeout));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getSchedulerPeriod() const {
    return scheduler_period;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setSchedulerPeriod(const OAIConfigNodePropertyInteger &scheduler_period) {
    this->scheduler_period = scheduler_period;
    this->m_scheduler_period_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getSchedulerConcurrent() const {
    return scheduler_concurrent;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setSchedulerConcurrent(const OAIConfigNodePropertyBoolean &scheduler_concurrent) {
    this->scheduler_concurrent = scheduler_concurrent;
    this->m_scheduler_concurrent_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getGoodLinkTestInterval() const {
    return good_link_test_interval;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setGoodLinkTestInterval(const OAIConfigNodePropertyInteger &good_link_test_interval) {
    this->good_link_test_interval = good_link_test_interval;
    this->m_good_link_test_interval_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getBadLinkTestInterval() const {
    return bad_link_test_interval;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setBadLinkTestInterval(const OAIConfigNodePropertyInteger &bad_link_test_interval) {
    this->bad_link_test_interval = bad_link_test_interval;
    this->m_bad_link_test_interval_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getLinkUnusedInterval() const {
    return link_unused_interval;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setLinkUnusedInterval(const OAIConfigNodePropertyInteger &link_unused_interval) {
    this->link_unused_interval = link_unused_interval;
    this->m_link_unused_interval_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::getConnectionTimeout() const {
    return connection_timeout;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::setConnectionTimeout(const OAIConfigNodePropertyInteger &connection_timeout) {
    this->connection_timeout = connection_timeout;
    this->m_connection_timeout_isSet = true;
}


bool
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(scheduler_period.isSet()){ isObjectUpdated = true; break;}
    
        if(scheduler_concurrent.isSet()){ isObjectUpdated = true; break;}
    
        if(good_link_test_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(bad_link_test_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(link_unused_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(connection_timeout.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

