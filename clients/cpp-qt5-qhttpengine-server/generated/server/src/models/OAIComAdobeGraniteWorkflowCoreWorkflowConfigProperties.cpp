/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties() {
    this->init();
}

OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::~OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties() {
    
}

void
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::init() {
    m_cq_workflow_config_workflow_packages_root_path_isSet = false;
    m_cq_workflow_config_workflow_process_legacy_mode_isSet = false;
    m_cq_workflow_config_allow_locking_isSet = false;
}

void
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(cq_workflow_config_workflow_packages_root_path, json[QString("cq.workflow.config.workflow.packages.root.path")]);
    
    ::OpenAPI::fromJsonValue(cq_workflow_config_workflow_process_legacy_mode, json[QString("cq.workflow.config.workflow.process.legacy.mode")]);
    
    ::OpenAPI::fromJsonValue(cq_workflow_config_allow_locking, json[QString("cq.workflow.config.allow.locking")]);
    
}

QString
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::asJsonObject() const {
    QJsonObject obj;
	if(cq_workflow_config_workflow_packages_root_path.isSet()){
        obj.insert(QString("cq.workflow.config.workflow.packages.root.path"), ::OpenAPI::toJsonValue(cq_workflow_config_workflow_packages_root_path));
    }
	if(cq_workflow_config_workflow_process_legacy_mode.isSet()){
        obj.insert(QString("cq.workflow.config.workflow.process.legacy.mode"), ::OpenAPI::toJsonValue(cq_workflow_config_workflow_process_legacy_mode));
    }
	if(cq_workflow_config_allow_locking.isSet()){
        obj.insert(QString("cq.workflow.config.allow.locking"), ::OpenAPI::toJsonValue(cq_workflow_config_allow_locking));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::getCqWorkflowConfigWorkflowPackagesRootPath() const {
    return cq_workflow_config_workflow_packages_root_path;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::setCqWorkflowConfigWorkflowPackagesRootPath(const OAIConfigNodePropertyArray &cq_workflow_config_workflow_packages_root_path) {
    this->cq_workflow_config_workflow_packages_root_path = cq_workflow_config_workflow_packages_root_path;
    this->m_cq_workflow_config_workflow_packages_root_path_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::getCqWorkflowConfigWorkflowProcessLegacyMode() const {
    return cq_workflow_config_workflow_process_legacy_mode;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::setCqWorkflowConfigWorkflowProcessLegacyMode(const OAIConfigNodePropertyBoolean &cq_workflow_config_workflow_process_legacy_mode) {
    this->cq_workflow_config_workflow_process_legacy_mode = cq_workflow_config_workflow_process_legacy_mode;
    this->m_cq_workflow_config_workflow_process_legacy_mode_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::getCqWorkflowConfigAllowLocking() const {
    return cq_workflow_config_allow_locking;
}
void
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::setCqWorkflowConfigAllowLocking(const OAIConfigNodePropertyBoolean &cq_workflow_config_allow_locking) {
    this->cq_workflow_config_allow_locking = cq_workflow_config_allow_locking;
    this->m_cq_workflow_config_allow_locking_isSet = true;
}


bool
OAIComAdobeGraniteWorkflowCoreWorkflowConfigProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(cq_workflow_config_workflow_packages_root_path.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_workflow_config_workflow_process_legacy_mode.isSet()){ isObjectUpdated = true; break;}
    
        if(cq_workflow_config_allow_locking.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

