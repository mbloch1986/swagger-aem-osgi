/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_
#define OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties: public OAIObject {
public:
    OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties();
    OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties(QString json);
    ~OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getTokenExpiration();
    void setTokenExpiration(OAIConfigNodePropertyString* token_expiration);

    OAIConfigNodePropertyString* getTokenLength();
    void setTokenLength(OAIConfigNodePropertyString* token_length);

    OAIConfigNodePropertyBoolean* getTokenRefresh();
    void setTokenRefresh(OAIConfigNodePropertyBoolean* token_refresh);

    OAIConfigNodePropertyInteger* getTokenCleanupThreshold();
    void setTokenCleanupThreshold(OAIConfigNodePropertyInteger* token_cleanup_threshold);

    OAIConfigNodePropertyString* getPasswordHashAlgorithm();
    void setPasswordHashAlgorithm(OAIConfigNodePropertyString* password_hash_algorithm);

    OAIConfigNodePropertyInteger* getPasswordHashIterations();
    void setPasswordHashIterations(OAIConfigNodePropertyInteger* password_hash_iterations);

    OAIConfigNodePropertyInteger* getPasswordSaltSize();
    void setPasswordSaltSize(OAIConfigNodePropertyInteger* password_salt_size);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* token_expiration;
    bool m_token_expiration_isSet;

    OAIConfigNodePropertyString* token_length;
    bool m_token_length_isSet;

    OAIConfigNodePropertyBoolean* token_refresh;
    bool m_token_refresh_isSet;

    OAIConfigNodePropertyInteger* token_cleanup_threshold;
    bool m_token_cleanup_threshold_isSet;

    OAIConfigNodePropertyString* password_hash_algorithm;
    bool m_password_hash_algorithm_isSet;

    OAIConfigNodePropertyInteger* password_hash_iterations;
    bool m_password_hash_iterations_isSet;

    OAIConfigNodePropertyInteger* password_salt_size;
    bool m_password_salt_size_isSet;

};

}

#endif /* OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_ */
