/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheHttpProxyconfiguratorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheHttpProxyconfiguratorProperties::OrgApacheHttpProxyconfiguratorProperties()
{
    m_Proxy_enabledIsSet = false;
    m_Proxy_hostIsSet = false;
    m_Proxy_portIsSet = false;
    m_Proxy_userIsSet = false;
    m_Proxy_passwordIsSet = false;
    m_Proxy_exceptionsIsSet = false;
}

OrgApacheHttpProxyconfiguratorProperties::~OrgApacheHttpProxyconfiguratorProperties()
{
}

void OrgApacheHttpProxyconfiguratorProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheHttpProxyconfiguratorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Proxy_enabledIsSet)
    {
        val[utility::conversions::to_string_t("proxy.enabled")] = ModelBase::toJson(m_Proxy_enabled);
    }
    if(m_Proxy_hostIsSet)
    {
        val[utility::conversions::to_string_t("proxy.host")] = ModelBase::toJson(m_Proxy_host);
    }
    if(m_Proxy_portIsSet)
    {
        val[utility::conversions::to_string_t("proxy.port")] = ModelBase::toJson(m_Proxy_port);
    }
    if(m_Proxy_userIsSet)
    {
        val[utility::conversions::to_string_t("proxy.user")] = ModelBase::toJson(m_Proxy_user);
    }
    if(m_Proxy_passwordIsSet)
    {
        val[utility::conversions::to_string_t("proxy.password")] = ModelBase::toJson(m_Proxy_password);
    }
    if(m_Proxy_exceptionsIsSet)
    {
        val[utility::conversions::to_string_t("proxy.exceptions")] = ModelBase::toJson(m_Proxy_exceptions);
    }

    return val;
}

void OrgApacheHttpProxyconfiguratorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("proxy.enabled")))
    {
        if(!val[utility::conversions::to_string_t("proxy.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("proxy.enabled")]);
            setProxyEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proxy.host")))
    {
        if(!val[utility::conversions::to_string_t("proxy.host")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("proxy.host")]);
            setProxyHost( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proxy.port")))
    {
        if(!val[utility::conversions::to_string_t("proxy.port")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("proxy.port")]);
            setProxyPort( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proxy.user")))
    {
        if(!val[utility::conversions::to_string_t("proxy.user")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("proxy.user")]);
            setProxyUser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proxy.password")))
    {
        if(!val[utility::conversions::to_string_t("proxy.password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("proxy.password")]);
            setProxyPassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proxy.exceptions")))
    {
        if(!val[utility::conversions::to_string_t("proxy.exceptions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("proxy.exceptions")]);
            setProxyExceptions( newItem );
        }
    }
}

void OrgApacheHttpProxyconfiguratorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Proxy_enabledIsSet)
    {
        if (m_Proxy_enabled.get())
        {
            m_Proxy_enabled->toMultipart(multipart, utility::conversions::to_string_t("proxy.enabled."));
        }
    }
    if(m_Proxy_hostIsSet)
    {
        if (m_Proxy_host.get())
        {
            m_Proxy_host->toMultipart(multipart, utility::conversions::to_string_t("proxy.host."));
        }
    }
    if(m_Proxy_portIsSet)
    {
        if (m_Proxy_port.get())
        {
            m_Proxy_port->toMultipart(multipart, utility::conversions::to_string_t("proxy.port."));
        }
    }
    if(m_Proxy_userIsSet)
    {
        if (m_Proxy_user.get())
        {
            m_Proxy_user->toMultipart(multipart, utility::conversions::to_string_t("proxy.user."));
        }
    }
    if(m_Proxy_passwordIsSet)
    {
        if (m_Proxy_password.get())
        {
            m_Proxy_password->toMultipart(multipart, utility::conversions::to_string_t("proxy.password."));
        }
    }
    if(m_Proxy_exceptionsIsSet)
    {
        if (m_Proxy_exceptions.get())
        {
            m_Proxy_exceptions->toMultipart(multipart, utility::conversions::to_string_t("proxy.exceptions."));
        }
    }
}

void OrgApacheHttpProxyconfiguratorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("proxy.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("proxy.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("proxy.enabled."));
            setProxyEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proxy.host")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("proxy.host")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("proxy.host."));
            setProxyHost( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proxy.port")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("proxy.port")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("proxy.port."));
            setProxyPort( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proxy.user")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("proxy.user")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("proxy.user."));
            setProxyUser( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proxy.password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("proxy.password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("proxy.password."));
            setProxyPassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proxy.exceptions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("proxy.exceptions")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("proxy.exceptions."));
            setProxyExceptions( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheHttpProxyconfiguratorProperties::getProxyEnabled() const
{
    return m_Proxy_enabled;
}


void OrgApacheHttpProxyconfiguratorProperties::setProxyEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Proxy_enabled = value;
    m_Proxy_enabledIsSet = true;
}
bool OrgApacheHttpProxyconfiguratorProperties::proxyEnabledIsSet() const
{
    return m_Proxy_enabledIsSet;
}

void OrgApacheHttpProxyconfiguratorProperties::unsetProxy_enabled()
{
    m_Proxy_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheHttpProxyconfiguratorProperties::getProxyHost() const
{
    return m_Proxy_host;
}


void OrgApacheHttpProxyconfiguratorProperties::setProxyHost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Proxy_host = value;
    m_Proxy_hostIsSet = true;
}
bool OrgApacheHttpProxyconfiguratorProperties::proxyHostIsSet() const
{
    return m_Proxy_hostIsSet;
}

void OrgApacheHttpProxyconfiguratorProperties::unsetProxy_host()
{
    m_Proxy_hostIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheHttpProxyconfiguratorProperties::getProxyPort() const
{
    return m_Proxy_port;
}


void OrgApacheHttpProxyconfiguratorProperties::setProxyPort(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Proxy_port = value;
    m_Proxy_portIsSet = true;
}
bool OrgApacheHttpProxyconfiguratorProperties::proxyPortIsSet() const
{
    return m_Proxy_portIsSet;
}

void OrgApacheHttpProxyconfiguratorProperties::unsetProxy_port()
{
    m_Proxy_portIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheHttpProxyconfiguratorProperties::getProxyUser() const
{
    return m_Proxy_user;
}


void OrgApacheHttpProxyconfiguratorProperties::setProxyUser(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Proxy_user = value;
    m_Proxy_userIsSet = true;
}
bool OrgApacheHttpProxyconfiguratorProperties::proxyUserIsSet() const
{
    return m_Proxy_userIsSet;
}

void OrgApacheHttpProxyconfiguratorProperties::unsetProxy_user()
{
    m_Proxy_userIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheHttpProxyconfiguratorProperties::getProxyPassword() const
{
    return m_Proxy_password;
}


void OrgApacheHttpProxyconfiguratorProperties::setProxyPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Proxy_password = value;
    m_Proxy_passwordIsSet = true;
}
bool OrgApacheHttpProxyconfiguratorProperties::proxyPasswordIsSet() const
{
    return m_Proxy_passwordIsSet;
}

void OrgApacheHttpProxyconfiguratorProperties::unsetProxy_password()
{
    m_Proxy_passwordIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheHttpProxyconfiguratorProperties::getProxyExceptions() const
{
    return m_Proxy_exceptions;
}


void OrgApacheHttpProxyconfiguratorProperties::setProxyExceptions(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Proxy_exceptions = value;
    m_Proxy_exceptionsIsSet = true;
}
bool OrgApacheHttpProxyconfiguratorProperties::proxyExceptionsIsSet() const
{
    return m_Proxy_exceptionsIsSet;
}

void OrgApacheHttpProxyconfiguratorProperties::unsetProxy_exceptions()
{
    m_Proxy_exceptionsIsSet = false;
}

}
}
}
}

