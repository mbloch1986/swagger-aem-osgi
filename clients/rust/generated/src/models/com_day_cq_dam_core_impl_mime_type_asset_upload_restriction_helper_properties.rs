/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties {
  #[serde(rename = "cq.dam.allow.all.mime")]
  cq_dam_allow_all_mime: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "cq.dam.allowed.asset.mimes")]
  cq_dam_allowed_asset_mimes: Option<::models::ConfigNodePropertyArray>
}

impl ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties {
  pub fn new() -> ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties {
    ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties {
      cq_dam_allow_all_mime: None,
      cq_dam_allowed_asset_mimes: None
    }
  }

  pub fn set_cq_dam_allow_all_mime(&mut self, cq_dam_allow_all_mime: ::models::ConfigNodePropertyBoolean) {
    self.cq_dam_allow_all_mime = Some(cq_dam_allow_all_mime);
  }

  pub fn with_cq_dam_allow_all_mime(mut self, cq_dam_allow_all_mime: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties {
    self.cq_dam_allow_all_mime = Some(cq_dam_allow_all_mime);
    self
  }

  pub fn cq_dam_allow_all_mime(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.cq_dam_allow_all_mime.as_ref()
  }

  pub fn reset_cq_dam_allow_all_mime(&mut self) {
    self.cq_dam_allow_all_mime = None;
  }

  pub fn set_cq_dam_allowed_asset_mimes(&mut self, cq_dam_allowed_asset_mimes: ::models::ConfigNodePropertyArray) {
    self.cq_dam_allowed_asset_mimes = Some(cq_dam_allowed_asset_mimes);
  }

  pub fn with_cq_dam_allowed_asset_mimes(mut self, cq_dam_allowed_asset_mimes: ::models::ConfigNodePropertyArray) -> ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties {
    self.cq_dam_allowed_asset_mimes = Some(cq_dam_allowed_asset_mimes);
    self
  }

  pub fn cq_dam_allowed_asset_mimes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cq_dam_allowed_asset_mimes.as_ref()
  }

  pub fn reset_cq_dam_allowed_asset_mimes(&mut self) {
    self.cq_dam_allowed_asset_mimes = None;
  }

}



