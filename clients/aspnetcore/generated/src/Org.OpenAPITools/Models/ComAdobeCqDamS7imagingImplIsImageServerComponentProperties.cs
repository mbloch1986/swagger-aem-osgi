/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqDamS7imagingImplIsImageServerComponentProperties : IEquatable<ComAdobeCqDamS7imagingImplIsImageServerComponentProperties>
    { 
        /// <summary>
        /// Gets or Sets TcpPort
        /// </summary>
        [DataMember(Name="TcpPort")]
        public ConfigNodePropertyString TcpPort { get; set; }

        /// <summary>
        /// Gets or Sets AllowRemoteAccess
        /// </summary>
        [DataMember(Name="AllowRemoteAccess")]
        public ConfigNodePropertyBoolean AllowRemoteAccess { get; set; }

        /// <summary>
        /// Gets or Sets MaxRenderRgnPixels
        /// </summary>
        [DataMember(Name="MaxRenderRgnPixels")]
        public ConfigNodePropertyString MaxRenderRgnPixels { get; set; }

        /// <summary>
        /// Gets or Sets MaxMessageSize
        /// </summary>
        [DataMember(Name="MaxMessageSize")]
        public ConfigNodePropertyString MaxMessageSize { get; set; }

        /// <summary>
        /// Gets or Sets RandomAccessUrlTimeout
        /// </summary>
        [DataMember(Name="RandomAccessUrlTimeout")]
        public ConfigNodePropertyInteger RandomAccessUrlTimeout { get; set; }

        /// <summary>
        /// Gets or Sets WorkerThreads
        /// </summary>
        [DataMember(Name="WorkerThreads")]
        public ConfigNodePropertyInteger WorkerThreads { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {\n");
            sb.Append("  TcpPort: ").Append(TcpPort).Append("\n");
            sb.Append("  AllowRemoteAccess: ").Append(AllowRemoteAccess).Append("\n");
            sb.Append("  MaxRenderRgnPixels: ").Append(MaxRenderRgnPixels).Append("\n");
            sb.Append("  MaxMessageSize: ").Append(MaxMessageSize).Append("\n");
            sb.Append("  RandomAccessUrlTimeout: ").Append(RandomAccessUrlTimeout).Append("\n");
            sb.Append("  WorkerThreads: ").Append(WorkerThreads).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqDamS7imagingImplIsImageServerComponentProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqDamS7imagingImplIsImageServerComponentProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqDamS7imagingImplIsImageServerComponentProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqDamS7imagingImplIsImageServerComponentProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TcpPort == other.TcpPort ||
                    TcpPort != null &&
                    TcpPort.Equals(other.TcpPort)
                ) && 
                (
                    AllowRemoteAccess == other.AllowRemoteAccess ||
                    AllowRemoteAccess != null &&
                    AllowRemoteAccess.Equals(other.AllowRemoteAccess)
                ) && 
                (
                    MaxRenderRgnPixels == other.MaxRenderRgnPixels ||
                    MaxRenderRgnPixels != null &&
                    MaxRenderRgnPixels.Equals(other.MaxRenderRgnPixels)
                ) && 
                (
                    MaxMessageSize == other.MaxMessageSize ||
                    MaxMessageSize != null &&
                    MaxMessageSize.Equals(other.MaxMessageSize)
                ) && 
                (
                    RandomAccessUrlTimeout == other.RandomAccessUrlTimeout ||
                    RandomAccessUrlTimeout != null &&
                    RandomAccessUrlTimeout.Equals(other.RandomAccessUrlTimeout)
                ) && 
                (
                    WorkerThreads == other.WorkerThreads ||
                    WorkerThreads != null &&
                    WorkerThreads.Equals(other.WorkerThreads)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TcpPort != null)
                    hashCode = hashCode * 59 + TcpPort.GetHashCode();
                    if (AllowRemoteAccess != null)
                    hashCode = hashCode * 59 + AllowRemoteAccess.GetHashCode();
                    if (MaxRenderRgnPixels != null)
                    hashCode = hashCode * 59 + MaxRenderRgnPixels.GetHashCode();
                    if (MaxMessageSize != null)
                    hashCode = hashCode * 59 + MaxMessageSize.GetHashCode();
                    if (RandomAccessUrlTimeout != null)
                    hashCode = hashCode * 59 + RandomAccessUrlTimeout.GetHashCode();
                    if (WorkerThreads != null)
                    hashCode = hashCode * 59 + WorkerThreads.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqDamS7imagingImplIsImageServerComponentProperties left, ComAdobeCqDamS7imagingImplIsImageServerComponentProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqDamS7imagingImplIsImageServerComponentProperties left, ComAdobeCqDamS7imagingImplIsImageServerComponentProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
