/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingCommonsMetricsInternalLogReporterProperties : IEquatable<OrgApacheSlingCommonsMetricsInternalLogReporterProperties>
    { 
        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period")]
        public ConfigNodePropertyInteger Period { get; set; }

        /// <summary>
        /// Gets or Sets TimeUnit
        /// </summary>
        [DataMember(Name="timeUnit")]
        public ConfigNodePropertyDropDown TimeUnit { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level")]
        public ConfigNodePropertyDropDown Level { get; set; }

        /// <summary>
        /// Gets or Sets LoggerName
        /// </summary>
        [DataMember(Name="loggerName")]
        public ConfigNodePropertyString LoggerName { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name="prefix")]
        public ConfigNodePropertyString Prefix { get; set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        [DataMember(Name="pattern")]
        public ConfigNodePropertyString Pattern { get; set; }

        /// <summary>
        /// Gets or Sets RegistryName
        /// </summary>
        [DataMember(Name="registryName")]
        public ConfigNodePropertyString RegistryName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingCommonsMetricsInternalLogReporterProperties {\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  TimeUnit: ").Append(TimeUnit).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  LoggerName: ").Append(LoggerName).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  RegistryName: ").Append(RegistryName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingCommonsMetricsInternalLogReporterProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingCommonsMetricsInternalLogReporterProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingCommonsMetricsInternalLogReporterProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingCommonsMetricsInternalLogReporterProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                ) && 
                (
                    TimeUnit == other.TimeUnit ||
                    TimeUnit != null &&
                    TimeUnit.Equals(other.TimeUnit)
                ) && 
                (
                    Level == other.Level ||
                    Level != null &&
                    Level.Equals(other.Level)
                ) && 
                (
                    LoggerName == other.LoggerName ||
                    LoggerName != null &&
                    LoggerName.Equals(other.LoggerName)
                ) && 
                (
                    Prefix == other.Prefix ||
                    Prefix != null &&
                    Prefix.Equals(other.Prefix)
                ) && 
                (
                    Pattern == other.Pattern ||
                    Pattern != null &&
                    Pattern.Equals(other.Pattern)
                ) && 
                (
                    RegistryName == other.RegistryName ||
                    RegistryName != null &&
                    RegistryName.Equals(other.RegistryName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    if (TimeUnit != null)
                    hashCode = hashCode * 59 + TimeUnit.GetHashCode();
                    if (Level != null)
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (LoggerName != null)
                    hashCode = hashCode * 59 + LoggerName.GetHashCode();
                    if (Prefix != null)
                    hashCode = hashCode * 59 + Prefix.GetHashCode();
                    if (Pattern != null)
                    hashCode = hashCode * 59 + Pattern.GetHashCode();
                    if (RegistryName != null)
                    hashCode = hashCode * 59 + RegistryName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingCommonsMetricsInternalLogReporterProperties left, OrgApacheSlingCommonsMetricsInternalLogReporterProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingCommonsMetricsInternalLogReporterProperties left, OrgApacheSlingCommonsMetricsInternalLogReporterProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
