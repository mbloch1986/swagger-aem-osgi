/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmCoreImplVersionPurgeTaskProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmCoreImplVersionPurgeTaskProperties::ComDayCqWcmCoreImplVersionPurgeTaskProperties()
{
    m_Versionpurge_pathsIsSet = false;
    m_Versionpurge_recursiveIsSet = false;
    m_Versionpurge_maxVersionsIsSet = false;
    m_Versionpurge_minVersionsIsSet = false;
    m_Versionpurge_maxAgeDaysIsSet = false;
}

ComDayCqWcmCoreImplVersionPurgeTaskProperties::~ComDayCqWcmCoreImplVersionPurgeTaskProperties()
{
}

void ComDayCqWcmCoreImplVersionPurgeTaskProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmCoreImplVersionPurgeTaskProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Versionpurge_pathsIsSet)
    {
        val[utility::conversions::to_string_t("versionpurge.paths")] = ModelBase::toJson(m_Versionpurge_paths);
    }
    if(m_Versionpurge_recursiveIsSet)
    {
        val[utility::conversions::to_string_t("versionpurge.recursive")] = ModelBase::toJson(m_Versionpurge_recursive);
    }
    if(m_Versionpurge_maxVersionsIsSet)
    {
        val[utility::conversions::to_string_t("versionpurge.maxVersions")] = ModelBase::toJson(m_Versionpurge_maxVersions);
    }
    if(m_Versionpurge_minVersionsIsSet)
    {
        val[utility::conversions::to_string_t("versionpurge.minVersions")] = ModelBase::toJson(m_Versionpurge_minVersions);
    }
    if(m_Versionpurge_maxAgeDaysIsSet)
    {
        val[utility::conversions::to_string_t("versionpurge.maxAgeDays")] = ModelBase::toJson(m_Versionpurge_maxAgeDays);
    }

    return val;
}

void ComDayCqWcmCoreImplVersionPurgeTaskProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("versionpurge.paths")))
    {
        if(!val[utility::conversions::to_string_t("versionpurge.paths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("versionpurge.paths")]);
            setVersionpurgePaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionpurge.recursive")))
    {
        if(!val[utility::conversions::to_string_t("versionpurge.recursive")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("versionpurge.recursive")]);
            setVersionpurgeRecursive( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionpurge.maxVersions")))
    {
        if(!val[utility::conversions::to_string_t("versionpurge.maxVersions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("versionpurge.maxVersions")]);
            setVersionpurgeMaxVersions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionpurge.minVersions")))
    {
        if(!val[utility::conversions::to_string_t("versionpurge.minVersions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("versionpurge.minVersions")]);
            setVersionpurgeMinVersions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionpurge.maxAgeDays")))
    {
        if(!val[utility::conversions::to_string_t("versionpurge.maxAgeDays")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("versionpurge.maxAgeDays")]);
            setVersionpurgeMaxAgeDays( newItem );
        }
    }
}

void ComDayCqWcmCoreImplVersionPurgeTaskProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Versionpurge_pathsIsSet)
    {
        if (m_Versionpurge_paths.get())
        {
            m_Versionpurge_paths->toMultipart(multipart, utility::conversions::to_string_t("versionpurge.paths."));
        }
    }
    if(m_Versionpurge_recursiveIsSet)
    {
        if (m_Versionpurge_recursive.get())
        {
            m_Versionpurge_recursive->toMultipart(multipart, utility::conversions::to_string_t("versionpurge.recursive."));
        }
    }
    if(m_Versionpurge_maxVersionsIsSet)
    {
        if (m_Versionpurge_maxVersions.get())
        {
            m_Versionpurge_maxVersions->toMultipart(multipart, utility::conversions::to_string_t("versionpurge.maxVersions."));
        }
    }
    if(m_Versionpurge_minVersionsIsSet)
    {
        if (m_Versionpurge_minVersions.get())
        {
            m_Versionpurge_minVersions->toMultipart(multipart, utility::conversions::to_string_t("versionpurge.minVersions."));
        }
    }
    if(m_Versionpurge_maxAgeDaysIsSet)
    {
        if (m_Versionpurge_maxAgeDays.get())
        {
            m_Versionpurge_maxAgeDays->toMultipart(multipart, utility::conversions::to_string_t("versionpurge.maxAgeDays."));
        }
    }
}

void ComDayCqWcmCoreImplVersionPurgeTaskProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("versionpurge.paths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionpurge.paths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionpurge.paths."));
            setVersionpurgePaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionpurge.recursive")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionpurge.recursive")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionpurge.recursive."));
            setVersionpurgeRecursive( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionpurge.maxVersions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionpurge.maxVersions")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionpurge.maxVersions."));
            setVersionpurgeMaxVersions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionpurge.minVersions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionpurge.minVersions")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionpurge.minVersions."));
            setVersionpurgeMinVersions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionpurge.maxAgeDays")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("versionpurge.maxAgeDays")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("versionpurge.maxAgeDays."));
            setVersionpurgeMaxAgeDays( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgePaths() const
{
    return m_Versionpurge_paths;
}


void ComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgePaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Versionpurge_paths = value;
    m_Versionpurge_pathsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionPurgeTaskProperties::versionpurgePathsIsSet() const
{
    return m_Versionpurge_pathsIsSet;
}

void ComDayCqWcmCoreImplVersionPurgeTaskProperties::unsetVersionpurge_paths()
{
    m_Versionpurge_pathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeRecursive() const
{
    return m_Versionpurge_recursive;
}


void ComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeRecursive(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Versionpurge_recursive = value;
    m_Versionpurge_recursiveIsSet = true;
}
bool ComDayCqWcmCoreImplVersionPurgeTaskProperties::versionpurgeRecursiveIsSet() const
{
    return m_Versionpurge_recursiveIsSet;
}

void ComDayCqWcmCoreImplVersionPurgeTaskProperties::unsetVersionpurge_recursive()
{
    m_Versionpurge_recursiveIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMaxVersions() const
{
    return m_Versionpurge_maxVersions;
}


void ComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMaxVersions(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Versionpurge_maxVersions = value;
    m_Versionpurge_maxVersionsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionPurgeTaskProperties::versionpurgeMaxVersionsIsSet() const
{
    return m_Versionpurge_maxVersionsIsSet;
}

void ComDayCqWcmCoreImplVersionPurgeTaskProperties::unsetVersionpurge_maxVersions()
{
    m_Versionpurge_maxVersionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMinVersions() const
{
    return m_Versionpurge_minVersions;
}


void ComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMinVersions(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Versionpurge_minVersions = value;
    m_Versionpurge_minVersionsIsSet = true;
}
bool ComDayCqWcmCoreImplVersionPurgeTaskProperties::versionpurgeMinVersionsIsSet() const
{
    return m_Versionpurge_minVersionsIsSet;
}

void ComDayCqWcmCoreImplVersionPurgeTaskProperties::unsetVersionpurge_minVersions()
{
    m_Versionpurge_minVersionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqWcmCoreImplVersionPurgeTaskProperties::getVersionpurgeMaxAgeDays() const
{
    return m_Versionpurge_maxAgeDays;
}


void ComDayCqWcmCoreImplVersionPurgeTaskProperties::setVersionpurgeMaxAgeDays(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Versionpurge_maxAgeDays = value;
    m_Versionpurge_maxAgeDaysIsSet = true;
}
bool ComDayCqWcmCoreImplVersionPurgeTaskProperties::versionpurgeMaxAgeDaysIsSet() const
{
    return m_Versionpurge_maxAgeDaysIsSet;
}

void ComDayCqWcmCoreImplVersionPurgeTaskProperties::unsetVersionpurge_maxAgeDays()
{
    m_Versionpurge_maxAgeDaysIsSet = false;
}

}
}
}
}

