/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ConfigNodePropertyInteger.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ConfigNodePropertyInteger::ConfigNodePropertyInteger()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Optional = false;
    m_OptionalIsSet = false;
    m_Is_set = false;
    m_Is_setIsSet = false;
    m_Type = 0;
    m_TypeIsSet = false;
    m_Value = 0;
    m_ValueIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
}

ConfigNodePropertyInteger::~ConfigNodePropertyInteger()
{
}

void ConfigNodePropertyInteger::validate()
{
    // TODO: implement validation
}

web::json::value ConfigNodePropertyInteger::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OptionalIsSet)
    {
        val[utility::conversions::to_string_t("optional")] = ModelBase::toJson(m_Optional);
    }
    if(m_Is_setIsSet)
    {
        val[utility::conversions::to_string_t("is_set")] = ModelBase::toJson(m_Is_set);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }

    return val;
}

void ConfigNodePropertyInteger::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    }
    if(val.has_field(utility::conversions::to_string_t("optional")))
    {
        setOptional(ModelBase::boolFromJson(val[utility::conversions::to_string_t("optional")]));
    }
    if(val.has_field(utility::conversions::to_string_t("is_set")))
    {
        setIsSet(ModelBase::boolFromJson(val[utility::conversions::to_string_t("is_set")]));
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("type")]));
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        setValue(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("value")]));
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromJson(val[utility::conversions::to_string_t("description")]));
    }
}

void ConfigNodePropertyInteger::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_OptionalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("optional"), m_Optional));
    }
    if(m_Is_setIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_set"), m_Is_set));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
}

void ConfigNodePropertyInteger::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optional")))
    {
        setOptional(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("optional"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_set")))
    {
        setIsSet(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_set"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        setValue(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
}

utility::string_t ConfigNodePropertyInteger::getName() const
{
    return m_Name;
}


void ConfigNodePropertyInteger::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool ConfigNodePropertyInteger::nameIsSet() const
{
    return m_NameIsSet;
}

void ConfigNodePropertyInteger::unsetName()
{
    m_NameIsSet = false;
}

bool ConfigNodePropertyInteger::isOptional() const
{
    return m_Optional;
}


void ConfigNodePropertyInteger::setOptional(bool value)
{
    m_Optional = value;
    m_OptionalIsSet = true;
}
bool ConfigNodePropertyInteger::optionalIsSet() const
{
    return m_OptionalIsSet;
}

void ConfigNodePropertyInteger::unsetOptional()
{
    m_OptionalIsSet = false;
}

bool ConfigNodePropertyInteger::isIsSet() const
{
    return m_Is_set;
}


void ConfigNodePropertyInteger::setIsSet(bool value)
{
    m_Is_set = value;
    m_Is_setIsSet = true;
}
bool ConfigNodePropertyInteger::isSetIsSet() const
{
    return m_Is_setIsSet;
}

void ConfigNodePropertyInteger::unsetIs_set()
{
    m_Is_setIsSet = false;
}

int32_t ConfigNodePropertyInteger::getType() const
{
    return m_Type;
}


void ConfigNodePropertyInteger::setType(int32_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool ConfigNodePropertyInteger::typeIsSet() const
{
    return m_TypeIsSet;
}

void ConfigNodePropertyInteger::unsetType()
{
    m_TypeIsSet = false;
}

int32_t ConfigNodePropertyInteger::getValue() const
{
    return m_Value;
}


void ConfigNodePropertyInteger::setValue(int32_t value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool ConfigNodePropertyInteger::valueIsSet() const
{
    return m_ValueIsSet;
}

void ConfigNodePropertyInteger::unsetValue()
{
    m_ValueIsSet = false;
}

utility::string_t ConfigNodePropertyInteger::getDescription() const
{
    return m_Description;
}


void ConfigNodePropertyInteger::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool ConfigNodePropertyInteger::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void ConfigNodePropertyInteger::unsetDescription()
{
    m_DescriptionIsSet = false;
}

}
}
}
}

