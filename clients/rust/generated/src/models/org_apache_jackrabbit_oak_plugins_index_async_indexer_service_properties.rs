/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
  #[serde(rename = "asyncConfigs")]
  async_configs: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "leaseTimeOutMinutes")]
  lease_time_out_minutes: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "failingIndexTimeoutSeconds")]
  failing_index_timeout_seconds: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "errorWarnIntervalSeconds")]
  error_warn_interval_seconds: Option<::models::ConfigNodePropertyInteger>
}

impl OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
  pub fn new() -> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
    OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
      async_configs: None,
      lease_time_out_minutes: None,
      failing_index_timeout_seconds: None,
      error_warn_interval_seconds: None
    }
  }

  pub fn set_async_configs(&mut self, async_configs: ::models::ConfigNodePropertyArray) {
    self.async_configs = Some(async_configs);
  }

  pub fn with_async_configs(mut self, async_configs: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
    self.async_configs = Some(async_configs);
    self
  }

  pub fn async_configs(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.async_configs.as_ref()
  }

  pub fn reset_async_configs(&mut self) {
    self.async_configs = None;
  }

  pub fn set_lease_time_out_minutes(&mut self, lease_time_out_minutes: ::models::ConfigNodePropertyInteger) {
    self.lease_time_out_minutes = Some(lease_time_out_minutes);
  }

  pub fn with_lease_time_out_minutes(mut self, lease_time_out_minutes: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
    self.lease_time_out_minutes = Some(lease_time_out_minutes);
    self
  }

  pub fn lease_time_out_minutes(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.lease_time_out_minutes.as_ref()
  }

  pub fn reset_lease_time_out_minutes(&mut self) {
    self.lease_time_out_minutes = None;
  }

  pub fn set_failing_index_timeout_seconds(&mut self, failing_index_timeout_seconds: ::models::ConfigNodePropertyInteger) {
    self.failing_index_timeout_seconds = Some(failing_index_timeout_seconds);
  }

  pub fn with_failing_index_timeout_seconds(mut self, failing_index_timeout_seconds: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
    self.failing_index_timeout_seconds = Some(failing_index_timeout_seconds);
    self
  }

  pub fn failing_index_timeout_seconds(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.failing_index_timeout_seconds.as_ref()
  }

  pub fn reset_failing_index_timeout_seconds(&mut self) {
    self.failing_index_timeout_seconds = None;
  }

  pub fn set_error_warn_interval_seconds(&mut self, error_warn_interval_seconds: ::models::ConfigNodePropertyInteger) {
    self.error_warn_interval_seconds = Some(error_warn_interval_seconds);
  }

  pub fn with_error_warn_interval_seconds(mut self, error_warn_interval_seconds: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
    self.error_warn_interval_seconds = Some(error_warn_interval_seconds);
    self
  }

  pub fn error_warn_interval_seconds(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.error_warn_interval_seconds.as_ref()
  }

  pub fn reset_error_warn_interval_seconds(&mut self) {
    self.error_warn_interval_seconds = None;
  }

}



