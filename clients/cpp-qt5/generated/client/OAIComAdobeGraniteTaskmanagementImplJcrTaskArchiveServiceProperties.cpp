/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties() {
    init();
}

OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::~OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::init() {
    archiving_enabled = new OAIConfigNodePropertyBoolean();
    m_archiving_enabled_isSet = false;
    scheduler_expression = new OAIConfigNodePropertyString();
    m_scheduler_expression_isSet = false;
    archive_since_days_completed = new OAIConfigNodePropertyInteger();
    m_archive_since_days_completed_isSet = false;
}

void
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::cleanup() {
    if(archiving_enabled != nullptr) { 
        delete archiving_enabled;
    }
    if(scheduler_expression != nullptr) { 
        delete scheduler_expression;
    }
    if(archive_since_days_completed != nullptr) { 
        delete archive_since_days_completed;
    }
}

OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties*
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&archiving_enabled, pJson["archiving.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&scheduler_expression, pJson["scheduler.expression"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&archive_since_days_completed, pJson["archive.since.days.completed"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((archiving_enabled != nullptr) && (archiving_enabled->isSet())){
        toJsonValue(QString("archiving.enabled"), archiving_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((scheduler_expression != nullptr) && (scheduler_expression->isSet())){
        toJsonValue(QString("scheduler.expression"), scheduler_expression, obj, QString("OAIConfigNodePropertyString"));
    }
    if((archive_since_days_completed != nullptr) && (archive_since_days_completed->isSet())){
        toJsonValue(QString("archive.since.days.completed"), archive_since_days_completed, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::getArchivingEnabled() {
    return archiving_enabled;
}
void
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::setArchivingEnabled(OAIConfigNodePropertyBoolean* archiving_enabled) {
    this->archiving_enabled = archiving_enabled;
    this->m_archiving_enabled_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::getSchedulerExpression() {
    return scheduler_expression;
}
void
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::setSchedulerExpression(OAIConfigNodePropertyString* scheduler_expression) {
    this->scheduler_expression = scheduler_expression;
    this->m_scheduler_expression_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::getArchiveSinceDaysCompleted() {
    return archive_since_days_completed;
}
void
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::setArchiveSinceDaysCompleted(OAIConfigNodePropertyInteger* archive_since_days_completed) {
    this->archive_since_days_completed = archive_since_days_completed;
    this->m_archive_since_days_completed_isSet = true;
}


bool
OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(archiving_enabled != nullptr && archiving_enabled->isSet()){ isObjectUpdated = true; break;}
        if(scheduler_expression != nullptr && scheduler_expression->isSet()){ isObjectUpdated = true; break;}
        if(archive_since_days_completed != nullptr && archive_since_days_completed->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

