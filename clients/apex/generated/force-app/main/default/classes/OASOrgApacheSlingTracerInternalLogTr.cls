/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheSlingTracerInternalLogTr
 */
public class OASOrgApacheSlingTracerInternalLogTr {
    /**
     * Get tracerSets
     * @return tracerSets
     */
    public OASConfigNodePropertyArray tracerSets { get; set; }

    /**
     * Get enabled
     * @return enabled
     */
    public OASConfigNodePropertyBoolean enabled { get; set; }

    /**
     * Get servletEnabled
     * @return servletEnabled
     */
    public OASConfigNodePropertyBoolean servletEnabled { get; set; }

    /**
     * Get recordingCacheSizeInMB
     * @return recordingCacheSizeInMB
     */
    public OASConfigNodePropertyInteger recordingCacheSizeInMB { get; set; }

    /**
     * Get recordingCacheDurationInSecs
     * @return recordingCacheDurationInSecs
     */
    public OASConfigNodePropertyInteger recordingCacheDurationInSecs { get; set; }

    /**
     * Get recordingCompressionEnabled
     * @return recordingCompressionEnabled
     */
    public OASConfigNodePropertyBoolean recordingCompressionEnabled { get; set; }

    /**
     * Get gzipResponse
     * @return gzipResponse
     */
    public OASConfigNodePropertyBoolean gzipResponse { get; set; }

    public static OASOrgApacheSlingTracerInternalLogTr getExample() {
        OASOrgApacheSlingTracerInternalLogTr orgApacheSlingTracerInternalLogTracerProperties = new OASOrgApacheSlingTracerInternalLogTr();
          orgApacheSlingTracerInternalLogTracerProperties.tracerSets = OASConfigNodePropertyArray.getExample();
          orgApacheSlingTracerInternalLogTracerProperties.enabled = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingTracerInternalLogTracerProperties.servletEnabled = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingTracerInternalLogTracerProperties.recordingCacheSizeInMB = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingTracerInternalLogTracerProperties.recordingCacheDurationInSecs = OASConfigNodePropertyInteger.getExample();
          orgApacheSlingTracerInternalLogTracerProperties.recordingCompressionEnabled = OASConfigNodePropertyBoolean.getExample();
          orgApacheSlingTracerInternalLogTracerProperties.gzipResponse = OASConfigNodePropertyBoolean.getExample();
        return orgApacheSlingTracerInternalLogTracerProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheSlingTracerInternalLogTr) {           
            OASOrgApacheSlingTracerInternalLogTr orgApacheSlingTracerInternalLogTracerProperties = (OASOrgApacheSlingTracerInternalLogTr) obj;
            return this.tracerSets == orgApacheSlingTracerInternalLogTracerProperties.tracerSets
                && this.enabled == orgApacheSlingTracerInternalLogTracerProperties.enabled
                && this.servletEnabled == orgApacheSlingTracerInternalLogTracerProperties.servletEnabled
                && this.recordingCacheSizeInMB == orgApacheSlingTracerInternalLogTracerProperties.recordingCacheSizeInMB
                && this.recordingCacheDurationInSecs == orgApacheSlingTracerInternalLogTracerProperties.recordingCacheDurationInSecs
                && this.recordingCompressionEnabled == orgApacheSlingTracerInternalLogTracerProperties.recordingCompressionEnabled
                && this.gzipResponse == orgApacheSlingTracerInternalLogTracerProperties.gzipResponse;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (tracerSets == null ? 0 : System.hashCode(tracerSets));
        hashCode = (17 * hashCode) + (enabled == null ? 0 : System.hashCode(enabled));
        hashCode = (17 * hashCode) + (servletEnabled == null ? 0 : System.hashCode(servletEnabled));
        hashCode = (17 * hashCode) + (recordingCacheSizeInMB == null ? 0 : System.hashCode(recordingCacheSizeInMB));
        hashCode = (17 * hashCode) + (recordingCacheDurationInSecs == null ? 0 : System.hashCode(recordingCacheDurationInSecs));
        hashCode = (17 * hashCode) + (recordingCompressionEnabled == null ? 0 : System.hashCode(recordingCompressionEnabled));
        hashCode = (17 * hashCode) + (gzipResponse == null ? 0 : System.hashCode(gzipResponse));
        return hashCode;
    }
}

