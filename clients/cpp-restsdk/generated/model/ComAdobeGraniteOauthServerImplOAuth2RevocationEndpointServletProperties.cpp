/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties()
{
    m_Sling_servlet_pathsIsSet = false;
    m_Oauth_revocation_activeIsSet = false;
}

ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::~ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties()
{
}

void ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Sling_servlet_pathsIsSet)
    {
        val[utility::conversions::to_string_t("sling.servlet.paths")] = ModelBase::toJson(m_Sling_servlet_paths);
    }
    if(m_Oauth_revocation_activeIsSet)
    {
        val[utility::conversions::to_string_t("oauth.revocation.active")] = ModelBase::toJson(m_Oauth_revocation_active);
    }

    return val;
}

void ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("sling.servlet.paths")))
    {
        if(!val[utility::conversions::to_string_t("sling.servlet.paths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("sling.servlet.paths")]);
            setSlingServletPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.revocation.active")))
    {
        if(!val[utility::conversions::to_string_t("oauth.revocation.active")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.revocation.active")]);
            setOauthRevocationActive( newItem );
        }
    }
}

void ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Sling_servlet_pathsIsSet)
    {
        if (m_Sling_servlet_paths.get())
        {
            m_Sling_servlet_paths->toMultipart(multipart, utility::conversions::to_string_t("sling.servlet.paths."));
        }
    }
    if(m_Oauth_revocation_activeIsSet)
    {
        if (m_Oauth_revocation_active.get())
        {
            m_Oauth_revocation_active->toMultipart(multipart, utility::conversions::to_string_t("oauth.revocation.active."));
        }
    }
}

void ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("sling.servlet.paths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("sling.servlet.paths")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("sling.servlet.paths."));
            setSlingServletPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.revocation.active")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.revocation.active")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.revocation.active."));
            setOauthRevocationActive( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::getSlingServletPaths() const
{
    return m_Sling_servlet_paths;
}


void ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::setSlingServletPaths(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Sling_servlet_paths = value;
    m_Sling_servlet_pathsIsSet = true;
}
bool ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::slingServletPathsIsSet() const
{
    return m_Sling_servlet_pathsIsSet;
}

void ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::unsetSling_servlet_paths()
{
    m_Sling_servlet_pathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::getOauthRevocationActive() const
{
    return m_Oauth_revocation_active;
}


void ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::setOauthRevocationActive(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Oauth_revocation_active = value;
    m_Oauth_revocation_activeIsSet = true;
}
bool ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::oauthRevocationActiveIsSet() const
{
    return m_Oauth_revocation_activeIsSet;
}

void ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties::unsetOauth_revocation_active()
{
    m_Oauth_revocation_activeIsSet = false;
}

}
}
}
}

