/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties() {
    init();
}

OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::~OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::init() {
    sling_servlet_selectors = new OAIConfigNodePropertyString();
    m_sling_servlet_selectors_isSet = false;
    sling_servlet_extensions = new OAIConfigNodePropertyString();
    m_sling_servlet_extensions_isSet = false;
}

void
OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::cleanup() {
    if(sling_servlet_selectors != nullptr) { 
        delete sling_servlet_selectors;
    }
    if(sling_servlet_extensions != nullptr) { 
        delete sling_servlet_extensions;
    }
}

OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties*
OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&sling_servlet_selectors, pJson["sling.servlet.selectors"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&sling_servlet_extensions, pJson["sling.servlet.extensions"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::asJsonObject() {
    QJsonObject obj;
    if((sling_servlet_selectors != nullptr) && (sling_servlet_selectors->isSet())){
        toJsonValue(QString("sling.servlet.selectors"), sling_servlet_selectors, obj, QString("OAIConfigNodePropertyString"));
    }
    if((sling_servlet_extensions != nullptr) && (sling_servlet_extensions->isSet())){
        toJsonValue(QString("sling.servlet.extensions"), sling_servlet_extensions, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::getSlingServletSelectors() {
    return sling_servlet_selectors;
}
void
OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::setSlingServletSelectors(OAIConfigNodePropertyString* sling_servlet_selectors) {
    this->sling_servlet_selectors = sling_servlet_selectors;
    this->m_sling_servlet_selectors_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::getSlingServletExtensions() {
    return sling_servlet_extensions;
}
void
OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::setSlingServletExtensions(OAIConfigNodePropertyString* sling_servlet_extensions) {
    this->sling_servlet_extensions = sling_servlet_extensions;
    this->m_sling_servlet_extensions_isSet = true;
}


bool
OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(sling_servlet_selectors != nullptr && sling_servlet_selectors->isSet()){ isObjectUpdated = true; break;}
        if(sling_servlet_extensions != nullptr && sling_servlet_extensions->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

