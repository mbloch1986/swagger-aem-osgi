/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqMailerDefaultMailServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqMailerDefaultMailServiceProperties::OAIComDayCqMailerDefaultMailServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqMailerDefaultMailServiceProperties::OAIComDayCqMailerDefaultMailServiceProperties() {
    init();
}

OAIComDayCqMailerDefaultMailServiceProperties::~OAIComDayCqMailerDefaultMailServiceProperties() {
    this->cleanup();
}

void
OAIComDayCqMailerDefaultMailServiceProperties::init() {
    smtp_host = new OAIConfigNodePropertyString();
    m_smtp_host_isSet = false;
    smtp_port = new OAIConfigNodePropertyInteger();
    m_smtp_port_isSet = false;
    smtp_user = new OAIConfigNodePropertyString();
    m_smtp_user_isSet = false;
    smtp_password = new OAIConfigNodePropertyString();
    m_smtp_password_isSet = false;
    from_address = new OAIConfigNodePropertyString();
    m_from_address_isSet = false;
    smtp_ssl = new OAIConfigNodePropertyBoolean();
    m_smtp_ssl_isSet = false;
    smtp_starttls = new OAIConfigNodePropertyBoolean();
    m_smtp_starttls_isSet = false;
    debug_email = new OAIConfigNodePropertyBoolean();
    m_debug_email_isSet = false;
}

void
OAIComDayCqMailerDefaultMailServiceProperties::cleanup() {
    if(smtp_host != nullptr) { 
        delete smtp_host;
    }
    if(smtp_port != nullptr) { 
        delete smtp_port;
    }
    if(smtp_user != nullptr) { 
        delete smtp_user;
    }
    if(smtp_password != nullptr) { 
        delete smtp_password;
    }
    if(from_address != nullptr) { 
        delete from_address;
    }
    if(smtp_ssl != nullptr) { 
        delete smtp_ssl;
    }
    if(smtp_starttls != nullptr) { 
        delete smtp_starttls;
    }
    if(debug_email != nullptr) { 
        delete debug_email;
    }
}

OAIComDayCqMailerDefaultMailServiceProperties*
OAIComDayCqMailerDefaultMailServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqMailerDefaultMailServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&smtp_host, pJson["smtp.host"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&smtp_port, pJson["smtp.port"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&smtp_user, pJson["smtp.user"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&smtp_password, pJson["smtp.password"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&from_address, pJson["from.address"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&smtp_ssl, pJson["smtp.ssl"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&smtp_starttls, pJson["smtp.starttls"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&debug_email, pJson["debug.email"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComDayCqMailerDefaultMailServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqMailerDefaultMailServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((smtp_host != nullptr) && (smtp_host->isSet())){
        toJsonValue(QString("smtp.host"), smtp_host, obj, QString("OAIConfigNodePropertyString"));
    }
    if((smtp_port != nullptr) && (smtp_port->isSet())){
        toJsonValue(QString("smtp.port"), smtp_port, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((smtp_user != nullptr) && (smtp_user->isSet())){
        toJsonValue(QString("smtp.user"), smtp_user, obj, QString("OAIConfigNodePropertyString"));
    }
    if((smtp_password != nullptr) && (smtp_password->isSet())){
        toJsonValue(QString("smtp.password"), smtp_password, obj, QString("OAIConfigNodePropertyString"));
    }
    if((from_address != nullptr) && (from_address->isSet())){
        toJsonValue(QString("from.address"), from_address, obj, QString("OAIConfigNodePropertyString"));
    }
    if((smtp_ssl != nullptr) && (smtp_ssl->isSet())){
        toJsonValue(QString("smtp.ssl"), smtp_ssl, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((smtp_starttls != nullptr) && (smtp_starttls->isSet())){
        toJsonValue(QString("smtp.starttls"), smtp_starttls, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((debug_email != nullptr) && (debug_email->isSet())){
        toJsonValue(QString("debug.email"), debug_email, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqMailerDefaultMailServiceProperties::getSmtpHost() {
    return smtp_host;
}
void
OAIComDayCqMailerDefaultMailServiceProperties::setSmtpHost(OAIConfigNodePropertyString* smtp_host) {
    this->smtp_host = smtp_host;
    this->m_smtp_host_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqMailerDefaultMailServiceProperties::getSmtpPort() {
    return smtp_port;
}
void
OAIComDayCqMailerDefaultMailServiceProperties::setSmtpPort(OAIConfigNodePropertyInteger* smtp_port) {
    this->smtp_port = smtp_port;
    this->m_smtp_port_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqMailerDefaultMailServiceProperties::getSmtpUser() {
    return smtp_user;
}
void
OAIComDayCqMailerDefaultMailServiceProperties::setSmtpUser(OAIConfigNodePropertyString* smtp_user) {
    this->smtp_user = smtp_user;
    this->m_smtp_user_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqMailerDefaultMailServiceProperties::getSmtpPassword() {
    return smtp_password;
}
void
OAIComDayCqMailerDefaultMailServiceProperties::setSmtpPassword(OAIConfigNodePropertyString* smtp_password) {
    this->smtp_password = smtp_password;
    this->m_smtp_password_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqMailerDefaultMailServiceProperties::getFromAddress() {
    return from_address;
}
void
OAIComDayCqMailerDefaultMailServiceProperties::setFromAddress(OAIConfigNodePropertyString* from_address) {
    this->from_address = from_address;
    this->m_from_address_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqMailerDefaultMailServiceProperties::getSmtpSsl() {
    return smtp_ssl;
}
void
OAIComDayCqMailerDefaultMailServiceProperties::setSmtpSsl(OAIConfigNodePropertyBoolean* smtp_ssl) {
    this->smtp_ssl = smtp_ssl;
    this->m_smtp_ssl_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqMailerDefaultMailServiceProperties::getSmtpStarttls() {
    return smtp_starttls;
}
void
OAIComDayCqMailerDefaultMailServiceProperties::setSmtpStarttls(OAIConfigNodePropertyBoolean* smtp_starttls) {
    this->smtp_starttls = smtp_starttls;
    this->m_smtp_starttls_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqMailerDefaultMailServiceProperties::getDebugEmail() {
    return debug_email;
}
void
OAIComDayCqMailerDefaultMailServiceProperties::setDebugEmail(OAIConfigNodePropertyBoolean* debug_email) {
    this->debug_email = debug_email;
    this->m_debug_email_isSet = true;
}


bool
OAIComDayCqMailerDefaultMailServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(smtp_host != nullptr && smtp_host->isSet()){ isObjectUpdated = true; break;}
        if(smtp_port != nullptr && smtp_port->isSet()){ isObjectUpdated = true; break;}
        if(smtp_user != nullptr && smtp_user->isSet()){ isObjectUpdated = true; break;}
        if(smtp_password != nullptr && smtp_password->isSet()){ isObjectUpdated = true; break;}
        if(from_address != nullptr && from_address->isSet()){ isObjectUpdated = true; break;}
        if(smtp_ssl != nullptr && smtp_ssl->isSet()){ isObjectUpdated = true; break;}
        if(smtp_starttls != nullptr && smtp_starttls->isSet()){ isObjectUpdated = true; break;}
        if(debug_email != nullptr && debug_email->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

