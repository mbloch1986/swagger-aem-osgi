/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties()
{
    m_Service_rankingIsSet = false;
    m_Keypair_idIsSet = false;
    m_Keypair_aliasIsSet = false;
    m_Cdnrewriter_attributesIsSet = false;
    m_Cdn_rewriter_distribution_domainIsSet = false;
}

ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::~ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties()
{
}

void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Service_rankingIsSet)
    {
        val[utility::conversions::to_string_t("service.ranking")] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_Keypair_idIsSet)
    {
        val[utility::conversions::to_string_t("keypair.id")] = ModelBase::toJson(m_Keypair_id);
    }
    if(m_Keypair_aliasIsSet)
    {
        val[utility::conversions::to_string_t("keypair.alias")] = ModelBase::toJson(m_Keypair_alias);
    }
    if(m_Cdnrewriter_attributesIsSet)
    {
        val[utility::conversions::to_string_t("cdnrewriter.attributes")] = ModelBase::toJson(m_Cdnrewriter_attributes);
    }
    if(m_Cdn_rewriter_distribution_domainIsSet)
    {
        val[utility::conversions::to_string_t("cdn.rewriter.distribution.domain")] = ModelBase::toJson(m_Cdn_rewriter_distribution_domain);
    }

    return val;
}

void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("service.ranking")))
    {
        if(!val[utility::conversions::to_string_t("service.ranking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("service.ranking")]);
            setServiceRanking( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("keypair.id")))
    {
        if(!val[utility::conversions::to_string_t("keypair.id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("keypair.id")]);
            setKeypairId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("keypair.alias")))
    {
        if(!val[utility::conversions::to_string_t("keypair.alias")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("keypair.alias")]);
            setKeypairAlias( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cdnrewriter.attributes")))
    {
        if(!val[utility::conversions::to_string_t("cdnrewriter.attributes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cdnrewriter.attributes")]);
            setCdnrewriterAttributes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cdn.rewriter.distribution.domain")))
    {
        if(!val[utility::conversions::to_string_t("cdn.rewriter.distribution.domain")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cdn.rewriter.distribution.domain")]);
            setCdnRewriterDistributionDomain( newItem );
        }
    }
}

void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Service_rankingIsSet)
    {
        if (m_Service_ranking.get())
        {
            m_Service_ranking->toMultipart(multipart, utility::conversions::to_string_t("service.ranking."));
        }
    }
    if(m_Keypair_idIsSet)
    {
        if (m_Keypair_id.get())
        {
            m_Keypair_id->toMultipart(multipart, utility::conversions::to_string_t("keypair.id."));
        }
    }
    if(m_Keypair_aliasIsSet)
    {
        if (m_Keypair_alias.get())
        {
            m_Keypair_alias->toMultipart(multipart, utility::conversions::to_string_t("keypair.alias."));
        }
    }
    if(m_Cdnrewriter_attributesIsSet)
    {
        if (m_Cdnrewriter_attributes.get())
        {
            m_Cdnrewriter_attributes->toMultipart(multipart, utility::conversions::to_string_t("cdnrewriter.attributes."));
        }
    }
    if(m_Cdn_rewriter_distribution_domainIsSet)
    {
        if (m_Cdn_rewriter_distribution_domain.get())
        {
            m_Cdn_rewriter_distribution_domain->toMultipart(multipart, utility::conversions::to_string_t("cdn.rewriter.distribution.domain."));
        }
    }
}

void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.ranking."));
            setServiceRanking( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("keypair.id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("keypair.id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("keypair.id."));
            setKeypairId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("keypair.alias")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("keypair.alias")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("keypair.alias."));
            setKeypairAlias( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cdnrewriter.attributes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cdnrewriter.attributes")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cdnrewriter.attributes."));
            setCdnrewriterAttributes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cdn.rewriter.distribution.domain")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cdn.rewriter.distribution.domain")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cdn.rewriter.distribution.domain."));
            setCdnRewriterDistributionDomain( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::getServiceRanking() const
{
    return m_Service_ranking;
}


void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}

void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::getKeypairId() const
{
    return m_Keypair_id;
}


void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::setKeypairId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Keypair_id = value;
    m_Keypair_idIsSet = true;
}
bool ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::keypairIdIsSet() const
{
    return m_Keypair_idIsSet;
}

void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::unsetKeypair_id()
{
    m_Keypair_idIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::getKeypairAlias() const
{
    return m_Keypair_alias;
}


void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::setKeypairAlias(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Keypair_alias = value;
    m_Keypair_aliasIsSet = true;
}
bool ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::keypairAliasIsSet() const
{
    return m_Keypair_aliasIsSet;
}

void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::unsetKeypair_alias()
{
    m_Keypair_aliasIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::getCdnrewriterAttributes() const
{
    return m_Cdnrewriter_attributes;
}


void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::setCdnrewriterAttributes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cdnrewriter_attributes = value;
    m_Cdnrewriter_attributesIsSet = true;
}
bool ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::cdnrewriterAttributesIsSet() const
{
    return m_Cdnrewriter_attributesIsSet;
}

void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::unsetCdnrewriter_attributes()
{
    m_Cdnrewriter_attributesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::getCdnRewriterDistributionDomain() const
{
    return m_Cdn_rewriter_distribution_domain;
}


void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::setCdnRewriterDistributionDomain(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cdn_rewriter_distribution_domain = value;
    m_Cdn_rewriter_distribution_domainIsSet = true;
}
bool ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::cdnRewriterDistributionDomainIsSet() const
{
    return m_Cdn_rewriter_distribution_domainIsSet;
}

void ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterProperties::unsetCdn_rewriter_distribution_domain()
{
    m_Cdn_rewriter_distribution_domainIsSet = false;
}

}
}
}
}

