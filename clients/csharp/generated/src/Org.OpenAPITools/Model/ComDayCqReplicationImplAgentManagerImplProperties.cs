/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqReplicationImplAgentManagerImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqReplicationImplAgentManagerImplProperties :  IEquatable<ComDayCqReplicationImplAgentManagerImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqReplicationImplAgentManagerImplProperties" /> class.
        /// </summary>
        /// <param name="jobTopics">jobTopics.</param>
        /// <param name="serviceUserTarget">serviceUserTarget.</param>
        /// <param name="agentProviderTarget">agentProviderTarget.</param>
        public ComDayCqReplicationImplAgentManagerImplProperties(ConfigNodePropertyString jobTopics = default(ConfigNodePropertyString), ConfigNodePropertyString serviceUserTarget = default(ConfigNodePropertyString), ConfigNodePropertyString agentProviderTarget = default(ConfigNodePropertyString))
        {
            this.JobTopics = jobTopics;
            this.ServiceUserTarget = serviceUserTarget;
            this.AgentProviderTarget = agentProviderTarget;
        }
        
        /// <summary>
        /// Gets or Sets JobTopics
        /// </summary>
        [DataMember(Name="job.topics", EmitDefaultValue=false)]
        public ConfigNodePropertyString JobTopics { get; set; }

        /// <summary>
        /// Gets or Sets ServiceUserTarget
        /// </summary>
        [DataMember(Name="serviceUser.target", EmitDefaultValue=false)]
        public ConfigNodePropertyString ServiceUserTarget { get; set; }

        /// <summary>
        /// Gets or Sets AgentProviderTarget
        /// </summary>
        [DataMember(Name="agentProvider.target", EmitDefaultValue=false)]
        public ConfigNodePropertyString AgentProviderTarget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqReplicationImplAgentManagerImplProperties {\n");
            sb.Append("  JobTopics: ").Append(JobTopics).Append("\n");
            sb.Append("  ServiceUserTarget: ").Append(ServiceUserTarget).Append("\n");
            sb.Append("  AgentProviderTarget: ").Append(AgentProviderTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqReplicationImplAgentManagerImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqReplicationImplAgentManagerImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqReplicationImplAgentManagerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqReplicationImplAgentManagerImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JobTopics == input.JobTopics ||
                    (this.JobTopics != null &&
                    this.JobTopics.Equals(input.JobTopics))
                ) && 
                (
                    this.ServiceUserTarget == input.ServiceUserTarget ||
                    (this.ServiceUserTarget != null &&
                    this.ServiceUserTarget.Equals(input.ServiceUserTarget))
                ) && 
                (
                    this.AgentProviderTarget == input.AgentProviderTarget ||
                    (this.AgentProviderTarget != null &&
                    this.AgentProviderTarget.Equals(input.AgentProviderTarget))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobTopics != null)
                    hashCode = hashCode * 59 + this.JobTopics.GetHashCode();
                if (this.ServiceUserTarget != null)
                    hashCode = hashCode * 59 + this.ServiceUserTarget.GetHashCode();
                if (this.AgentProviderTarget != null)
                    hashCode = hashCode * 59 + this.AgentProviderTarget.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
