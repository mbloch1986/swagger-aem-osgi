/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamInddProcessINDDMediaExtractProcessProperties : IEquatable<ComDayCqDamInddProcessINDDMediaExtractProcessProperties>
    { 
        /// <summary>
        /// Gets or Sets ProcessLabel
        /// </summary>
        [DataMember(Name="process.label")]
        public ConfigNodePropertyString ProcessLabel { get; set; }

        /// <summary>
        /// Gets or Sets CqDamInddPagesRegex
        /// </summary>
        [DataMember(Name="cq.dam.indd.pages.regex")]
        public ConfigNodePropertyString CqDamInddPagesRegex { get; set; }

        /// <summary>
        /// Gets or Sets IdsJobDecoupled
        /// </summary>
        [DataMember(Name="ids.job.decoupled")]
        public ConfigNodePropertyBoolean IdsJobDecoupled { get; set; }

        /// <summary>
        /// Gets or Sets IdsJobWorkflowModel
        /// </summary>
        [DataMember(Name="ids.job.workflow.model")]
        public ConfigNodePropertyString IdsJobWorkflowModel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamInddProcessINDDMediaExtractProcessProperties {\n");
            sb.Append("  ProcessLabel: ").Append(ProcessLabel).Append("\n");
            sb.Append("  CqDamInddPagesRegex: ").Append(CqDamInddPagesRegex).Append("\n");
            sb.Append("  IdsJobDecoupled: ").Append(IdsJobDecoupled).Append("\n");
            sb.Append("  IdsJobWorkflowModel: ").Append(IdsJobWorkflowModel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqDamInddProcessINDDMediaExtractProcessProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqDamInddProcessINDDMediaExtractProcessProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqDamInddProcessINDDMediaExtractProcessProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamInddProcessINDDMediaExtractProcessProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProcessLabel == other.ProcessLabel ||
                    ProcessLabel != null &&
                    ProcessLabel.Equals(other.ProcessLabel)
                ) && 
                (
                    CqDamInddPagesRegex == other.CqDamInddPagesRegex ||
                    CqDamInddPagesRegex != null &&
                    CqDamInddPagesRegex.Equals(other.CqDamInddPagesRegex)
                ) && 
                (
                    IdsJobDecoupled == other.IdsJobDecoupled ||
                    IdsJobDecoupled != null &&
                    IdsJobDecoupled.Equals(other.IdsJobDecoupled)
                ) && 
                (
                    IdsJobWorkflowModel == other.IdsJobWorkflowModel ||
                    IdsJobWorkflowModel != null &&
                    IdsJobWorkflowModel.Equals(other.IdsJobWorkflowModel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProcessLabel != null)
                    hashCode = hashCode * 59 + ProcessLabel.GetHashCode();
                    if (CqDamInddPagesRegex != null)
                    hashCode = hashCode * 59 + CqDamInddPagesRegex.GetHashCode();
                    if (IdsJobDecoupled != null)
                    hashCode = hashCode * 59 + IdsJobDecoupled.GetHashCode();
                    if (IdsJobWorkflowModel != null)
                    hashCode = hashCode * 59 + IdsJobWorkflowModel.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqDamInddProcessINDDMediaExtractProcessProperties left, ComDayCqDamInddProcessINDDMediaExtractProcessProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqDamInddProcessINDDMediaExtractProcessProperties left, ComDayCqDamInddProcessINDDMediaExtractProcessProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
