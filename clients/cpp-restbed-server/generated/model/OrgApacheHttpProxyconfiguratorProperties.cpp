/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheHttpProxyconfiguratorProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheHttpProxyconfiguratorProperties::OrgApacheHttpProxyconfiguratorProperties()
{
    
}

OrgApacheHttpProxyconfiguratorProperties::~OrgApacheHttpProxyconfiguratorProperties()
{
}

std::string OrgApacheHttpProxyconfiguratorProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheHttpProxyconfiguratorProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheHttpProxyconfiguratorProperties::getProxyEnabled() const
{
    return m_Proxy_enabled;
}
void OrgApacheHttpProxyconfiguratorProperties::setProxyEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Proxy_enabled = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheHttpProxyconfiguratorProperties::getProxyHost() const
{
    return m_Proxy_host;
}
void OrgApacheHttpProxyconfiguratorProperties::setProxyHost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Proxy_host = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheHttpProxyconfiguratorProperties::getProxyPort() const
{
    return m_Proxy_port;
}
void OrgApacheHttpProxyconfiguratorProperties::setProxyPort(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Proxy_port = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheHttpProxyconfiguratorProperties::getProxyUser() const
{
    return m_Proxy_user;
}
void OrgApacheHttpProxyconfiguratorProperties::setProxyUser(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Proxy_user = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheHttpProxyconfiguratorProperties::getProxyPassword() const
{
    return m_Proxy_password;
}
void OrgApacheHttpProxyconfiguratorProperties::setProxyPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Proxy_password = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheHttpProxyconfiguratorProperties::getProxyExceptions() const
{
    return m_Proxy_exceptions;
}
void OrgApacheHttpProxyconfiguratorProperties::setProxyExceptions(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Proxy_exceptions = value;
}

}
}
}
}

