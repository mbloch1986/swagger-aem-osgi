note
 description:"[
		Adobe Experience Manager OSGI config (AEM) API
 		Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
  		OpenAPI spec version: 1.0.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class COM_ADOBE_CQ_SCREENS_MQ_ACTIVEMQ_IMPL_ARTEMIS_JMS_PROVIDER_PROPERTIES 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    service_ranking: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    global_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    max_disk_usage: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    persistence_enabled: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    thread_pool_max_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    scheduled_thread_pool_max_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    graceful_shutdown_timeout: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    queues: detachable CONFIG_NODE_PROPERTY_ARRAY 
      
    topics: detachable CONFIG_NODE_PROPERTY_ARRAY 
      
    addresses_max_delivery_attempts: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    addresses_expiry_delay: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    addresses_address_full_message_policy: detachable CONFIG_NODE_PROPERTY_DROP_DOWN 
      
    addresses_max_size_bytes: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    addresses_page_size_bytes: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    addresses_page_cache_max_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_user: detachable CONFIG_NODE_PROPERTY_STRING 
      
    cluster_password: detachable CONFIG_NODE_PROPERTY_STRING 
      
    cluster_call_timeout: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_call_failover_timeout: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_client_failure_check_period: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_notification_attempts: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_notification_interval: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    id_cache_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_confirmation_window_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_connection_ttl: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_duplicate_detection: detachable CONFIG_NODE_PROPERTY_BOOLEAN 
      
    cluster_initial_connect_attempts: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_max_retry_interval: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_min_large_message_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_producer_window_size: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_reconnect_attempts: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_retry_interval: detachable CONFIG_NODE_PROPERTY_INTEGER 
      
    cluster_retry_interval_multiplier: detachable CONFIG_NODE_PROPERTY_FLOAT 
      

feature -- Change Element  
 
    set_service_ranking (a_name: like service_ranking)
        -- Set 'service_ranking' with 'a_name'.
      do
        service_ranking := a_name
      ensure
        service_ranking_set: service_ranking = a_name		
      end

    set_global_size (a_name: like global_size)
        -- Set 'global_size' with 'a_name'.
      do
        global_size := a_name
      ensure
        global_size_set: global_size = a_name		
      end

    set_max_disk_usage (a_name: like max_disk_usage)
        -- Set 'max_disk_usage' with 'a_name'.
      do
        max_disk_usage := a_name
      ensure
        max_disk_usage_set: max_disk_usage = a_name		
      end

    set_persistence_enabled (a_name: like persistence_enabled)
        -- Set 'persistence_enabled' with 'a_name'.
      do
        persistence_enabled := a_name
      ensure
        persistence_enabled_set: persistence_enabled = a_name		
      end

    set_thread_pool_max_size (a_name: like thread_pool_max_size)
        -- Set 'thread_pool_max_size' with 'a_name'.
      do
        thread_pool_max_size := a_name
      ensure
        thread_pool_max_size_set: thread_pool_max_size = a_name		
      end

    set_scheduled_thread_pool_max_size (a_name: like scheduled_thread_pool_max_size)
        -- Set 'scheduled_thread_pool_max_size' with 'a_name'.
      do
        scheduled_thread_pool_max_size := a_name
      ensure
        scheduled_thread_pool_max_size_set: scheduled_thread_pool_max_size = a_name		
      end

    set_graceful_shutdown_timeout (a_name: like graceful_shutdown_timeout)
        -- Set 'graceful_shutdown_timeout' with 'a_name'.
      do
        graceful_shutdown_timeout := a_name
      ensure
        graceful_shutdown_timeout_set: graceful_shutdown_timeout = a_name		
      end

    set_queues (a_name: like queues)
        -- Set 'queues' with 'a_name'.
      do
        queues := a_name
      ensure
        queues_set: queues = a_name		
      end

    set_topics (a_name: like topics)
        -- Set 'topics' with 'a_name'.
      do
        topics := a_name
      ensure
        topics_set: topics = a_name		
      end

    set_addresses_max_delivery_attempts (a_name: like addresses_max_delivery_attempts)
        -- Set 'addresses_max_delivery_attempts' with 'a_name'.
      do
        addresses_max_delivery_attempts := a_name
      ensure
        addresses_max_delivery_attempts_set: addresses_max_delivery_attempts = a_name		
      end

    set_addresses_expiry_delay (a_name: like addresses_expiry_delay)
        -- Set 'addresses_expiry_delay' with 'a_name'.
      do
        addresses_expiry_delay := a_name
      ensure
        addresses_expiry_delay_set: addresses_expiry_delay = a_name		
      end

    set_addresses_address_full_message_policy (a_name: like addresses_address_full_message_policy)
        -- Set 'addresses_address_full_message_policy' with 'a_name'.
      do
        addresses_address_full_message_policy := a_name
      ensure
        addresses_address_full_message_policy_set: addresses_address_full_message_policy = a_name		
      end

    set_addresses_max_size_bytes (a_name: like addresses_max_size_bytes)
        -- Set 'addresses_max_size_bytes' with 'a_name'.
      do
        addresses_max_size_bytes := a_name
      ensure
        addresses_max_size_bytes_set: addresses_max_size_bytes = a_name		
      end

    set_addresses_page_size_bytes (a_name: like addresses_page_size_bytes)
        -- Set 'addresses_page_size_bytes' with 'a_name'.
      do
        addresses_page_size_bytes := a_name
      ensure
        addresses_page_size_bytes_set: addresses_page_size_bytes = a_name		
      end

    set_addresses_page_cache_max_size (a_name: like addresses_page_cache_max_size)
        -- Set 'addresses_page_cache_max_size' with 'a_name'.
      do
        addresses_page_cache_max_size := a_name
      ensure
        addresses_page_cache_max_size_set: addresses_page_cache_max_size = a_name		
      end

    set_cluster_user (a_name: like cluster_user)
        -- Set 'cluster_user' with 'a_name'.
      do
        cluster_user := a_name
      ensure
        cluster_user_set: cluster_user = a_name		
      end

    set_cluster_password (a_name: like cluster_password)
        -- Set 'cluster_password' with 'a_name'.
      do
        cluster_password := a_name
      ensure
        cluster_password_set: cluster_password = a_name		
      end

    set_cluster_call_timeout (a_name: like cluster_call_timeout)
        -- Set 'cluster_call_timeout' with 'a_name'.
      do
        cluster_call_timeout := a_name
      ensure
        cluster_call_timeout_set: cluster_call_timeout = a_name		
      end

    set_cluster_call_failover_timeout (a_name: like cluster_call_failover_timeout)
        -- Set 'cluster_call_failover_timeout' with 'a_name'.
      do
        cluster_call_failover_timeout := a_name
      ensure
        cluster_call_failover_timeout_set: cluster_call_failover_timeout = a_name		
      end

    set_cluster_client_failure_check_period (a_name: like cluster_client_failure_check_period)
        -- Set 'cluster_client_failure_check_period' with 'a_name'.
      do
        cluster_client_failure_check_period := a_name
      ensure
        cluster_client_failure_check_period_set: cluster_client_failure_check_period = a_name		
      end

    set_cluster_notification_attempts (a_name: like cluster_notification_attempts)
        -- Set 'cluster_notification_attempts' with 'a_name'.
      do
        cluster_notification_attempts := a_name
      ensure
        cluster_notification_attempts_set: cluster_notification_attempts = a_name		
      end

    set_cluster_notification_interval (a_name: like cluster_notification_interval)
        -- Set 'cluster_notification_interval' with 'a_name'.
      do
        cluster_notification_interval := a_name
      ensure
        cluster_notification_interval_set: cluster_notification_interval = a_name		
      end

    set_id_cache_size (a_name: like id_cache_size)
        -- Set 'id_cache_size' with 'a_name'.
      do
        id_cache_size := a_name
      ensure
        id_cache_size_set: id_cache_size = a_name		
      end

    set_cluster_confirmation_window_size (a_name: like cluster_confirmation_window_size)
        -- Set 'cluster_confirmation_window_size' with 'a_name'.
      do
        cluster_confirmation_window_size := a_name
      ensure
        cluster_confirmation_window_size_set: cluster_confirmation_window_size = a_name		
      end

    set_cluster_connection_ttl (a_name: like cluster_connection_ttl)
        -- Set 'cluster_connection_ttl' with 'a_name'.
      do
        cluster_connection_ttl := a_name
      ensure
        cluster_connection_ttl_set: cluster_connection_ttl = a_name		
      end

    set_cluster_duplicate_detection (a_name: like cluster_duplicate_detection)
        -- Set 'cluster_duplicate_detection' with 'a_name'.
      do
        cluster_duplicate_detection := a_name
      ensure
        cluster_duplicate_detection_set: cluster_duplicate_detection = a_name		
      end

    set_cluster_initial_connect_attempts (a_name: like cluster_initial_connect_attempts)
        -- Set 'cluster_initial_connect_attempts' with 'a_name'.
      do
        cluster_initial_connect_attempts := a_name
      ensure
        cluster_initial_connect_attempts_set: cluster_initial_connect_attempts = a_name		
      end

    set_cluster_max_retry_interval (a_name: like cluster_max_retry_interval)
        -- Set 'cluster_max_retry_interval' with 'a_name'.
      do
        cluster_max_retry_interval := a_name
      ensure
        cluster_max_retry_interval_set: cluster_max_retry_interval = a_name		
      end

    set_cluster_min_large_message_size (a_name: like cluster_min_large_message_size)
        -- Set 'cluster_min_large_message_size' with 'a_name'.
      do
        cluster_min_large_message_size := a_name
      ensure
        cluster_min_large_message_size_set: cluster_min_large_message_size = a_name		
      end

    set_cluster_producer_window_size (a_name: like cluster_producer_window_size)
        -- Set 'cluster_producer_window_size' with 'a_name'.
      do
        cluster_producer_window_size := a_name
      ensure
        cluster_producer_window_size_set: cluster_producer_window_size = a_name		
      end

    set_cluster_reconnect_attempts (a_name: like cluster_reconnect_attempts)
        -- Set 'cluster_reconnect_attempts' with 'a_name'.
      do
        cluster_reconnect_attempts := a_name
      ensure
        cluster_reconnect_attempts_set: cluster_reconnect_attempts = a_name		
      end

    set_cluster_retry_interval (a_name: like cluster_retry_interval)
        -- Set 'cluster_retry_interval' with 'a_name'.
      do
        cluster_retry_interval := a_name
      ensure
        cluster_retry_interval_set: cluster_retry_interval = a_name		
      end

    set_cluster_retry_interval_multiplier (a_name: like cluster_retry_interval_multiplier)
        -- Set 'cluster_retry_interval_multiplier' with 'a_name'.
      do
        cluster_retry_interval_multiplier := a_name
      ensure
        cluster_retry_interval_multiplier_set: cluster_retry_interval_multiplier = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass COM_ADOBE_CQ_SCREENS_MQ_ACTIVEMQ_IMPL_ARTEMIS_JMS_PROVIDER_PROPERTIES%N")
        if attached service_ranking as l_service_ranking then
          Result.append ("%Nservice_ranking:")
          Result.append (l_service_ranking.out)
          Result.append ("%N")    
        end  
        if attached global_size as l_global_size then
          Result.append ("%Nglobal_size:")
          Result.append (l_global_size.out)
          Result.append ("%N")    
        end  
        if attached max_disk_usage as l_max_disk_usage then
          Result.append ("%Nmax_disk_usage:")
          Result.append (l_max_disk_usage.out)
          Result.append ("%N")    
        end  
        if attached persistence_enabled as l_persistence_enabled then
          Result.append ("%Npersistence_enabled:")
          Result.append (l_persistence_enabled.out)
          Result.append ("%N")    
        end  
        if attached thread_pool_max_size as l_thread_pool_max_size then
          Result.append ("%Nthread_pool_max_size:")
          Result.append (l_thread_pool_max_size.out)
          Result.append ("%N")    
        end  
        if attached scheduled_thread_pool_max_size as l_scheduled_thread_pool_max_size then
          Result.append ("%Nscheduled_thread_pool_max_size:")
          Result.append (l_scheduled_thread_pool_max_size.out)
          Result.append ("%N")    
        end  
        if attached graceful_shutdown_timeout as l_graceful_shutdown_timeout then
          Result.append ("%Ngraceful_shutdown_timeout:")
          Result.append (l_graceful_shutdown_timeout.out)
          Result.append ("%N")    
        end  
        if attached queues as l_queues then
          Result.append ("%Nqueues:")
          Result.append (l_queues.out)
          Result.append ("%N")    
        end  
        if attached topics as l_topics then
          Result.append ("%Ntopics:")
          Result.append (l_topics.out)
          Result.append ("%N")    
        end  
        if attached addresses_max_delivery_attempts as l_addresses_max_delivery_attempts then
          Result.append ("%Naddresses_max_delivery_attempts:")
          Result.append (l_addresses_max_delivery_attempts.out)
          Result.append ("%N")    
        end  
        if attached addresses_expiry_delay as l_addresses_expiry_delay then
          Result.append ("%Naddresses_expiry_delay:")
          Result.append (l_addresses_expiry_delay.out)
          Result.append ("%N")    
        end  
        if attached addresses_address_full_message_policy as l_addresses_address_full_message_policy then
          Result.append ("%Naddresses_address_full_message_policy:")
          Result.append (l_addresses_address_full_message_policy.out)
          Result.append ("%N")    
        end  
        if attached addresses_max_size_bytes as l_addresses_max_size_bytes then
          Result.append ("%Naddresses_max_size_bytes:")
          Result.append (l_addresses_max_size_bytes.out)
          Result.append ("%N")    
        end  
        if attached addresses_page_size_bytes as l_addresses_page_size_bytes then
          Result.append ("%Naddresses_page_size_bytes:")
          Result.append (l_addresses_page_size_bytes.out)
          Result.append ("%N")    
        end  
        if attached addresses_page_cache_max_size as l_addresses_page_cache_max_size then
          Result.append ("%Naddresses_page_cache_max_size:")
          Result.append (l_addresses_page_cache_max_size.out)
          Result.append ("%N")    
        end  
        if attached cluster_user as l_cluster_user then
          Result.append ("%Ncluster_user:")
          Result.append (l_cluster_user.out)
          Result.append ("%N")    
        end  
        if attached cluster_password as l_cluster_password then
          Result.append ("%Ncluster_password:")
          Result.append (l_cluster_password.out)
          Result.append ("%N")    
        end  
        if attached cluster_call_timeout as l_cluster_call_timeout then
          Result.append ("%Ncluster_call_timeout:")
          Result.append (l_cluster_call_timeout.out)
          Result.append ("%N")    
        end  
        if attached cluster_call_failover_timeout as l_cluster_call_failover_timeout then
          Result.append ("%Ncluster_call_failover_timeout:")
          Result.append (l_cluster_call_failover_timeout.out)
          Result.append ("%N")    
        end  
        if attached cluster_client_failure_check_period as l_cluster_client_failure_check_period then
          Result.append ("%Ncluster_client_failure_check_period:")
          Result.append (l_cluster_client_failure_check_period.out)
          Result.append ("%N")    
        end  
        if attached cluster_notification_attempts as l_cluster_notification_attempts then
          Result.append ("%Ncluster_notification_attempts:")
          Result.append (l_cluster_notification_attempts.out)
          Result.append ("%N")    
        end  
        if attached cluster_notification_interval as l_cluster_notification_interval then
          Result.append ("%Ncluster_notification_interval:")
          Result.append (l_cluster_notification_interval.out)
          Result.append ("%N")    
        end  
        if attached id_cache_size as l_id_cache_size then
          Result.append ("%Nid_cache_size:")
          Result.append (l_id_cache_size.out)
          Result.append ("%N")    
        end  
        if attached cluster_confirmation_window_size as l_cluster_confirmation_window_size then
          Result.append ("%Ncluster_confirmation_window_size:")
          Result.append (l_cluster_confirmation_window_size.out)
          Result.append ("%N")    
        end  
        if attached cluster_connection_ttl as l_cluster_connection_ttl then
          Result.append ("%Ncluster_connection_ttl:")
          Result.append (l_cluster_connection_ttl.out)
          Result.append ("%N")    
        end  
        if attached cluster_duplicate_detection as l_cluster_duplicate_detection then
          Result.append ("%Ncluster_duplicate_detection:")
          Result.append (l_cluster_duplicate_detection.out)
          Result.append ("%N")    
        end  
        if attached cluster_initial_connect_attempts as l_cluster_initial_connect_attempts then
          Result.append ("%Ncluster_initial_connect_attempts:")
          Result.append (l_cluster_initial_connect_attempts.out)
          Result.append ("%N")    
        end  
        if attached cluster_max_retry_interval as l_cluster_max_retry_interval then
          Result.append ("%Ncluster_max_retry_interval:")
          Result.append (l_cluster_max_retry_interval.out)
          Result.append ("%N")    
        end  
        if attached cluster_min_large_message_size as l_cluster_min_large_message_size then
          Result.append ("%Ncluster_min_large_message_size:")
          Result.append (l_cluster_min_large_message_size.out)
          Result.append ("%N")    
        end  
        if attached cluster_producer_window_size as l_cluster_producer_window_size then
          Result.append ("%Ncluster_producer_window_size:")
          Result.append (l_cluster_producer_window_size.out)
          Result.append ("%N")    
        end  
        if attached cluster_reconnect_attempts as l_cluster_reconnect_attempts then
          Result.append ("%Ncluster_reconnect_attempts:")
          Result.append (l_cluster_reconnect_attempts.out)
          Result.append ("%N")    
        end  
        if attached cluster_retry_interval as l_cluster_retry_interval then
          Result.append ("%Ncluster_retry_interval:")
          Result.append (l_cluster_retry_interval.out)
          Result.append ("%N")    
        end  
        if attached cluster_retry_interval_multiplier as l_cluster_retry_interval_multiplier then
          Result.append ("%Ncluster_retry_interval_multiplier:")
          Result.append (l_cluster_retry_interval_multiplier.out)
          Result.append ("%N")    
        end  
      end
end


