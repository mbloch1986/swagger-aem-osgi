/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties()
{
    m_PoolSizeIsSet = false;
    m_MaxPoolSizeIsSet = false;
    m_QueueSizeIsSet = false;
    m_KeepAliveTimeIsSet = false;
}

ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::~ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties()
{
}

void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PoolSizeIsSet)
    {
        val[utility::conversions::to_string_t("poolSize")] = ModelBase::toJson(m_PoolSize);
    }
    if(m_MaxPoolSizeIsSet)
    {
        val[utility::conversions::to_string_t("maxPoolSize")] = ModelBase::toJson(m_MaxPoolSize);
    }
    if(m_QueueSizeIsSet)
    {
        val[utility::conversions::to_string_t("queueSize")] = ModelBase::toJson(m_QueueSize);
    }
    if(m_KeepAliveTimeIsSet)
    {
        val[utility::conversions::to_string_t("keepAliveTime")] = ModelBase::toJson(m_KeepAliveTime);
    }

    return val;
}

void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("poolSize")))
    {
        if(!val[utility::conversions::to_string_t("poolSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("poolSize")]);
            setPoolSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxPoolSize")))
    {
        if(!val[utility::conversions::to_string_t("maxPoolSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxPoolSize")]);
            setMaxPoolSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queueSize")))
    {
        if(!val[utility::conversions::to_string_t("queueSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("queueSize")]);
            setQueueSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("keepAliveTime")))
    {
        if(!val[utility::conversions::to_string_t("keepAliveTime")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("keepAliveTime")]);
            setKeepAliveTime( newItem );
        }
    }
}

void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PoolSizeIsSet)
    {
        if (m_PoolSize.get())
        {
            m_PoolSize->toMultipart(multipart, utility::conversions::to_string_t("poolSize."));
        }
    }
    if(m_MaxPoolSizeIsSet)
    {
        if (m_MaxPoolSize.get())
        {
            m_MaxPoolSize->toMultipart(multipart, utility::conversions::to_string_t("maxPoolSize."));
        }
    }
    if(m_QueueSizeIsSet)
    {
        if (m_QueueSize.get())
        {
            m_QueueSize->toMultipart(multipart, utility::conversions::to_string_t("queueSize."));
        }
    }
    if(m_KeepAliveTimeIsSet)
    {
        if (m_KeepAliveTime.get())
        {
            m_KeepAliveTime->toMultipart(multipart, utility::conversions::to_string_t("keepAliveTime."));
        }
    }
}

void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("poolSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("poolSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("poolSize."));
            setPoolSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxPoolSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxPoolSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxPoolSize."));
            setMaxPoolSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queueSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queueSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queueSize."));
            setQueueSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("keepAliveTime")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("keepAliveTime")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("keepAliveTime."));
            setKeepAliveTime( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getPoolSize() const
{
    return m_PoolSize;
}


void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PoolSize = value;
    m_PoolSizeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::poolSizeIsSet() const
{
    return m_PoolSizeIsSet;
}

void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::unsetPoolSize()
{
    m_PoolSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getMaxPoolSize() const
{
    return m_MaxPoolSize;
}


void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setMaxPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxPoolSize = value;
    m_MaxPoolSizeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::maxPoolSizeIsSet() const
{
    return m_MaxPoolSizeIsSet;
}

void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::unsetMaxPoolSize()
{
    m_MaxPoolSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getQueueSize() const
{
    return m_QueueSize;
}


void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_QueueSize = value;
    m_QueueSizeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::queueSizeIsSet() const
{
    return m_QueueSizeIsSet;
}

void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::unsetQueueSize()
{
    m_QueueSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::getKeepAliveTime() const
{
    return m_KeepAliveTime;
}


void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::setKeepAliveTime(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_KeepAliveTime = value;
    m_KeepAliveTimeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::keepAliveTimeIsSet() const
{
    return m_KeepAliveTimeIsSet;
}

void ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties::unsetKeepAliveTime()
{
    m_KeepAliveTimeIsSet = false;
}

}
}
}
}

