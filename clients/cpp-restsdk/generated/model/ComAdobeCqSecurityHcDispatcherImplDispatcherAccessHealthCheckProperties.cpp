/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties()
{
    m_Hc_tagsIsSet = false;
    m_Dispatcher_addressIsSet = false;
    m_Dispatcher_filter_allowedIsSet = false;
    m_Dispatcher_filter_blockedIsSet = false;
}

ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::~ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties()
{
}

void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Hc_tagsIsSet)
    {
        val[utility::conversions::to_string_t("hc.tags")] = ModelBase::toJson(m_Hc_tags);
    }
    if(m_Dispatcher_addressIsSet)
    {
        val[utility::conversions::to_string_t("dispatcher.address")] = ModelBase::toJson(m_Dispatcher_address);
    }
    if(m_Dispatcher_filter_allowedIsSet)
    {
        val[utility::conversions::to_string_t("dispatcher.filter.allowed")] = ModelBase::toJson(m_Dispatcher_filter_allowed);
    }
    if(m_Dispatcher_filter_blockedIsSet)
    {
        val[utility::conversions::to_string_t("dispatcher.filter.blocked")] = ModelBase::toJson(m_Dispatcher_filter_blocked);
    }

    return val;
}

void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("hc.tags")))
    {
        if(!val[utility::conversions::to_string_t("hc.tags")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("hc.tags")]);
            setHcTags( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dispatcher.address")))
    {
        if(!val[utility::conversions::to_string_t("dispatcher.address")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("dispatcher.address")]);
            setDispatcherAddress( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dispatcher.filter.allowed")))
    {
        if(!val[utility::conversions::to_string_t("dispatcher.filter.allowed")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("dispatcher.filter.allowed")]);
            setDispatcherFilterAllowed( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dispatcher.filter.blocked")))
    {
        if(!val[utility::conversions::to_string_t("dispatcher.filter.blocked")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("dispatcher.filter.blocked")]);
            setDispatcherFilterBlocked( newItem );
        }
    }
}

void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Hc_tagsIsSet)
    {
        if (m_Hc_tags.get())
        {
            m_Hc_tags->toMultipart(multipart, utility::conversions::to_string_t("hc.tags."));
        }
    }
    if(m_Dispatcher_addressIsSet)
    {
        if (m_Dispatcher_address.get())
        {
            m_Dispatcher_address->toMultipart(multipart, utility::conversions::to_string_t("dispatcher.address."));
        }
    }
    if(m_Dispatcher_filter_allowedIsSet)
    {
        if (m_Dispatcher_filter_allowed.get())
        {
            m_Dispatcher_filter_allowed->toMultipart(multipart, utility::conversions::to_string_t("dispatcher.filter.allowed."));
        }
    }
    if(m_Dispatcher_filter_blockedIsSet)
    {
        if (m_Dispatcher_filter_blocked.get())
        {
            m_Dispatcher_filter_blocked->toMultipart(multipart, utility::conversions::to_string_t("dispatcher.filter.blocked."));
        }
    }
}

void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("hc.tags")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("hc.tags")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("hc.tags."));
            setHcTags( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dispatcher.address")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dispatcher.address")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dispatcher.address."));
            setDispatcherAddress( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dispatcher.filter.allowed")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dispatcher.filter.allowed")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dispatcher.filter.allowed."));
            setDispatcherFilterAllowed( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dispatcher.filter.blocked")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dispatcher.filter.blocked")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dispatcher.filter.blocked."));
            setDispatcherFilterBlocked( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getHcTags() const
{
    return m_Hc_tags;
}


void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setHcTags(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Hc_tags = value;
    m_Hc_tagsIsSet = true;
}
bool ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::hcTagsIsSet() const
{
    return m_Hc_tagsIsSet;
}

void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::unsetHc_tags()
{
    m_Hc_tagsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getDispatcherAddress() const
{
    return m_Dispatcher_address;
}


void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setDispatcherAddress(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Dispatcher_address = value;
    m_Dispatcher_addressIsSet = true;
}
bool ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::dispatcherAddressIsSet() const
{
    return m_Dispatcher_addressIsSet;
}

void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::unsetDispatcher_address()
{
    m_Dispatcher_addressIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getDispatcherFilterAllowed() const
{
    return m_Dispatcher_filter_allowed;
}


void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setDispatcherFilterAllowed(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Dispatcher_filter_allowed = value;
    m_Dispatcher_filter_allowedIsSet = true;
}
bool ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::dispatcherFilterAllowedIsSet() const
{
    return m_Dispatcher_filter_allowedIsSet;
}

void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::unsetDispatcher_filter_allowed()
{
    m_Dispatcher_filter_allowedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::getDispatcherFilterBlocked() const
{
    return m_Dispatcher_filter_blocked;
}


void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::setDispatcherFilterBlocked(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Dispatcher_filter_blocked = value;
    m_Dispatcher_filter_blockedIsSet = true;
}
bool ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::dispatcherFilterBlockedIsSet() const
{
    return m_Dispatcher_filter_blockedIsSet;
}

void ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties::unsetDispatcher_filter_blocked()
{
    m_Dispatcher_filter_blockedIsSet = false;
}

}
}
}
}

