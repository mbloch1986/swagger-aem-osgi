/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties()
{
    m_Cq_dam_config_annotation_pdf_document_widthIsSet = false;
    m_Cq_dam_config_annotation_pdf_document_heightIsSet = false;
    m_Cq_dam_config_annotation_pdf_document_padding_horizontalIsSet = false;
    m_Cq_dam_config_annotation_pdf_document_padding_verticalIsSet = false;
    m_Cq_dam_config_annotation_pdf_font_sizeIsSet = false;
    m_Cq_dam_config_annotation_pdf_font_colorIsSet = false;
    m_Cq_dam_config_annotation_pdf_font_familyIsSet = false;
    m_Cq_dam_config_annotation_pdf_font_lightIsSet = false;
    m_Cq_dam_config_annotation_pdf_marginTextImageIsSet = false;
    m_Cq_dam_config_annotation_pdf_minImageHeightIsSet = false;
    m_Cq_dam_config_annotation_pdf_reviewStatus_widthIsSet = false;
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_approvedIsSet = false;
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejectedIsSet = false;
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequestedIsSet = false;
    m_Cq_dam_config_annotation_pdf_annotationMarker_widthIsSet = false;
    m_Cq_dam_config_annotation_pdf_asset_minheightIsSet = false;
}

ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::~ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties()
{
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_config_annotation_pdf_document_widthIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.width")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_document_width);
    }
    if(m_Cq_dam_config_annotation_pdf_document_heightIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.height")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_document_height);
    }
    if(m_Cq_dam_config_annotation_pdf_document_padding_horizontalIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.horizontal")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_document_padding_horizontal);
    }
    if(m_Cq_dam_config_annotation_pdf_document_padding_verticalIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.vertical")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_document_padding_vertical);
    }
    if(m_Cq_dam_config_annotation_pdf_font_sizeIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.size")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_font_size);
    }
    if(m_Cq_dam_config_annotation_pdf_font_colorIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.color")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_font_color);
    }
    if(m_Cq_dam_config_annotation_pdf_font_familyIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.family")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_font_family);
    }
    if(m_Cq_dam_config_annotation_pdf_font_lightIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.light")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_font_light);
    }
    if(m_Cq_dam_config_annotation_pdf_marginTextImageIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.marginTextImage")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_marginTextImage);
    }
    if(m_Cq_dam_config_annotation_pdf_minImageHeightIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.minImageHeight")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_minImageHeight);
    }
    if(m_Cq_dam_config_annotation_pdf_reviewStatus_widthIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.width")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_reviewStatus_width);
    }
    if(m_Cq_dam_config_annotation_pdf_reviewStatus_color_approvedIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.approved")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_reviewStatus_color_approved);
    }
    if(m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejectedIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.rejected")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejected);
    }
    if(m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequestedIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequested);
    }
    if(m_Cq_dam_config_annotation_pdf_annotationMarker_widthIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.annotationMarker.width")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_annotationMarker_width);
    }
    if(m_Cq_dam_config_annotation_pdf_asset_minheightIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.asset.minheight")] = ModelBase::toJson(m_Cq_dam_config_annotation_pdf_asset_minheight);
    }

    return val;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.width")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.width")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.width")]);
            setCqDamConfigAnnotationPdfDocumentWidth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.height")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.height")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.height")]);
            setCqDamConfigAnnotationPdfDocumentHeight( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.horizontal")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.horizontal")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.horizontal")]);
            setCqDamConfigAnnotationPdfDocumentPaddingHorizontal( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.vertical")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.vertical")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.vertical")]);
            setCqDamConfigAnnotationPdfDocumentPaddingVertical( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.size")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.size")]);
            setCqDamConfigAnnotationPdfFontSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.color")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.color")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.color")]);
            setCqDamConfigAnnotationPdfFontColor( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.family")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.family")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.family")]);
            setCqDamConfigAnnotationPdfFontFamily( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.light")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.light")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.light")]);
            setCqDamConfigAnnotationPdfFontLight( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.marginTextImage")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.marginTextImage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.marginTextImage")]);
            setCqDamConfigAnnotationPdfMarginTextImage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.minImageHeight")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.minImageHeight")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.minImageHeight")]);
            setCqDamConfigAnnotationPdfMinImageHeight( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.width")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.width")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.width")]);
            setCqDamConfigAnnotationPdfReviewStatusWidth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.approved")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.approved")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.approved")]);
            setCqDamConfigAnnotationPdfReviewStatusColorApproved( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.rejected")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.rejected")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.rejected")]);
            setCqDamConfigAnnotationPdfReviewStatusColorRejected( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested")]);
            setCqDamConfigAnnotationPdfReviewStatusColorChangesRequested( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.annotationMarker.width")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.annotationMarker.width")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.annotationMarker.width")]);
            setCqDamConfigAnnotationPdfAnnotationMarkerWidth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.asset.minheight")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.asset.minheight")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.config.annotation.pdf.asset.minheight")]);
            setCqDamConfigAnnotationPdfAssetMinheight( newItem );
        }
    }
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_config_annotation_pdf_document_widthIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_document_width.get())
        {
            m_Cq_dam_config_annotation_pdf_document_width->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.width."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_document_heightIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_document_height.get())
        {
            m_Cq_dam_config_annotation_pdf_document_height->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.height."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_document_padding_horizontalIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_document_padding_horizontal.get())
        {
            m_Cq_dam_config_annotation_pdf_document_padding_horizontal->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.horizontal."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_document_padding_verticalIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_document_padding_vertical.get())
        {
            m_Cq_dam_config_annotation_pdf_document_padding_vertical->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.vertical."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_font_sizeIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_font_size.get())
        {
            m_Cq_dam_config_annotation_pdf_font_size->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.size."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_font_colorIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_font_color.get())
        {
            m_Cq_dam_config_annotation_pdf_font_color->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.color."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_font_familyIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_font_family.get())
        {
            m_Cq_dam_config_annotation_pdf_font_family->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.family."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_font_lightIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_font_light.get())
        {
            m_Cq_dam_config_annotation_pdf_font_light->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.light."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_marginTextImageIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_marginTextImage.get())
        {
            m_Cq_dam_config_annotation_pdf_marginTextImage->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.marginTextImage."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_minImageHeightIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_minImageHeight.get())
        {
            m_Cq_dam_config_annotation_pdf_minImageHeight->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.minImageHeight."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_reviewStatus_widthIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_reviewStatus_width.get())
        {
            m_Cq_dam_config_annotation_pdf_reviewStatus_width->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.width."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_reviewStatus_color_approvedIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_reviewStatus_color_approved.get())
        {
            m_Cq_dam_config_annotation_pdf_reviewStatus_color_approved->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.approved."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejectedIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejected.get())
        {
            m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejected->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.rejected."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequestedIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequested.get())
        {
            m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequested->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_annotationMarker_widthIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_annotationMarker_width.get())
        {
            m_Cq_dam_config_annotation_pdf_annotationMarker_width->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.annotationMarker.width."));
        }
    }
    if(m_Cq_dam_config_annotation_pdf_asset_minheightIsSet)
    {
        if (m_Cq_dam_config_annotation_pdf_asset_minheight.get())
        {
            m_Cq_dam_config_annotation_pdf_asset_minheight->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.asset.minheight."));
        }
    }
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.width")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.width")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.width."));
            setCqDamConfigAnnotationPdfDocumentWidth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.height")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.height")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.height."));
            setCqDamConfigAnnotationPdfDocumentHeight( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.horizontal")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.horizontal")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.horizontal."));
            setCqDamConfigAnnotationPdfDocumentPaddingHorizontal( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.vertical")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.vertical")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.document.padding.vertical."));
            setCqDamConfigAnnotationPdfDocumentPaddingVertical( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.size")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.size."));
            setCqDamConfigAnnotationPdfFontSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.color")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.color")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.color."));
            setCqDamConfigAnnotationPdfFontColor( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.family")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.family")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.family."));
            setCqDamConfigAnnotationPdfFontFamily( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.light")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.light")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.font.light."));
            setCqDamConfigAnnotationPdfFontLight( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.marginTextImage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.marginTextImage")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.marginTextImage."));
            setCqDamConfigAnnotationPdfMarginTextImage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.minImageHeight")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.minImageHeight")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.minImageHeight."));
            setCqDamConfigAnnotationPdfMinImageHeight( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.width")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.width")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.width."));
            setCqDamConfigAnnotationPdfReviewStatusWidth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.approved")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.approved")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.approved."));
            setCqDamConfigAnnotationPdfReviewStatusColorApproved( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.rejected")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.rejected")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.rejected."));
            setCqDamConfigAnnotationPdfReviewStatusColorRejected( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested."));
            setCqDamConfigAnnotationPdfReviewStatusColorChangesRequested( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.annotationMarker.width")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.annotationMarker.width")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.annotationMarker.width."));
            setCqDamConfigAnnotationPdfAnnotationMarkerWidth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.asset.minheight")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.config.annotation.pdf.asset.minheight")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.config.annotation.pdf.asset.minheight."));
            setCqDamConfigAnnotationPdfAssetMinheight( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfDocumentWidth() const
{
    return m_Cq_dam_config_annotation_pdf_document_width;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfDocumentWidth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_config_annotation_pdf_document_width = value;
    m_Cq_dam_config_annotation_pdf_document_widthIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfDocumentWidthIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_document_widthIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_document_width()
{
    m_Cq_dam_config_annotation_pdf_document_widthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfDocumentHeight() const
{
    return m_Cq_dam_config_annotation_pdf_document_height;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfDocumentHeight(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_config_annotation_pdf_document_height = value;
    m_Cq_dam_config_annotation_pdf_document_heightIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfDocumentHeightIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_document_heightIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_document_height()
{
    m_Cq_dam_config_annotation_pdf_document_heightIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfDocumentPaddingHorizontal() const
{
    return m_Cq_dam_config_annotation_pdf_document_padding_horizontal;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfDocumentPaddingHorizontal(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_config_annotation_pdf_document_padding_horizontal = value;
    m_Cq_dam_config_annotation_pdf_document_padding_horizontalIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfDocumentPaddingHorizontalIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_document_padding_horizontalIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_document_padding_horizontal()
{
    m_Cq_dam_config_annotation_pdf_document_padding_horizontalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfDocumentPaddingVertical() const
{
    return m_Cq_dam_config_annotation_pdf_document_padding_vertical;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfDocumentPaddingVertical(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_config_annotation_pdf_document_padding_vertical = value;
    m_Cq_dam_config_annotation_pdf_document_padding_verticalIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfDocumentPaddingVerticalIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_document_padding_verticalIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_document_padding_vertical()
{
    m_Cq_dam_config_annotation_pdf_document_padding_verticalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfFontSize() const
{
    return m_Cq_dam_config_annotation_pdf_font_size;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfFontSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_config_annotation_pdf_font_size = value;
    m_Cq_dam_config_annotation_pdf_font_sizeIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfFontSizeIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_font_sizeIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_font_size()
{
    m_Cq_dam_config_annotation_pdf_font_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfFontColor() const
{
    return m_Cq_dam_config_annotation_pdf_font_color;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfFontColor(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_config_annotation_pdf_font_color = value;
    m_Cq_dam_config_annotation_pdf_font_colorIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfFontColorIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_font_colorIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_font_color()
{
    m_Cq_dam_config_annotation_pdf_font_colorIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfFontFamily() const
{
    return m_Cq_dam_config_annotation_pdf_font_family;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfFontFamily(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_config_annotation_pdf_font_family = value;
    m_Cq_dam_config_annotation_pdf_font_familyIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfFontFamilyIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_font_familyIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_font_family()
{
    m_Cq_dam_config_annotation_pdf_font_familyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfFontLight() const
{
    return m_Cq_dam_config_annotation_pdf_font_light;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfFontLight(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_config_annotation_pdf_font_light = value;
    m_Cq_dam_config_annotation_pdf_font_lightIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfFontLightIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_font_lightIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_font_light()
{
    m_Cq_dam_config_annotation_pdf_font_lightIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfMarginTextImage() const
{
    return m_Cq_dam_config_annotation_pdf_marginTextImage;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfMarginTextImage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_config_annotation_pdf_marginTextImage = value;
    m_Cq_dam_config_annotation_pdf_marginTextImageIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfMarginTextImageIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_marginTextImageIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_marginTextImage()
{
    m_Cq_dam_config_annotation_pdf_marginTextImageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfMinImageHeight() const
{
    return m_Cq_dam_config_annotation_pdf_minImageHeight;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfMinImageHeight(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_config_annotation_pdf_minImageHeight = value;
    m_Cq_dam_config_annotation_pdf_minImageHeightIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfMinImageHeightIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_minImageHeightIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_minImageHeight()
{
    m_Cq_dam_config_annotation_pdf_minImageHeightIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfReviewStatusWidth() const
{
    return m_Cq_dam_config_annotation_pdf_reviewStatus_width;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfReviewStatusWidth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_config_annotation_pdf_reviewStatus_width = value;
    m_Cq_dam_config_annotation_pdf_reviewStatus_widthIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfReviewStatusWidthIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_reviewStatus_widthIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_reviewStatus_width()
{
    m_Cq_dam_config_annotation_pdf_reviewStatus_widthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfReviewStatusColorApproved() const
{
    return m_Cq_dam_config_annotation_pdf_reviewStatus_color_approved;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfReviewStatusColorApproved(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_approved = value;
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_approvedIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfReviewStatusColorApprovedIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_reviewStatus_color_approvedIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_reviewStatus_color_approved()
{
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_approvedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfReviewStatusColorRejected() const
{
    return m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejected;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfReviewStatusColorRejected(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejected = value;
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejectedIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfReviewStatusColorRejectedIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejectedIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_reviewStatus_color_rejected()
{
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_rejectedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfReviewStatusColorChangesRequested() const
{
    return m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequested;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfReviewStatusColorChangesRequested(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequested = value;
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequestedIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfReviewStatusColorChangesRequestedIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequestedIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_reviewStatus_color_changesRequested()
{
    m_Cq_dam_config_annotation_pdf_reviewStatus_color_changesRequestedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfAnnotationMarkerWidth() const
{
    return m_Cq_dam_config_annotation_pdf_annotationMarker_width;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfAnnotationMarkerWidth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_config_annotation_pdf_annotationMarker_width = value;
    m_Cq_dam_config_annotation_pdf_annotationMarker_widthIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfAnnotationMarkerWidthIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_annotationMarker_widthIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_annotationMarker_width()
{
    m_Cq_dam_config_annotation_pdf_annotationMarker_widthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::getCqDamConfigAnnotationPdfAssetMinheight() const
{
    return m_Cq_dam_config_annotation_pdf_asset_minheight;
}


void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::setCqDamConfigAnnotationPdfAssetMinheight(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_config_annotation_pdf_asset_minheight = value;
    m_Cq_dam_config_annotation_pdf_asset_minheightIsSet = true;
}
bool ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::cqDamConfigAnnotationPdfAssetMinheightIsSet() const
{
    return m_Cq_dam_config_annotation_pdf_asset_minheightIsSet;
}

void ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties::unsetCq_dam_config_annotation_pdf_asset_minheight()
{
    m_Cq_dam_config_annotation_pdf_asset_minheightIsSet = false;
}

}
}
}
}

