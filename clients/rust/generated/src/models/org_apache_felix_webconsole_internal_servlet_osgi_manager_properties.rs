/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
  #[serde(rename = "manager.root")]
  manager_root: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "http.service.filter")]
  http_service_filter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "default.render")]
  default_render: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "realm")]
  realm: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "username")]
  username: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "password")]
  password: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "category")]
  category: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "locale")]
  locale: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "loglevel")]
  loglevel: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "plugins")]
  plugins: Option<::models::ConfigNodePropertyDropDown>
}

impl OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
  pub fn new() -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
      manager_root: None,
      http_service_filter: None,
      default_render: None,
      realm: None,
      username: None,
      password: None,
      category: None,
      locale: None,
      loglevel: None,
      plugins: None
    }
  }

  pub fn set_manager_root(&mut self, manager_root: ::models::ConfigNodePropertyString) {
    self.manager_root = Some(manager_root);
  }

  pub fn with_manager_root(mut self, manager_root: ::models::ConfigNodePropertyString) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    self.manager_root = Some(manager_root);
    self
  }

  pub fn manager_root(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.manager_root.as_ref()
  }

  pub fn reset_manager_root(&mut self) {
    self.manager_root = None;
  }

  pub fn set_http_service_filter(&mut self, http_service_filter: ::models::ConfigNodePropertyString) {
    self.http_service_filter = Some(http_service_filter);
  }

  pub fn with_http_service_filter(mut self, http_service_filter: ::models::ConfigNodePropertyString) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    self.http_service_filter = Some(http_service_filter);
    self
  }

  pub fn http_service_filter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.http_service_filter.as_ref()
  }

  pub fn reset_http_service_filter(&mut self) {
    self.http_service_filter = None;
  }

  pub fn set_default_render(&mut self, default_render: ::models::ConfigNodePropertyString) {
    self.default_render = Some(default_render);
  }

  pub fn with_default_render(mut self, default_render: ::models::ConfigNodePropertyString) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    self.default_render = Some(default_render);
    self
  }

  pub fn default_render(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.default_render.as_ref()
  }

  pub fn reset_default_render(&mut self) {
    self.default_render = None;
  }

  pub fn set_realm(&mut self, realm: ::models::ConfigNodePropertyString) {
    self.realm = Some(realm);
  }

  pub fn with_realm(mut self, realm: ::models::ConfigNodePropertyString) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    self.realm = Some(realm);
    self
  }

  pub fn realm(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.realm.as_ref()
  }

  pub fn reset_realm(&mut self) {
    self.realm = None;
  }

  pub fn set_username(&mut self, username: ::models::ConfigNodePropertyString) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: ::models::ConfigNodePropertyString) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

  pub fn set_password(&mut self, password: ::models::ConfigNodePropertyString) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: ::models::ConfigNodePropertyString) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

  pub fn set_category(&mut self, category: ::models::ConfigNodePropertyString) {
    self.category = Some(category);
  }

  pub fn with_category(mut self, category: ::models::ConfigNodePropertyString) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    self.category = Some(category);
    self
  }

  pub fn category(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.category.as_ref()
  }

  pub fn reset_category(&mut self) {
    self.category = None;
  }

  pub fn set_locale(&mut self, locale: ::models::ConfigNodePropertyString) {
    self.locale = Some(locale);
  }

  pub fn with_locale(mut self, locale: ::models::ConfigNodePropertyString) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    self.locale = Some(locale);
    self
  }

  pub fn locale(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.locale.as_ref()
  }

  pub fn reset_locale(&mut self) {
    self.locale = None;
  }

  pub fn set_loglevel(&mut self, loglevel: ::models::ConfigNodePropertyDropDown) {
    self.loglevel = Some(loglevel);
  }

  pub fn with_loglevel(mut self, loglevel: ::models::ConfigNodePropertyDropDown) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    self.loglevel = Some(loglevel);
    self
  }

  pub fn loglevel(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.loglevel.as_ref()
  }

  pub fn reset_loglevel(&mut self) {
    self.loglevel = None;
  }

  pub fn set_plugins(&mut self, plugins: ::models::ConfigNodePropertyDropDown) {
    self.plugins = Some(plugins);
  }

  pub fn with_plugins(mut self, plugins: ::models::ConfigNodePropertyDropDown) -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    self.plugins = Some(plugins);
    self
  }

  pub fn plugins(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.plugins.as_ref()
  }

  pub fn reset_plugins(&mut self) {
    self.plugins = None;
  }

}



