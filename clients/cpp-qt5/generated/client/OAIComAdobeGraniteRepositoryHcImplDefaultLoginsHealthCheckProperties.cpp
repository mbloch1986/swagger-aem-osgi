/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties() {
    init();
}

OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::~OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::init() {
    hc_tags = new OAIConfigNodePropertyArray();
    m_hc_tags_isSet = false;
    account_logins = new OAIConfigNodePropertyArray();
    m_account_logins_isSet = false;
    console_logins = new OAIConfigNodePropertyArray();
    m_console_logins_isSet = false;
}

void
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::cleanup() {
    if(hc_tags != nullptr) { 
        delete hc_tags;
    }
    if(account_logins != nullptr) { 
        delete account_logins;
    }
    if(console_logins != nullptr) { 
        delete console_logins;
    }
}

OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties*
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&hc_tags, pJson["hc.tags"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&account_logins, pJson["account.logins"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&console_logins, pJson["console.logins"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::asJsonObject() {
    QJsonObject obj;
    if((hc_tags != nullptr) && (hc_tags->isSet())){
        toJsonValue(QString("hc.tags"), hc_tags, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((account_logins != nullptr) && (account_logins->isSet())){
        toJsonValue(QString("account.logins"), account_logins, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((console_logins != nullptr) && (console_logins->isSet())){
        toJsonValue(QString("console.logins"), console_logins, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::getHcTags() {
    return hc_tags;
}
void
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::setHcTags(OAIConfigNodePropertyArray* hc_tags) {
    this->hc_tags = hc_tags;
    this->m_hc_tags_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::getAccountLogins() {
    return account_logins;
}
void
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::setAccountLogins(OAIConfigNodePropertyArray* account_logins) {
    this->account_logins = account_logins;
    this->m_account_logins_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::getConsoleLogins() {
    return console_logins;
}
void
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::setConsoleLogins(OAIConfigNodePropertyArray* console_logins) {
    this->console_logins = console_logins;
    this->m_console_logins_isSet = true;
}


bool
OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(hc_tags != nullptr && hc_tags->isSet()){ isObjectUpdated = true; break;}
        if(account_logins != nullptr && account_logins->isSet()){ isObjectUpdated = true; break;}
        if(console_logins != nullptr && console_logins->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

