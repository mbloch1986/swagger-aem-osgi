/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComDayCqStatisticsImplStatisticsServiceImplProperties.h
 *
 * 
 */

#ifndef ComDayCqStatisticsImplStatisticsServiceImplProperties_H_
#define ComDayCqStatisticsImplStatisticsServiceImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqStatisticsImplStatisticsServiceImplProperties
    : public ModelBase
{
public:
    ComDayCqStatisticsImplStatisticsServiceImplProperties();
    virtual ~ComDayCqStatisticsImplStatisticsServiceImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComDayCqStatisticsImplStatisticsServiceImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getSchedulerPeriod() const;
    void setSchedulerPeriod(ConfigNodePropertyInteger const& value);
    bool schedulerPeriodIsSet() const;
    void unsetScheduler_period();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getSchedulerConcurrent() const;
    void setSchedulerConcurrent(ConfigNodePropertyBoolean const& value);
    bool schedulerConcurrentIsSet() const;
    void unsetScheduler_concurrent();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getPath() const;
    void setPath(ConfigNodePropertyString const& value);
    bool pathIsSet() const;
    void unsetPath();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getWorkspace() const;
    void setWorkspace(ConfigNodePropertyString const& value);
    bool workspaceIsSet() const;
    void unsetWorkspace();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getKeywordsPath() const;
    void setKeywordsPath(ConfigNodePropertyString const& value);
    bool keywordsPathIsSet() const;
    void unsetKeywordsPath();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getAsyncEntries() const;
    void setAsyncEntries(ConfigNodePropertyBoolean const& value);
    bool asyncEntriesIsSet() const;
    void unsetAsyncEntries();

protected:
    ConfigNodePropertyInteger m_Scheduler_period;
    bool m_Scheduler_periodIsSet;
    ConfigNodePropertyBoolean m_Scheduler_concurrent;
    bool m_Scheduler_concurrentIsSet;
    ConfigNodePropertyString m_Path;
    bool m_PathIsSet;
    ConfigNodePropertyString m_Workspace;
    bool m_WorkspaceIsSet;
    ConfigNodePropertyString m_KeywordsPath;
    bool m_KeywordsPathIsSet;
    ConfigNodePropertyBoolean m_AsyncEntries;
    bool m_AsyncEntriesIsSet;
};

}
}
}
}

#endif /* ComDayCqStatisticsImplStatisticsServiceImplProperties_H_ */
