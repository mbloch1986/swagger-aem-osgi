/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.h
 *
 * 
 */

#ifndef ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_
#define ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyFloat.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
{
public:
    ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
    virtual ~ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getServiceRanking() const;
    void setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGlobalSize() const;
    void setGlobalSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxDiskUsage() const;
    void setMaxDiskUsage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPersistenceEnabled() const;
    void setPersistenceEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getThreadPoolMaxSize() const;
    void setThreadPoolMaxSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getScheduledThreadPoolMaxSize() const;
    void setScheduledThreadPoolMaxSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGracefulShutdownTimeout() const;
    void setGracefulShutdownTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getQueues() const;
    void setQueues(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getTopics() const;
    void setTopics(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAddressesMaxDeliveryAttempts() const;
    void setAddressesMaxDeliveryAttempts(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAddressesExpiryDelay() const;
    void setAddressesExpiryDelay(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getAddressesAddressFullMessagePolicy() const;
    void setAddressesAddressFullMessagePolicy(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAddressesMaxSizeBytes() const;
    void setAddressesMaxSizeBytes(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAddressesPageSizeBytes() const;
    void setAddressesPageSizeBytes(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAddressesPageCacheMaxSize() const;
    void setAddressesPageCacheMaxSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getClusterUser() const;
    void setClusterUser(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getClusterPassword() const;
    void setClusterPassword(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterCallTimeout() const;
    void setClusterCallTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterCallFailoverTimeout() const;
    void setClusterCallFailoverTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterClientFailureCheckPeriod() const;
    void setClusterClientFailureCheckPeriod(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterNotificationAttempts() const;
    void setClusterNotificationAttempts(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterNotificationInterval() const;
    void setClusterNotificationInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getIdCacheSize() const;
    void setIdCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterConfirmationWindowSize() const;
    void setClusterConfirmationWindowSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterConnectionTtl() const;
    void setClusterConnectionTtl(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getClusterDuplicateDetection() const;
    void setClusterDuplicateDetection(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterInitialConnectAttempts() const;
    void setClusterInitialConnectAttempts(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterMaxRetryInterval() const;
    void setClusterMaxRetryInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterMinLargeMessageSize() const;
    void setClusterMinLargeMessageSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterProducerWindowSize() const;
    void setClusterProducerWindowSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterReconnectAttempts() const;
    void setClusterReconnectAttempts(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getClusterRetryInterval() const;
    void setClusterRetryInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyFloat> getClusterRetryIntervalMultiplier() const;
    void setClusterRetryIntervalMultiplier(std::shared_ptr<ConfigNodePropertyFloat> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Service_ranking;
    std::shared_ptr<ConfigNodePropertyInteger> m_Global_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_Max_disk_usage;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Persistence_enabled;
    std::shared_ptr<ConfigNodePropertyInteger> m_Thread_pool_max_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_Scheduled_thread_pool_max_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_Graceful_shutdown_timeout;
    std::shared_ptr<ConfigNodePropertyArray> m_Queues;
    std::shared_ptr<ConfigNodePropertyArray> m_Topics;
    std::shared_ptr<ConfigNodePropertyInteger> m_Addresses_max_delivery_attempts;
    std::shared_ptr<ConfigNodePropertyInteger> m_Addresses_expiry_delay;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Addresses_address_full_message_policy;
    std::shared_ptr<ConfigNodePropertyInteger> m_Addresses_max_size_bytes;
    std::shared_ptr<ConfigNodePropertyInteger> m_Addresses_page_size_bytes;
    std::shared_ptr<ConfigNodePropertyInteger> m_Addresses_page_cache_max_size;
    std::shared_ptr<ConfigNodePropertyString> m_Cluster_user;
    std::shared_ptr<ConfigNodePropertyString> m_Cluster_password;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_call_timeout;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_call_failover_timeout;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_client_failure_check_period;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_notification_attempts;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_notification_interval;
    std::shared_ptr<ConfigNodePropertyInteger> m_Id_cache_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_confirmation_window_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_connection_ttl;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Cluster_duplicate_detection;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_initial_connect_attempts;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_max_retry_interval;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_min_large_message_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_producer_window_size;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_reconnect_attempts;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cluster_retry_interval;
    std::shared_ptr<ConfigNodePropertyFloat> m_Cluster_retry_interval_multiplier;
};

}
}
}
}

#endif /* ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_ */
