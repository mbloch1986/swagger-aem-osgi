/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
  #[serde(rename = "cq.searchpromote.configuration.server.uri")]
  cq_searchpromote_configuration_server_uri: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cq.searchpromote.configuration.environment")]
  cq_searchpromote_configuration_environment: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "connection.timeout")]
  connection_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "socket.timeout")]
  socket_timeout: Option<::models::ConfigNodePropertyInteger>
}

impl ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
  pub fn new() -> ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
    ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
      cq_searchpromote_configuration_server_uri: None,
      cq_searchpromote_configuration_environment: None,
      connection_timeout: None,
      socket_timeout: None
    }
  }

  pub fn set_cq_searchpromote_configuration_server_uri(&mut self, cq_searchpromote_configuration_server_uri: ::models::ConfigNodePropertyString) {
    self.cq_searchpromote_configuration_server_uri = Some(cq_searchpromote_configuration_server_uri);
  }

  pub fn with_cq_searchpromote_configuration_server_uri(mut self, cq_searchpromote_configuration_server_uri: ::models::ConfigNodePropertyString) -> ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
    self.cq_searchpromote_configuration_server_uri = Some(cq_searchpromote_configuration_server_uri);
    self
  }

  pub fn cq_searchpromote_configuration_server_uri(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cq_searchpromote_configuration_server_uri.as_ref()
  }

  pub fn reset_cq_searchpromote_configuration_server_uri(&mut self) {
    self.cq_searchpromote_configuration_server_uri = None;
  }

  pub fn set_cq_searchpromote_configuration_environment(&mut self, cq_searchpromote_configuration_environment: ::models::ConfigNodePropertyString) {
    self.cq_searchpromote_configuration_environment = Some(cq_searchpromote_configuration_environment);
  }

  pub fn with_cq_searchpromote_configuration_environment(mut self, cq_searchpromote_configuration_environment: ::models::ConfigNodePropertyString) -> ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
    self.cq_searchpromote_configuration_environment = Some(cq_searchpromote_configuration_environment);
    self
  }

  pub fn cq_searchpromote_configuration_environment(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cq_searchpromote_configuration_environment.as_ref()
  }

  pub fn reset_cq_searchpromote_configuration_environment(&mut self) {
    self.cq_searchpromote_configuration_environment = None;
  }

  pub fn set_connection_timeout(&mut self, connection_timeout: ::models::ConfigNodePropertyInteger) {
    self.connection_timeout = Some(connection_timeout);
  }

  pub fn with_connection_timeout(mut self, connection_timeout: ::models::ConfigNodePropertyInteger) -> ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
    self.connection_timeout = Some(connection_timeout);
    self
  }

  pub fn connection_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.connection_timeout.as_ref()
  }

  pub fn reset_connection_timeout(&mut self) {
    self.connection_timeout = None;
  }

  pub fn set_socket_timeout(&mut self, socket_timeout: ::models::ConfigNodePropertyInteger) {
    self.socket_timeout = Some(socket_timeout);
  }

  pub fn with_socket_timeout(mut self, socket_timeout: ::models::ConfigNodePropertyInteger) -> ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
    self.socket_timeout = Some(socket_timeout);
    self
  }

  pub fn socket_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.socket_timeout.as_ref()
  }

  pub fn reset_socket_timeout(&mut self) {
    self.socket_timeout = None;
  }

}



