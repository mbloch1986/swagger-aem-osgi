/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqScreensDeviceImplDeviceServiceProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqScreensDeviceImplDeviceServiceProperties :  IEquatable<ComAdobeCqScreensDeviceImplDeviceServiceProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqScreensDeviceImplDeviceServiceProperties" /> class.
        /// </summary>
        /// <param name="comAdobeAemScreensPlayerPingfrequency">comAdobeAemScreensPlayerPingfrequency.</param>
        /// <param name="comAdobeAemScreensDevicePaswordSpecialchars">comAdobeAemScreensDevicePaswordSpecialchars.</param>
        /// <param name="comAdobeAemScreensDevicePaswordMinlowercasechars">comAdobeAemScreensDevicePaswordMinlowercasechars.</param>
        /// <param name="comAdobeAemScreensDevicePaswordMinuppercasechars">comAdobeAemScreensDevicePaswordMinuppercasechars.</param>
        /// <param name="comAdobeAemScreensDevicePaswordMinnumberchars">comAdobeAemScreensDevicePaswordMinnumberchars.</param>
        /// <param name="comAdobeAemScreensDevicePaswordMinspecialchars">comAdobeAemScreensDevicePaswordMinspecialchars.</param>
        /// <param name="comAdobeAemScreensDevicePaswordMinlength">comAdobeAemScreensDevicePaswordMinlength.</param>
        public ComAdobeCqScreensDeviceImplDeviceServiceProperties(ConfigNodePropertyInteger comAdobeAemScreensPlayerPingfrequency = default(ConfigNodePropertyInteger), ConfigNodePropertyString comAdobeAemScreensDevicePaswordSpecialchars = default(ConfigNodePropertyString), ConfigNodePropertyInteger comAdobeAemScreensDevicePaswordMinlowercasechars = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger comAdobeAemScreensDevicePaswordMinuppercasechars = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger comAdobeAemScreensDevicePaswordMinnumberchars = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger comAdobeAemScreensDevicePaswordMinspecialchars = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger comAdobeAemScreensDevicePaswordMinlength = default(ConfigNodePropertyInteger))
        {
            this.ComAdobeAemScreensPlayerPingfrequency = comAdobeAemScreensPlayerPingfrequency;
            this.ComAdobeAemScreensDevicePaswordSpecialchars = comAdobeAemScreensDevicePaswordSpecialchars;
            this.ComAdobeAemScreensDevicePaswordMinlowercasechars = comAdobeAemScreensDevicePaswordMinlowercasechars;
            this.ComAdobeAemScreensDevicePaswordMinuppercasechars = comAdobeAemScreensDevicePaswordMinuppercasechars;
            this.ComAdobeAemScreensDevicePaswordMinnumberchars = comAdobeAemScreensDevicePaswordMinnumberchars;
            this.ComAdobeAemScreensDevicePaswordMinspecialchars = comAdobeAemScreensDevicePaswordMinspecialchars;
            this.ComAdobeAemScreensDevicePaswordMinlength = comAdobeAemScreensDevicePaswordMinlength;
        }
        
        /// <summary>
        /// Gets or Sets ComAdobeAemScreensPlayerPingfrequency
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.player.pingfrequency", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ComAdobeAemScreensPlayerPingfrequency { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordSpecialchars
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.specialchars", EmitDefaultValue=false)]
        public ConfigNodePropertyString ComAdobeAemScreensDevicePaswordSpecialchars { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordMinlowercasechars
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.minlowercasechars", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ComAdobeAemScreensDevicePaswordMinlowercasechars { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordMinuppercasechars
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.minuppercasechars", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ComAdobeAemScreensDevicePaswordMinuppercasechars { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordMinnumberchars
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.minnumberchars", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ComAdobeAemScreensDevicePaswordMinnumberchars { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordMinspecialchars
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.minspecialchars", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ComAdobeAemScreensDevicePaswordMinspecialchars { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeAemScreensDevicePaswordMinlength
        /// </summary>
        [DataMember(Name="com.adobe.aem.screens.device.pasword.minlength", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ComAdobeAemScreensDevicePaswordMinlength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqScreensDeviceImplDeviceServiceProperties {\n");
            sb.Append("  ComAdobeAemScreensPlayerPingfrequency: ").Append(ComAdobeAemScreensPlayerPingfrequency).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordSpecialchars: ").Append(ComAdobeAemScreensDevicePaswordSpecialchars).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordMinlowercasechars: ").Append(ComAdobeAemScreensDevicePaswordMinlowercasechars).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordMinuppercasechars: ").Append(ComAdobeAemScreensDevicePaswordMinuppercasechars).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordMinnumberchars: ").Append(ComAdobeAemScreensDevicePaswordMinnumberchars).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordMinspecialchars: ").Append(ComAdobeAemScreensDevicePaswordMinspecialchars).Append("\n");
            sb.Append("  ComAdobeAemScreensDevicePaswordMinlength: ").Append(ComAdobeAemScreensDevicePaswordMinlength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqScreensDeviceImplDeviceServiceProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqScreensDeviceImplDeviceServiceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqScreensDeviceImplDeviceServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqScreensDeviceImplDeviceServiceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ComAdobeAemScreensPlayerPingfrequency == input.ComAdobeAemScreensPlayerPingfrequency ||
                    (this.ComAdobeAemScreensPlayerPingfrequency != null &&
                    this.ComAdobeAemScreensPlayerPingfrequency.Equals(input.ComAdobeAemScreensPlayerPingfrequency))
                ) && 
                (
                    this.ComAdobeAemScreensDevicePaswordSpecialchars == input.ComAdobeAemScreensDevicePaswordSpecialchars ||
                    (this.ComAdobeAemScreensDevicePaswordSpecialchars != null &&
                    this.ComAdobeAemScreensDevicePaswordSpecialchars.Equals(input.ComAdobeAemScreensDevicePaswordSpecialchars))
                ) && 
                (
                    this.ComAdobeAemScreensDevicePaswordMinlowercasechars == input.ComAdobeAemScreensDevicePaswordMinlowercasechars ||
                    (this.ComAdobeAemScreensDevicePaswordMinlowercasechars != null &&
                    this.ComAdobeAemScreensDevicePaswordMinlowercasechars.Equals(input.ComAdobeAemScreensDevicePaswordMinlowercasechars))
                ) && 
                (
                    this.ComAdobeAemScreensDevicePaswordMinuppercasechars == input.ComAdobeAemScreensDevicePaswordMinuppercasechars ||
                    (this.ComAdobeAemScreensDevicePaswordMinuppercasechars != null &&
                    this.ComAdobeAemScreensDevicePaswordMinuppercasechars.Equals(input.ComAdobeAemScreensDevicePaswordMinuppercasechars))
                ) && 
                (
                    this.ComAdobeAemScreensDevicePaswordMinnumberchars == input.ComAdobeAemScreensDevicePaswordMinnumberchars ||
                    (this.ComAdobeAemScreensDevicePaswordMinnumberchars != null &&
                    this.ComAdobeAemScreensDevicePaswordMinnumberchars.Equals(input.ComAdobeAemScreensDevicePaswordMinnumberchars))
                ) && 
                (
                    this.ComAdobeAemScreensDevicePaswordMinspecialchars == input.ComAdobeAemScreensDevicePaswordMinspecialchars ||
                    (this.ComAdobeAemScreensDevicePaswordMinspecialchars != null &&
                    this.ComAdobeAemScreensDevicePaswordMinspecialchars.Equals(input.ComAdobeAemScreensDevicePaswordMinspecialchars))
                ) && 
                (
                    this.ComAdobeAemScreensDevicePaswordMinlength == input.ComAdobeAemScreensDevicePaswordMinlength ||
                    (this.ComAdobeAemScreensDevicePaswordMinlength != null &&
                    this.ComAdobeAemScreensDevicePaswordMinlength.Equals(input.ComAdobeAemScreensDevicePaswordMinlength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComAdobeAemScreensPlayerPingfrequency != null)
                    hashCode = hashCode * 59 + this.ComAdobeAemScreensPlayerPingfrequency.GetHashCode();
                if (this.ComAdobeAemScreensDevicePaswordSpecialchars != null)
                    hashCode = hashCode * 59 + this.ComAdobeAemScreensDevicePaswordSpecialchars.GetHashCode();
                if (this.ComAdobeAemScreensDevicePaswordMinlowercasechars != null)
                    hashCode = hashCode * 59 + this.ComAdobeAemScreensDevicePaswordMinlowercasechars.GetHashCode();
                if (this.ComAdobeAemScreensDevicePaswordMinuppercasechars != null)
                    hashCode = hashCode * 59 + this.ComAdobeAemScreensDevicePaswordMinuppercasechars.GetHashCode();
                if (this.ComAdobeAemScreensDevicePaswordMinnumberchars != null)
                    hashCode = hashCode * 59 + this.ComAdobeAemScreensDevicePaswordMinnumberchars.GetHashCode();
                if (this.ComAdobeAemScreensDevicePaswordMinspecialchars != null)
                    hashCode = hashCode * 59 + this.ComAdobeAemScreensDevicePaswordMinspecialchars.GetHashCode();
                if (this.ComAdobeAemScreensDevicePaswordMinlength != null)
                    hashCode = hashCode * 59 + this.ComAdobeAemScreensDevicePaswordMinlength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
