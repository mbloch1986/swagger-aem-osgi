/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties()
{
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPathIsSet = false;
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequencyIsSet = false;
    
}

ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::~ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties()
{
}

void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPathIsSet)
    {
        val["com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath"] = ModelBase::toJson(m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPath);
    }
    if(m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequencyIsSet)
    {
        val["com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency"] = ModelBase::toJson(m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequency);
    }
    

    return val;
}

void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath") != val.end())
    {
        if(!val["com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath"]);
            setComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath( newItem );
        }
        
    }
    if(val.find("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency") != val.end())
    {
        if(!val["com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency"]);
            setComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::getComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath() const
{
    return m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPath;
}
void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::setComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath(ConfigNodePropertyArray const& value)
{
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPath = value;
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPathIsSet = true;
}
bool ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPathIsSet() const
{
    return m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPathIsSet;
}
void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::unsetCom_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPath()
{
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPathIsSet = false;
}
ConfigNodePropertyString ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::getComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency() const
{
    return m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequency;
}
void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::setComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency(ConfigNodePropertyString const& value)
{
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequency = value;
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequencyIsSet = true;
}
bool ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequencyIsSet() const
{
    return m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequencyIsSet;
}
void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::unsetCom_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequency()
{
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequencyIsSet = false;
}

}
}
}
}

