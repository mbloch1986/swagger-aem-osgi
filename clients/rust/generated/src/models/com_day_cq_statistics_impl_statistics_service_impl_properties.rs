/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqStatisticsImplStatisticsServiceImplProperties {
  #[serde(rename = "scheduler.period")]
  scheduler_period: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "scheduler.concurrent")]
  scheduler_concurrent: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "path")]
  path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "workspace")]
  workspace: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "keywordsPath")]
  keywords_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "asyncEntries")]
  async_entries: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqStatisticsImplStatisticsServiceImplProperties {
  pub fn new() -> ComDayCqStatisticsImplStatisticsServiceImplProperties {
    ComDayCqStatisticsImplStatisticsServiceImplProperties {
      scheduler_period: None,
      scheduler_concurrent: None,
      path: None,
      workspace: None,
      keywords_path: None,
      async_entries: None
    }
  }

  pub fn set_scheduler_period(&mut self, scheduler_period: ::models::ConfigNodePropertyInteger) {
    self.scheduler_period = Some(scheduler_period);
  }

  pub fn with_scheduler_period(mut self, scheduler_period: ::models::ConfigNodePropertyInteger) -> ComDayCqStatisticsImplStatisticsServiceImplProperties {
    self.scheduler_period = Some(scheduler_period);
    self
  }

  pub fn scheduler_period(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.scheduler_period.as_ref()
  }

  pub fn reset_scheduler_period(&mut self) {
    self.scheduler_period = None;
  }

  pub fn set_scheduler_concurrent(&mut self, scheduler_concurrent: ::models::ConfigNodePropertyBoolean) {
    self.scheduler_concurrent = Some(scheduler_concurrent);
  }

  pub fn with_scheduler_concurrent(mut self, scheduler_concurrent: ::models::ConfigNodePropertyBoolean) -> ComDayCqStatisticsImplStatisticsServiceImplProperties {
    self.scheduler_concurrent = Some(scheduler_concurrent);
    self
  }

  pub fn scheduler_concurrent(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.scheduler_concurrent.as_ref()
  }

  pub fn reset_scheduler_concurrent(&mut self) {
    self.scheduler_concurrent = None;
  }

  pub fn set_path(&mut self, path: ::models::ConfigNodePropertyString) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: ::models::ConfigNodePropertyString) -> ComDayCqStatisticsImplStatisticsServiceImplProperties {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_workspace(&mut self, workspace: ::models::ConfigNodePropertyString) {
    self.workspace = Some(workspace);
  }

  pub fn with_workspace(mut self, workspace: ::models::ConfigNodePropertyString) -> ComDayCqStatisticsImplStatisticsServiceImplProperties {
    self.workspace = Some(workspace);
    self
  }

  pub fn workspace(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.workspace.as_ref()
  }

  pub fn reset_workspace(&mut self) {
    self.workspace = None;
  }

  pub fn set_keywords_path(&mut self, keywords_path: ::models::ConfigNodePropertyString) {
    self.keywords_path = Some(keywords_path);
  }

  pub fn with_keywords_path(mut self, keywords_path: ::models::ConfigNodePropertyString) -> ComDayCqStatisticsImplStatisticsServiceImplProperties {
    self.keywords_path = Some(keywords_path);
    self
  }

  pub fn keywords_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.keywords_path.as_ref()
  }

  pub fn reset_keywords_path(&mut self) {
    self.keywords_path = None;
  }

  pub fn set_async_entries(&mut self, async_entries: ::models::ConfigNodePropertyBoolean) {
    self.async_entries = Some(async_entries);
  }

  pub fn with_async_entries(mut self, async_entries: ::models::ConfigNodePropertyBoolean) -> ComDayCqStatisticsImplStatisticsServiceImplProperties {
    self.async_entries = Some(async_entries);
    self
  }

  pub fn async_entries(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.async_entries.as_ref()
  }

  pub fn reset_async_entries(&mut self) {
    self.async_entries = None;
  }

}



