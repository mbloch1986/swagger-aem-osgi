/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
import org.openapitools.client.model.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
import org.openapitools.client.model.AnalyticsComponentQueryCacheServiceInfo
import org.openapitools.client.model.ApacheSlingHealthCheckResultHTMLSerializerInfo
import org.openapitools.client.model.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
import org.openapitools.client.model.ComAdobeAemTransactionCoreImplTransactionRecorderInfo
import org.openapitools.client.model.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
import org.openapitools.client.model.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
import org.openapitools.client.model.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
import org.openapitools.client.model.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
import org.openapitools.client.model.ComAdobeCqAccountApiAccountManagementServiceInfo
import org.openapitools.client.model.ComAdobeCqAccountImplAccountManagementServletInfo
import org.openapitools.client.model.ComAdobeCqAddressImplLocationLocationListServletInfo
import org.openapitools.client.model.ComAdobeCqAuditPurgeDamInfo
import org.openapitools.client.model.ComAdobeCqAuditPurgePagesInfo
import org.openapitools.client.model.ComAdobeCqAuditPurgeReplicationInfo
import org.openapitools.client.model.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
import org.openapitools.client.model.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
import org.openapitools.client.model.ComAdobeCqCdnRewriterImplCDNRewriterInfo
import org.openapitools.client.model.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
import org.openapitools.client.model.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
import org.openapitools.client.model.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
import org.openapitools.client.model.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
import org.openapitools.client.model.ComAdobeCqCommerceImplAssetVideoHandlerInfo
import org.openapitools.client.model.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
import org.openapitools.client.model.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
import org.openapitools.client.model.ComAdobeCqCommercePimImplPageEventListenerInfo
import org.openapitools.client.model.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
import org.openapitools.client.model.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
import org.openapitools.client.model.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
import org.openapitools.client.model.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
import org.openapitools.client.model.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
import org.openapitools.client.model.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
import org.openapitools.client.model.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
import org.openapitools.client.model.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
import org.openapitools.client.model.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
import org.openapitools.client.model.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
import org.openapitools.client.model.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
import org.openapitools.client.model.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
import org.openapitools.client.model.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
import org.openapitools.client.model.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
import org.openapitools.client.model.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
import org.openapitools.client.model.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
import org.openapitools.client.model.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
import org.openapitools.client.model.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
import org.openapitools.client.model.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
import org.openapitools.client.model.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
import org.openapitools.client.model.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
import org.openapitools.client.model.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
import org.openapitools.client.model.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
import org.openapitools.client.model.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
import org.openapitools.client.model.ComAdobeCqHcContentPackagesHealthCheckInfo
import org.openapitools.client.model.ComAdobeCqHistoryImplHistoryRequestFilterInfo
import org.openapitools.client.model.ComAdobeCqHistoryImplHistoryServiceImplInfo
import org.openapitools.client.model.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
import org.openapitools.client.model.ComAdobeCqProjectsImplServletProjectImageServletInfo
import org.openapitools.client.model.ComAdobeCqProjectsPurgeSchedulerInfo
import org.openapitools.client.model.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
import org.openapitools.client.model.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
import org.openapitools.client.model.ComAdobeCqScreensDeviceImplDeviceServiceInfo
import org.openapitools.client.model.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
import org.openapitools.client.model.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
import org.openapitools.client.model.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
import org.openapitools.client.model.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
import org.openapitools.client.model.ComAdobeCqScreensImplScreensChannelPostProcessorInfo
import org.openapitools.client.model.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
import org.openapitools.client.model.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
import org.openapitools.client.model.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
import org.openapitools.client.model.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
import org.openapitools.client.model.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
import org.openapitools.client.model.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
import org.openapitools.client.model.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
import org.openapitools.client.model.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
import org.openapitools.client.model.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
import org.openapitools.client.model.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
import org.openapitools.client.model.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
import org.openapitools.client.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
import org.openapitools.client.model.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
import org.openapitools.client.model.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
import org.openapitools.client.model.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
import org.openapitools.client.model.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
import org.openapitools.client.model.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
import org.openapitools.client.model.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
import org.openapitools.client.model.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
import org.openapitools.client.model.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
import org.openapitools.client.model.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
import org.openapitools.client.model.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
import org.openapitools.client.model.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
import org.openapitools.client.model.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
import org.openapitools.client.model.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
import org.openapitools.client.model.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
import org.openapitools.client.model.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
import org.openapitools.client.model.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
import org.openapitools.client.model.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
import org.openapitools.client.model.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
import org.openapitools.client.model.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
import org.openapitools.client.model.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
import org.openapitools.client.model.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
import org.openapitools.client.model.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
import org.openapitools.client.model.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
import org.openapitools.client.model.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
import org.openapitools.client.model.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
import org.openapitools.client.model.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
import org.openapitools.client.model.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
import org.openapitools.client.model.ComAdobeCqSocialGroupImplGroupServiceImplInfo
import org.openapitools.client.model.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
import org.openapitools.client.model.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
import org.openapitools.client.model.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
import org.openapitools.client.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
import org.openapitools.client.model.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
import org.openapitools.client.model.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
import org.openapitools.client.model.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
import org.openapitools.client.model.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
import org.openapitools.client.model.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
import org.openapitools.client.model.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
import org.openapitools.client.model.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
import org.openapitools.client.model.ComAdobeCqSocialNotificationsImplMentionsRouterInfo
import org.openapitools.client.model.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
import org.openapitools.client.model.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
import org.openapitools.client.model.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
import org.openapitools.client.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
import org.openapitools.client.model.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
import org.openapitools.client.model.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
import org.openapitools.client.model.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
import org.openapitools.client.model.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
import org.openapitools.client.model.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
import org.openapitools.client.model.ComAdobeCqSocialScoringImplScoringEventListenerInfo
import org.openapitools.client.model.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
import org.openapitools.client.model.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
import org.openapitools.client.model.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
import org.openapitools.client.model.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
import org.openapitools.client.model.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
import org.openapitools.client.model.ComAdobeCqSocialSyncImplDiffChangesObserverInfo
import org.openapitools.client.model.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
import org.openapitools.client.model.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
import org.openapitools.client.model.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
import org.openapitools.client.model.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
import org.openapitools.client.model.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
import org.openapitools.client.model.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
import org.openapitools.client.model.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
import org.openapitools.client.model.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
import org.openapitools.client.model.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
import org.openapitools.client.model.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
import org.openapitools.client.model.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
import org.openapitools.client.model.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
import org.openapitools.client.model.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.client.model.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
import org.openapitools.client.model.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
import org.openapitools.client.model.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
import org.openapitools.client.model.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
import org.openapitools.client.model.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
import org.openapitools.client.model.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
import org.openapitools.client.model.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
import org.openapitools.client.model.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
import org.openapitools.client.model.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
import org.openapitools.client.model.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
import org.openapitools.client.model.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
import org.openapitools.client.model.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
import org.openapitools.client.model.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
import org.openapitools.client.model.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
import org.openapitools.client.model.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
import org.openapitools.client.model.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
import org.openapitools.client.model.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
import org.openapitools.client.model.ComAdobeFormsCommonServletTempCleanUpTaskInfo
import org.openapitools.client.model.ComAdobeGraniteAcpPlatformPlatformServletInfo
import org.openapitools.client.model.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
import org.openapitools.client.model.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
import org.openapitools.client.model.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
import org.openapitools.client.model.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
import org.openapitools.client.model.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
import org.openapitools.client.model.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
import org.openapitools.client.model.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
import org.openapitools.client.model.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
import org.openapitools.client.model.ComAdobeGraniteAuthImsImplIMSProviderImplInfo
import org.openapitools.client.model.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
import org.openapitools.client.model.ComAdobeGraniteAuthImsInfo
import org.openapitools.client.model.ComAdobeGraniteAuthOauthAccesstokenProviderInfo
import org.openapitools.client.model.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
import org.openapitools.client.model.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
import org.openapitools.client.model.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
import org.openapitools.client.model.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
import org.openapitools.client.model.ComAdobeGraniteAuthOauthImplGraniteProviderInfo
import org.openapitools.client.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
import org.openapitools.client.model.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
import org.openapitools.client.model.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
import org.openapitools.client.model.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
import org.openapitools.client.model.ComAdobeGraniteAuthOauthProviderInfo
import org.openapitools.client.model.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
import org.openapitools.client.model.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
import org.openapitools.client.model.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
import org.openapitools.client.model.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
import org.openapitools.client.model.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
import org.openapitools.client.model.ComAdobeGraniteCompatrouterImplRoutingConfigInfo
import org.openapitools.client.model.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
import org.openapitools.client.model.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
import org.openapitools.client.model.ComAdobeGraniteContexthubImplContextHubImplInfo
import org.openapitools.client.model.ComAdobeGraniteCorsImplCORSPolicyImplInfo
import org.openapitools.client.model.ComAdobeGraniteCsrfImplCSRFFilterInfo
import org.openapitools.client.model.ComAdobeGraniteCsrfImplCSRFServletInfo
import org.openapitools.client.model.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
import org.openapitools.client.model.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
import org.openapitools.client.model.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
import org.openapitools.client.model.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
import org.openapitools.client.model.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
import org.openapitools.client.model.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
import org.openapitools.client.model.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
import org.openapitools.client.model.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
import org.openapitools.client.model.ComAdobeGraniteFragsImplRandomFeatureInfo
import org.openapitools.client.model.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
import org.openapitools.client.model.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
import org.openapitools.client.model.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
import org.openapitools.client.model.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
import org.openapitools.client.model.ComAdobeGraniteInfocollectorInfoCollectorInfo
import org.openapitools.client.model.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
import org.openapitools.client.model.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
import org.openapitools.client.model.ComAdobeGraniteLoggingImplLogAnalyserImplInfo
import org.openapitools.client.model.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
import org.openapitools.client.model.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
import org.openapitools.client.model.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
import org.openapitools.client.model.ComAdobeGraniteMonitoringImplScriptConfigImplInfo
import org.openapitools.client.model.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
import org.openapitools.client.model.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
import org.openapitools.client.model.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
import org.openapitools.client.model.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
import org.openapitools.client.model.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
import org.openapitools.client.model.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
import org.openapitools.client.model.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
import org.openapitools.client.model.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
import org.openapitools.client.model.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
import org.openapitools.client.model.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
import org.openapitools.client.model.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
import org.openapitools.client.model.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
import org.openapitools.client.model.ComAdobeGraniteOptoutImplOptOutServiceImplInfo
import org.openapitools.client.model.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
import org.openapitools.client.model.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
import org.openapitools.client.model.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
import org.openapitools.client.model.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
import org.openapitools.client.model.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
import org.openapitools.client.model.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
import org.openapitools.client.model.ComAdobeGraniteRepositoryServiceUserConfigurationInfo
import org.openapitools.client.model.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
import org.openapitools.client.model.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
import org.openapitools.client.model.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
import org.openapitools.client.model.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
import org.openapitools.client.model.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
import org.openapitools.client.model.ComAdobeGraniteRestImplServletDefaultGETServletInfo
import org.openapitools.client.model.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
import org.openapitools.client.model.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
import org.openapitools.client.model.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
import org.openapitools.client.model.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
import org.openapitools.client.model.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
import org.openapitools.client.model.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
import org.openapitools.client.model.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
import org.openapitools.client.model.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
import org.openapitools.client.model.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
import org.openapitools.client.model.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
import org.openapitools.client.model.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
import org.openapitools.client.model.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
import org.openapitools.client.model.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
import org.openapitools.client.model.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
import org.openapitools.client.model.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
import org.openapitools.client.model.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
import org.openapitools.client.model.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
import org.openapitools.client.model.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
import org.openapitools.client.model.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
import org.openapitools.client.model.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
import org.openapitools.client.model.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
import org.openapitools.client.model.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
import org.openapitools.client.model.ComAdobeGraniteWorkflowPurgeSchedulerInfo
import org.openapitools.client.model.ComAdobeOctopusNcommBootstrapInfo
import org.openapitools.client.model.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
import org.openapitools.client.model.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
import org.openapitools.client.model.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
import org.openapitools.client.model.ComDayCommonsHttpclientInfo
import org.openapitools.client.model.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
import org.openapitools.client.model.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
import org.openapitools.client.model.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
import org.openapitools.client.model.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
import org.openapitools.client.model.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
import org.openapitools.client.model.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
import org.openapitools.client.model.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
import org.openapitools.client.model.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
import org.openapitools.client.model.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
import org.openapitools.client.model.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
import org.openapitools.client.model.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
import org.openapitools.client.model.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
import org.openapitools.client.model.ComDayCqAuthImplCugCugSupportImplInfo
import org.openapitools.client.model.ComDayCqAuthImplLoginSelectorHandlerInfo
import org.openapitools.client.model.ComDayCqCommonsImplExternalizerImplInfo
import org.openapitools.client.model.ComDayCqCommonsServletsRootMappingServletInfo
import org.openapitools.client.model.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
import org.openapitools.client.model.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
import org.openapitools.client.model.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
import org.openapitools.client.model.ComDayCqContentsyncImplContentSyncManagerImplInfo
import org.openapitools.client.model.ComDayCqDamCommonsHandlerStandardImageHandlerInfo
import org.openapitools.client.model.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
import org.openapitools.client.model.ComDayCqDamCommonsUtilImplAssetCacheImplInfo
import org.openapitools.client.model.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
import org.openapitools.client.model.ComDayCqDamCoreImplAssetMoveListenerInfo
import org.openapitools.client.model.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
import org.openapitools.client.model.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
import org.openapitools.client.model.ComDayCqDamCoreImplDamChangeEventListenerInfo
import org.openapitools.client.model.ComDayCqDamCoreImplDamEventPurgeServiceInfo
import org.openapitools.client.model.ComDayCqDamCoreImplDamEventRecorderImplInfo
import org.openapitools.client.model.ComDayCqDamCoreImplEventDamEventAuditListenerInfo
import org.openapitools.client.model.ComDayCqDamCoreImplExpiryNotificationJobImplInfo
import org.openapitools.client.model.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
import org.openapitools.client.model.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
import org.openapitools.client.model.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
import org.openapitools.client.model.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
import org.openapitools.client.model.ComDayCqDamCoreImplHandlerJpegHandlerInfo
import org.openapitools.client.model.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
import org.openapitools.client.model.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
import org.openapitools.client.model.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
import org.openapitools.client.model.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
import org.openapitools.client.model.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
import org.openapitools.client.model.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
import org.openapitools.client.model.ComDayCqDamCoreImplLightboxLightboxServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
import org.openapitools.client.model.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
import org.openapitools.client.model.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
import org.openapitools.client.model.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
import org.openapitools.client.model.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
import org.openapitools.client.model.ComDayCqDamCoreImplProcessTextExtractionProcessInfo
import org.openapitools.client.model.ComDayCqDamCoreImplRenditionMakerImplInfo
import org.openapitools.client.model.ComDayCqDamCoreImplReportsReportExportServiceInfo
import org.openapitools.client.model.ComDayCqDamCoreImplReportsReportPurgeServiceInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletAssetDownloadServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletAssetStatusServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletBatchMetadataServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletBinaryProviderServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletCollectionServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletCollectionsServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletCompanionServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletCreateAssetServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletGuidLookupFilterInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletHealthCheckServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletMetadataGetServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplServletResourceCollectionServletInfo
import org.openapitools.client.model.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
import org.openapitools.client.model.ComDayCqDamCoreImplUnzipUnzipConfigInfo
import org.openapitools.client.model.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
import org.openapitools.client.model.ComDayCqDamCoreProcessExtractMetadataProcessInfo
import org.openapitools.client.model.ComDayCqDamCoreProcessMetadataProcessorProcessInfo
import org.openapitools.client.model.ComDayCqDamHandlerFfmpegLocatorImplInfo
import org.openapitools.client.model.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
import org.openapitools.client.model.ComDayCqDamHandlerStandardPdfPdfHandlerInfo
import org.openapitools.client.model.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
import org.openapitools.client.model.ComDayCqDamHandlerStandardPsdPsdHandlerInfo
import org.openapitools.client.model.ComDayCqDamIdsImplIDSJobProcessorInfo
import org.openapitools.client.model.ComDayCqDamIdsImplIDSPoolManagerImplInfo
import org.openapitools.client.model.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
import org.openapitools.client.model.ComDayCqDamInddImplServletSnippetCreationServletInfo
import org.openapitools.client.model.ComDayCqDamInddProcessINDDMediaExtractProcessInfo
import org.openapitools.client.model.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
import org.openapitools.client.model.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
import org.openapitools.client.model.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
import org.openapitools.client.model.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
import org.openapitools.client.model.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
import org.openapitools.client.model.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
import org.openapitools.client.model.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
import org.openapitools.client.model.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
import org.openapitools.client.model.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
import org.openapitools.client.model.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
import org.openapitools.client.model.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
import org.openapitools.client.model.ComDayCqDamScene7ImplScene7APIClientImplInfo
import org.openapitools.client.model.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
import org.openapitools.client.model.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
import org.openapitools.client.model.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
import org.openapitools.client.model.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
import org.openapitools.client.model.ComDayCqDamScene7ImplScene7UploadServiceImplInfo
import org.openapitools.client.model.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
import org.openapitools.client.model.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
import org.openapitools.client.model.ComDayCqDamVideoImplServletVideoTestServletInfo
import org.openapitools.client.model.ComDayCqExtwidgetServletsImageSpriteServletInfo
import org.openapitools.client.model.ComDayCqImageInternalFontFontHelperInfo
import org.openapitools.client.model.ComDayCqJcrclustersupportClusterStartLevelControllerInfo
import org.openapitools.client.model.ComDayCqMailerDefaultMailServiceInfo
import org.openapitools.client.model.ComDayCqMailerImplCqMailingServiceInfo
import org.openapitools.client.model.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
import org.openapitools.client.model.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
import org.openapitools.client.model.ComDayCqMcmCampaignImplIntegrationConfigImplInfo
import org.openapitools.client.model.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
import org.openapitools.client.model.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
import org.openapitools.client.model.ComDayCqMcmImplMCMConfigurationInfo
import org.openapitools.client.model.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
import org.openapitools.client.model.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
import org.openapitools.client.model.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
import org.openapitools.client.model.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
import org.openapitools.client.model.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
import org.openapitools.client.model.ComDayCqNotificationImplNotificationServiceImplInfo
import org.openapitools.client.model.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
import org.openapitools.client.model.ComDayCqPollingImporterImplManagedPollConfigImplInfo
import org.openapitools.client.model.ComDayCqPollingImporterImplManagedPollingImporterImplInfo
import org.openapitools.client.model.ComDayCqPollingImporterImplPollingImporterImplInfo
import org.openapitools.client.model.ComDayCqReplicationAuditReplicationEventListenerInfo
import org.openapitools.client.model.ComDayCqReplicationContentStaticContentBuilderInfo
import org.openapitools.client.model.ComDayCqReplicationImplAgentManagerImplInfo
import org.openapitools.client.model.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
import org.openapitools.client.model.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
import org.openapitools.client.model.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
import org.openapitools.client.model.ComDayCqReplicationImplReplicationReceiverImplInfo
import org.openapitools.client.model.ComDayCqReplicationImplReplicatorImplInfo
import org.openapitools.client.model.ComDayCqReplicationImplReverseReplicatorInfo
import org.openapitools.client.model.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
import org.openapitools.client.model.ComDayCqReplicationImplTransportHttpInfo
import org.openapitools.client.model.ComDayCqReportingImplCacheCacheImplInfo
import org.openapitools.client.model.ComDayCqReportingImplConfigServiceImplInfo
import org.openapitools.client.model.ComDayCqReportingImplRLogAnalyzerInfo
import org.openapitools.client.model.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
import org.openapitools.client.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
import org.openapitools.client.model.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
import org.openapitools.client.model.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
import org.openapitools.client.model.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
import org.openapitools.client.model.ComDayCqSearchImplBuilderQueryBuilderImplInfo
import org.openapitools.client.model.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
import org.openapitools.client.model.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
import org.openapitools.client.model.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
import org.openapitools.client.model.ComDayCqSecurityACLSetupInfo
import org.openapitools.client.model.ComDayCqStatisticsImplStatisticsServiceImplInfo
import org.openapitools.client.model.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
import org.openapitools.client.model.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
import org.openapitools.client.model.ComDayCqTaggingImplTagGarbageCollectorInfo
import org.openapitools.client.model.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
import org.openapitools.client.model.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplEventPagePostProcessorInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplLanguageManagerImplInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplServletsFindReplaceServletInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplServletsThumbnailServletInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplVersionManagerImplInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplVersionPurgeTaskInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplWCMDebugFilterInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
import org.openapitools.client.model.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
import org.openapitools.client.model.ComDayCqWcmCoreMvtMVTStatisticsImplInfo
import org.openapitools.client.model.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
import org.openapitools.client.model.ComDayCqWcmCoreWCMRequestFilterInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterDesignPackageImporterInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
import org.openapitools.client.model.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
import org.openapitools.client.model.ComDayCqWcmFoundationFormsImplFormChooserServletInfo
import org.openapitools.client.model.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
import org.openapitools.client.model.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
import org.openapitools.client.model.ComDayCqWcmFoundationFormsImplMailServletInfo
import org.openapitools.client.model.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
import org.openapitools.client.model.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
import org.openapitools.client.model.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
import org.openapitools.client.model.ComDayCqWcmFoundationImplPageRedirectServletInfo
import org.openapitools.client.model.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
import org.openapitools.client.model.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.client.model.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
import org.openapitools.client.model.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
import org.openapitools.client.model.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
import org.openapitools.client.model.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
import org.openapitools.client.model.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
import org.openapitools.client.model.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
import org.openapitools.client.model.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
import org.openapitools.client.model.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
import org.openapitools.client.model.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
import org.openapitools.client.model.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
import org.openapitools.client.model.ComDayCqWcmMsmImplRolloutManagerImplInfo
import org.openapitools.client.model.ComDayCqWcmMsmImplServletsAuditLogServletInfo
import org.openapitools.client.model.ComDayCqWcmNotificationEmailImplEmailChannelInfo
import org.openapitools.client.model.ComDayCqWcmNotificationImplNotificationManagerImplInfo
import org.openapitools.client.model.ComDayCqWcmScriptingImplBVPManagerInfo
import org.openapitools.client.model.ComDayCqWcmUndoUndoConfigInfo
import org.openapitools.client.model.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
import org.openapitools.client.model.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
import org.openapitools.client.model.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
import org.openapitools.client.model.ComDayCqWidgetImplHtmlLibraryManagerImplInfo
import org.openapitools.client.model.ComDayCqWidgetImplWidgetExtensionProviderImplInfo
import org.openapitools.client.model.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
import org.openapitools.client.model.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
import org.openapitools.client.model.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
import org.openapitools.client.model.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
import org.openapitools.client.model.GuideLocalizationServiceInfo
import org.openapitools.client.model.MessagingUserComponentFactoryInfo
import org.openapitools.client.model.OrgApacheAriesJmxFrameworkStateConfigInfo
import org.openapitools.client.model.OrgApacheFelixEventadminImplEventAdminInfo
import org.openapitools.client.model.OrgApacheFelixHttpInfo
import org.openapitools.client.model.OrgApacheFelixHttpSslfilterSslFilterInfo
import org.openapitools.client.model.OrgApacheFelixJaasConfigurationFactoryInfo
import org.openapitools.client.model.OrgApacheFelixJaasConfigurationSpiInfo
import org.openapitools.client.model.OrgApacheFelixScrScrServiceInfo
import org.openapitools.client.model.OrgApacheFelixSystemreadyImplComponentsCheckInfo
import org.openapitools.client.model.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
import org.openapitools.client.model.OrgApacheFelixSystemreadyImplServicesCheckInfo
import org.openapitools.client.model.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
import org.openapitools.client.model.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
import org.openapitools.client.model.OrgApacheFelixSystemreadySystemReadyMonitorInfo
import org.openapitools.client.model.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
import org.openapitools.client.model.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
import org.openapitools.client.model.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
import org.openapitools.client.model.OrgApacheHttpProxyconfiguratorInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
import org.openapitools.client.model.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
import org.openapitools.client.model.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
import org.openapitools.client.model.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
import org.openapitools.client.model.OrgApacheSlingAuthCoreImplLogoutServletInfo
import org.openapitools.client.model.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
import org.openapitools.client.model.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
import org.openapitools.client.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
import org.openapitools.client.model.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
import org.openapitools.client.model.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
import org.openapitools.client.model.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
import org.openapitools.client.model.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
import org.openapitools.client.model.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
import org.openapitools.client.model.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
import org.openapitools.client.model.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
import org.openapitools.client.model.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
import org.openapitools.client.model.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
import org.openapitools.client.model.OrgApacheSlingCommonsLogLogManagerInfo
import org.openapitools.client.model.OrgApacheSlingCommonsMetricsInternalLogReporterInfo
import org.openapitools.client.model.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
import org.openapitools.client.model.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
import org.openapitools.client.model.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
import org.openapitools.client.model.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
import org.openapitools.client.model.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
import org.openapitools.client.model.OrgApacheSlingDatasourceDataSourceFactoryInfo
import org.openapitools.client.model.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
import org.openapitools.client.model.OrgApacheSlingDiscoveryOakConfigInfo
import org.openapitools.client.model.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
import org.openapitools.client.model.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
import org.openapitools.client.model.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
import org.openapitools.client.model.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
import org.openapitools.client.model.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
import org.openapitools.client.model.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
import org.openapitools.client.model.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
import org.openapitools.client.model.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
import org.openapitools.client.model.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
import org.openapitools.client.model.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
import org.openapitools.client.model.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
import org.openapitools.client.model.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
import org.openapitools.client.model.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
import org.openapitools.client.model.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
import org.openapitools.client.model.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
import org.openapitools.client.model.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
import org.openapitools.client.model.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
import org.openapitools.client.model.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
import org.openapitools.client.model.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
import org.openapitools.client.model.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
import org.openapitools.client.model.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
import org.openapitools.client.model.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
import org.openapitools.client.model.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
import org.openapitools.client.model.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
import org.openapitools.client.model.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
import org.openapitools.client.model.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
import org.openapitools.client.model.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
import org.openapitools.client.model.OrgApacheSlingEngineImplLogRequestLoggerInfo
import org.openapitools.client.model.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
import org.openapitools.client.model.OrgApacheSlingEngineImplSlingMainServletInfo
import org.openapitools.client.model.OrgApacheSlingEngineParametersInfo
import org.openapitools.client.model.OrgApacheSlingEventImplEventingThreadPoolInfo
import org.openapitools.client.model.OrgApacheSlingEventImplJobsDefaultJobManagerInfo
import org.openapitools.client.model.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
import org.openapitools.client.model.OrgApacheSlingEventImplJobsJobConsumerManagerInfo
import org.openapitools.client.model.OrgApacheSlingEventJobsQueueConfigurationInfo
import org.openapitools.client.model.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
import org.openapitools.client.model.OrgApacheSlingFeatureflagsFeatureInfo
import org.openapitools.client.model.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
import org.openapitools.client.model.OrgApacheSlingHapiImplHApiUtilImplInfo
import org.openapitools.client.model.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
import org.openapitools.client.model.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
import org.openapitools.client.model.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
import org.openapitools.client.model.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
import org.openapitools.client.model.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
import org.openapitools.client.model.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
import org.openapitools.client.model.OrgApacheSlingI18nImplI18NFilterInfo
import org.openapitools.client.model.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
import org.openapitools.client.model.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
import org.openapitools.client.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
import org.openapitools.client.model.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
import org.openapitools.client.model.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
import org.openapitools.client.model.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
import org.openapitools.client.model.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
import org.openapitools.client.model.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
import org.openapitools.client.model.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
import org.openapitools.client.model.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
import org.openapitools.client.model.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
import org.openapitools.client.model.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
import org.openapitools.client.model.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
import org.openapitools.client.model.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
import org.openapitools.client.model.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
import org.openapitools.client.model.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
import org.openapitools.client.model.OrgApacheSlingModelsImplModelAdapterFactoryInfo
import org.openapitools.client.model.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
import org.openapitools.client.model.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
import org.openapitools.client.model.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
import org.openapitools.client.model.OrgApacheSlingResourcemergerPickerOverridingInfo
import org.openapitools.client.model.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
import org.openapitools.client.model.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
import org.openapitools.client.model.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
import org.openapitools.client.model.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
import org.openapitools.client.model.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
import org.openapitools.client.model.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
import org.openapitools.client.model.OrgApacheSlingSecurityImplContentDispositionFilterInfo
import org.openapitools.client.model.OrgApacheSlingSecurityImplReferrerFilterInfo
import org.openapitools.client.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
import org.openapitools.client.model.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
import org.openapitools.client.model.OrgApacheSlingServletsGetDefaultGetServletInfo
import org.openapitools.client.model.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
import org.openapitools.client.model.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
import org.openapitools.client.model.OrgApacheSlingServletsPostImplSlingPostServletInfo
import org.openapitools.client.model.OrgApacheSlingServletsResolverSlingServletResolverInfo
import org.openapitools.client.model.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
import org.openapitools.client.model.OrgApacheSlingStartupfilterImplStartupFilterImplInfo
import org.openapitools.client.model.OrgApacheSlingTenantInternalTenantProviderImplInfo
import org.openapitools.client.model.OrgApacheSlingTracerInternalLogTracerInfo
import org.openapitools.client.model.OrgApacheSlingXssImplXSSFilterImplInfo
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object ConfigmgrApi {

  /**
   * Expected answers:
   *   code 200 : AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param showPlaceholder 
   * @param maximumCacheEntries 
   * @param afScriptingCompatversion 
   * @param makeFileNameUnique 
   * @param generatingCompliantData 
   */
  def adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], showPlaceholder: Option[Boolean] = None, maximumCacheEntries: Option[Int] = None, afScriptingCompatversion: Option[String] = None, makeFileNameUnique: Option[Boolean] = None, generatingCompliantData: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("showPlaceholder", showPlaceholder)
      .withQueryParam("maximumCacheEntries", maximumCacheEntries)
      .withQueryParam("af.scripting.compatversion", afScriptingCompatversion)
      .withQueryParam("makeFileNameUnique", makeFileNameUnique)
      .withQueryParam("generatingCompliantData", generatingCompliantData)
      .withSuccessResponse[AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fontList 
   */
  def adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fontList: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fontList", ArrayValues(fontList, MULTI))
      .withSuccessResponse[AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : AnalyticsComponentQueryCacheServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAnalyticsComponentQueryCacheSize 
   */
  def analyticsComponentQueryCacheService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAnalyticsComponentQueryCacheSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/Analytics Component Query Cache Service", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.analytics.component.query.cache.size", cqAnalyticsComponentQueryCacheSize)
      .withSuccessResponse[AnalyticsComponentQueryCacheServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ApacheSlingHealthCheckResultHTMLSerializerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param styleString 
   */
  def apacheSlingHealthCheckResultHTMLSerializer(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], styleString: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/Apache Sling Health Check Result HTML Serializer", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("styleString", styleString)
      .withSuccessResponse[ApacheSlingHealthCheckResultHTMLSerializerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param formsManagerConfigIncludeOOTBTemplates 
   * @param formsManagerConfigIncludeDeprecatedTemplates 
   */
  def comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], formsManagerConfigIncludeOOTBTemplates: Option[Boolean] = None, formsManagerConfigIncludeDeprecatedTemplates: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("formsManagerConfig.includeOOTBTemplates", formsManagerConfigIncludeOOTBTemplates)
      .withQueryParam("formsManagerConfig.includeDeprecatedTemplates", formsManagerConfigIncludeDeprecatedTemplates)
      .withSuccessResponse[ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeAemTransactionCoreImplTransactionRecorderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param isTransactionRecordingEnabled 
   */
  def comAdobeAemTransactionCoreImplTransactionRecorder(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], isTransactionRecordingEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("isTransactionRecordingEnabled", isTransactionRecordingEnabled)
      .withSuccessResponse[ComAdobeAemTransactionCoreImplTransactionRecorderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcName 
   * @param hcTags 
   * @param hcMbeanName 
   */
  def comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcName: Option[String] = None, hcTags: Seq[String], hcMbeanName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.name", hcName)
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("hc.mbean.name", hcMbeanName)
      .withSuccessResponse[ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcName 
   * @param hcTags 
   * @param hcMbeanName 
   */
  def comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcName: Option[String] = None, hcTags: Seq[String], hcMbeanName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.name", hcName)
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("hc.mbean.name", hcMbeanName)
      .withSuccessResponse[ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param preUpgradeMaintenanceTasks 
   * @param preUpgradeHcTags 
   */
  def comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], preUpgradeMaintenanceTasks: Seq[String], preUpgradeHcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("pre-upgrade.maintenance.tasks", ArrayValues(preUpgradeMaintenanceTasks, MULTI))
      .withQueryParam("pre-upgrade.hc.tags", ArrayValues(preUpgradeHcTags, MULTI))
      .withSuccessResponse[ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param rootPath 
   * @param fixInconsistencies 
   */
  def comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], rootPath: Option[String] = None, fixInconsistencies: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("root.path", rootPath)
      .withQueryParam("fix.inconsistencies", fixInconsistencies)
      .withSuccessResponse[ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqAccountApiAccountManagementServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAccountmanagerTokenValidityPeriod 
   * @param cqAccountmanagerConfigRequestnewaccountMail 
   * @param cqAccountmanagerConfigRequestnewpwdMail 
   */
  def comAdobeCqAccountApiAccountManagementService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAccountmanagerTokenValidityPeriod: Option[Int] = None, cqAccountmanagerConfigRequestnewaccountMail: Option[String] = None, cqAccountmanagerConfigRequestnewpwdMail: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.accountmanager.token.validity.period", cqAccountmanagerTokenValidityPeriod)
      .withQueryParam("cq.accountmanager.config.requestnewaccount.mail", cqAccountmanagerConfigRequestnewaccountMail)
      .withQueryParam("cq.accountmanager.config.requestnewpwd.mail", cqAccountmanagerConfigRequestnewpwdMail)
      .withSuccessResponse[ComAdobeCqAccountApiAccountManagementServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqAccountImplAccountManagementServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAccountmanagerConfigInformnewaccountMail 
   * @param cqAccountmanagerConfigInformnewpwdMail 
   */
  def comAdobeCqAccountImplAccountManagementServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAccountmanagerConfigInformnewaccountMail: Option[String] = None, cqAccountmanagerConfigInformnewpwdMail: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.accountmanager.config.informnewaccount.mail", cqAccountmanagerConfigInformnewaccountMail)
      .withQueryParam("cq.accountmanager.config.informnewpwd.mail", cqAccountmanagerConfigInformnewpwdMail)
      .withSuccessResponse[ComAdobeCqAccountImplAccountManagementServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqAddressImplLocationLocationListServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAddressLocationDefaultMaxResults 
   */
  def comAdobeCqAddressImplLocationLocationListServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAddressLocationDefaultMaxResults: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.address.location.default.maxResults", cqAddressLocationDefaultMaxResults)
      .withSuccessResponse[ComAdobeCqAddressImplLocationLocationListServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqAuditPurgeDamInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param auditlogRuleName 
   * @param auditlogRuleContentpath 
   * @param auditlogRuleMinimumage 
   * @param auditlogRuleTypes 
   */
  def comAdobeCqAuditPurgeDam(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], auditlogRuleName: Option[String] = None, auditlogRuleContentpath: Option[String] = None, auditlogRuleMinimumage: Option[Int] = None, auditlogRuleTypes: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.audit.purge.Dam", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("auditlog.rule.name", auditlogRuleName)
      .withQueryParam("auditlog.rule.contentpath", auditlogRuleContentpath)
      .withQueryParam("auditlog.rule.minimumage", auditlogRuleMinimumage)
      .withQueryParam("auditlog.rule.types", auditlogRuleTypes)
      .withSuccessResponse[ComAdobeCqAuditPurgeDamInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqAuditPurgePagesInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param auditlogRuleName 
   * @param auditlogRuleContentpath 
   * @param auditlogRuleMinimumage 
   * @param auditlogRuleTypes 
   */
  def comAdobeCqAuditPurgePages(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], auditlogRuleName: Option[String] = None, auditlogRuleContentpath: Option[String] = None, auditlogRuleMinimumage: Option[Int] = None, auditlogRuleTypes: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.audit.purge.Pages", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("auditlog.rule.name", auditlogRuleName)
      .withQueryParam("auditlog.rule.contentpath", auditlogRuleContentpath)
      .withQueryParam("auditlog.rule.minimumage", auditlogRuleMinimumage)
      .withQueryParam("auditlog.rule.types", auditlogRuleTypes)
      .withSuccessResponse[ComAdobeCqAuditPurgePagesInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqAuditPurgeReplicationInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param auditlogRuleName 
   * @param auditlogRuleContentpath 
   * @param auditlogRuleMinimumage 
   * @param auditlogRuleTypes 
   */
  def comAdobeCqAuditPurgeReplication(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], auditlogRuleName: Option[String] = None, auditlogRuleContentpath: Option[String] = None, auditlogRuleMinimumage: Option[Int] = None, auditlogRuleTypes: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.audit.purge.Replication", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("auditlog.rule.name", auditlogRuleName)
      .withQueryParam("auditlog.rule.contentpath", auditlogRuleContentpath)
      .withQueryParam("auditlog.rule.minimumage", auditlogRuleMinimumage)
      .withQueryParam("auditlog.rule.types", auditlogRuleTypes)
      .withSuccessResponse[ComAdobeCqAuditPurgeReplicationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param keypairId 
   * @param keypairAlias 
   * @param cdnrewriterAttributes 
   * @param cdnRewriterDistributionDomain 
   */
  def comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, keypairId: Option[String] = None, keypairAlias: Option[String] = None, cdnrewriterAttributes: Seq[String], cdnRewriterDistributionDomain: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("keypair.id", keypairId)
      .withQueryParam("keypair.alias", keypairAlias)
      .withQueryParam("cdnrewriter.attributes", ArrayValues(cdnrewriterAttributes, MULTI))
      .withQueryParam("cdn.rewriter.distribution.domain", cdnRewriterDistributionDomain)
      .withSuccessResponse[ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cdnConfigDistributionDomain 
   * @param cdnConfigEnableRewriting 
   * @param cdnConfigPathPrefixes 
   * @param cdnConfigCdnttl 
   * @param cdnConfigApplicationProtocol 
   */
  def comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cdnConfigDistributionDomain: Option[String] = None, cdnConfigEnableRewriting: Option[Boolean] = None, cdnConfigPathPrefixes: Seq[String], cdnConfigCdnttl: Option[Int] = None, cdnConfigApplicationProtocol: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cdn.config.distribution.domain", cdnConfigDistributionDomain)
      .withQueryParam("cdn.config.enable.rewriting", cdnConfigEnableRewriting)
      .withQueryParam("cdn.config.path.prefixes", ArrayValues(cdnConfigPathPrefixes, MULTI))
      .withQueryParam("cdn.config.cdnttl", cdnConfigCdnttl)
      .withQueryParam("cdn.config.application.protocol", cdnConfigApplicationProtocol)
      .withSuccessResponse[ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCdnRewriterImplCDNRewriterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param cdnrewriterAttributes 
   * @param cdnRewriterDistributionDomain 
   */
  def comAdobeCqCdnRewriterImplCDNRewriter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, cdnrewriterAttributes: Seq[String], cdnRewriterDistributionDomain: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("cdnrewriter.attributes", ArrayValues(cdnrewriterAttributes, MULTI))
      .withQueryParam("cdn.rewriter.distribution.domain", cdnRewriterDistributionDomain)
      .withSuccessResponse[ComAdobeCqCdnRewriterImplCDNRewriterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param flushAgents 
   */
  def comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], flushAgents: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("flush.agents", ArrayValues(flushAgents, MULTI))
      .withSuccessResponse[ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqCommerceAssetHandlerActive 
   * @param cqCommerceAssetHandlerName 
   */
  def comAdobeCqCommerceImplAssetDynamicImageHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqCommerceAssetHandlerActive: Option[Boolean] = None, cqCommerceAssetHandlerName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.commerce.asset.handler.active", cqCommerceAssetHandlerActive)
      .withQueryParam("cq.commerce.asset.handler.name", cqCommerceAssetHandlerName)
      .withSuccessResponse[ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqCommerceAssetHandlerFallback 
   */
  def comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqCommerceAssetHandlerFallback: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.commerce.asset.handler.fallback", cqCommerceAssetHandlerFallback)
      .withSuccessResponse[ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCommerceImplAssetStaticImageHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqCommerceAssetHandlerActive 
   * @param cqCommerceAssetHandlerName 
   */
  def comAdobeCqCommerceImplAssetStaticImageHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqCommerceAssetHandlerActive: Option[Boolean] = None, cqCommerceAssetHandlerName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.commerce.asset.handler.active", cqCommerceAssetHandlerActive)
      .withQueryParam("cq.commerce.asset.handler.name", cqCommerceAssetHandlerName)
      .withSuccessResponse[ComAdobeCqCommerceImplAssetStaticImageHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCommerceImplAssetVideoHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqCommerceAssetHandlerActive 
   * @param cqCommerceAssetHandlerName 
   */
  def comAdobeCqCommerceImplAssetVideoHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqCommerceAssetHandlerActive: Option[Boolean] = None, cqCommerceAssetHandlerName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.commerce.asset.handler.active", cqCommerceAssetHandlerActive)
      .withQueryParam("cq.commerce.asset.handler.name", cqCommerceAssetHandlerName)
      .withSuccessResponse[ComAdobeCqCommerceImplAssetVideoHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqCommercePromotionRoot 
   */
  def comAdobeCqCommerceImplPromotionPromotionManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqCommercePromotionRoot: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.commerce.promotion.root", cqCommercePromotionRoot)
      .withSuccessResponse[ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqCommerceCataloggeneratorBucketsize 
   * @param cqCommerceCataloggeneratorBucketname 
   * @param cqCommerceCataloggeneratorExcludedtemplateproperties 
   */
  def comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqCommerceCataloggeneratorBucketsize: Option[Int] = None, cqCommerceCataloggeneratorBucketname: Option[String] = None, cqCommerceCataloggeneratorExcludedtemplateproperties: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.commerce.cataloggenerator.bucketsize", cqCommerceCataloggeneratorBucketsize)
      .withQueryParam("cq.commerce.cataloggenerator.bucketname", cqCommerceCataloggeneratorBucketname)
      .withQueryParam("cq.commerce.cataloggenerator.excludedtemplateproperties", ArrayValues(cqCommerceCataloggeneratorExcludedtemplateproperties, MULTI))
      .withSuccessResponse[ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCommercePimImplPageEventListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqCommercePageeventlistenerEnabled 
   */
  def comAdobeCqCommercePimImplPageEventListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqCommercePageeventlistenerEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.commerce.pageeventlistener.enabled", cqCommercePageeventlistenerEnabled)
      .withSuccessResponse[ComAdobeCqCommercePimImplPageEventListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param feedGeneratorAlgorithm 
   */
  def comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], feedGeneratorAlgorithm: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("Feed generator algorithm", feedGeneratorAlgorithm)
      .withSuccessResponse[ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param reportingservicesUrl 
   */
  def comAdobeCqContentinsightImplReportingServicesSettingsProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], reportingservicesUrl: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("reportingservices.url", reportingservicesUrl)
      .withSuccessResponse[ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param brightedgeUrl 
   */
  def comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], brightedgeUrl: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("brightedge.url", brightedgeUrl)
      .withSuccessResponse[ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param reportingservicesProxyWhitelist 
   */
  def comAdobeCqContentinsightImplServletsReportingServicesProxyServle(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], reportingservicesProxyWhitelist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("reportingservices.proxy.whitelist", ArrayValues(reportingservicesProxyWhitelist, MULTI))
      .withSuccessResponse[ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamCfmImplComponentComponentConfigImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param damCfmComponentResourceType 
   * @param damCfmComponentFileReferenceProp 
   * @param damCfmComponentElementsProp 
   * @param damCfmComponentVariationProp 
   */
  def comAdobeCqDamCfmImplComponentComponentConfigImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], damCfmComponentResourceType: Option[String] = None, damCfmComponentFileReferenceProp: Option[String] = None, damCfmComponentElementsProp: Option[String] = None, damCfmComponentVariationProp: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("dam.cfm.component.resourceType", damCfmComponentResourceType)
      .withQueryParam("dam.cfm.component.fileReferenceProp", damCfmComponentFileReferenceProp)
      .withQueryParam("dam.cfm.component.elementsProp", damCfmComponentElementsProp)
      .withQueryParam("dam.cfm.component.variationProp", damCfmComponentVariationProp)
      .withSuccessResponse[ComAdobeCqDamCfmImplComponentComponentConfigImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamCfmImplConfFeatureConfigImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param damCfmResourceTypes 
   * @param damCfmReferenceProperties 
   */
  def comAdobeCqDamCfmImplConfFeatureConfigImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], damCfmResourceTypes: Seq[String], damCfmReferenceProperties: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("dam.cfm.resourceTypes", ArrayValues(damCfmResourceTypes, MULTI))
      .withQueryParam("dam.cfm.referenceProperties", ArrayValues(damCfmReferenceProperties, MULTI))
      .withSuccessResponse[ComAdobeCqDamCfmImplConfFeatureConfigImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param pipelineType 
   */
  def comAdobeCqDamCfmImplContentRewriterAssetProcessor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], pipelineType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("pipeline.type", pipelineType)
      .withSuccessResponse[ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param pipelineType 
   */
  def comAdobeCqDamCfmImplContentRewriterParRangeFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], pipelineType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("pipeline.type", pipelineType)
      .withSuccessResponse[ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param pipelineType 
   */
  def comAdobeCqDamCfmImplContentRewriterPayloadFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], pipelineType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("pipeline.type", pipelineType)
      .withSuccessResponse[ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamDmProcessImagePTiffManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxMemory 
   */
  def comAdobeCqDamDmProcessImagePTiffManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxMemory: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("maxMemory", maxMemory)
      .withSuccessResponse[ComAdobeCqDamDmProcessImagePTiffManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param dmreplicateonmodifyEnabled 
   * @param dmreplicateonmodifyForcesyncdeletes 
   */
  def comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], dmreplicateonmodifyEnabled: Option[Boolean] = None, dmreplicateonmodifyForcesyncdeletes: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("dmreplicateonmodify.enabled", dmreplicateonmodifyEnabled)
      .withQueryParam("dmreplicateonmodify.forcesyncdeletes", dmreplicateonmodifyForcesyncdeletes)
      .withSuccessResponse[ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeDamMacSyncClientSoTimeout 
   */
  def comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeDamMacSyncClientSoTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.dam.mac.sync.client.so.timeout", comAdobeDamMacSyncClientSoTimeout)
      .withSuccessResponse[ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths 
   * @param comAdobeCqDamMacSyncDamsyncserviceSyncRenditions 
   * @param comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs 
   * @param comAdobeCqDamMacSyncDamsyncservicePlatform 
   */
  def comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: Seq[String], comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: Option[Boolean] = None, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: Option[Int] = None, comAdobeCqDamMacSyncDamsyncservicePlatform: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths", ArrayValues(comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, MULTI))
      .withQueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions", comAdobeCqDamMacSyncDamsyncserviceSyncRenditions)
      .withQueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms", comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs)
      .withQueryParam("com.adobe.cq.dam.mac.sync.damsyncservice.platform", comAdobeCqDamMacSyncDamsyncservicePlatform)
      .withSuccessResponse[ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param nuiEnabled 
   * @param nuiServiceUrl 
   * @param nuiApiKey 
   */
  def comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], nuiEnabled: Option[Boolean] = None, nuiServiceUrl: Option[String] = None, nuiApiKey: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("nuiEnabled", nuiEnabled)
      .withQueryParam("nuiServiceUrl", nuiServiceUrl)
      .withQueryParam("nuiApiKey", nuiApiKey)
      .withSuccessResponse[ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamS7imagingImplIsImageServerComponentInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param tcpPort 
   * @param allowRemoteAccess 
   * @param maxRenderRgnPixels 
   * @param maxMessageSize 
   * @param randomAccessUrlTimeout 
   * @param workerThreads 
   */
  def comAdobeCqDamS7imagingImplIsImageServerComponent(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], tcpPort: Option[String] = None, allowRemoteAccess: Option[Boolean] = None, maxRenderRgnPixels: Option[String] = None, maxMessageSize: Option[String] = None, randomAccessUrlTimeout: Option[Int] = None, workerThreads: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("TcpPort", tcpPort)
      .withQueryParam("AllowRemoteAccess", allowRemoteAccess)
      .withQueryParam("MaxRenderRgnPixels", maxRenderRgnPixels)
      .withQueryParam("MaxMessageSize", maxMessageSize)
      .withQueryParam("RandomAccessUrlTimeout", randomAccessUrlTimeout)
      .withQueryParam("WorkerThreads", workerThreads)
      .withSuccessResponse[ComAdobeCqDamS7imagingImplIsImageServerComponentInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cacheEnable 
   * @param cacheRootPaths 
   * @param cacheMaxSize 
   * @param cacheMaxEntries 
   */
  def comAdobeCqDamS7imagingImplPsPlatformServerServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cacheEnable: Option[Boolean] = None, cacheRootPaths: Seq[String], cacheMaxSize: Option[Int] = None, cacheMaxEntries: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cache.enable", cacheEnable)
      .withQueryParam("cache.rootPaths", ArrayValues(cacheRootPaths, MULTI))
      .withQueryParam("cache.maxSize", cacheMaxSize)
      .withQueryParam("cache.maxEntries", cacheMaxEntries)
      .withSuccessResponse[ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param pathPrefix 
   * @param createVersion 
   */
  def comAdobeCqDamWebdavImplIoAssetIOHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, pathPrefix: Option[String] = None, createVersion: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("pathPrefix", pathPrefix)
      .withQueryParam("createVersion", createVersion)
      .withSuccessResponse[ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamWebdavVersionLinkingEnable 
   * @param cqDamWebdavVersionLinkingSchedulerPeriod 
   * @param cqDamWebdavVersionLinkingStagingTimeout 
   */
  def comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamWebdavVersionLinkingEnable: Option[Boolean] = None, cqDamWebdavVersionLinkingSchedulerPeriod: Option[Int] = None, cqDamWebdavVersionLinkingStagingTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.webdav.version.linking.enable", cqDamWebdavVersionLinkingEnable)
      .withQueryParam("cq.dam.webdav.version.linking.scheduler.period", cqDamWebdavVersionLinkingSchedulerPeriod)
      .withQueryParam("cq.dam.webdav.version.linking.staging.timeout", cqDamWebdavVersionLinkingStagingTimeout)
      .withSuccessResponse[ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters 
   */
  def comAdobeCqDamWebdavImplIoSpecialFilesHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters", ArrayValues(comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters, MULTI))
      .withSuccessResponse[ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDeserfwImplDeserializationFirewallImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param firewallDeserializationWhitelist 
   * @param firewallDeserializationBlacklist 
   * @param firewallDeserializationDiagnostics 
   */
  def comAdobeCqDeserfwImplDeserializationFirewallImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], firewallDeserializationWhitelist: Seq[String], firewallDeserializationBlacklist: Seq[String], firewallDeserializationDiagnostics: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("firewall.deserialization.whitelist", ArrayValues(firewallDeserializationWhitelist, MULTI))
      .withQueryParam("firewall.deserialization.blacklist", ArrayValues(firewallDeserializationBlacklist, MULTI))
      .withQueryParam("firewall.deserialization.diagnostics", firewallDeserializationDiagnostics)
      .withSuccessResponse[ComAdobeCqDeserfwImplDeserializationFirewallImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDtmImplServiceDTMWebServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param connectionTimeout 
   * @param socketTimeout 
   */
  def comAdobeCqDtmImplServiceDTMWebServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], connectionTimeout: Option[Int] = None, socketTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("connection.timeout", connectionTimeout)
      .withQueryParam("socket.timeout", socketTimeout)
      .withSuccessResponse[ComAdobeCqDtmImplServiceDTMWebServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDtmImplServletsDTMDeployHookServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param dtmStagingIpWhitelist 
   * @param dtmProductionIpWhitelist 
   */
  def comAdobeCqDtmImplServletsDTMDeployHookServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], dtmStagingIpWhitelist: Seq[String], dtmProductionIpWhitelist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("dtm.staging.ip.whitelist", ArrayValues(dtmStagingIpWhitelist, MULTI))
      .withQueryParam("dtm.production.ip.whitelist", ArrayValues(dtmProductionIpWhitelist, MULTI))
      .withSuccessResponse[ComAdobeCqDtmImplServletsDTMDeployHookServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqDtmReactorImplServiceWebServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param endpointUri 
   * @param connectionTimeout 
   * @param socketTimeout 
   */
  def comAdobeCqDtmReactorImplServiceWebServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], endpointUri: Option[String] = None, connectionTimeout: Option[Int] = None, socketTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("endpointUri", endpointUri)
      .withQueryParam("connectionTimeout", connectionTimeout)
      .withQueryParam("socketTimeout", socketTimeout)
      .withSuccessResponse[ComAdobeCqDtmReactorImplServiceWebServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   * @param disabledForGroups 
   */
  def comAdobeCqExperiencelogImplExperienceLogConfigServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None, disabledForGroups: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withQueryParam("disabledForGroups", ArrayValues(disabledForGroups, MULTI))
      .withSuccessResponse[ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqHcContentPackagesHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcName 
   * @param hcTags 
   * @param hcMbeanName 
   * @param packageNames 
   */
  def comAdobeCqHcContentPackagesHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcName: Option[String] = None, hcTags: Seq[String], hcMbeanName: Option[String] = None, packageNames: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.name", hcName)
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("hc.mbean.name", hcMbeanName)
      .withQueryParam("package.names", ArrayValues(packageNames, MULTI))
      .withSuccessResponse[ComAdobeCqHcContentPackagesHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqHistoryImplHistoryRequestFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param historyRequestFilterExcludedSelectors 
   * @param historyRequestFilterExcludedExtensions 
   */
  def comAdobeCqHistoryImplHistoryRequestFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], historyRequestFilterExcludedSelectors: Seq[String], historyRequestFilterExcludedExtensions: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("history.requestFilter.excludedSelectors", ArrayValues(historyRequestFilterExcludedSelectors, MULTI))
      .withQueryParam("history.requestFilter.excludedExtensions", ArrayValues(historyRequestFilterExcludedExtensions, MULTI))
      .withSuccessResponse[ComAdobeCqHistoryImplHistoryRequestFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqHistoryImplHistoryServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param historyServiceResourceTypes 
   * @param historyServicePathFilter 
   */
  def comAdobeCqHistoryImplHistoryServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], historyServiceResourceTypes: Seq[String], historyServicePathFilter: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("history.service.resourceTypes", ArrayValues(historyServiceResourceTypes, MULTI))
      .withQueryParam("history.service.pathFilter", ArrayValues(historyServicePathFilter, MULTI))
      .withSuccessResponse[ComAdobeCqHistoryImplHistoryServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param inboxImplTypeproviderRegistrypaths 
   * @param inboxImplTypeproviderLegacypaths 
   * @param inboxImplTypeproviderDefaulturlFailureitem 
   * @param inboxImplTypeproviderDefaulturlWorkitem 
   * @param inboxImplTypeproviderDefaulturlTask 
   */
  def comAdobeCqInboxImplTypeproviderItemTypeProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], inboxImplTypeproviderRegistrypaths: Seq[String], inboxImplTypeproviderLegacypaths: Seq[String], inboxImplTypeproviderDefaulturlFailureitem: Option[String] = None, inboxImplTypeproviderDefaulturlWorkitem: Option[String] = None, inboxImplTypeproviderDefaulturlTask: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("inbox.impl.typeprovider.registrypaths", ArrayValues(inboxImplTypeproviderRegistrypaths, MULTI))
      .withQueryParam("inbox.impl.typeprovider.legacypaths", ArrayValues(inboxImplTypeproviderLegacypaths, MULTI))
      .withQueryParam("inbox.impl.typeprovider.defaulturl.failureitem", inboxImplTypeproviderDefaulturlFailureitem)
      .withQueryParam("inbox.impl.typeprovider.defaulturl.workitem", inboxImplTypeproviderDefaulturlWorkitem)
      .withQueryParam("inbox.impl.typeprovider.defaulturl.task", inboxImplTypeproviderDefaulturlTask)
      .withSuccessResponse[ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqProjectsImplServletProjectImageServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param imageQuality 
   * @param imageSupportedResolutions 
   */
  def comAdobeCqProjectsImplServletProjectImageServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], imageQuality: Option[String] = None, imageSupportedResolutions: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("image.quality", imageQuality)
      .withQueryParam("image.supported.resolutions", imageSupportedResolutions)
      .withSuccessResponse[ComAdobeCqProjectsImplServletProjectImageServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqProjectsPurgeSchedulerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param scheduledpurgeName 
   * @param scheduledpurgePurgeActive 
   * @param scheduledpurgeTemplates 
   * @param scheduledpurgePurgeGroups 
   * @param scheduledpurgePurgeAssets 
   * @param scheduledpurgeTerminateRunningWorkflows 
   * @param scheduledpurgeDaysold 
   * @param scheduledpurgeSaveThreshold 
   */
  def comAdobeCqProjectsPurgeScheduler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], scheduledpurgeName: Option[String] = None, scheduledpurgePurgeActive: Option[Boolean] = None, scheduledpurgeTemplates: Seq[String], scheduledpurgePurgeGroups: Option[Boolean] = None, scheduledpurgePurgeAssets: Option[Boolean] = None, scheduledpurgeTerminateRunningWorkflows: Option[Boolean] = None, scheduledpurgeDaysold: Option[Int] = None, scheduledpurgeSaveThreshold: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduledpurge.name", scheduledpurgeName)
      .withQueryParam("scheduledpurge.purgeActive", scheduledpurgePurgeActive)
      .withQueryParam("scheduledpurge.templates", ArrayValues(scheduledpurgeTemplates, MULTI))
      .withQueryParam("scheduledpurge.purgeGroups", scheduledpurgePurgeGroups)
      .withQueryParam("scheduledpurge.purgeAssets", scheduledpurgePurgeAssets)
      .withQueryParam("scheduledpurge.terminateRunningWorkflows", scheduledpurgeTerminateRunningWorkflows)
      .withQueryParam("scheduledpurge.daysold", scheduledpurgeDaysold)
      .withQueryParam("scheduledpurge.saveThreshold", scheduledpurgeSaveThreshold)
      .withSuccessResponse[ComAdobeCqProjectsPurgeSchedulerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScheduledExporterImplScheduledExporterImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param includePaths 
   * @param exporterUser 
   */
  def comAdobeCqScheduledExporterImplScheduledExporterImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], includePaths: Seq[String], exporterUser: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("include.paths", ArrayValues(includePaths, MULTI))
      .withQueryParam("exporter.user", exporterUser)
      .withSuccessResponse[ComAdobeCqScheduledExporterImplScheduledExporterImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeCqScreensAnalyticsImplUrl 
   * @param comAdobeCqScreensAnalyticsImplApikey 
   * @param comAdobeCqScreensAnalyticsImplProject 
   * @param comAdobeCqScreensAnalyticsImplEnvironment 
   * @param comAdobeCqScreensAnalyticsImplSendFrequency 
   */
  def comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeCqScreensAnalyticsImplUrl: Option[String] = None, comAdobeCqScreensAnalyticsImplApikey: Option[String] = None, comAdobeCqScreensAnalyticsImplProject: Option[String] = None, comAdobeCqScreensAnalyticsImplEnvironment: Option[String] = None, comAdobeCqScreensAnalyticsImplSendFrequency: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.cq.screens.analytics.impl.url", comAdobeCqScreensAnalyticsImplUrl)
      .withQueryParam("com.adobe.cq.screens.analytics.impl.apikey", comAdobeCqScreensAnalyticsImplApikey)
      .withQueryParam("com.adobe.cq.screens.analytics.impl.project", comAdobeCqScreensAnalyticsImplProject)
      .withQueryParam("com.adobe.cq.screens.analytics.impl.environment", comAdobeCqScreensAnalyticsImplEnvironment)
      .withQueryParam("com.adobe.cq.screens.analytics.impl.sendFrequency", comAdobeCqScreensAnalyticsImplSendFrequency)
      .withSuccessResponse[ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensDeviceImplDeviceServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeAemScreensPlayerPingfrequency 
   * @param comAdobeAemScreensDevicePaswordSpecialchars 
   * @param comAdobeAemScreensDevicePaswordMinlowercasechars 
   * @param comAdobeAemScreensDevicePaswordMinuppercasechars 
   * @param comAdobeAemScreensDevicePaswordMinnumberchars 
   * @param comAdobeAemScreensDevicePaswordMinspecialchars 
   * @param comAdobeAemScreensDevicePaswordMinlength 
   */
  def comAdobeCqScreensDeviceImplDeviceService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeAemScreensPlayerPingfrequency: Option[Int] = None, comAdobeAemScreensDevicePaswordSpecialchars: Option[String] = None, comAdobeAemScreensDevicePaswordMinlowercasechars: Option[Int] = None, comAdobeAemScreensDevicePaswordMinuppercasechars: Option[Int] = None, comAdobeAemScreensDevicePaswordMinnumberchars: Option[Int] = None, comAdobeAemScreensDevicePaswordMinspecialchars: Option[Int] = None, comAdobeAemScreensDevicePaswordMinlength: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.aem.screens.player.pingfrequency", comAdobeAemScreensPlayerPingfrequency)
      .withQueryParam("com.adobe.aem.screens.device.pasword.specialchars", comAdobeAemScreensDevicePaswordSpecialchars)
      .withQueryParam("com.adobe.aem.screens.device.pasword.minlowercasechars", comAdobeAemScreensDevicePaswordMinlowercasechars)
      .withQueryParam("com.adobe.aem.screens.device.pasword.minuppercasechars", comAdobeAemScreensDevicePaswordMinuppercasechars)
      .withQueryParam("com.adobe.aem.screens.device.pasword.minnumberchars", comAdobeAemScreensDevicePaswordMinnumberchars)
      .withQueryParam("com.adobe.aem.screens.device.pasword.minspecialchars", comAdobeAemScreensDevicePaswordMinspecialchars)
      .withQueryParam("com.adobe.aem.screens.device.pasword.minlength", comAdobeAemScreensDevicePaswordMinlength)
      .withSuccessResponse[ComAdobeCqScreensDeviceImplDeviceServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param deviceRegistrationTimeout 
   */
  def comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], deviceRegistrationTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("deviceRegistrationTimeout", deviceRegistrationTimeout)
      .withSuccessResponse[ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqPagesupdatehandlerImageresourcetypes 
   * @param cqPagesupdatehandlerProductresourcetypes 
   * @param cqPagesupdatehandlerVideoresourcetypes 
   * @param cqPagesupdatehandlerDynamicsequenceresourcetypes 
   * @param cqPagesupdatehandlerPreviewmodepaths 
   */
  def comAdobeCqScreensImplHandlerChannelsUpdateHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqPagesupdatehandlerImageresourcetypes: Seq[String], cqPagesupdatehandlerProductresourcetypes: Seq[String], cqPagesupdatehandlerVideoresourcetypes: Seq[String], cqPagesupdatehandlerDynamicsequenceresourcetypes: Seq[String], cqPagesupdatehandlerPreviewmodepaths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.pagesupdatehandler.imageresourcetypes", ArrayValues(cqPagesupdatehandlerImageresourcetypes, MULTI))
      .withQueryParam("cq.pagesupdatehandler.productresourcetypes", ArrayValues(cqPagesupdatehandlerProductresourcetypes, MULTI))
      .withQueryParam("cq.pagesupdatehandler.videoresourcetypes", ArrayValues(cqPagesupdatehandlerVideoresourcetypes, MULTI))
      .withQueryParam("cq.pagesupdatehandler.dynamicsequenceresourcetypes", ArrayValues(cqPagesupdatehandlerDynamicsequenceresourcetypes, MULTI))
      .withQueryParam("cq.pagesupdatehandler.previewmodepaths", ArrayValues(cqPagesupdatehandlerPreviewmodepaths, MULTI))
      .withSuccessResponse[ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerExpression 
   */
  def comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerExpression: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withSuccessResponse[ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeAemScreensImplRemoteRequestTimeout 
   */
  def comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeAemScreensImplRemoteRequestTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.aem.screens.impl.remote.request_timeout", comAdobeAemScreensImplRemoteRequestTimeout)
      .withSuccessResponse[ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensImplScreensChannelPostProcessorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param screensChannelsPropertiesToRemove 
   */
  def comAdobeCqScreensImplScreensChannelPostProcessor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], screensChannelsPropertiesToRemove: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("screens.channels.properties.to.remove", ArrayValues(screensChannelsPropertiesToRemove, MULTI))
      .withSuccessResponse[ComAdobeCqScreensImplScreensChannelPostProcessorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath 
   * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency 
   * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout 
   * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients 
   * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver 
   * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport 
   * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls 
   * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername 
   * @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword 
   */
  def comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: Seq[String], comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: Option[String] = None, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: Option[Int] = None, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: Option[String] = None, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: Option[String] = None, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: Option[Int] = None, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: Option[Boolean] = None, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: Option[String] = None, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath", ArrayValues(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, MULTI))
      .withQueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency", comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency)
      .withQueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout", comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout)
      .withQueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients", comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients)
      .withQueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver", comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver)
      .withQueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport", comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport)
      .withQueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls", comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls)
      .withQueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username", comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername)
      .withQueryParam("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password", comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword)
      .withSuccessResponse[ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param globalSize 
   * @param maxDiskUsage 
   * @param persistenceEnabled 
   * @param threadPoolMaxSize 
   * @param scheduledThreadPoolMaxSize 
   * @param gracefulShutdownTimeout 
   * @param queues 
   * @param topics 
   * @param addressesMaxDeliveryAttempts 
   * @param addressesExpiryDelay 
   * @param addressesAddressFullMessagePolicy 
   * @param addressesMaxSizeBytes 
   * @param addressesPageSizeBytes 
   * @param addressesPageCacheMaxSize 
   * @param clusterUser 
   * @param clusterPassword 
   * @param clusterCallTimeout 
   * @param clusterCallFailoverTimeout 
   * @param clusterClientFailureCheckPeriod 
   * @param clusterNotificationAttempts 
   * @param clusterNotificationInterval 
   * @param idCacheSize 
   * @param clusterConfirmationWindowSize 
   * @param clusterConnectionTtl 
   * @param clusterDuplicateDetection 
   * @param clusterInitialConnectAttempts 
   * @param clusterMaxRetryInterval 
   * @param clusterMinLargeMessageSize 
   * @param clusterProducerWindowSize 
   * @param clusterReconnectAttempts 
   * @param clusterRetryInterval 
   * @param clusterRetryIntervalMultiplier 
   */
  def comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, globalSize: Option[Int] = None, maxDiskUsage: Option[Int] = None, persistenceEnabled: Option[Boolean] = None, threadPoolMaxSize: Option[Int] = None, scheduledThreadPoolMaxSize: Option[Int] = None, gracefulShutdownTimeout: Option[Int] = None, queues: Seq[String], topics: Seq[String], addressesMaxDeliveryAttempts: Option[Int] = None, addressesExpiryDelay: Option[Int] = None, addressesAddressFullMessagePolicy: Option[String] = None, addressesMaxSizeBytes: Option[Int] = None, addressesPageSizeBytes: Option[Int] = None, addressesPageCacheMaxSize: Option[Int] = None, clusterUser: Option[String] = None, clusterPassword: Option[String] = None, clusterCallTimeout: Option[Int] = None, clusterCallFailoverTimeout: Option[Int] = None, clusterClientFailureCheckPeriod: Option[Int] = None, clusterNotificationAttempts: Option[Int] = None, clusterNotificationInterval: Option[Int] = None, idCacheSize: Option[Int] = None, clusterConfirmationWindowSize: Option[Int] = None, clusterConnectionTtl: Option[Int] = None, clusterDuplicateDetection: Option[Boolean] = None, clusterInitialConnectAttempts: Option[Int] = None, clusterMaxRetryInterval: Option[Int] = None, clusterMinLargeMessageSize: Option[Int] = None, clusterProducerWindowSize: Option[Int] = None, clusterReconnectAttempts: Option[Int] = None, clusterRetryInterval: Option[Int] = None, clusterRetryIntervalMultiplier: Option[Double] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("global.size", globalSize)
      .withQueryParam("max.disk.usage", maxDiskUsage)
      .withQueryParam("persistence.enabled", persistenceEnabled)
      .withQueryParam("thread.pool.max.size", threadPoolMaxSize)
      .withQueryParam("scheduled.thread.pool.max.size", scheduledThreadPoolMaxSize)
      .withQueryParam("graceful.shutdown.timeout", gracefulShutdownTimeout)
      .withQueryParam("queues", ArrayValues(queues, MULTI))
      .withQueryParam("topics", ArrayValues(topics, MULTI))
      .withQueryParam("addresses.max.delivery.attempts", addressesMaxDeliveryAttempts)
      .withQueryParam("addresses.expiry.delay", addressesExpiryDelay)
      .withQueryParam("addresses.address.full.message.policy", addressesAddressFullMessagePolicy)
      .withQueryParam("addresses.max.size.bytes", addressesMaxSizeBytes)
      .withQueryParam("addresses.page.size.bytes", addressesPageSizeBytes)
      .withQueryParam("addresses.page.cache.max.size", addressesPageCacheMaxSize)
      .withQueryParam("cluster.user", clusterUser)
      .withQueryParam("cluster.password", clusterPassword)
      .withQueryParam("cluster.call.timeout", clusterCallTimeout)
      .withQueryParam("cluster.call.failover.timeout", clusterCallFailoverTimeout)
      .withQueryParam("cluster.client.failure.check.period", clusterClientFailureCheckPeriod)
      .withQueryParam("cluster.notification.attempts", clusterNotificationAttempts)
      .withQueryParam("cluster.notification.interval", clusterNotificationInterval)
      .withQueryParam("id.cache.size", idCacheSize)
      .withQueryParam("cluster.confirmation.window.size", clusterConfirmationWindowSize)
      .withQueryParam("cluster.connection.ttl", clusterConnectionTtl)
      .withQueryParam("cluster.duplicate.detection", clusterDuplicateDetection)
      .withQueryParam("cluster.initial.connect.attempts", clusterInitialConnectAttempts)
      .withQueryParam("cluster.max.retry.interval", clusterMaxRetryInterval)
      .withQueryParam("cluster.min.large.message.size", clusterMinLargeMessageSize)
      .withQueryParam("cluster.producer.window.size", clusterProducerWindowSize)
      .withQueryParam("cluster.reconnect.attempts", clusterReconnectAttempts)
      .withQueryParam("cluster.retry.interval", clusterRetryInterval)
      .withQueryParam("cluster.retry.interval.multiplier", clusterRetryIntervalMultiplier)
      .withSuccessResponse[ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath 
   * @param comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency 
   */
  def comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: Seq[String], comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath", ArrayValues(comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, MULTI))
      .withQueryParam("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency", comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency)
      .withSuccessResponse[ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param disableSmartSync 
   */
  def comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], disableSmartSync: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("disableSmartSync", disableSmartSync)
      .withSuccessResponse[ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enableDataTriggeredContent 
   */
  def comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enableDataTriggeredContent: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enableDataTriggeredContent", enableDataTriggeredContent)
      .withSuccessResponse[ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   * @param dispatcherAddress 
   * @param dispatcherFilterAllowed 
   * @param dispatcherFilterBlocked 
   */
  def comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String], dispatcherAddress: Option[String] = None, dispatcherFilterAllowed: Seq[String], dispatcherFilterBlocked: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("dispatcher.address", dispatcherAddress)
      .withQueryParam("dispatcher.filter.allowed", ArrayValues(dispatcherFilterAllowed, MULTI))
      .withQueryParam("dispatcher.filter.blocked", ArrayValues(dispatcherFilterBlocked, MULTI))
      .withSuccessResponse[ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   * @param webserverAddress 
   */
  def comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String], webserverAddress: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("webserver.address", webserverAddress)
      .withSuccessResponse[ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enable 
   * @param ttl1 
   * @param ttl2 
   */
  def comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enable: Option[Boolean] = None, ttl1: Option[Int] = None, ttl2: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enable", enable)
      .withQueryParam("ttl1", ttl1)
      .withQueryParam("ttl2", ttl2)
      .withSuccessResponse[ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priority 
   */
  def comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priority: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priority", priority)
      .withSuccessResponse[ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priority 
   */
  def comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priority: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priority", priority)
      .withSuccessResponse[ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventTopics 
   * @param eventFilter 
   */
  def comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventTopics: Option[String] = None, eventFilter: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.topics", eventTopics)
      .withQueryParam("event.filter", eventFilter)
      .withSuccessResponse[ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param accepted 
   * @param ranked 
   */
  def comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], accepted: Option[Boolean] = None, ranked: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("accepted", accepted)
      .withQueryParam("ranked", ranked)
      .withSuccessResponse[ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param ranking 
   * @param enable 
   */
  def comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], ranking: Option[Int] = None, enable: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("ranking", ranking)
      .withQueryParam("enable", enable)
      .withSuccessResponse[ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param streamPath 
   * @param streamName 
   */
  def comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], streamPath: Option[String] = None, streamName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("streamPath", streamPath)
      .withQueryParam("streamName", streamName)
      .withSuccessResponse[ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxRetry 
   * @param fieldWhitelist 
   * @param attachmentTypeBlacklist 
   */
  def comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxRetry: Option[Int] = None, fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("MaxRetry", maxRetry)
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withQueryParam("attachmentTypeBlacklist", ArrayValues(attachmentTypeBlacklist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param attachmentTypeBlacklist 
   * @param extensionOrder 
   */
  def comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], attachmentTypeBlacklist: Option[String] = None, extensionOrder: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("attachmentTypeBlacklist", attachmentTypeBlacklist)
      .withQueryParam("extension.order", extensionOrder)
      .withSuccessResponse[ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCalendarServletsTimeZoneServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param timezonesExpirytime 
   */
  def comAdobeCqSocialCalendarServletsTimeZoneServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], timezonesExpirytime: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("timezones.expirytime", timezonesExpirytime)
      .withSuccessResponse[ComAdobeCqSocialCalendarServletsTimeZoneServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param ranking 
   */
  def comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], ranking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("ranking", ranking)
      .withSuccessResponse[ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   * @param attachmentTypeBlacklist 
   */
  def comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withQueryParam("attachmentTypeBlacklist", ArrayValues(attachmentTypeBlacklist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   * @param attachmentTypeBlacklist 
   */
  def comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withQueryParam("attachmentTypeBlacklist", ArrayValues(attachmentTypeBlacklist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param numUserLimit 
   */
  def comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], numUserLimit: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("numUserLimit", numUserLimit)
      .withSuccessResponse[ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enableScheduledPostsSearch 
   * @param numberOfMinutes 
   * @param maxSearchLimit 
   */
  def comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enableScheduledPostsSearch: Option[Boolean] = None, numberOfMinutes: Option[Int] = None, maxSearchLimit: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enableScheduledPostsSearch", enableScheduledPostsSearch)
      .withQueryParam("numberOfMinutes", numberOfMinutes)
      .withQueryParam("maxSearchLimit", maxSearchLimit)
      .withSuccessResponse[ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param corsEnabling 
   */
  def comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], corsEnabling: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cors.enabling", corsEnabling)
      .withSuccessResponse[ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priorityOrder 
   * @param replyEmailPatterns 
   */
  def comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priorityOrder: Option[Int] = None, replyEmailPatterns: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priorityOrder", priorityOrder)
      .withQueryParam("replyEmailPatterns", ArrayValues(replyEmailPatterns, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param contextPath 
   */
  def comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], contextPath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("context.path", contextPath)
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventTopics 
   */
  def comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventTopics: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.topics", eventTopics)
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priorityOrder 
   * @param replyEmailPatterns 
   */
  def comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priorityOrder: Option[Int] = None, replyEmailPatterns: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priorityOrder", priorityOrder)
      .withQueryParam("replyEmailPatterns", ArrayValues(replyEmailPatterns, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param patternTime 
   * @param patternNewline 
   * @param patternDayOfMonth 
   * @param patternMonth 
   * @param patternYear 
   * @param patternDate 
   * @param patternDateTime 
   * @param patternEmail 
   */
  def comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], patternTime: Option[String] = None, patternNewline: Option[String] = None, patternDayOfMonth: Option[String] = None, patternMonth: Option[String] = None, patternYear: Option[String] = None, patternDate: Option[String] = None, patternDateTime: Option[String] = None, patternEmail: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("pattern.time", patternTime)
      .withQueryParam("pattern.newline", patternNewline)
      .withQueryParam("pattern.dayOfMonth", patternDayOfMonth)
      .withQueryParam("pattern.month", patternMonth)
      .withQueryParam("pattern.year", patternYear)
      .withQueryParam("pattern.date", patternDate)
      .withQueryParam("pattern.dateTime", patternDateTime)
      .withQueryParam("pattern.email", patternEmail)
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param emailName 
   * @param emailCreatePostFromReply 
   * @param emailAddCommentIdTo 
   * @param emailSubjectMaximumLength 
   * @param emailReplyToAddress 
   * @param emailReplyToDelimiter 
   * @param emailTrackerIdPrefixInSubject 
   * @param emailTrackerIdPrefixInBody 
   * @param emailAsHTML 
   * @param emailDefaultUserName 
   * @param emailTemplatesRootPath 
   */
  def comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], emailName: Option[String] = None, emailCreatePostFromReply: Option[Boolean] = None, emailAddCommentIdTo: Option[String] = None, emailSubjectMaximumLength: Option[Int] = None, emailReplyToAddress: Option[String] = None, emailReplyToDelimiter: Option[String] = None, emailTrackerIdPrefixInSubject: Option[String] = None, emailTrackerIdPrefixInBody: Option[String] = None, emailAsHTML: Option[Boolean] = None, emailDefaultUserName: Option[String] = None, emailTemplatesRootPath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("email.name", emailName)
      .withQueryParam("email.createPostFromReply", emailCreatePostFromReply)
      .withQueryParam("email.addCommentIdTo", emailAddCommentIdTo)
      .withQueryParam("email.subjectMaximumLength", emailSubjectMaximumLength)
      .withQueryParam("email.replyToAddress", emailReplyToAddress)
      .withQueryParam("email.replyToDelimiter", emailReplyToDelimiter)
      .withQueryParam("email.trackerIdPrefixInSubject", emailTrackerIdPrefixInSubject)
      .withQueryParam("email.trackerIdPrefixInBody", emailTrackerIdPrefixInBody)
      .withQueryParam("email.asHTML", emailAsHTML)
      .withQueryParam("email.defaultUserName", emailDefaultUserName)
      .withQueryParam("email.templates.rootPath", emailTemplatesRootPath)
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param connectProtocol 
   */
  def comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], connectProtocol: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("connectProtocol", connectProtocol)
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priorityOrder 
   * @param replyEmailPatterns 
   */
  def comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priorityOrder: Option[Int] = None, replyEmailPatterns: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priorityOrder", priorityOrder)
      .withQueryParam("replyEmailPatterns", ArrayValues(replyEmailPatterns, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priorityOrder 
   * @param replyEmailPatterns 
   */
  def comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priorityOrder: Option[Int] = None, replyEmailPatterns: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priorityOrder", priorityOrder)
      .withQueryParam("replyEmailPatterns", ArrayValues(replyEmailPatterns, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priorityOrder 
   * @param replyEmailPatterns 
   */
  def comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priorityOrder: Option[Int] = None, replyEmailPatterns: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priorityOrder", priorityOrder)
      .withQueryParam("replyEmailPatterns", ArrayValues(replyEmailPatterns, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priorityOrder 
   * @param replyEmailPatterns 
   */
  def comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priorityOrder: Option[Int] = None, replyEmailPatterns: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priorityOrder", priorityOrder)
      .withQueryParam("replyEmailPatterns", ArrayValues(replyEmailPatterns, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param replyEmailPatterns 
   * @param priorityOrder 
   */
  def comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], replyEmailPatterns: Seq[String], priorityOrder: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("replyEmailPatterns", ArrayValues(replyEmailPatterns, MULTI))
      .withQueryParam("priorityOrder", priorityOrder)
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priorityOrder 
   * @param replyEmailPatterns 
   */
  def comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priorityOrder: Option[Int] = None, replyEmailPatterns: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priorityOrder", priorityOrder)
      .withQueryParam("replyEmailPatterns", ArrayValues(replyEmailPatterns, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param numberOfDays 
   * @param ageOfFile 
   */
  def comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], numberOfDays: Option[Int] = None, ageOfFile: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("numberOfDays", numberOfDays)
      .withQueryParam("ageOfFile", ageOfFile)
      .withSuccessResponse[ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventTopics 
   * @param eventFilter 
   * @param verbs 
   */
  def comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventTopics: Option[String] = None, eventFilter: Option[String] = None, verbs: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.topics", eventTopics)
      .withQueryParam("event.filter", eventFilter)
      .withQueryParam("verbs", ArrayValues(verbs, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enable 
   * @param uGCLimit 
   * @param ugcLimitDuration 
   * @param domains 
   * @param toList 
   */
  def comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enable: Option[Boolean] = None, uGCLimit: Option[Int] = None, ugcLimitDuration: Option[Int] = None, domains: Seq[String], toList: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enable", enable)
      .withQueryParam("UGCLimit", uGCLimit)
      .withQueryParam("ugcLimitDuration", ugcLimitDuration)
      .withQueryParam("domains", ArrayValues(domains, MULTI))
      .withQueryParam("toList", ArrayValues(toList, MULTI))
      .withSuccessResponse[ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthProviderId 
   * @param oauthCloudConfigRoot 
   * @param providerConfigRoot 
   * @param providerConfigCreateTagsEnabled 
   * @param providerConfigUserFolder 
   * @param providerConfigFacebookFetchFields 
   * @param providerConfigFacebookFields 
   * @param providerConfigRefreshUserdataEnabled 
   */
  def comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthProviderId: Option[String] = None, oauthCloudConfigRoot: Option[String] = None, providerConfigRoot: Option[String] = None, providerConfigCreateTagsEnabled: Option[Boolean] = None, providerConfigUserFolder: Option[String] = None, providerConfigFacebookFetchFields: Option[Boolean] = None, providerConfigFacebookFields: Seq[String], providerConfigRefreshUserdataEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.provider.id", oauthProviderId)
      .withQueryParam("oauth.cloud.config.root", oauthCloudConfigRoot)
      .withQueryParam("provider.config.root", providerConfigRoot)
      .withQueryParam("provider.config.create.tags.enabled", providerConfigCreateTagsEnabled)
      .withQueryParam("provider.config.user.folder", providerConfigUserFolder)
      .withQueryParam("provider.config.facebook.fetch.fields", providerConfigFacebookFetchFields)
      .withQueryParam("provider.config.facebook.fields", ArrayValues(providerConfigFacebookFields, MULTI))
      .withQueryParam("provider.config.refresh.userdata.enabled", providerConfigRefreshUserdataEnabled)
      .withSuccessResponse[ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   * @param serviceRanking 
   */
  def comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Seq[String], serviceRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", ArrayValues(path, MULTI))
      .withQueryParam("service.ranking", serviceRanking)
      .withSuccessResponse[ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param facebook 
   * @param twitter 
   * @param providerConfigUserFolder 
   */
  def comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], facebook: Seq[String], twitter: Seq[String], providerConfigUserFolder: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("facebook", ArrayValues(facebook, MULTI))
      .withQueryParam("twitter", ArrayValues(twitter, MULTI))
      .withQueryParam("provider.config.user.folder", providerConfigUserFolder)
      .withSuccessResponse[ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthProviderId 
   * @param oauthCloudConfigRoot 
   * @param providerConfigRoot 
   * @param providerConfigUserFolder 
   * @param providerConfigTwitterEnableParams 
   * @param providerConfigTwitterParams 
   * @param providerConfigRefreshUserdataEnabled 
   */
  def comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthProviderId: Option[String] = None, oauthCloudConfigRoot: Option[String] = None, providerConfigRoot: Option[String] = None, providerConfigUserFolder: Option[String] = None, providerConfigTwitterEnableParams: Option[Boolean] = None, providerConfigTwitterParams: Seq[String], providerConfigRefreshUserdataEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.provider.id", oauthProviderId)
      .withQueryParam("oauth.cloud.config.root", oauthCloudConfigRoot)
      .withQueryParam("provider.config.root", providerConfigRoot)
      .withQueryParam("provider.config.user.folder", providerConfigUserFolder)
      .withQueryParam("provider.config.twitter.enable.params", providerConfigTwitterEnableParams)
      .withQueryParam("provider.config.twitter.params", ArrayValues(providerConfigTwitterParams, MULTI))
      .withQueryParam("provider.config.refresh.userdata.enabled", providerConfigRefreshUserdataEnabled)
      .withSuccessResponse[ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqSocialContentFragmentsServicesEnabled 
   * @param cqSocialContentFragmentsServicesWaitTimeSeconds 
   */
  def comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqSocialContentFragmentsServicesEnabled: Option[Boolean] = None, cqSocialContentFragmentsServicesWaitTimeSeconds: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.social.content.fragments.services.enabled", cqSocialContentFragmentsServicesEnabled)
      .withQueryParam("cq.social.content.fragments.services.waitTimeSeconds", cqSocialContentFragmentsServicesWaitTimeSeconds)
      .withSuccessResponse[ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param versionId 
   * @param cacheOn 
   * @param concurrencyLevel 
   * @param cacheStartSize 
   * @param cacheTtl 
   * @param cacheSize 
   * @param timeLimit 
   */
  def comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], versionId: Option[String] = None, cacheOn: Option[Boolean] = None, concurrencyLevel: Option[Int] = None, cacheStartSize: Option[Int] = None, cacheTtl: Option[Int] = None, cacheSize: Option[Int] = None, timeLimit: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("version.id", versionId)
      .withQueryParam("cache.on", cacheOn)
      .withQueryParam("concurrency.level", concurrencyLevel)
      .withQueryParam("cache.start.size", cacheStartSize)
      .withQueryParam("cache.ttl", cacheTtl)
      .withQueryParam("cache.size", cacheSize)
      .withQueryParam("time.limit", timeLimit)
      .withSuccessResponse[ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param solrZkTimeout 
   * @param solrCommit 
   * @param cacheOn 
   * @param concurrencyLevel 
   * @param cacheStartSize 
   * @param cacheTtl 
   * @param cacheSize 
   */
  def comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], solrZkTimeout: Option[String] = None, solrCommit: Option[String] = None, cacheOn: Option[Boolean] = None, concurrencyLevel: Option[Int] = None, cacheStartSize: Option[Int] = None, cacheTtl: Option[Int] = None, cacheSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("solr.zk.timeout", solrZkTimeout)
      .withQueryParam("solr.commit", solrCommit)
      .withQueryParam("cache.on", cacheOn)
      .withQueryParam("concurrency.level", concurrencyLevel)
      .withQueryParam("cache.start.size", cacheStartSize)
      .withQueryParam("cache.ttl", cacheTtl)
      .withQueryParam("cache.size", cacheSize)
      .withSuccessResponse[ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param solrZkTimeout 
   * @param solrCommit 
   * @param cacheOn 
   * @param concurrencyLevel 
   * @param cacheStartSize 
   * @param cacheTtl 
   * @param cacheSize 
   */
  def comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], solrZkTimeout: Option[String] = None, solrCommit: Option[String] = None, cacheOn: Option[Boolean] = None, concurrencyLevel: Option[Int] = None, cacheStartSize: Option[Int] = None, cacheTtl: Option[Int] = None, cacheSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("solr.zk.timeout", solrZkTimeout)
      .withQueryParam("solr.commit", solrCommit)
      .withQueryParam("cache.on", cacheOn)
      .withQueryParam("concurrency.level", concurrencyLevel)
      .withQueryParam("cache.start.size", cacheStartSize)
      .withQueryParam("cache.ttl", cacheTtl)
      .withQueryParam("cache.size", cacheSize)
      .withSuccessResponse[ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param isMemberCheck 
   */
  def comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], isMemberCheck: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("isMemberCheck", isMemberCheck)
      .withSuccessResponse[ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param isMemberCheck 
   */
  def comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], isMemberCheck: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("isMemberCheck", isMemberCheck)
      .withSuccessResponse[ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   */
  def comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   */
  def comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   */
  def comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withSuccessResponse[ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletSelectors 
   * @param slingServletExtensions 
   */
  def comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletSelectors: Option[String] = None, slingServletExtensions: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.selectors", slingServletSelectors)
      .withQueryParam("sling.servlet.extensions", slingServletExtensions)
      .withSuccessResponse[ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   * @param attachmentTypeBlacklist 
   */
  def comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withQueryParam("attachmentTypeBlacklist", ArrayValues(attachmentTypeBlacklist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   * @param attachmentTypeBlacklist 
   */
  def comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withQueryParam("attachmentTypeBlacklist", ArrayValues(attachmentTypeBlacklist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param extensionOrder 
   * @param flushForumontopic 
   */
  def comAdobeCqSocialForumDispatcherImplFlushOperations(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], extensionOrder: Option[Int] = None, flushForumontopic: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("extension.order", extensionOrder)
      .withQueryParam("flush.forumontopic", flushForumontopic)
      .withSuccessResponse[ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param groupListingPaginationEnable 
   * @param groupListingLazyloadingEnable 
   * @param pageSize 
   * @param priority 
   */
  def comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], groupListingPaginationEnable: Option[Boolean] = None, groupListingLazyloadingEnable: Option[Boolean] = None, pageSize: Option[Int] = None, priority: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("group.listing.pagination.enable", groupListingPaginationEnable)
      .withQueryParam("group.listing.lazyloading.enable", groupListingLazyloadingEnable)
      .withQueryParam("page.size", pageSize)
      .withQueryParam("priority", priority)
      .withSuccessResponse[ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialGroupImplGroupServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxWaitTime 
   * @param minWaitBetweenRetries 
   */
  def comAdobeCqSocialGroupImplGroupServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxWaitTime: Option[Int] = None, minWaitBetweenRetries: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("maxWaitTime", maxWaitTime)
      .withQueryParam("minWaitBetweenRetries", minWaitBetweenRetries)
      .withSuccessResponse[ComAdobeCqSocialGroupImplGroupServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param parameterGuavaCacheEnabled 
   * @param parameterGuavaCacheParams 
   * @param parameterGuavaCacheReload 
   * @param serviceRanking 
   */
  def comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], parameterGuavaCacheEnabled: Option[Boolean] = None, parameterGuavaCacheParams: Option[String] = None, parameterGuavaCacheReload: Option[Boolean] = None, serviceRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("parameter.guava.cache.enabled", parameterGuavaCacheEnabled)
      .withQueryParam("parameter.guava.cache.params", parameterGuavaCacheParams)
      .withQueryParam("parameter.guava.cache.reload", parameterGuavaCacheReload)
      .withQueryParam("service.ranking", serviceRanking)
      .withSuccessResponse[ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   * @param attachmentTypeBlacklist 
   */
  def comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withQueryParam("attachmentTypeBlacklist", ArrayValues(attachmentTypeBlacklist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   * @param attachmentTypeBlacklist 
   */
  def comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withQueryParam("attachmentTypeBlacklist", ArrayValues(attachmentTypeBlacklist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   */
  def comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   */
  def comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param everyoneLimit 
   * @param priority 
   */
  def comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], everyoneLimit: Option[Int] = None, priority: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("everyoneLimit", everyoneLimit)
      .withQueryParam("priority", priority)
      .withSuccessResponse[ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param messageProperties 
   * @param messageBoxSizeLimit 
   * @param messageCountLimit 
   * @param notifyFailure 
   * @param failureMessageFrom 
   * @param failureTemplatePath 
   * @param maxRetries 
   * @param minWaitBetweenRetries 
   * @param countUpdatePoolSize 
   * @param inboxPath 
   * @param sentitemsPath 
   * @param supportAttachments 
   * @param supportGroupMessaging 
   * @param maxTotalRecipients 
   * @param batchSize 
   * @param maxTotalAttachmentSize 
   * @param attachmentTypeBlacklist 
   * @param allowedAttachmentTypes 
   * @param serviceSelector 
   * @param fieldWhitelist 
   */
  def comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], messageProperties: Seq[String], messageBoxSizeLimit: Option[Int] = None, messageCountLimit: Option[Int] = None, notifyFailure: Option[Boolean] = None, failureMessageFrom: Option[String] = None, failureTemplatePath: Option[String] = None, maxRetries: Option[Int] = None, minWaitBetweenRetries: Option[Int] = None, countUpdatePoolSize: Option[Int] = None, inboxPath: Option[String] = None, sentitemsPath: Option[String] = None, supportAttachments: Option[Boolean] = None, supportGroupMessaging: Option[Boolean] = None, maxTotalRecipients: Option[Int] = None, batchSize: Option[Int] = None, maxTotalAttachmentSize: Option[Int] = None, attachmentTypeBlacklist: Seq[String], allowedAttachmentTypes: Seq[String], serviceSelector: Option[String] = None, fieldWhitelist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("message.properties", ArrayValues(messageProperties, MULTI))
      .withQueryParam("messageBoxSizeLimit", messageBoxSizeLimit)
      .withQueryParam("messageCountLimit", messageCountLimit)
      .withQueryParam("notifyFailure", notifyFailure)
      .withQueryParam("failureMessageFrom", failureMessageFrom)
      .withQueryParam("failureTemplatePath", failureTemplatePath)
      .withQueryParam("maxRetries", maxRetries)
      .withQueryParam("minWaitBetweenRetries", minWaitBetweenRetries)
      .withQueryParam("countUpdatePoolSize", countUpdatePoolSize)
      .withQueryParam("inbox.path", inboxPath)
      .withQueryParam("sentitems.path", sentitemsPath)
      .withQueryParam("supportAttachments", supportAttachments)
      .withQueryParam("supportGroupMessaging", supportGroupMessaging)
      .withQueryParam("maxTotalRecipients", maxTotalRecipients)
      .withQueryParam("batchSize", batchSize)
      .withQueryParam("maxTotalAttachmentSize", maxTotalAttachmentSize)
      .withQueryParam("attachmentTypeBlacklist", ArrayValues(attachmentTypeBlacklist, MULTI))
      .withQueryParam("allowedAttachmentTypes", ArrayValues(allowedAttachmentTypes, MULTI))
      .withQueryParam("serviceSelector", serviceSelector)
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param resourceTypeFilters 
   * @param priority 
   */
  def comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], resourceTypeFilters: Seq[String], priority: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("resourceType.filters", ArrayValues(resourceTypeFilters, MULTI))
      .withQueryParam("priority", priority)
      .withSuccessResponse[ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priority 
   */
  def comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priority: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priority", priority)
      .withSuccessResponse[ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priority 
   */
  def comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priority: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priority", priority)
      .withSuccessResponse[ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param resourceTypeFilters 
   * @param priority 
   */
  def comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], resourceTypeFilters: Seq[String], priority: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("resourceType.filters", ArrayValues(resourceTypeFilters, MULTI))
      .withQueryParam("priority", priority)
      .withSuccessResponse[ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialNotificationsImplMentionsRouterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventTopics 
   * @param eventFilter 
   */
  def comAdobeCqSocialNotificationsImplMentionsRouter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventTopics: Option[String] = None, eventFilter: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.topics", eventTopics)
      .withQueryParam("event.filter", eventFilter)
      .withSuccessResponse[ComAdobeCqSocialNotificationsImplMentionsRouterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxUnreadNotificationCount 
   */
  def comAdobeCqSocialNotificationsImplNotificationManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxUnreadNotificationCount: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("max.unread.notification.count", maxUnreadNotificationCount)
      .withSuccessResponse[ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialNotificationsImplNotificationsRouterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventTopics 
   * @param eventFilter 
   */
  def comAdobeCqSocialNotificationsImplNotificationsRouter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventTopics: Option[String] = None, eventFilter: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.topics", eventTopics)
      .withQueryParam("event.filter", eventFilter)
      .withSuccessResponse[ComAdobeCqSocialNotificationsImplNotificationsRouterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   * @param attachmentTypeBlacklist 
   */
  def comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withQueryParam("attachmentTypeBlacklist", ArrayValues(attachmentTypeBlacklist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqSocialReportingAnalyticsPollingImporterInterval 
   * @param cqSocialReportingAnalyticsPollingImporterPageSize 
   */
  def comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqSocialReportingAnalyticsPollingImporterInterval: Option[Int] = None, cqSocialReportingAnalyticsPollingImporterPageSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.social.reporting.analytics.polling.importer.interval", cqSocialReportingAnalyticsPollingImporterInterval)
      .withQueryParam("cq.social.reporting.analytics.polling.importer.pageSize", cqSocialReportingAnalyticsPollingImporterPageSize)
      .withSuccessResponse[ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param reportFetchDelay 
   */
  def comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], reportFetchDelay: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("report.fetch.delay", reportFetchDelay)
      .withSuccessResponse[ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqSocialConsoleAnalyticsSitesMapping 
   * @param priority 
   */
  def comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqSocialConsoleAnalyticsSitesMapping: Seq[String], priority: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.social.console.analytics.sites.mapping", ArrayValues(cqSocialConsoleAnalyticsSitesMapping, MULTI))
      .withQueryParam("priority", priority)
      .withSuccessResponse[ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   * @param attachmentTypeBlacklist 
   */
  def comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String], attachmentTypeBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withQueryParam("attachmentTypeBlacklist", ArrayValues(attachmentTypeBlacklist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletSelectors 
   * @param slingServletExtensions 
   */
  def comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletSelectors: Option[String] = None, slingServletExtensions: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.selectors", slingServletSelectors)
      .withQueryParam("sling.servlet.extensions", slingServletExtensions)
      .withSuccessResponse[ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletSelectors 
   * @param slingServletExtensions 
   */
  def comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletSelectors: Seq[String], slingServletExtensions: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.selectors", ArrayValues(slingServletSelectors, MULTI))
      .withQueryParam("sling.servlet.extensions", slingServletExtensions)
      .withSuccessResponse[ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialScoringImplScoringEventListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventTopics 
   * @param eventFilter 
   */
  def comAdobeCqSocialScoringImplScoringEventListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventTopics: Option[String] = None, eventFilter: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.topics", eventTopics)
      .withQueryParam("event.filter", eventFilter)
      .withSuccessResponse[ComAdobeCqSocialScoringImplScoringEventListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enableFallback 
   */
  def comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enableFallback: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enableFallback", enableFallback)
      .withSuccessResponse[ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fieldWhitelist 
   * @param sitePathFilters 
   * @param sitePackageGroup 
   */
  def comAdobeCqSocialSiteEndpointsImplSiteOperationService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fieldWhitelist: Seq[String], sitePathFilters: Seq[String], sitePackageGroup: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fieldWhitelist", ArrayValues(fieldWhitelist, MULTI))
      .withQueryParam("sitePathFilters", ArrayValues(sitePathFilters, MULTI))
      .withQueryParam("sitePackageGroup", sitePackageGroup)
      .withSuccessResponse[ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqSocialConsoleAnalyticsComponents 
   */
  def comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqSocialConsoleAnalyticsComponents: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.social.console.analytics.components", ArrayValues(cqSocialConsoleAnalyticsComponents, MULTI))
      .withSuccessResponse[ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param componentsUsingTags 
   */
  def comAdobeCqSocialSiteImplSiteConfiguratorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], componentsUsingTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("componentsUsingTags", ArrayValues(componentsUsingTags, MULTI))
      .withSuccessResponse[ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialSrpImplSocialSolrConnectorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param srpType 
   */
  def comAdobeCqSocialSrpImplSocialSolrConnector(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], srpType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("srp.type", srpType)
      .withSuccessResponse[ComAdobeCqSocialSrpImplSocialSolrConnectorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialSyncImplDiffChangesObserverInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   * @param agentName 
   * @param diffPath 
   * @param propertyNames 
   */
  def comAdobeCqSocialSyncImplDiffChangesObserver(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None, agentName: Option[String] = None, diffPath: Option[String] = None, propertyNames: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withQueryParam("agentName", agentName)
      .withQueryParam("diffPath", diffPath)
      .withQueryParam("propertyNames", propertyNames)
      .withSuccessResponse[ComAdobeCqSocialSyncImplDiffChangesObserverInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param nodetypes 
   * @param ignorableprops 
   * @param ignorablenodes 
   * @param enabled 
   * @param distfolders 
   */
  def comAdobeCqSocialSyncImplGroupSyncListenerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], nodetypes: Seq[String], ignorableprops: Seq[String], ignorablenodes: Option[String] = None, enabled: Option[Boolean] = None, distfolders: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("nodetypes", ArrayValues(nodetypes, MULTI))
      .withQueryParam("ignorableprops", ArrayValues(ignorableprops, MULTI))
      .withQueryParam("ignorablenodes", ignorablenodes)
      .withQueryParam("enabled", enabled)
      .withQueryParam("distfolders", distfolders)
      .withSuccessResponse[ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param activeRunModes 
   */
  def comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], activeRunModes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("activeRunModes", ArrayValues(activeRunModes, MULTI))
      .withSuccessResponse[ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialSyncImplUserSyncListenerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param nodetypes 
   * @param ignorableprops 
   * @param ignorablenodes 
   * @param enabled 
   * @param distfolders 
   */
  def comAdobeCqSocialSyncImplUserSyncListenerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], nodetypes: Seq[String], ignorableprops: Seq[String], ignorablenodes: Seq[String], enabled: Option[Boolean] = None, distfolders: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("nodetypes", ArrayValues(nodetypes, MULTI))
      .withQueryParam("ignorableprops", ArrayValues(ignorableprops, MULTI))
      .withQueryParam("ignorablenodes", ArrayValues(ignorablenodes, MULTI))
      .withQueryParam("enabled", enabled)
      .withQueryParam("distfolders", ArrayValues(distfolders, MULTI))
      .withSuccessResponse[ComAdobeCqSocialSyncImplUserSyncListenerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param translateLanguage 
   * @param translateDisplay 
   * @param translateAttribution 
   * @param translateCaching 
   * @param translateSmartRendering 
   * @param translateCachingDuration 
   * @param translateSessionSaveInterval 
   * @param translateSessionSaveBatchLimit 
   */
  def comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], translateLanguage: Option[String] = None, translateDisplay: Option[String] = None, translateAttribution: Option[Boolean] = None, translateCaching: Option[String] = None, translateSmartRendering: Option[String] = None, translateCachingDuration: Option[String] = None, translateSessionSaveInterval: Option[String] = None, translateSessionSaveBatchLimit: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("translate.language", translateLanguage)
      .withQueryParam("translate.display", translateDisplay)
      .withQueryParam("translate.attribution", translateAttribution)
      .withQueryParam("translate.caching", translateCaching)
      .withQueryParam("translate.smart.rendering", translateSmartRendering)
      .withQueryParam("translate.caching.duration", translateCachingDuration)
      .withQueryParam("translate.session.save.interval", translateSessionSaveInterval)
      .withQueryParam("translate.session.save.batchLimit", translateSessionSaveBatchLimit)
      .withSuccessResponse[ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventTopics 
   * @param eventFilter 
   * @param translateListenerType 
   * @param translatePropertyList 
   * @param poolSize 
   * @param maxPoolSize 
   * @param queueSize 
   * @param keepAliveTime 
   */
  def comAdobeCqSocialTranslationImplUGCLanguageDetector(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventTopics: Option[String] = None, eventFilter: Option[String] = None, translateListenerType: Seq[String], translatePropertyList: Seq[String], poolSize: Option[Int] = None, maxPoolSize: Option[Int] = None, queueSize: Option[Int] = None, keepAliveTime: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.topics", eventTopics)
      .withQueryParam("event.filter", eventFilter)
      .withQueryParam("translate.listener.type", ArrayValues(translateListenerType, MULTI))
      .withQueryParam("translate.property.list", ArrayValues(translatePropertyList, MULTI))
      .withQueryParam("poolSize", poolSize)
      .withQueryParam("maxPoolSize", maxPoolSize)
      .withQueryParam("queueSize", queueSize)
      .withQueryParam("keepAliveTime", keepAliveTime)
      .withSuccessResponse[ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param threadPoolSize 
   * @param delayTime 
   * @param workerSleepTime 
   */
  def comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], threadPoolSize: Option[Int] = None, delayTime: Option[Int] = None, workerSleepTime: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("threadPoolSize", threadPoolSize)
      .withQueryParam("delayTime", delayTime)
      .withQueryParam("workerSleepTime", workerSleepTime)
      .withSuccessResponse[ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param poolSize 
   * @param maxPoolSize 
   * @param queueSize 
   * @param keepAliveTime 
   */
  def comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], poolSize: Option[Int] = None, maxPoolSize: Option[Int] = None, queueSize: Option[Int] = None, keepAliveTime: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("poolSize", poolSize)
      .withQueryParam("maxPoolSize", maxPoolSize)
      .withQueryParam("queueSize", queueSize)
      .withQueryParam("keepAliveTime", keepAliveTime)
      .withSuccessResponse[ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param isPrimaryPublisher 
   */
  def comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], isPrimaryPublisher: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("isPrimaryPublisher", isPrimaryPublisher)
      .withSuccessResponse[ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param legacyCloudUGCPathMapping 
   */
  def comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], legacyCloudUGCPathMapping: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("legacyCloudUGCPathMapping", legacyCloudUGCPathMapping)
      .withSuccessResponse[ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param automoderationSequence 
   * @param automoderationOnfailurestop 
   */
  def comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], automoderationSequence: Seq[String], automoderationOnfailurestop: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("automoderation.sequence", ArrayValues(automoderationSequence, MULTI))
      .withQueryParam("automoderation.onfailurestop", automoderationOnfailurestop)
      .withSuccessResponse[ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param watchwordsPositive 
   * @param watchwordsNegative 
   * @param watchwordsPath 
   * @param sentimentPath 
   */
  def comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], watchwordsPositive: Seq[String], watchwordsNegative: Seq[String], watchwordsPath: Option[String] = None, sentimentPath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("watchwords.positive", ArrayValues(watchwordsPositive, MULTI))
      .withQueryParam("watchwords.negative", ArrayValues(watchwordsNegative, MULTI))
      .withQueryParam("watchwords.path", watchwordsPath)
      .withQueryParam("sentiment.path", sentimentPath)
      .withSuccessResponse[ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param defaultAttachmentTypeBlacklist 
   * @param baselineAttachmentTypeBlacklist 
   */
  def comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], defaultAttachmentTypeBlacklist: Seq[String], baselineAttachmentTypeBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("default.attachment.type.blacklist", ArrayValues(defaultAttachmentTypeBlacklist, MULTI))
      .withQueryParam("baseline.attachment.type.blacklist", ArrayValues(baselineAttachmentTypeBlacklist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param parameterWhitelist 
   * @param parameterWhitelistPrefixes 
   * @param binaryParameterWhitelist 
   * @param modifierWhitelist 
   * @param operationWhitelist 
   * @param operationWhitelistPrefixes 
   * @param typehintWhitelist 
   * @param resourcetypeWhitelist 
   */
  def comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], parameterWhitelist: Seq[String], parameterWhitelistPrefixes: Seq[String], binaryParameterWhitelist: Seq[String], modifierWhitelist: Seq[String], operationWhitelist: Seq[String], operationWhitelistPrefixes: Seq[String], typehintWhitelist: Seq[String], resourcetypeWhitelist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("parameter.whitelist", ArrayValues(parameterWhitelist, MULTI))
      .withQueryParam("parameter.whitelist.prefixes", ArrayValues(parameterWhitelistPrefixes, MULTI))
      .withQueryParam("binary.parameter.whitelist", ArrayValues(binaryParameterWhitelist, MULTI))
      .withQueryParam("modifier.whitelist", ArrayValues(modifierWhitelist, MULTI))
      .withQueryParam("operation.whitelist", ArrayValues(operationWhitelist, MULTI))
      .withQueryParam("operation.whitelist.prefixes", ArrayValues(operationWhitelistPrefixes, MULTI))
      .withQueryParam("typehint.whitelist", ArrayValues(typehintWhitelist, MULTI))
      .withQueryParam("resourcetype.whitelist", ArrayValues(resourcetypeWhitelist, MULTI))
      .withSuccessResponse[ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletExtensions 
   * @param slingServletPaths 
   * @param slingServletMethods 
   */
  def comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletExtensions: Option[String] = None, slingServletPaths: Option[String] = None, slingServletMethods: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.extensions", slingServletExtensions)
      .withQueryParam("sling.servlet.paths", slingServletPaths)
      .withQueryParam("sling.servlet.methods", slingServletMethods)
      .withSuccessResponse[ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqSocialUserImplTransportHttpToPublisherInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enable 
   * @param agentConfiguration 
   * @param contextPath 
   * @param disabledCipherSuites 
   * @param enabledCipherSuites 
   */
  def comAdobeCqSocialUserImplTransportHttpToPublisher(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enable: Option[Boolean] = None, agentConfiguration: Seq[String], contextPath: Option[String] = None, disabledCipherSuites: Seq[String], enabledCipherSuites: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enable", enable)
      .withQueryParam("agent.configuration", ArrayValues(agentConfiguration, MULTI))
      .withQueryParam("context.path", contextPath)
      .withQueryParam("disabled.cipher.suites", ArrayValues(disabledCipherSuites, MULTI))
      .withQueryParam("enabled.cipher.suites", ArrayValues(enabledCipherSuites, MULTI))
      .withSuccessResponse[ComAdobeCqSocialUserImplTransportHttpToPublisherInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param resourceTypes 
   */
  def comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], resourceTypes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("resource.types", ArrayValues(resourceTypes, MULTI))
      .withSuccessResponse[ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param deletePathRegexps 
   * @param deleteSql2Query 
   */
  def comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], deletePathRegexps: Seq[String], deleteSql2Query: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("delete.path.regexps", ArrayValues(deletePathRegexps, MULTI))
      .withQueryParam("delete.sql2.query", deleteSql2Query)
      .withSuccessResponse[ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param deleteNameRegexps 
   */
  def comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], deleteNameRegexps: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("delete.name.regexps", ArrayValues(deleteNameRegexps, MULTI))
      .withSuccessResponse[ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param threshold 
   * @param jobTopicName 
   * @param emailEnabled 
   */
  def comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], threshold: Option[Int] = None, jobTopicName: Option[String] = None, emailEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("threshold", threshold)
      .withQueryParam("jobTopicName", jobTopicName)
      .withQueryParam("emailEnabled", emailEnabled)
      .withSuccessResponse[ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerExpression 
   * @param jobPurgeThreshold 
   * @param jobPurgeMaxJobs 
   */
  def comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerExpression: Option[String] = None, jobPurgeThreshold: Option[Int] = None, jobPurgeMaxJobs: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withQueryParam("job.purge.threshold", jobPurgeThreshold)
      .withQueryParam("job.purge.max.jobs", jobPurgeMaxJobs)
      .withSuccessResponse[ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param threshold 
   * @param jobTopicName 
   * @param emailEnabled 
   */
  def comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], threshold: Option[Int] = None, jobTopicName: Option[String] = None, emailEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("threshold", threshold)
      .withQueryParam("jobTopicName", jobTopicName)
      .withQueryParam("emailEnabled", emailEnabled)
      .withSuccessResponse[ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param threshold 
   * @param jobTopicName 
   * @param emailEnabled 
   */
  def comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], threshold: Option[Int] = None, jobTopicName: Option[String] = None, emailEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("threshold", threshold)
      .withQueryParam("jobTopicName", jobTopicName)
      .withQueryParam("emailEnabled", emailEnabled)
      .withSuccessResponse[ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventFilter 
   * @param launchesEventhandlerThreadpoolMaxsize 
   * @param launchesEventhandlerThreadpoolPriority 
   * @param launchesEventhandlerUpdatelastmodification 
   */
  def comAdobeCqWcmLaunchesImplLaunchesEventHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventFilter: Option[String] = None, launchesEventhandlerThreadpoolMaxsize: Option[Int] = None, launchesEventhandlerThreadpoolPriority: Option[String] = None, launchesEventhandlerUpdatelastmodification: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.filter", eventFilter)
      .withQueryParam("launches.eventhandler.threadpool.maxsize", launchesEventhandlerThreadpoolMaxsize)
      .withQueryParam("launches.eventhandler.threadpool.priority", launchesEventhandlerThreadpoolPriority)
      .withQueryParam("launches.eventhandler.updatelastmodification", launchesEventhandlerUpdatelastmodification)
      .withSuccessResponse[ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqWcmQrcodeServletWhitelist 
   */
  def comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqWcmQrcodeServletWhitelist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.wcm.qrcode.servlet.whitelist", ArrayValues(cqWcmQrcodeServletWhitelist, MULTI))
      .withSuccessResponse[ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param size 
   */
  def comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], size: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("size", size)
      .withSuccessResponse[ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param syncTranslationStateSchedulingFormat 
   * @param schedulingRepeatTranslationSchedulingFormat 
   * @param syncTranslationStateLockTimeoutInMinutes 
   * @param exportFormat 
   */
  def comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], syncTranslationStateSchedulingFormat: Option[String] = None, schedulingRepeatTranslationSchedulingFormat: Option[String] = None, syncTranslationStateLockTimeoutInMinutes: Option[String] = None, exportFormat: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("syncTranslationState.schedulingFormat", syncTranslationStateSchedulingFormat)
      .withQueryParam("schedulingRepeatTranslation.schedulingFormat", schedulingRepeatTranslationSchedulingFormat)
      .withQueryParam("syncTranslationState.lockTimeoutInMinutes", syncTranslationStateLockTimeoutInMinutes)
      .withQueryParam("export.format", exportFormat)
      .withSuccessResponse[ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param portalOutboxes 
   * @param draftDataService 
   * @param draftMetadataService 
   * @param submitDataService 
   * @param submitMetadataService 
   * @param pendingSignDataService 
   * @param pendingSignMetadataService 
   */
  def comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], portalOutboxes: Seq[String], draftDataService: Option[String] = None, draftMetadataService: Option[String] = None, submitDataService: Option[String] = None, submitMetadataService: Option[String] = None, pendingSignDataService: Option[String] = None, pendingSignMetadataService: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("portal.outboxes", ArrayValues(portalOutboxes, MULTI))
      .withQueryParam("draft.data.service", draftDataService)
      .withQueryParam("draft.metadata.service", draftMetadataService)
      .withQueryParam("submit.data.service", submitDataService)
      .withQueryParam("submit.metadata.service", submitMetadataService)
      .withQueryParam("pendingSign.data.service", pendingSignDataService)
      .withQueryParam("pendingSign.metadata.service", pendingSignMetadataService)
      .withSuccessResponse[ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param formportalInterval 
   */
  def comAdobeFdFpConfigFormsPortalSchedulerService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], formportalInterval: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("formportal.interval", formportalInterval)
      .withSuccessResponse[ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeFormsCommonServiceImplDefaultDataProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param alloweddataFileLocations 
   */
  def comAdobeFormsCommonServiceImplDefaultDataProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], alloweddataFileLocations: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("alloweddataFileLocations", ArrayValues(alloweddataFileLocations, MULTI))
      .withSuccessResponse[ComAdobeFormsCommonServiceImplDefaultDataProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param tempStorageConfig 
   */
  def comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], tempStorageConfig: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("tempStorageConfig", tempStorageConfig)
      .withSuccessResponse[ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeFormsCommonServletTempCleanUpTaskInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerExpression 
   * @param durationForTemporaryStorage 
   * @param durationForAnonymousStorage 
   */
  def comAdobeFormsCommonServletTempCleanUpTask(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerExpression: Option[String] = None, durationForTemporaryStorage: Option[String] = None, durationForAnonymousStorage: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withQueryParam("Duration for Temporary Storage", durationForTemporaryStorage)
      .withQueryParam("Duration for Anonymous Storage", durationForAnonymousStorage)
      .withSuccessResponse[ComAdobeFormsCommonServletTempCleanUpTaskInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAcpPlatformPlatformServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param queryLimit 
   * @param fileTypeExtensionMap 
   */
  def comAdobeGraniteAcpPlatformPlatformServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], queryLimit: Option[Int] = None, fileTypeExtensionMap: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("query.limit", queryLimit)
      .withQueryParam("file.type.extension.map", ArrayValues(fileTypeExtensionMap, MULTI))
      .withSuccessResponse[ComAdobeGraniteAcpPlatformPlatformServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param aggregateRelationships 
   * @param aggregateDescendVirtual 
   */
  def comAdobeGraniteActivitystreamsImplActivityManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], aggregateRelationships: Seq[String], aggregateDescendVirtual: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("aggregate.relationships", ArrayValues(aggregateRelationships, MULTI))
      .withQueryParam("aggregate.descend.virtual", aggregateDescendVirtual)
      .withSuccessResponse[ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param disabled 
   */
  def comAdobeGraniteAnalyzerBaseSystemStatusServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], disabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("disabled", disabled)
      .withSuccessResponse[ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param disabled 
   */
  def comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], disabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("disabled", disabled)
      .withSuccessResponse[ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeCqCdnCdnRewriter 
   * @param comAdobeCqCloudConfigComponents 
   * @param comAdobeCqCloudConfigCore 
   * @param comAdobeCqCloudConfigUi 
   * @param comAdobeCqComAdobeCqEditor 
   * @param comAdobeCqComAdobeCqProjectsCore 
   * @param comAdobeCqComAdobeCqProjectsWcmCore 
   * @param comAdobeCqComAdobeCqUiCommons 
   * @param comAdobeCqComAdobeCqWcmStyle 
   * @param comAdobeCqCqActivitymapIntegration 
   * @param comAdobeCqCqContexthubCommons 
   * @param comAdobeCqCqDtm 
   * @param comAdobeCqCqHealthcheck 
   * @param comAdobeCqCqMultisiteTargeting 
   * @param comAdobeCqCqPreUpgradeCleanup 
   * @param comAdobeCqCqProductInfoProvider 
   * @param comAdobeCqCqRestSites 
   * @param comAdobeCqCqSecurityHc 
   * @param comAdobeCqDamCqDamSvgHandler 
   * @param comAdobeCqDamCqScene7Imaging 
   * @param comAdobeCqDtmReactorCore 
   * @param comAdobeCqDtmReactorUi 
   * @param comAdobeCqExpJspelResolver 
   * @param comAdobeCqInboxCqInbox 
   * @param comAdobeCqJsonSchemaParser 
   * @param comAdobeCqMediaCqMediaPublishingDpsFpCore 
   * @param comAdobeCqMobileCqMobileCaas 
   * @param comAdobeCqMobileCqMobileIndexBuilder 
   * @param comAdobeCqMobileCqMobilePhonegapBuild 
   * @param comAdobeCqMyspell 
   * @param comAdobeCqSampleWeRetailCore 
   * @param comAdobeCqScreensComAdobeCqScreensDcc 
   * @param comAdobeCqScreensComAdobeCqScreensMqCore 
   * @param comAdobeCqSocialCqSocialAsProvider 
   * @param comAdobeCqSocialCqSocialBadgingBasicImpl 
   * @param comAdobeCqSocialCqSocialBadgingImpl 
   * @param comAdobeCqSocialCqSocialCalendarImpl 
   * @param comAdobeCqSocialCqSocialContentFragmentsImpl 
   * @param comAdobeCqSocialCqSocialEnablementImpl 
   * @param comAdobeCqSocialCqSocialGraphImpl 
   * @param comAdobeCqSocialCqSocialIdeationImpl 
   * @param comAdobeCqSocialCqSocialJcrProvider 
   * @param comAdobeCqSocialCqSocialMembersImpl 
   * @param comAdobeCqSocialCqSocialMsProvider 
   * @param comAdobeCqSocialCqSocialNotificationsChannelsWeb 
   * @param comAdobeCqSocialCqSocialNotificationsImpl 
   * @param comAdobeCqSocialCqSocialRdbProvider 
   * @param comAdobeCqSocialCqSocialScfImpl 
   * @param comAdobeCqSocialCqSocialScoringBasicImpl 
   * @param comAdobeCqSocialCqSocialScoringImpl 
   * @param comAdobeCqSocialCqSocialServiceusersImpl 
   * @param comAdobeCqSocialCqSocialSrpImpl 
   * @param comAdobeCqSocialCqSocialUgcbaseImpl 
   * @param comAdobeDamCqDamCfmImpl 
   * @param comAdobeFormsFoundationFormsFoundationBase 
   * @param comAdobeGraniteApicontroller 
   * @param comAdobeGraniteAssetCore 
   * @param comAdobeGraniteAuthSso 
   * @param comAdobeGraniteBundlesHcImpl 
   * @param comAdobeGraniteCompatRouter 
   * @param comAdobeGraniteConf 
   * @param comAdobeGraniteConfUiCore 
   * @param comAdobeGraniteCors 
   * @param comAdobeGraniteCrxExplorer 
   * @param comAdobeGraniteCrxdeLite 
   * @param comAdobeGraniteCryptoConfig 
   * @param comAdobeGraniteCryptoExtension 
   * @param comAdobeGraniteCryptoFile 
   * @param comAdobeGraniteCryptoJcr 
   * @param comAdobeGraniteCsrf 
   * @param comAdobeGraniteDistributionCore 
   * @param comAdobeGraniteDropwizardMetrics 
   * @param comAdobeGraniteFragsImpl 
   * @param comAdobeGraniteGibson 
   * @param comAdobeGraniteInfocollector 
   * @param comAdobeGraniteInstallerFactoryPackages 
   * @param comAdobeGraniteJettySsl 
   * @param comAdobeGraniteJobsAsync 
   * @param comAdobeGraniteMaintenanceOak 
   * @param comAdobeGraniteMonitoringCore 
   * @param comAdobeGraniteQueries 
   * @param comAdobeGraniteReplicationHcImpl 
   * @param comAdobeGraniteRepositoryChecker 
   * @param comAdobeGraniteRepositoryHcImpl 
   * @param comAdobeGraniteRestAssets 
   * @param comAdobeGraniteSecurityUi 
   * @param comAdobeGraniteStartup 
   * @param comAdobeGraniteTagsoup 
   * @param comAdobeGraniteTaskmanagementCore 
   * @param comAdobeGraniteTaskmanagementWorkflow 
   * @param comAdobeGraniteUiClientlibsCompilerLess 
   * @param comAdobeGraniteUiClientlibsProcessorGcc 
   * @param comAdobeGraniteWebconsolePlugins 
   * @param comAdobeGraniteWorkflowConsole 
   * @param comAdobeXmpWorkerFilesNativeFragmentLinux 
   * @param comAdobeXmpWorkerFilesNativeFragmentMacosx 
   * @param comAdobeXmpWorkerFilesNativeFragmentWin 
   * @param comDayCommonsOsgiWrapperSimpleJndi 
   * @param comDayCqCqAuthhandler 
   * @param comDayCqCqCompatConfigupdate 
   * @param comDayCqCqLicensebranding 
   * @param comDayCqCqNotifcationImpl 
   * @param comDayCqCqReplicationAudit 
   * @param comDayCqCqSearchExt 
   * @param comDayCqDamCqDamAnnotationPrint 
   * @param comDayCqDamCqDamAssetUsage 
   * @param comDayCqDamCqDamS7dam 
   * @param comDayCqDamCqDamSimilaritysearch 
   * @param comDayCqDamDamWebdavSupport 
   * @param comDayCqPreUpgradeTasks 
   * @param comDayCqReplicationExtensions 
   * @param comDayCqWcmCqMsmCore 
   * @param comDayCqWcmCqWcmTranslation 
   * @param dayCommonsJrawio 
   * @param orgApacheAriesJmxWhiteboard 
   * @param orgApacheFelixHttpSslfilter 
   * @param orgApacheFelixOrgApacheFelixThreaddump 
   * @param orgApacheFelixWebconsolePluginsDs 
   * @param orgApacheFelixWebconsolePluginsEvent 
   * @param orgApacheFelixWebconsolePluginsMemoryusage 
   * @param orgApacheFelixWebconsolePluginsPackageadmin 
   * @param orgApacheJackrabbitOakAuthLdap 
   * @param orgApacheJackrabbitOakSegmentTar 
   * @param orgApacheJackrabbitOakSolrOsgi 
   * @param orgApacheSlingBundleresourceImpl 
   * @param orgApacheSlingCommonsFsclassloader 
   * @param orgApacheSlingCommonsLogWebconsole 
   * @param orgApacheSlingDatasource 
   * @param orgApacheSlingDiscoveryBase 
   * @param orgApacheSlingDiscoveryOak 
   * @param orgApacheSlingDiscoverySupport 
   * @param orgApacheSlingDistributionApi 
   * @param orgApacheSlingDistributionCore 
   * @param orgApacheSlingExtensionsWebconsolesecurityprovider 
   * @param orgApacheSlingHcWebconsole 
   * @param orgApacheSlingInstallerConsole 
   * @param orgApacheSlingInstallerProviderFile 
   * @param orgApacheSlingInstallerProviderJcr 
   * @param orgApacheSlingJcrDavex 
   * @param orgApacheSlingJcrResourcesecurity 
   * @param orgApacheSlingJmxProvider 
   * @param orgApacheSlingLaunchpadInstaller 
   * @param orgApacheSlingModelsImpl 
   * @param orgApacheSlingRepoinitParser 
   * @param orgApacheSlingResourceInventory 
   * @param orgApacheSlingResourceresolver 
   * @param orgApacheSlingScriptingJavascript 
   * @param orgApacheSlingScriptingJst 
   * @param orgApacheSlingScriptingSightlyJsProvider 
   * @param orgApacheSlingScriptingSightlyModelsProvider 
   * @param orgApacheSlingSecurity 
   * @param orgApacheSlingServletsCompat 
   * @param orgApacheSlingServletsGet 
   * @param orgApacheSlingStartupfilterDisabler 
   * @param orgApacheSlingTracer 
   * @param weRetailClientAppCore 
   */
  def comAdobeGraniteApicontrollerFilterResolverHookFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeCqCdnCdnRewriter: Option[String] = None, comAdobeCqCloudConfigComponents: Option[String] = None, comAdobeCqCloudConfigCore: Option[String] = None, comAdobeCqCloudConfigUi: Option[String] = None, comAdobeCqComAdobeCqEditor: Option[String] = None, comAdobeCqComAdobeCqProjectsCore: Option[String] = None, comAdobeCqComAdobeCqProjectsWcmCore: Option[String] = None, comAdobeCqComAdobeCqUiCommons: Option[String] = None, comAdobeCqComAdobeCqWcmStyle: Option[String] = None, comAdobeCqCqActivitymapIntegration: Option[String] = None, comAdobeCqCqContexthubCommons: Option[String] = None, comAdobeCqCqDtm: Option[String] = None, comAdobeCqCqHealthcheck: Option[String] = None, comAdobeCqCqMultisiteTargeting: Option[String] = None, comAdobeCqCqPreUpgradeCleanup: Option[String] = None, comAdobeCqCqProductInfoProvider: Option[String] = None, comAdobeCqCqRestSites: Option[String] = None, comAdobeCqCqSecurityHc: Option[String] = None, comAdobeCqDamCqDamSvgHandler: Option[String] = None, comAdobeCqDamCqScene7Imaging: Option[String] = None, comAdobeCqDtmReactorCore: Option[String] = None, comAdobeCqDtmReactorUi: Option[String] = None, comAdobeCqExpJspelResolver: Option[String] = None, comAdobeCqInboxCqInbox: Option[String] = None, comAdobeCqJsonSchemaParser: Option[String] = None, comAdobeCqMediaCqMediaPublishingDpsFpCore: Option[String] = None, comAdobeCqMobileCqMobileCaas: Option[String] = None, comAdobeCqMobileCqMobileIndexBuilder: Option[String] = None, comAdobeCqMobileCqMobilePhonegapBuild: Option[String] = None, comAdobeCqMyspell: Option[String] = None, comAdobeCqSampleWeRetailCore: Option[String] = None, comAdobeCqScreensComAdobeCqScreensDcc: Option[String] = None, comAdobeCqScreensComAdobeCqScreensMqCore: Option[String] = None, comAdobeCqSocialCqSocialAsProvider: Option[String] = None, comAdobeCqSocialCqSocialBadgingBasicImpl: Option[String] = None, comAdobeCqSocialCqSocialBadgingImpl: Option[String] = None, comAdobeCqSocialCqSocialCalendarImpl: Option[String] = None, comAdobeCqSocialCqSocialContentFragmentsImpl: Option[String] = None, comAdobeCqSocialCqSocialEnablementImpl: Option[String] = None, comAdobeCqSocialCqSocialGraphImpl: Option[String] = None, comAdobeCqSocialCqSocialIdeationImpl: Option[String] = None, comAdobeCqSocialCqSocialJcrProvider: Option[String] = None, comAdobeCqSocialCqSocialMembersImpl: Option[String] = None, comAdobeCqSocialCqSocialMsProvider: Option[String] = None, comAdobeCqSocialCqSocialNotificationsChannelsWeb: Option[String] = None, comAdobeCqSocialCqSocialNotificationsImpl: Option[String] = None, comAdobeCqSocialCqSocialRdbProvider: Option[String] = None, comAdobeCqSocialCqSocialScfImpl: Option[String] = None, comAdobeCqSocialCqSocialScoringBasicImpl: Option[String] = None, comAdobeCqSocialCqSocialScoringImpl: Option[String] = None, comAdobeCqSocialCqSocialServiceusersImpl: Option[String] = None, comAdobeCqSocialCqSocialSrpImpl: Option[String] = None, comAdobeCqSocialCqSocialUgcbaseImpl: Option[String] = None, comAdobeDamCqDamCfmImpl: Option[String] = None, comAdobeFormsFoundationFormsFoundationBase: Option[String] = None, comAdobeGraniteApicontroller: Option[String] = None, comAdobeGraniteAssetCore: Option[String] = None, comAdobeGraniteAuthSso: Option[String] = None, comAdobeGraniteBundlesHcImpl: Option[String] = None, comAdobeGraniteCompatRouter: Option[String] = None, comAdobeGraniteConf: Option[String] = None, comAdobeGraniteConfUiCore: Option[String] = None, comAdobeGraniteCors: Option[String] = None, comAdobeGraniteCrxExplorer: Option[String] = None, comAdobeGraniteCrxdeLite: Option[String] = None, comAdobeGraniteCryptoConfig: Option[String] = None, comAdobeGraniteCryptoExtension: Option[String] = None, comAdobeGraniteCryptoFile: Option[String] = None, comAdobeGraniteCryptoJcr: Option[String] = None, comAdobeGraniteCsrf: Option[String] = None, comAdobeGraniteDistributionCore: Option[String] = None, comAdobeGraniteDropwizardMetrics: Option[String] = None, comAdobeGraniteFragsImpl: Option[String] = None, comAdobeGraniteGibson: Option[String] = None, comAdobeGraniteInfocollector: Option[String] = None, comAdobeGraniteInstallerFactoryPackages: Option[String] = None, comAdobeGraniteJettySsl: Option[String] = None, comAdobeGraniteJobsAsync: Option[String] = None, comAdobeGraniteMaintenanceOak: Option[String] = None, comAdobeGraniteMonitoringCore: Option[String] = None, comAdobeGraniteQueries: Option[String] = None, comAdobeGraniteReplicationHcImpl: Option[String] = None, comAdobeGraniteRepositoryChecker: Option[String] = None, comAdobeGraniteRepositoryHcImpl: Option[String] = None, comAdobeGraniteRestAssets: Option[String] = None, comAdobeGraniteSecurityUi: Option[String] = None, comAdobeGraniteStartup: Option[String] = None, comAdobeGraniteTagsoup: Option[String] = None, comAdobeGraniteTaskmanagementCore: Option[String] = None, comAdobeGraniteTaskmanagementWorkflow: Option[String] = None, comAdobeGraniteUiClientlibsCompilerLess: Option[String] = None, comAdobeGraniteUiClientlibsProcessorGcc: Option[String] = None, comAdobeGraniteWebconsolePlugins: Option[String] = None, comAdobeGraniteWorkflowConsole: Option[String] = None, comAdobeXmpWorkerFilesNativeFragmentLinux: Option[String] = None, comAdobeXmpWorkerFilesNativeFragmentMacosx: Option[String] = None, comAdobeXmpWorkerFilesNativeFragmentWin: Option[String] = None, comDayCommonsOsgiWrapperSimpleJndi: Option[String] = None, comDayCqCqAuthhandler: Option[String] = None, comDayCqCqCompatConfigupdate: Option[String] = None, comDayCqCqLicensebranding: Option[String] = None, comDayCqCqNotifcationImpl: Option[String] = None, comDayCqCqReplicationAudit: Option[String] = None, comDayCqCqSearchExt: Option[String] = None, comDayCqDamCqDamAnnotationPrint: Option[String] = None, comDayCqDamCqDamAssetUsage: Option[String] = None, comDayCqDamCqDamS7dam: Option[String] = None, comDayCqDamCqDamSimilaritysearch: Option[String] = None, comDayCqDamDamWebdavSupport: Option[String] = None, comDayCqPreUpgradeTasks: Option[String] = None, comDayCqReplicationExtensions: Option[String] = None, comDayCqWcmCqMsmCore: Option[String] = None, comDayCqWcmCqWcmTranslation: Option[String] = None, dayCommonsJrawio: Option[String] = None, orgApacheAriesJmxWhiteboard: Option[String] = None, orgApacheFelixHttpSslfilter: Option[String] = None, orgApacheFelixOrgApacheFelixThreaddump: Option[String] = None, orgApacheFelixWebconsolePluginsDs: Option[String] = None, orgApacheFelixWebconsolePluginsEvent: Option[String] = None, orgApacheFelixWebconsolePluginsMemoryusage: Option[String] = None, orgApacheFelixWebconsolePluginsPackageadmin: Option[String] = None, orgApacheJackrabbitOakAuthLdap: Option[String] = None, orgApacheJackrabbitOakSegmentTar: Option[String] = None, orgApacheJackrabbitOakSolrOsgi: Option[String] = None, orgApacheSlingBundleresourceImpl: Option[String] = None, orgApacheSlingCommonsFsclassloader: Option[String] = None, orgApacheSlingCommonsLogWebconsole: Option[String] = None, orgApacheSlingDatasource: Option[String] = None, orgApacheSlingDiscoveryBase: Option[String] = None, orgApacheSlingDiscoveryOak: Option[String] = None, orgApacheSlingDiscoverySupport: Option[String] = None, orgApacheSlingDistributionApi: Option[String] = None, orgApacheSlingDistributionCore: Option[String] = None, orgApacheSlingExtensionsWebconsolesecurityprovider: Option[String] = None, orgApacheSlingHcWebconsole: Option[String] = None, orgApacheSlingInstallerConsole: Option[String] = None, orgApacheSlingInstallerProviderFile: Option[String] = None, orgApacheSlingInstallerProviderJcr: Option[String] = None, orgApacheSlingJcrDavex: Option[String] = None, orgApacheSlingJcrResourcesecurity: Option[String] = None, orgApacheSlingJmxProvider: Option[String] = None, orgApacheSlingLaunchpadInstaller: Option[String] = None, orgApacheSlingModelsImpl: Option[String] = None, orgApacheSlingRepoinitParser: Option[String] = None, orgApacheSlingResourceInventory: Option[String] = None, orgApacheSlingResourceresolver: Option[String] = None, orgApacheSlingScriptingJavascript: Option[String] = None, orgApacheSlingScriptingJst: Option[String] = None, orgApacheSlingScriptingSightlyJsProvider: Option[String] = None, orgApacheSlingScriptingSightlyModelsProvider: Option[String] = None, orgApacheSlingSecurity: Option[String] = None, orgApacheSlingServletsCompat: Option[String] = None, orgApacheSlingServletsGet: Option[String] = None, orgApacheSlingStartupfilterDisabler: Option[String] = None, orgApacheSlingTracer: Option[String] = None, weRetailClientAppCore: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.cq.cdn.cdn-rewriter", comAdobeCqCdnCdnRewriter)
      .withQueryParam("com.adobe.cq.cloud-config.components", comAdobeCqCloudConfigComponents)
      .withQueryParam("com.adobe.cq.cloud-config.core", comAdobeCqCloudConfigCore)
      .withQueryParam("com.adobe.cq.cloud-config.ui", comAdobeCqCloudConfigUi)
      .withQueryParam("com.adobe.cq.com.adobe.cq.editor", comAdobeCqComAdobeCqEditor)
      .withQueryParam("com.adobe.cq.com.adobe.cq.projects.core", comAdobeCqComAdobeCqProjectsCore)
      .withQueryParam("com.adobe.cq.com.adobe.cq.projects.wcm.core", comAdobeCqComAdobeCqProjectsWcmCore)
      .withQueryParam("com.adobe.cq.com.adobe.cq.ui.commons", comAdobeCqComAdobeCqUiCommons)
      .withQueryParam("com.adobe.cq.com.adobe.cq.wcm.style", comAdobeCqComAdobeCqWcmStyle)
      .withQueryParam("com.adobe.cq.cq-activitymap-integration", comAdobeCqCqActivitymapIntegration)
      .withQueryParam("com.adobe.cq.cq-contexthub-commons", comAdobeCqCqContexthubCommons)
      .withQueryParam("com.adobe.cq.cq-dtm", comAdobeCqCqDtm)
      .withQueryParam("com.adobe.cq.cq-healthcheck", comAdobeCqCqHealthcheck)
      .withQueryParam("com.adobe.cq.cq-multisite-targeting", comAdobeCqCqMultisiteTargeting)
      .withQueryParam("com.adobe.cq.cq-pre-upgrade-cleanup", comAdobeCqCqPreUpgradeCleanup)
      .withQueryParam("com.adobe.cq.cq-product-info-provider", comAdobeCqCqProductInfoProvider)
      .withQueryParam("com.adobe.cq.cq-rest-sites", comAdobeCqCqRestSites)
      .withQueryParam("com.adobe.cq.cq-security-hc", comAdobeCqCqSecurityHc)
      .withQueryParam("com.adobe.cq.dam.cq-dam-svg-handler", comAdobeCqDamCqDamSvgHandler)
      .withQueryParam("com.adobe.cq.dam.cq-scene7-imaging", comAdobeCqDamCqScene7Imaging)
      .withQueryParam("com.adobe.cq.dtm-reactor.core", comAdobeCqDtmReactorCore)
      .withQueryParam("com.adobe.cq.dtm-reactor.ui", comAdobeCqDtmReactorUi)
      .withQueryParam("com.adobe.cq.exp-jspel-resolver", comAdobeCqExpJspelResolver)
      .withQueryParam("com.adobe.cq.inbox.cq-inbox", comAdobeCqInboxCqInbox)
      .withQueryParam("com.adobe.cq.json-schema-parser", comAdobeCqJsonSchemaParser)
      .withQueryParam("com.adobe.cq.media.cq-media-publishing-dps-fp-core", comAdobeCqMediaCqMediaPublishingDpsFpCore)
      .withQueryParam("com.adobe.cq.mobile.cq-mobile-caas", comAdobeCqMobileCqMobileCaas)
      .withQueryParam("com.adobe.cq.mobile.cq-mobile-index-builder", comAdobeCqMobileCqMobileIndexBuilder)
      .withQueryParam("com.adobe.cq.mobile.cq-mobile-phonegap-build", comAdobeCqMobileCqMobilePhonegapBuild)
      .withQueryParam("com.adobe.cq.myspell", comAdobeCqMyspell)
      .withQueryParam("com.adobe.cq.sample.we.retail.core", comAdobeCqSampleWeRetailCore)
      .withQueryParam("com.adobe.cq.screens.com.adobe.cq.screens.dcc", comAdobeCqScreensComAdobeCqScreensDcc)
      .withQueryParam("com.adobe.cq.screens.com.adobe.cq.screens.mq.core", comAdobeCqScreensComAdobeCqScreensMqCore)
      .withQueryParam("com.adobe.cq.social.cq-social-as-provider", comAdobeCqSocialCqSocialAsProvider)
      .withQueryParam("com.adobe.cq.social.cq-social-badging-basic-impl", comAdobeCqSocialCqSocialBadgingBasicImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-badging-impl", comAdobeCqSocialCqSocialBadgingImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-calendar-impl", comAdobeCqSocialCqSocialCalendarImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-content-fragments-impl", comAdobeCqSocialCqSocialContentFragmentsImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-enablement-impl", comAdobeCqSocialCqSocialEnablementImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-graph-impl", comAdobeCqSocialCqSocialGraphImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-ideation-impl", comAdobeCqSocialCqSocialIdeationImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-jcr-provider", comAdobeCqSocialCqSocialJcrProvider)
      .withQueryParam("com.adobe.cq.social.cq-social-members-impl", comAdobeCqSocialCqSocialMembersImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-ms-provider", comAdobeCqSocialCqSocialMsProvider)
      .withQueryParam("com.adobe.cq.social.cq-social-notifications-channels-web", comAdobeCqSocialCqSocialNotificationsChannelsWeb)
      .withQueryParam("com.adobe.cq.social.cq-social-notifications-impl", comAdobeCqSocialCqSocialNotificationsImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-rdb-provider", comAdobeCqSocialCqSocialRdbProvider)
      .withQueryParam("com.adobe.cq.social.cq-social-scf-impl", comAdobeCqSocialCqSocialScfImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-scoring-basic-impl", comAdobeCqSocialCqSocialScoringBasicImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-scoring-impl", comAdobeCqSocialCqSocialScoringImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-serviceusers-impl", comAdobeCqSocialCqSocialServiceusersImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-srp-impl", comAdobeCqSocialCqSocialSrpImpl)
      .withQueryParam("com.adobe.cq.social.cq-social-ugcbase-impl", comAdobeCqSocialCqSocialUgcbaseImpl)
      .withQueryParam("com.adobe.dam.cq-dam-cfm-impl", comAdobeDamCqDamCfmImpl)
      .withQueryParam("com.adobe.forms.foundation-forms-foundation-base", comAdobeFormsFoundationFormsFoundationBase)
      .withQueryParam("com.adobe.granite.apicontroller", comAdobeGraniteApicontroller)
      .withQueryParam("com.adobe.granite.asset.core", comAdobeGraniteAssetCore)
      .withQueryParam("com.adobe.granite.auth.sso", comAdobeGraniteAuthSso)
      .withQueryParam("com.adobe.granite.bundles.hc.impl", comAdobeGraniteBundlesHcImpl)
      .withQueryParam("com.adobe.granite.compat-router", comAdobeGraniteCompatRouter)
      .withQueryParam("com.adobe.granite.conf", comAdobeGraniteConf)
      .withQueryParam("com.adobe.granite.conf.ui.core", comAdobeGraniteConfUiCore)
      .withQueryParam("com.adobe.granite.cors", comAdobeGraniteCors)
      .withQueryParam("com.adobe.granite.crx-explorer", comAdobeGraniteCrxExplorer)
      .withQueryParam("com.adobe.granite.crxde-lite", comAdobeGraniteCrxdeLite)
      .withQueryParam("com.adobe.granite.crypto.config", comAdobeGraniteCryptoConfig)
      .withQueryParam("com.adobe.granite.crypto.extension", comAdobeGraniteCryptoExtension)
      .withQueryParam("com.adobe.granite.crypto.file", comAdobeGraniteCryptoFile)
      .withQueryParam("com.adobe.granite.crypto.jcr", comAdobeGraniteCryptoJcr)
      .withQueryParam("com.adobe.granite.csrf", comAdobeGraniteCsrf)
      .withQueryParam("com.adobe.granite.distribution.core", comAdobeGraniteDistributionCore)
      .withQueryParam("com.adobe.granite.dropwizard.metrics", comAdobeGraniteDropwizardMetrics)
      .withQueryParam("com.adobe.granite.frags.impl", comAdobeGraniteFragsImpl)
      .withQueryParam("com.adobe.granite.gibson", comAdobeGraniteGibson)
      .withQueryParam("com.adobe.granite.infocollector", comAdobeGraniteInfocollector)
      .withQueryParam("com.adobe.granite.installer.factory.packages", comAdobeGraniteInstallerFactoryPackages)
      .withQueryParam("com.adobe.granite.jetty.ssl", comAdobeGraniteJettySsl)
      .withQueryParam("com.adobe.granite.jobs.async", comAdobeGraniteJobsAsync)
      .withQueryParam("com.adobe.granite.maintenance.oak", comAdobeGraniteMaintenanceOak)
      .withQueryParam("com.adobe.granite.monitoring.core", comAdobeGraniteMonitoringCore)
      .withQueryParam("com.adobe.granite.queries", comAdobeGraniteQueries)
      .withQueryParam("com.adobe.granite.replication.hc.impl", comAdobeGraniteReplicationHcImpl)
      .withQueryParam("com.adobe.granite.repository.checker", comAdobeGraniteRepositoryChecker)
      .withQueryParam("com.adobe.granite.repository.hc.impl", comAdobeGraniteRepositoryHcImpl)
      .withQueryParam("com.adobe.granite.rest.assets", comAdobeGraniteRestAssets)
      .withQueryParam("com.adobe.granite.security.ui", comAdobeGraniteSecurityUi)
      .withQueryParam("com.adobe.granite.startup", comAdobeGraniteStartup)
      .withQueryParam("com.adobe.granite.tagsoup", comAdobeGraniteTagsoup)
      .withQueryParam("com.adobe.granite.taskmanagement.core", comAdobeGraniteTaskmanagementCore)
      .withQueryParam("com.adobe.granite.taskmanagement.workflow", comAdobeGraniteTaskmanagementWorkflow)
      .withQueryParam("com.adobe.granite.ui.clientlibs.compiler.less", comAdobeGraniteUiClientlibsCompilerLess)
      .withQueryParam("com.adobe.granite.ui.clientlibs.processor.gcc", comAdobeGraniteUiClientlibsProcessorGcc)
      .withQueryParam("com.adobe.granite.webconsole.plugins", comAdobeGraniteWebconsolePlugins)
      .withQueryParam("com.adobe.granite.workflow.console", comAdobeGraniteWorkflowConsole)
      .withQueryParam("com.adobe.xmp.worker.files.native.fragment.linux", comAdobeXmpWorkerFilesNativeFragmentLinux)
      .withQueryParam("com.adobe.xmp.worker.files.native.fragment.macosx", comAdobeXmpWorkerFilesNativeFragmentMacosx)
      .withQueryParam("com.adobe.xmp.worker.files.native.fragment.win", comAdobeXmpWorkerFilesNativeFragmentWin)
      .withQueryParam("com.day.commons.osgi.wrapper.simple-jndi", comDayCommonsOsgiWrapperSimpleJndi)
      .withQueryParam("com.day.cq.cq-authhandler", comDayCqCqAuthhandler)
      .withQueryParam("com.day.cq.cq-compat-configupdate", comDayCqCqCompatConfigupdate)
      .withQueryParam("com.day.cq.cq-licensebranding", comDayCqCqLicensebranding)
      .withQueryParam("com.day.cq.cq-notifcation-impl", comDayCqCqNotifcationImpl)
      .withQueryParam("com.day.cq.cq-replication-audit", comDayCqCqReplicationAudit)
      .withQueryParam("com.day.cq.cq-search-ext", comDayCqCqSearchExt)
      .withQueryParam("com.day.cq.dam.cq-dam-annotation-print", comDayCqDamCqDamAnnotationPrint)
      .withQueryParam("com.day.cq.dam.cq-dam-asset-usage", comDayCqDamCqDamAssetUsage)
      .withQueryParam("com.day.cq.dam.cq-dam-s7dam", comDayCqDamCqDamS7dam)
      .withQueryParam("com.day.cq.dam.cq-dam-similaritysearch", comDayCqDamCqDamSimilaritysearch)
      .withQueryParam("com.day.cq.dam.dam-webdav-support", comDayCqDamDamWebdavSupport)
      .withQueryParam("com.day.cq.pre-upgrade-tasks", comDayCqPreUpgradeTasks)
      .withQueryParam("com.day.cq.replication.extensions", comDayCqReplicationExtensions)
      .withQueryParam("com.day.cq.wcm.cq-msm-core", comDayCqWcmCqMsmCore)
      .withQueryParam("com.day.cq.wcm.cq-wcm-translation", comDayCqWcmCqWcmTranslation)
      .withQueryParam("day-commons-jrawio", dayCommonsJrawio)
      .withQueryParam("org.apache.aries.jmx.whiteboard", orgApacheAriesJmxWhiteboard)
      .withQueryParam("org.apache.felix.http.sslfilter", orgApacheFelixHttpSslfilter)
      .withQueryParam("org.apache.felix.org.apache.felix.threaddump", orgApacheFelixOrgApacheFelixThreaddump)
      .withQueryParam("org.apache.felix.webconsole.plugins.ds", orgApacheFelixWebconsolePluginsDs)
      .withQueryParam("org.apache.felix.webconsole.plugins.event", orgApacheFelixWebconsolePluginsEvent)
      .withQueryParam("org.apache.felix.webconsole.plugins.memoryusage", orgApacheFelixWebconsolePluginsMemoryusage)
      .withQueryParam("org.apache.felix.webconsole.plugins.packageadmin", orgApacheFelixWebconsolePluginsPackageadmin)
      .withQueryParam("org.apache.jackrabbit.oak-auth-ldap", orgApacheJackrabbitOakAuthLdap)
      .withQueryParam("org.apache.jackrabbit.oak-segment-tar", orgApacheJackrabbitOakSegmentTar)
      .withQueryParam("org.apache.jackrabbit.oak-solr-osgi", orgApacheJackrabbitOakSolrOsgi)
      .withQueryParam("org.apache.sling.bundleresource.impl", orgApacheSlingBundleresourceImpl)
      .withQueryParam("org.apache.sling.commons.fsclassloader", orgApacheSlingCommonsFsclassloader)
      .withQueryParam("org.apache.sling.commons.log.webconsole", orgApacheSlingCommonsLogWebconsole)
      .withQueryParam("org.apache.sling.datasource", orgApacheSlingDatasource)
      .withQueryParam("org.apache.sling.discovery.base", orgApacheSlingDiscoveryBase)
      .withQueryParam("org.apache.sling.discovery.oak", orgApacheSlingDiscoveryOak)
      .withQueryParam("org.apache.sling.discovery.support", orgApacheSlingDiscoverySupport)
      .withQueryParam("org.apache.sling.distribution.api", orgApacheSlingDistributionApi)
      .withQueryParam("org.apache.sling.distribution.core", orgApacheSlingDistributionCore)
      .withQueryParam("org.apache.sling.extensions.webconsolesecurityprovider", orgApacheSlingExtensionsWebconsolesecurityprovider)
      .withQueryParam("org.apache.sling.hc.webconsole", orgApacheSlingHcWebconsole)
      .withQueryParam("org.apache.sling.installer.console", orgApacheSlingInstallerConsole)
      .withQueryParam("org.apache.sling.installer.provider.file", orgApacheSlingInstallerProviderFile)
      .withQueryParam("org.apache.sling.installer.provider.jcr", orgApacheSlingInstallerProviderJcr)
      .withQueryParam("org.apache.sling.jcr.davex", orgApacheSlingJcrDavex)
      .withQueryParam("org.apache.sling.jcr.resourcesecurity", orgApacheSlingJcrResourcesecurity)
      .withQueryParam("org.apache.sling.jmx.provider", orgApacheSlingJmxProvider)
      .withQueryParam("org.apache.sling.launchpad.installer", orgApacheSlingLaunchpadInstaller)
      .withQueryParam("org.apache.sling.models.impl", orgApacheSlingModelsImpl)
      .withQueryParam("org.apache.sling.repoinit.parser", orgApacheSlingRepoinitParser)
      .withQueryParam("org.apache.sling.resource.inventory", orgApacheSlingResourceInventory)
      .withQueryParam("org.apache.sling.resourceresolver", orgApacheSlingResourceresolver)
      .withQueryParam("org.apache.sling.scripting.javascript", orgApacheSlingScriptingJavascript)
      .withQueryParam("org.apache.sling.scripting.jst", orgApacheSlingScriptingJst)
      .withQueryParam("org.apache.sling.scripting.sightly.js.provider", orgApacheSlingScriptingSightlyJsProvider)
      .withQueryParam("org.apache.sling.scripting.sightly.models.provider", orgApacheSlingScriptingSightlyModelsProvider)
      .withQueryParam("org.apache.sling.security", orgApacheSlingSecurity)
      .withQueryParam("org.apache.sling.servlets.compat", orgApacheSlingServletsCompat)
      .withQueryParam("org.apache.sling.servlets.get", orgApacheSlingServletsGet)
      .withQueryParam("org.apache.sling.startupfilter.disabler", orgApacheSlingStartupfilterDisabler)
      .withQueryParam("org.apache.sling.tracer", orgApacheSlingTracer)
      .withQueryParam("we.retail.client.app.core", weRetailClientAppCore)
      .withSuccessResponse[ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   * @param serviceRanking 
   */
  def comAdobeGraniteAuthCertImplClientCertAuthHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Option[String] = None, serviceRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", path)
      .withQueryParam("service.ranking", serviceRanking)
      .withSuccessResponse[ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthImsInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param configid 
   * @param scope 
   */
  def comAdobeGraniteAuthIms(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], configid: Option[String] = None, scope: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.ims", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("configid", configid)
      .withQueryParam("scope", scope)
      .withSuccessResponse[ComAdobeGraniteAuthImsInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthProviderId 
   */
  def comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthProviderId: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.provider.id", oauthProviderId)
      .withSuccessResponse[ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param authImsClientSecret 
   * @param customizerType 
   */
  def comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], authImsClientSecret: Option[String] = None, customizerType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("auth.ims.client.secret", authImsClientSecret)
      .withQueryParam("customizer.type", customizerType)
      .withSuccessResponse[ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthProviderId 
   */
  def comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthProviderId: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.provider.id", oauthProviderId)
      .withSuccessResponse[ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthImsImplIMSProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthProviderId 
   * @param oauthProviderImsAuthorizationUrl 
   * @param oauthProviderImsTokenUrl 
   * @param oauthProviderImsProfileUrl 
   * @param oauthProviderImsExtendedDetailsUrls 
   * @param oauthProviderImsValidateTokenUrl 
   * @param oauthProviderImsSessionProperty 
   * @param oauthProviderImsServiceTokenClientId 
   * @param oauthProviderImsServiceTokenClientSecret 
   * @param oauthProviderImsServiceToken 
   * @param imsOrgRef 
   * @param imsGroupMapping 
   * @param oauthProviderImsOnlyLicenseGroup 
   */
  def comAdobeGraniteAuthImsImplIMSProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthProviderId: Option[String] = None, oauthProviderImsAuthorizationUrl: Option[String] = None, oauthProviderImsTokenUrl: Option[String] = None, oauthProviderImsProfileUrl: Option[String] = None, oauthProviderImsExtendedDetailsUrls: Seq[String], oauthProviderImsValidateTokenUrl: Option[String] = None, oauthProviderImsSessionProperty: Option[String] = None, oauthProviderImsServiceTokenClientId: Option[String] = None, oauthProviderImsServiceTokenClientSecret: Option[String] = None, oauthProviderImsServiceToken: Option[String] = None, imsOrgRef: Option[String] = None, imsGroupMapping: Seq[String], oauthProviderImsOnlyLicenseGroup: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.provider.id", oauthProviderId)
      .withQueryParam("oauth.provider.ims.authorization.url", oauthProviderImsAuthorizationUrl)
      .withQueryParam("oauth.provider.ims.token.url", oauthProviderImsTokenUrl)
      .withQueryParam("oauth.provider.ims.profile.url", oauthProviderImsProfileUrl)
      .withQueryParam("oauth.provider.ims.extended.details.urls", ArrayValues(oauthProviderImsExtendedDetailsUrls, MULTI))
      .withQueryParam("oauth.provider.ims.validate.token.url", oauthProviderImsValidateTokenUrl)
      .withQueryParam("oauth.provider.ims.session.property", oauthProviderImsSessionProperty)
      .withQueryParam("oauth.provider.ims.service.token.client.id", oauthProviderImsServiceTokenClientId)
      .withQueryParam("oauth.provider.ims.service.token.client.secret", oauthProviderImsServiceTokenClientSecret)
      .withQueryParam("oauth.provider.ims.service.token", oauthProviderImsServiceToken)
      .withQueryParam("ims.org.ref", imsOrgRef)
      .withQueryParam("ims.group.mapping", ArrayValues(imsGroupMapping, MULTI))
      .withQueryParam("oauth.provider.ims.only.license.group", oauthProviderImsOnlyLicenseGroup)
      .withSuccessResponse[ComAdobeGraniteAuthImsImplIMSProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthConfigmanagerImsConfigid 
   * @param imsOwningEntity 
   * @param aemInstanceId 
   * @param imsServiceCode 
   */
  def comAdobeGraniteAuthImsImplImsConfigProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthConfigmanagerImsConfigid: Option[String] = None, imsOwningEntity: Option[String] = None, aemInstanceId: Option[String] = None, imsServiceCode: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.configmanager.ims.configid", oauthConfigmanagerImsConfigid)
      .withQueryParam("ims.owningEntity", imsOwningEntity)
      .withQueryParam("aem.instanceId", aemInstanceId)
      .withQueryParam("ims.serviceCode", imsServiceCode)
      .withSuccessResponse[ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthOauthAccesstokenProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param authTokenProviderTitle 
   * @param authTokenProviderDefaultClaims 
   * @param authTokenProviderEndpoint 
   * @param authAccessTokenRequest 
   * @param authTokenProviderKeypairAlias 
   * @param authTokenProviderConnTimeout 
   * @param authTokenProviderSoTimeout 
   * @param authTokenProviderClientId 
   * @param authTokenProviderScope 
   * @param authTokenProviderReuseAccessToken 
   * @param authTokenProviderRelaxedSsl 
   * @param tokenRequestCustomizerType 
   * @param authTokenValidatorType 
   */
  def comAdobeGraniteAuthOauthAccesstokenProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, authTokenProviderTitle: Option[String] = None, authTokenProviderDefaultClaims: Seq[String], authTokenProviderEndpoint: Option[String] = None, authAccessTokenRequest: Option[String] = None, authTokenProviderKeypairAlias: Option[String] = None, authTokenProviderConnTimeout: Option[Int] = None, authTokenProviderSoTimeout: Option[Int] = None, authTokenProviderClientId: Option[String] = None, authTokenProviderScope: Option[String] = None, authTokenProviderReuseAccessToken: Option[Boolean] = None, authTokenProviderRelaxedSsl: Option[Boolean] = None, tokenRequestCustomizerType: Option[String] = None, authTokenValidatorType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("auth.token.provider.title", authTokenProviderTitle)
      .withQueryParam("auth.token.provider.default.claims", ArrayValues(authTokenProviderDefaultClaims, MULTI))
      .withQueryParam("auth.token.provider.endpoint", authTokenProviderEndpoint)
      .withQueryParam("auth.access.token.request", authAccessTokenRequest)
      .withQueryParam("auth.token.provider.keypair.alias", authTokenProviderKeypairAlias)
      .withQueryParam("auth.token.provider.conn.timeout", authTokenProviderConnTimeout)
      .withQueryParam("auth.token.provider.so.timeout", authTokenProviderSoTimeout)
      .withQueryParam("auth.token.provider.client.id", authTokenProviderClientId)
      .withQueryParam("auth.token.provider.scope", authTokenProviderScope)
      .withQueryParam("auth.token.provider.reuse.access.token", authTokenProviderReuseAccessToken)
      .withQueryParam("auth.token.provider.relaxed.ssl", authTokenProviderRelaxedSsl)
      .withQueryParam("token.request.customizer.type", tokenRequestCustomizerType)
      .withQueryParam("auth.token.validator.type", authTokenValidatorType)
      .withSuccessResponse[ComAdobeGraniteAuthOauthAccesstokenProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   * @param oauthClientIdsAllowed 
   * @param authBearerSyncIms 
   * @param authTokenRequestParameter 
   * @param oauthBearerConfigid 
   * @param oauthJwtSupport 
   */
  def comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Option[String] = None, oauthClientIdsAllowed: Seq[String], authBearerSyncIms: Option[Boolean] = None, authTokenRequestParameter: Option[String] = None, oauthBearerConfigid: Option[String] = None, oauthJwtSupport: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", path)
      .withQueryParam("oauth.clientIds.allowed", ArrayValues(oauthClientIdsAllowed, MULTI))
      .withQueryParam("auth.bearer.sync.ims", authBearerSyncIms)
      .withQueryParam("auth.tokenRequestParameter", authTokenRequestParameter)
      .withQueryParam("oauth.bearer.configid", oauthBearerConfigid)
      .withQueryParam("oauth.jwt.support", oauthJwtSupport)
      .withSuccessResponse[ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param authTokenValidatorType 
   */
  def comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], authTokenValidatorType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("auth.token.validator.type", authTokenValidatorType)
      .withSuccessResponse[ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthProviderId 
   */
  def comAdobeGraniteAuthOauthImplFacebookProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthProviderId: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.provider.id", oauthProviderId)
      .withSuccessResponse[ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthOauthImplGithubProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthProviderId 
   * @param oauthProviderGithubAuthorizationUrl 
   * @param oauthProviderGithubTokenUrl 
   * @param oauthProviderGithubProfileUrl 
   */
  def comAdobeGraniteAuthOauthImplGithubProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthProviderId: Option[String] = None, oauthProviderGithubAuthorizationUrl: Option[String] = None, oauthProviderGithubTokenUrl: Option[String] = None, oauthProviderGithubProfileUrl: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.provider.id", oauthProviderId)
      .withQueryParam("oauth.provider.github.authorization.url", oauthProviderGithubAuthorizationUrl)
      .withQueryParam("oauth.provider.github.token.url", oauthProviderGithubTokenUrl)
      .withQueryParam("oauth.provider.github.profile.url", oauthProviderGithubProfileUrl)
      .withSuccessResponse[ComAdobeGraniteAuthOauthImplGithubProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthOauthImplGraniteProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthProviderId 
   * @param oauthProviderGraniteAuthorizationUrl 
   * @param oauthProviderGraniteTokenUrl 
   * @param oauthProviderGraniteProfileUrl 
   * @param oauthProviderGraniteExtendedDetailsUrls 
   */
  def comAdobeGraniteAuthOauthImplGraniteProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthProviderId: Option[String] = None, oauthProviderGraniteAuthorizationUrl: Option[String] = None, oauthProviderGraniteTokenUrl: Option[String] = None, oauthProviderGraniteProfileUrl: Option[String] = None, oauthProviderGraniteExtendedDetailsUrls: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.provider.id", oauthProviderId)
      .withQueryParam("oauth.provider.granite.authorization.url", oauthProviderGraniteAuthorizationUrl)
      .withQueryParam("oauth.provider.granite.token.url", oauthProviderGraniteTokenUrl)
      .withQueryParam("oauth.provider.granite.profile.url", oauthProviderGraniteProfileUrl)
      .withQueryParam("oauth.provider.granite.extended.details.urls", oauthProviderGraniteExtendedDetailsUrls)
      .withSuccessResponse[ComAdobeGraniteAuthOauthImplGraniteProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthCookieLoginTimeout 
   * @param oauthCookieMaxAge 
   */
  def comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthCookieLoginTimeout: Option[String] = None, oauthCookieMaxAge: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.cookie.login.timeout", oauthCookieLoginTimeout)
      .withQueryParam("oauth.cookie.max.age", oauthCookieMaxAge)
      .withSuccessResponse[ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthCookieLoginTimeout 
   * @param oauthCookieMaxAge 
   */
  def comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthCookieLoginTimeout: Option[String] = None, oauthCookieMaxAge: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.cookie.login.timeout", oauthCookieLoginTimeout)
      .withQueryParam("oauth.cookie.max.age", oauthCookieMaxAge)
      .withSuccessResponse[ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   */
  def comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", path)
      .withSuccessResponse[ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthProviderId 
   */
  def comAdobeGraniteAuthOauthImplTwitterProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthProviderId: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.provider.id", oauthProviderId)
      .withSuccessResponse[ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthOauthProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthConfigId 
   * @param oauthClientId 
   * @param oauthClientSecret 
   * @param oauthScope 
   * @param oauthConfigProviderId 
   * @param oauthCreateUsers 
   * @param oauthUseridProperty 
   * @param forceStrictUsernameMatching 
   * @param oauthEncodeUserids 
   * @param oauthHashUserids 
   * @param oauthCallBackUrl 
   * @param oauthAccessTokenPersist 
   * @param oauthAccessTokenPersistCookie 
   * @param oauthCsrfStateProtection 
   * @param oauthRedirectRequestParams 
   * @param oauthConfigSiblingsAllow 
   */
  def comAdobeGraniteAuthOauthProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthConfigId: Option[String] = None, oauthClientId: Option[String] = None, oauthClientSecret: Option[String] = None, oauthScope: Seq[String], oauthConfigProviderId: Option[String] = None, oauthCreateUsers: Option[Boolean] = None, oauthUseridProperty: Option[String] = None, forceStrictUsernameMatching: Option[Boolean] = None, oauthEncodeUserids: Option[Boolean] = None, oauthHashUserids: Option[Boolean] = None, oauthCallBackUrl: Option[String] = None, oauthAccessTokenPersist: Option[Boolean] = None, oauthAccessTokenPersistCookie: Option[Boolean] = None, oauthCsrfStateProtection: Option[Boolean] = None, oauthRedirectRequestParams: Option[Boolean] = None, oauthConfigSiblingsAllow: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.oauth.provider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.config.id", oauthConfigId)
      .withQueryParam("oauth.client.id", oauthClientId)
      .withQueryParam("oauth.client.secret", oauthClientSecret)
      .withQueryParam("oauth.scope", ArrayValues(oauthScope, MULTI))
      .withQueryParam("oauth.config.provider.id", oauthConfigProviderId)
      .withQueryParam("oauth.create.users", oauthCreateUsers)
      .withQueryParam("oauth.userid.property", oauthUseridProperty)
      .withQueryParam("force.strict.username.matching", forceStrictUsernameMatching)
      .withQueryParam("oauth.encode.userids", oauthEncodeUserids)
      .withQueryParam("oauth.hash.userids", oauthHashUserids)
      .withQueryParam("oauth.callBackUrl", oauthCallBackUrl)
      .withQueryParam("oauth.access.token.persist", oauthAccessTokenPersist)
      .withQueryParam("oauth.access.token.persist.cookie", oauthAccessTokenPersistCookie)
      .withQueryParam("oauth.csrf.state.protection", oauthCsrfStateProtection)
      .withQueryParam("oauth.redirect.request.params", oauthRedirectRequestParams)
      .withQueryParam("oauth.config.siblings.allow", oauthConfigSiblingsAllow)
      .withSuccessResponse[ComAdobeGraniteAuthOauthProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param supportedPaths 
   */
  def comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], supportedPaths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("supportedPaths", ArrayValues(supportedPaths, MULTI))
      .withSuccessResponse[ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   * @param serviceRanking 
   * @param idpUrl 
   * @param idpCertAlias 
   * @param idpHttpRedirect 
   * @param serviceProviderEntityId 
   * @param assertionConsumerServiceURL 
   * @param spPrivateKeyAlias 
   * @param keyStorePassword 
   * @param defaultRedirectUrl 
   * @param userIDAttribute 
   * @param useEncryption 
   * @param createUser 
   * @param userIntermediatePath 
   * @param addGroupMemberships 
   * @param groupMembershipAttribute 
   * @param defaultGroups 
   * @param nameIdFormat 
   * @param synchronizeAttributes 
   * @param handleLogout 
   * @param logoutUrl 
   * @param clockTolerance 
   * @param digestMethod 
   * @param signatureMethod 
   * @param identitySyncType 
   * @param idpIdentifier 
   */
  def comAdobeGraniteAuthSamlSamlAuthenticationHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Seq[String], serviceRanking: Option[Int] = None, idpUrl: Option[String] = None, idpCertAlias: Option[String] = None, idpHttpRedirect: Option[Boolean] = None, serviceProviderEntityId: Option[String] = None, assertionConsumerServiceURL: Option[String] = None, spPrivateKeyAlias: Option[String] = None, keyStorePassword: Option[String] = None, defaultRedirectUrl: Option[String] = None, userIDAttribute: Option[String] = None, useEncryption: Option[Boolean] = None, createUser: Option[Boolean] = None, userIntermediatePath: Option[String] = None, addGroupMemberships: Option[Boolean] = None, groupMembershipAttribute: Option[String] = None, defaultGroups: Seq[String], nameIdFormat: Option[String] = None, synchronizeAttributes: Seq[String], handleLogout: Option[Boolean] = None, logoutUrl: Option[String] = None, clockTolerance: Option[Int] = None, digestMethod: Option[String] = None, signatureMethod: Option[String] = None, identitySyncType: Option[String] = None, idpIdentifier: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", ArrayValues(path, MULTI))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("idpUrl", idpUrl)
      .withQueryParam("idpCertAlias", idpCertAlias)
      .withQueryParam("idpHttpRedirect", idpHttpRedirect)
      .withQueryParam("serviceProviderEntityId", serviceProviderEntityId)
      .withQueryParam("assertionConsumerServiceURL", assertionConsumerServiceURL)
      .withQueryParam("spPrivateKeyAlias", spPrivateKeyAlias)
      .withQueryParam("keyStorePassword", keyStorePassword)
      .withQueryParam("defaultRedirectUrl", defaultRedirectUrl)
      .withQueryParam("userIDAttribute", userIDAttribute)
      .withQueryParam("useEncryption", useEncryption)
      .withQueryParam("createUser", createUser)
      .withQueryParam("userIntermediatePath", userIntermediatePath)
      .withQueryParam("addGroupMemberships", addGroupMemberships)
      .withQueryParam("groupMembershipAttribute", groupMembershipAttribute)
      .withQueryParam("defaultGroups", ArrayValues(defaultGroups, MULTI))
      .withQueryParam("nameIdFormat", nameIdFormat)
      .withQueryParam("synchronizeAttributes", ArrayValues(synchronizeAttributes, MULTI))
      .withQueryParam("handleLogout", handleLogout)
      .withQueryParam("logoutUrl", logoutUrl)
      .withQueryParam("clockTolerance", clockTolerance)
      .withQueryParam("digestMethod", digestMethod)
      .withQueryParam("signatureMethod", signatureMethod)
      .withQueryParam("identitySyncType", identitySyncType)
      .withQueryParam("idpIdentifier", idpIdentifier)
      .withSuccessResponse[ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   * @param serviceRanking 
   * @param jaasControlFlag 
   * @param jaasRealmName 
   * @param jaasRanking 
   * @param headers 
   * @param cookies 
   * @param parameters 
   * @param usermap 
   * @param format 
   * @param trustedCredentialsAttribute 
   */
  def comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Option[String] = None, serviceRanking: Option[Int] = None, jaasControlFlag: Option[String] = None, jaasRealmName: Option[String] = None, jaasRanking: Option[Int] = None, headers: Seq[String], cookies: Seq[String], parameters: Seq[String], usermap: Seq[String], format: Option[String] = None, trustedCredentialsAttribute: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", path)
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("jaas.controlFlag", jaasControlFlag)
      .withQueryParam("jaas.realmName", jaasRealmName)
      .withQueryParam("jaas.ranking", jaasRanking)
      .withQueryParam("headers", ArrayValues(headers, MULTI))
      .withQueryParam("cookies", ArrayValues(cookies, MULTI))
      .withQueryParam("parameters", ArrayValues(parameters, MULTI))
      .withQueryParam("usermap", ArrayValues(usermap, MULTI))
      .withQueryParam("format", format)
      .withQueryParam("trustedCredentialsAttribute", trustedCredentialsAttribute)
      .withSuccessResponse[ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   * @param minimumCodeCacheSize 
   */
  def comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String], minimumCodeCacheSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("minimum.code.cache.size", minimumCodeCacheSize)
      .withSuccessResponse[ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   * @param ignoredBundles 
   */
  def comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String], ignoredBundles: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("ignored.bundles", ArrayValues(ignoredBundles, MULTI))
      .withSuccessResponse[ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   * @param maxQueuedJobs 
   */
  def comAdobeGraniteBundlesHcImplJobsHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String], maxQueuedJobs: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("max.queued.jobs", maxQueuedJobs)
      .withSuccessResponse[ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param replicateCommentResourceTypes 
   */
  def comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], replicateCommentResourceTypes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("replicate.comment.resourceTypes", ArrayValues(replicateCommentResourceTypes, MULTI))
      .withSuccessResponse[ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param compatgroups 
   * @param enabled 
   */
  def comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], compatgroups: Seq[String], enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("compatgroups", ArrayValues(compatgroups, MULTI))
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteCompatrouterImplRoutingConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param id 
   * @param compatPath 
   * @param newPath 
   */
  def comAdobeGraniteCompatrouterImplRoutingConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], id: Option[String] = None, compatPath: Option[String] = None, newPath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("id", id)
      .withQueryParam("compatPath", compatPath)
      .withQueryParam("newPath", newPath)
      .withSuccessResponse[ComAdobeGraniteCompatrouterImplRoutingConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param group 
   * @param ids 
   */
  def comAdobeGraniteCompatrouterImplSwitchMappingConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], group: Option[String] = None, ids: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("group", group)
      .withQueryParam("ids", ArrayValues(ids, MULTI))
      .withSuccessResponse[ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   * @param fallbackPaths 
   */
  def comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None, fallbackPaths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withQueryParam("fallbackPaths", ArrayValues(fallbackPaths, MULTI))
      .withSuccessResponse[ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteContexthubImplContextHubImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeGraniteContexthubSilentMode 
   * @param comAdobeGraniteContexthubShowUi 
   */
  def comAdobeGraniteContexthubImplContextHubImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeGraniteContexthubSilentMode: Option[Boolean] = None, comAdobeGraniteContexthubShowUi: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.granite.contexthub.silent_mode", comAdobeGraniteContexthubSilentMode)
      .withQueryParam("com.adobe.granite.contexthub.show_ui", comAdobeGraniteContexthubShowUi)
      .withSuccessResponse[ComAdobeGraniteContexthubImplContextHubImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteCorsImplCORSPolicyImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param alloworigin 
   * @param alloworiginregexp 
   * @param allowedpaths 
   * @param exposedheaders 
   * @param maxage 
   * @param supportedheaders 
   * @param supportedmethods 
   * @param supportscredentials 
   */
  def comAdobeGraniteCorsImplCORSPolicyImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], alloworigin: Seq[String], alloworiginregexp: Seq[String], allowedpaths: Seq[String], exposedheaders: Seq[String], maxage: Option[Int] = None, supportedheaders: Seq[String], supportedmethods: Seq[String], supportscredentials: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("alloworigin", ArrayValues(alloworigin, MULTI))
      .withQueryParam("alloworiginregexp", ArrayValues(alloworiginregexp, MULTI))
      .withQueryParam("allowedpaths", ArrayValues(allowedpaths, MULTI))
      .withQueryParam("exposedheaders", ArrayValues(exposedheaders, MULTI))
      .withQueryParam("maxage", maxage)
      .withQueryParam("supportedheaders", ArrayValues(supportedheaders, MULTI))
      .withQueryParam("supportedmethods", ArrayValues(supportedmethods, MULTI))
      .withQueryParam("supportscredentials", supportscredentials)
      .withSuccessResponse[ComAdobeGraniteCorsImplCORSPolicyImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteCsrfImplCSRFFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param filterMethods 
   * @param filterEnableSafeUserAgents 
   * @param filterSafeUserAgents 
   * @param filterExcludedPaths 
   */
  def comAdobeGraniteCsrfImplCSRFFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], filterMethods: Seq[String], filterEnableSafeUserAgents: Option[Boolean] = None, filterSafeUserAgents: Seq[String], filterExcludedPaths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("filter.methods", ArrayValues(filterMethods, MULTI))
      .withQueryParam("filter.enable.safe.user.agents", filterEnableSafeUserAgents)
      .withQueryParam("filter.safe.user.agents", ArrayValues(filterSafeUserAgents, MULTI))
      .withQueryParam("filter.excluded.paths", ArrayValues(filterExcludedPaths, MULTI))
      .withSuccessResponse[ComAdobeGraniteCsrfImplCSRFFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteCsrfImplCSRFServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param csrfTokenExpiresIn 
   * @param slingAuthRequirements 
   */
  def comAdobeGraniteCsrfImplCSRFServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], csrfTokenExpiresIn: Option[Int] = None, slingAuthRequirements: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("csrf.token.expires.in", csrfTokenExpiresIn)
      .withQueryParam("sling.auth.requirements", slingAuthRequirements)
      .withSuccessResponse[ComAdobeGraniteCsrfImplCSRFServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param username 
   * @param encryptedPassword 
   */
  def comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, username: Option[String] = None, encryptedPassword: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("username", username)
      .withQueryParam("encryptedPassword", encryptedPassword)
      .withSuccessResponse[ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   * @param agentName 
   * @param diffPath 
   * @param observedPath 
   * @param serviceName 
   * @param propertyNames 
   * @param distributionDelay 
   * @param serviceUserTarget 
   */
  def comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None, agentName: Option[String] = None, diffPath: Option[String] = None, observedPath: Option[String] = None, serviceName: Option[String] = None, propertyNames: Option[String] = None, distributionDelay: Option[Int] = None, serviceUserTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withQueryParam("agentName", agentName)
      .withQueryParam("diffPath", diffPath)
      .withQueryParam("observedPath", observedPath)
      .withQueryParam("serviceName", serviceName)
      .withQueryParam("propertyNames", propertyNames)
      .withQueryParam("distributionDelay", distributionDelay)
      .withQueryParam("serviceUser.target", serviceUserTarget)
      .withSuccessResponse[ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param diffPath 
   * @param serviceName 
   * @param serviceUserTarget 
   */
  def comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], diffPath: Option[String] = None, serviceName: Option[String] = None, serviceUserTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("diffPath", diffPath)
      .withQueryParam("serviceName", serviceName)
      .withQueryParam("serviceUser.target", serviceUserTarget)
      .withSuccessResponse[ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param importerName 
   */
  def comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], importerName: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("importer.name", ArrayValues(importerName, MULTI))
      .withSuccessResponse[ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param providerName 
   * @param forwardRequests 
   */
  def comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], providerName: Option[String] = None, forwardRequests: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("providerName", providerName)
      .withQueryParam("forward.requests", forwardRequests)
      .withSuccessResponse[ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param forwardRequests 
   */
  def comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], forwardRequests: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("forward.requests", forwardRequests)
      .withSuccessResponse[ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param serviceName 
   * @param userId 
   * @param accessTokenProviderTarget 
   */
  def comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, serviceName: Option[String] = None, userId: Option[String] = None, accessTokenProviderTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("serviceName", serviceName)
      .withQueryParam("userId", userId)
      .withQueryParam("accessTokenProvider.target", accessTokenProviderTarget)
      .withSuccessResponse[ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param featureName 
   * @param featureDescription 
   * @param httpHeaderName 
   * @param httpHeaderValuepattern 
   */
  def comAdobeGraniteFragsImplCheckHttpHeaderFlag(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], featureName: Option[String] = None, featureDescription: Option[String] = None, httpHeaderName: Option[String] = None, httpHeaderValuepattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("feature.name", featureName)
      .withQueryParam("feature.description", featureDescription)
      .withQueryParam("http.header.name", httpHeaderName)
      .withQueryParam("http.header.valuepattern", httpHeaderValuepattern)
      .withSuccessResponse[ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteFragsImplRandomFeatureInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param featureName 
   * @param featureDescription 
   * @param activePercentage 
   * @param cookieName 
   * @param cookieMaxAge 
   */
  def comAdobeGraniteFragsImplRandomFeature(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], featureName: Option[String] = None, featureDescription: Option[String] = None, activePercentage: Option[String] = None, cookieName: Option[String] = None, cookieMaxAge: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("feature.name", featureName)
      .withQueryParam("feature.description", featureDescription)
      .withQueryParam("active.percentage", activePercentage)
      .withQueryParam("cookie.name", cookieName)
      .withQueryParam("cookie.maxAge", cookieMaxAge)
      .withSuccessResponse[ComAdobeGraniteFragsImplRandomFeatureInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteHttpcacheFileFileCacheStoreInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeGraniteHttpcacheFileDocumentRoot 
   * @param comAdobeGraniteHttpcacheFileIncludeHost 
   */
  def comAdobeGraniteHttpcacheFileFileCacheStore(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeGraniteHttpcacheFileDocumentRoot: Option[String] = None, comAdobeGraniteHttpcacheFileIncludeHost: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.granite.httpcache.file.documentRoot", comAdobeGraniteHttpcacheFileDocumentRoot)
      .withQueryParam("com.adobe.granite.httpcache.file.includeHost", comAdobeGraniteHttpcacheFileIncludeHost)
      .withSuccessResponse[ComAdobeGraniteHttpcacheFileFileCacheStoreInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeGraniteHttpcacheUrlPaths 
   */
  def comAdobeGraniteHttpcacheImplOuterCacheFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeGraniteHttpcacheUrlPaths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.granite.httpcache.url.paths", ArrayValues(comAdobeGraniteHttpcacheUrlPaths, MULTI))
      .withSuccessResponse[ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param pseudoPatterns 
   */
  def comAdobeGraniteI18nImplBundlePseudoTranslations(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], pseudoPatterns: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("pseudo.patterns", ArrayValues(pseudoPatterns, MULTI))
      .withSuccessResponse[ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param securityPreferencesName 
   */
  def comAdobeGraniteI18nImplPreferencesLocaleResolverService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], securityPreferencesName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("security.preferences.name", securityPreferencesName)
      .withSuccessResponse[ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteInfocollectorInfoCollectorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param graniteInfocollectorIncludeThreadDumps 
   * @param graniteInfocollectorIncludeHeapDump 
   */
  def comAdobeGraniteInfocollectorInfoCollector(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], graniteInfocollectorIncludeThreadDumps: Option[Boolean] = None, graniteInfocollectorIncludeHeapDump: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("granite.infocollector.includeThreadDumps", graniteInfocollectorIncludeThreadDumps)
      .withQueryParam("granite.infocollector.includeHeapDump", graniteInfocollectorIncludeHeapDump)
      .withSuccessResponse[ComAdobeGraniteInfocollectorInfoCollectorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comAdobeGraniteJettySslPort 
   * @param comAdobeGraniteJettySslKeystoreUser 
   * @param comAdobeGraniteJettySslKeystorePassword 
   * @param comAdobeGraniteJettySslCiphersuitesExcluded 
   * @param comAdobeGraniteJettySslCiphersuitesIncluded 
   * @param comAdobeGraniteJettySslClientCertificate 
   */
  def comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comAdobeGraniteJettySslPort: Option[Int] = None, comAdobeGraniteJettySslKeystoreUser: Option[String] = None, comAdobeGraniteJettySslKeystorePassword: Option[String] = None, comAdobeGraniteJettySslCiphersuitesExcluded: Seq[String], comAdobeGraniteJettySslCiphersuitesIncluded: Seq[String], comAdobeGraniteJettySslClientCertificate: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.adobe.granite.jetty.ssl.port", comAdobeGraniteJettySslPort)
      .withQueryParam("com.adobe.granite.jetty.ssl.keystore.user", comAdobeGraniteJettySslKeystoreUser)
      .withQueryParam("com.adobe.granite.jetty.ssl.keystore.password", comAdobeGraniteJettySslKeystorePassword)
      .withQueryParam("com.adobe.granite.jetty.ssl.ciphersuites.excluded", ArrayValues(comAdobeGraniteJettySslCiphersuitesExcluded, MULTI))
      .withQueryParam("com.adobe.granite.jetty.ssl.ciphersuites.included", ArrayValues(comAdobeGraniteJettySslCiphersuitesIncluded, MULTI))
      .withQueryParam("com.adobe.granite.jetty.ssl.client.certificate", comAdobeGraniteJettySslClientCertificate)
      .withSuccessResponse[ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteLicenseImplLicenseCheckFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param checkInternval 
   * @param excludeIds 
   * @param encryptPing 
   */
  def comAdobeGraniteLicenseImplLicenseCheckFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], checkInternval: Option[Int] = None, excludeIds: Seq[String], encryptPing: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("checkInternval", checkInternval)
      .withQueryParam("excludeIds", ArrayValues(excludeIds, MULTI))
      .withQueryParam("encryptPing", encryptPing)
      .withSuccessResponse[ComAdobeGraniteLicenseImplLicenseCheckFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteLoggingImplLogAnalyserImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param messagesQueueSize 
   * @param loggerConfig 
   * @param messagesSize 
   */
  def comAdobeGraniteLoggingImplLogAnalyserImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], messagesQueueSize: Option[Int] = None, loggerConfig: Seq[String], messagesSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("messages.queue.size", messagesQueueSize)
      .withQueryParam("logger.config", ArrayValues(loggerConfig, MULTI))
      .withQueryParam("messages.size", messagesSize)
      .withSuccessResponse[ComAdobeGraniteLoggingImplLogAnalyserImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteLoggingImplLogErrorHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param graniteMaintenanceMandatory 
   * @param jobTopics 
   */
  def comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], graniteMaintenanceMandatory: Option[Boolean] = None, jobTopics: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("granite.maintenance.mandatory", graniteMaintenanceMandatory)
      .withQueryParam("job.topics", jobTopics)
      .withSuccessResponse[ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jobTopics 
   */
  def comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jobTopics: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("job.topics", jobTopics)
      .withSuccessResponse[ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fullGcDays 
   */
  def comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fullGcDays: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("full.gc.days", ArrayValues(fullGcDays, MULTI))
      .withSuccessResponse[ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteMonitoringImplScriptConfigImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param scriptFilename 
   * @param scriptDisplay 
   * @param scriptPath 
   * @param scriptPlatform 
   * @param interval 
   * @param jmxdomain 
   */
  def comAdobeGraniteMonitoringImplScriptConfigImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], scriptFilename: Option[String] = None, scriptDisplay: Option[String] = None, scriptPath: Option[String] = None, scriptPlatform: Seq[String], interval: Option[Int] = None, jmxdomain: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("script.filename", scriptFilename)
      .withQueryParam("script.display", scriptDisplay)
      .withQueryParam("script.path", scriptPath)
      .withQueryParam("script.platform", ArrayValues(scriptPlatform, MULTI))
      .withQueryParam("interval", interval)
      .withQueryParam("jmxdomain", jmxdomain)
      .withSuccessResponse[ComAdobeGraniteMonitoringImplScriptConfigImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   * @param jaasControlFlag 
   * @param jaasRealmName 
   * @param jaasRanking 
   * @param oauthOfflineValidation 
   */
  def comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Option[String] = None, jaasControlFlag: Option[String] = None, jaasRealmName: Option[String] = None, jaasRanking: Option[Int] = None, oauthOfflineValidation: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", path)
      .withQueryParam("jaas.controlFlag", jaasControlFlag)
      .withQueryParam("jaas.realmName", jaasRealmName)
      .withQueryParam("jaas.ranking", jaasRanking)
      .withQueryParam("oauth.offline.validation", oauthOfflineValidation)
      .withSuccessResponse[ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerExpression 
   */
  def comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerExpression: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withSuccessResponse[ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthClientRevocationActive 
   */
  def comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthClientRevocationActive: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.client.revocation.active", oauthClientRevocationActive)
      .withSuccessResponse[ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletPaths 
   * @param oauthRevocationActive 
   */
  def comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletPaths: Option[String] = None, oauthRevocationActive: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.paths", slingServletPaths)
      .withQueryParam("oauth.revocation.active", oauthRevocationActive)
      .withSuccessResponse[ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthIssuer 
   * @param oauthAccessTokenExpiresIn 
   * @param osgiHttpWhiteboardServletPattern 
   * @param osgiHttpWhiteboardContextSelect 
   */
  def comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthIssuer: Option[String] = None, oauthAccessTokenExpiresIn: Option[String] = None, osgiHttpWhiteboardServletPattern: Option[String] = None, osgiHttpWhiteboardContextSelect: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.issuer", oauthIssuer)
      .withQueryParam("oauth.access.token.expires.in", oauthAccessTokenExpiresIn)
      .withQueryParam("osgi.http.whiteboard.servlet.pattern", osgiHttpWhiteboardServletPattern)
      .withQueryParam("osgi.http.whiteboard.context.select", osgiHttpWhiteboardContextSelect)
      .withSuccessResponse[ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param oauthTokenRevocationActive 
   */
  def comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], oauthTokenRevocationActive: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("oauth.token.revocation.active", oauthTokenRevocationActive)
      .withSuccessResponse[ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param offloadingTransporter 
   * @param offloadingCleanupPayload 
   */
  def comAdobeGraniteOffloadingImplOffloadingConfigurator(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], offloadingTransporter: Option[String] = None, offloadingCleanupPayload: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("offloading.transporter", offloadingTransporter)
      .withQueryParam("offloading.cleanup.payload", offloadingCleanupPayload)
      .withSuccessResponse[ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param offloadingJobclonerEnabled 
   */
  def comAdobeGraniteOffloadingImplOffloadingJobCloner(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], offloadingJobclonerEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("offloading.jobcloner.enabled", offloadingJobclonerEnabled)
      .withSuccessResponse[ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param offloadingOffloaderEnabled 
   */
  def comAdobeGraniteOffloadingImplOffloadingJobOffloader(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], offloadingOffloaderEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("offloading.offloader.enabled", offloadingOffloaderEnabled)
      .withSuccessResponse[ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param offloadingAgentmanagerEnabled 
   */
  def comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], offloadingAgentmanagerEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("offloading.agentmanager.enabled", offloadingAgentmanagerEnabled)
      .withSuccessResponse[ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param defaultTransportAgentToWorkerPrefix 
   * @param defaultTransportAgentToMasterPrefix 
   * @param defaultTransportInputPackage 
   * @param defaultTransportOutputPackage 
   * @param defaultTransportReplicationSynchronous 
   * @param defaultTransportContentpackage 
   * @param offloadingTransporterDefaultEnabled 
   */
  def comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], defaultTransportAgentToWorkerPrefix: Option[String] = None, defaultTransportAgentToMasterPrefix: Option[String] = None, defaultTransportInputPackage: Option[String] = None, defaultTransportOutputPackage: Option[String] = None, defaultTransportReplicationSynchronous: Option[Boolean] = None, defaultTransportContentpackage: Option[Boolean] = None, offloadingTransporterDefaultEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("default.transport.agent-to-worker.prefix", defaultTransportAgentToWorkerPrefix)
      .withQueryParam("default.transport.agent-to-master.prefix", defaultTransportAgentToMasterPrefix)
      .withQueryParam("default.transport.input.package", defaultTransportInputPackage)
      .withQueryParam("default.transport.output.package", defaultTransportOutputPackage)
      .withQueryParam("default.transport.replication.synchronous", defaultTransportReplicationSynchronous)
      .withQueryParam("default.transport.contentpackage", defaultTransportContentpackage)
      .withQueryParam("offloading.transporter.default.enabled", offloadingTransporterDefaultEnabled)
      .withSuccessResponse[ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param omnisearchSuggestionRequiretextMin 
   * @param omnisearchSuggestionSpellcheckRequire 
   */
  def comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], omnisearchSuggestionRequiretextMin: Option[Int] = None, omnisearchSuggestionSpellcheckRequire: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("omnisearch.suggestion.requiretext.min", omnisearchSuggestionRequiretextMin)
      .withQueryParam("omnisearch.suggestion.spellcheck.require", omnisearchSuggestionSpellcheckRequire)
      .withSuccessResponse[ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteOptoutImplOptOutServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param optoutCookies 
   * @param optoutHeaders 
   * @param optoutWhitelistCookies 
   */
  def comAdobeGraniteOptoutImplOptOutServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], optoutCookies: Seq[String], optoutHeaders: Seq[String], optoutWhitelistCookies: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("optout.cookies", ArrayValues(optoutCookies, MULTI))
      .withQueryParam("optout.headers", ArrayValues(optoutHeaders, MULTI))
      .withQueryParam("optout.whitelist.cookies", ArrayValues(optoutWhitelistCookies, MULTI))
      .withSuccessResponse[ComAdobeGraniteOptoutImplOptOutServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param indexingCriticalThreshold 
   * @param indexingWarnThreshold 
   * @param hcTags 
   */
  def comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], indexingCriticalThreshold: Option[Int] = None, indexingWarnThreshold: Option[Int] = None, hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("indexing.critical.threshold", indexingCriticalThreshold)
      .withQueryParam("indexing.warn.threshold", indexingWarnThreshold)
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param largeIndexCriticalThreshold 
   * @param largeIndexWarnThreshold 
   * @param hcTags 
   */
  def comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], largeIndexCriticalThreshold: Option[Int] = None, largeIndexWarnThreshold: Option[Int] = None, hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("large.index.critical.threshold", largeIndexCriticalThreshold)
      .withQueryParam("large.index.warn.threshold", largeIndexWarnThreshold)
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param getPeriod 
   */
  def comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], getPeriod: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("getPeriod", getPeriod)
      .withSuccessResponse[ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param numberOfRetriesAllowed 
   * @param hcTags 
   */
  def comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], numberOfRetriesAllowed: Option[Int] = None, hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("number.of.retries.allowed", numberOfRetriesAllowed)
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   * @param excludeSearchPath 
   */
  def comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String], excludeSearchPath: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("exclude.search.path", ArrayValues(excludeSearchPath, MULTI))
      .withSuccessResponse[ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   * @param accountLogins 
   * @param consoleLogins 
   */
  def comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String], accountLogins: Seq[String], consoleLogins: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("account.logins", ArrayValues(accountLogins, MULTI))
      .withQueryParam("console.logins", ArrayValues(consoleLogins, MULTI))
      .withSuccessResponse[ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   * @param diskSpaceWarnThreshold 
   * @param diskSpaceErrorThreshold 
   */
  def comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String], diskSpaceWarnThreshold: Option[Int] = None, diskSpaceErrorThreshold: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("disk.space.warn.threshold", diskSpaceWarnThreshold)
      .withQueryParam("disk.space.error.threshold", diskSpaceErrorThreshold)
      .withSuccessResponse[ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRepositoryImplCommitStatsConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   * @param intervalSeconds 
   * @param commitsPerIntervalThreshold 
   * @param maxLocationLength 
   * @param maxDetailsShown 
   * @param minDetailsPercentage 
   * @param threadMatchers 
   * @param maxGreedyDepth 
   * @param greedyStackMatchers 
   * @param stackFilters 
   * @param stackMatchers 
   * @param stackCategorizers 
   * @param stackShorteners 
   */
  def comAdobeGraniteRepositoryImplCommitStatsConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None, intervalSeconds: Option[Int] = None, commitsPerIntervalThreshold: Option[Int] = None, maxLocationLength: Option[Int] = None, maxDetailsShown: Option[Int] = None, minDetailsPercentage: Option[Int] = None, threadMatchers: Seq[String], maxGreedyDepth: Option[Int] = None, greedyStackMatchers: Option[String] = None, stackFilters: Seq[String], stackMatchers: Seq[String], stackCategorizers: Seq[String], stackShorteners: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withQueryParam("intervalSeconds", intervalSeconds)
      .withQueryParam("commitsPerIntervalThreshold", commitsPerIntervalThreshold)
      .withQueryParam("maxLocationLength", maxLocationLength)
      .withQueryParam("maxDetailsShown", maxDetailsShown)
      .withQueryParam("minDetailsPercentage", minDetailsPercentage)
      .withQueryParam("threadMatchers", ArrayValues(threadMatchers, MULTI))
      .withQueryParam("maxGreedyDepth", maxGreedyDepth)
      .withQueryParam("greedyStackMatchers", greedyStackMatchers)
      .withQueryParam("stackFilters", ArrayValues(stackFilters, MULTI))
      .withQueryParam("stackMatchers", ArrayValues(stackMatchers, MULTI))
      .withQueryParam("stackCategorizers", ArrayValues(stackCategorizers, MULTI))
      .withQueryParam("stackShorteners", ArrayValues(stackShorteners, MULTI))
      .withSuccessResponse[ComAdobeGraniteRepositoryImplCommitStatsConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRepositoryServiceUserConfigurationInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param serviceusersSimpleSubjectPopulation 
   * @param serviceusersList 
   */
  def comAdobeGraniteRepositoryServiceUserConfiguration(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, serviceusersSimpleSubjectPopulation: Option[Boolean] = None, serviceusersList: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("serviceusers.simpleSubjectPopulation", serviceusersSimpleSubjectPopulation)
      .withQueryParam("serviceusers.list", ArrayValues(serviceusersList, MULTI))
      .withSuccessResponse[ComAdobeGraniteRepositoryServiceUserConfigurationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param types 
   */
  def comAdobeGraniteResourcestatusImplCompositeStatusType(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, types: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("types", ArrayValues(types, MULTI))
      .withSuccessResponse[ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param providerRoot 
   */
  def comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], providerRoot: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("provider.root", providerRoot)
      .withSuccessResponse[ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param mimeAllowEmpty 
   * @param mimeAllowed 
   */
  def comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], mimeAllowEmpty: Option[Boolean] = None, mimeAllowed: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("mime.allowEmpty", mimeAllowEmpty)
      .withQueryParam("mime.allowed", ArrayValues(mimeAllowed, MULTI))
      .withSuccessResponse[ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param providerRoots 
   */
  def comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], providerRoots: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("provider.roots", providerRoots)
      .withSuccessResponse[ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteRestImplServletDefaultGETServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param defaultLimit 
   * @param useAbsoluteUri 
   */
  def comAdobeGraniteRestImplServletDefaultGETServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], defaultLimit: Option[Int] = None, useAbsoluteUri: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("default.limit", defaultLimit)
      .withQueryParam("use.absolute.uri", useAbsoluteUri)
      .withSuccessResponse[ComAdobeGraniteRestImplServletDefaultGETServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcTags 
   */
  def comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcTags: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withSuccessResponse[ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteSecurityUserUserPropertiesServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param adapterCondition 
   * @param graniteUserpropertiesNodetypes 
   * @param graniteUserpropertiesResourcetypes 
   */
  def comAdobeGraniteSecurityUserUserPropertiesService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], adapterCondition: Option[String] = None, graniteUserpropertiesNodetypes: Seq[String], graniteUserpropertiesResourcetypes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("adapter.condition", adapterCondition)
      .withQueryParam("granite.userproperties.nodetypes", ArrayValues(graniteUserpropertiesNodetypes, MULTI))
      .withQueryParam("granite.userproperties.resourcetypes", ArrayValues(graniteUserpropertiesResourcetypes, MULTI))
      .withSuccessResponse[ComAdobeGraniteSecurityUserUserPropertiesServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param group2memberRelationshipOutgoing 
   * @param group2memberExcludedOutgoing 
   * @param group2memberRelationshipIncoming 
   * @param group2memberExcludedIncoming 
   */
  def comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], group2memberRelationshipOutgoing: Option[String] = None, group2memberExcludedOutgoing: Seq[String], group2memberRelationshipIncoming: Option[String] = None, group2memberExcludedIncoming: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("group2member.relationship.outgoing", group2memberRelationshipOutgoing)
      .withQueryParam("group2member.excluded.outgoing", ArrayValues(group2memberExcludedOutgoing, MULTI))
      .withQueryParam("group2member.relationship.incoming", group2memberRelationshipIncoming)
      .withQueryParam("group2member.excluded.incoming", ArrayValues(group2memberExcludedIncoming, MULTI))
      .withSuccessResponse[ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerExpression 
   * @param jmxObjectname 
   */
  def comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerExpression: Option[String] = None, jmxObjectname: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withQueryParam("jmx.objectname", jmxObjectname)
      .withSuccessResponse[ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param adapterCondition 
   */
  def comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], adapterCondition: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("adapter.condition", adapterCondition)
      .withSuccessResponse[ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param archivingEnabled 
   * @param schedulerExpression 
   * @param archiveSinceDaysCompleted 
   */
  def comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], archivingEnabled: Option[Boolean] = None, schedulerExpression: Option[String] = None, archiveSinceDaysCompleted: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("archiving.enabled", archivingEnabled)
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withQueryParam("archive.since.days.completed", archiveSinceDaysCompleted)
      .withSuccessResponse[ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param purgeCompleted 
   * @param completedAge 
   * @param purgeActive 
   * @param activeAge 
   * @param saveThreshold 
   */
  def comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], purgeCompleted: Option[Boolean] = None, completedAge: Option[Int] = None, purgeActive: Option[Boolean] = None, activeAge: Option[Int] = None, saveThreshold: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("purgeCompleted", purgeCompleted)
      .withQueryParam("completedAge", completedAge)
      .withQueryParam("purgeActive", purgeActive)
      .withQueryParam("activeAge", activeAge)
      .withQueryParam("saveThreshold", saveThreshold)
      .withSuccessResponse[ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param adapterCondition 
   * @param taskmanagerAdmingroups 
   */
  def comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], adapterCondition: Option[String] = None, taskmanagerAdmingroups: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("adapter.condition", adapterCondition)
      .withQueryParam("taskmanager.admingroups", ArrayValues(taskmanagerAdmingroups, MULTI))
      .withSuccessResponse[ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteThreaddumpThreadDumpCollectorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerPeriod 
   * @param schedulerRunOn 
   * @param graniteThreaddumpEnabled 
   * @param graniteThreaddumpDumpsPerFile 
   * @param graniteThreaddumpEnableGzipCompression 
   * @param graniteThreaddumpEnableDirectoriesCompression 
   * @param graniteThreaddumpEnableJStack 
   * @param graniteThreaddumpMaxBackupDays 
   * @param graniteThreaddumpBackupCleanTrigger 
   */
  def comAdobeGraniteThreaddumpThreadDumpCollector(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerPeriod: Option[Int] = None, schedulerRunOn: Option[String] = None, graniteThreaddumpEnabled: Option[Boolean] = None, graniteThreaddumpDumpsPerFile: Option[Int] = None, graniteThreaddumpEnableGzipCompression: Option[Boolean] = None, graniteThreaddumpEnableDirectoriesCompression: Option[Boolean] = None, graniteThreaddumpEnableJStack: Option[Boolean] = None, graniteThreaddumpMaxBackupDays: Option[Int] = None, graniteThreaddumpBackupCleanTrigger: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.period", schedulerPeriod)
      .withQueryParam("scheduler.runOn", schedulerRunOn)
      .withQueryParam("granite.threaddump.enabled", graniteThreaddumpEnabled)
      .withQueryParam("granite.threaddump.dumpsPerFile", graniteThreaddumpDumpsPerFile)
      .withQueryParam("granite.threaddump.enableGzipCompression", graniteThreaddumpEnableGzipCompression)
      .withQueryParam("granite.threaddump.enableDirectoriesCompression", graniteThreaddumpEnableDirectoriesCompression)
      .withQueryParam("granite.threaddump.enableJStack", graniteThreaddumpEnableJStack)
      .withQueryParam("granite.threaddump.maxBackupDays", graniteThreaddumpMaxBackupDays)
      .withQueryParam("granite.threaddump.backupCleanTrigger", graniteThreaddumpBackupCleanTrigger)
      .withSuccessResponse[ComAdobeGraniteThreaddumpThreadDumpCollectorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param translationFactory 
   * @param defaultConnectorLabel 
   * @param defaultConnectorAttribution 
   * @param defaultConnectorWorkspaceId 
   * @param defaultConnectorSubscriptionKey 
   * @param languageMapLocation 
   * @param categoryMapLocation 
   * @param retryAttempts 
   * @param timeoutCount 
   */
  def comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], translationFactory: Option[String] = None, defaultConnectorLabel: Option[String] = None, defaultConnectorAttribution: Option[String] = None, defaultConnectorWorkspaceId: Option[String] = None, defaultConnectorSubscriptionKey: Option[String] = None, languageMapLocation: Option[String] = None, categoryMapLocation: Option[String] = None, retryAttempts: Option[Int] = None, timeoutCount: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("translationFactory", translationFactory)
      .withQueryParam("defaultConnectorLabel", defaultConnectorLabel)
      .withQueryParam("defaultConnectorAttribution", defaultConnectorAttribution)
      .withQueryParam("defaultConnectorWorkspaceId", defaultConnectorWorkspaceId)
      .withQueryParam("defaultConnectorSubscriptionKey", defaultConnectorSubscriptionKey)
      .withQueryParam("languageMapLocation", languageMapLocation)
      .withQueryParam("categoryMapLocation", categoryMapLocation)
      .withQueryParam("retryAttempts", retryAttempts)
      .withQueryParam("timeoutCount", timeoutCount)
      .withSuccessResponse[ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param defaultConnectorName 
   * @param defaultCategory 
   */
  def comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], defaultConnectorName: Option[String] = None, defaultCategory: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("defaultConnectorName", defaultConnectorName)
      .withQueryParam("defaultCategory", defaultCategory)
      .withSuccessResponse[ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param htmllibmanagerTiming 
   * @param htmllibmanagerDebugInitJs 
   * @param htmllibmanagerMinify 
   * @param htmllibmanagerDebug 
   * @param htmllibmanagerGzip 
   * @param htmllibmanagerMaxDataUriSize 
   * @param htmllibmanagerMaxage 
   * @param htmllibmanagerForceCQUrlInfo 
   * @param htmllibmanagerDefaultthemename 
   * @param htmllibmanagerDefaultuserthemename 
   * @param htmllibmanagerClientmanager 
   * @param htmllibmanagerPathList 
   * @param htmllibmanagerExcludedPathList 
   * @param htmllibmanagerProcessorJs 
   * @param htmllibmanagerProcessorCss 
   * @param htmllibmanagerLongcachePatterns 
   * @param htmllibmanagerLongcacheFormat 
   * @param htmllibmanagerUseFileSystemOutputCache 
   * @param htmllibmanagerFileSystemOutputCacheLocation 
   * @param htmllibmanagerDisableReplacement 
   */
  def comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], htmllibmanagerTiming: Option[Boolean] = None, htmllibmanagerDebugInitJs: Option[String] = None, htmllibmanagerMinify: Option[Boolean] = None, htmllibmanagerDebug: Option[Boolean] = None, htmllibmanagerGzip: Option[Boolean] = None, htmllibmanagerMaxDataUriSize: Option[Int] = None, htmllibmanagerMaxage: Option[Int] = None, htmllibmanagerForceCQUrlInfo: Option[Boolean] = None, htmllibmanagerDefaultthemename: Option[String] = None, htmllibmanagerDefaultuserthemename: Option[String] = None, htmllibmanagerClientmanager: Option[String] = None, htmllibmanagerPathList: Seq[String], htmllibmanagerExcludedPathList: Seq[String], htmllibmanagerProcessorJs: Seq[String], htmllibmanagerProcessorCss: Seq[String], htmllibmanagerLongcachePatterns: Seq[String], htmllibmanagerLongcacheFormat: Option[String] = None, htmllibmanagerUseFileSystemOutputCache: Option[Boolean] = None, htmllibmanagerFileSystemOutputCacheLocation: Option[String] = None, htmllibmanagerDisableReplacement: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("htmllibmanager.timing", htmllibmanagerTiming)
      .withQueryParam("htmllibmanager.debug.init.js", htmllibmanagerDebugInitJs)
      .withQueryParam("htmllibmanager.minify", htmllibmanagerMinify)
      .withQueryParam("htmllibmanager.debug", htmllibmanagerDebug)
      .withQueryParam("htmllibmanager.gzip", htmllibmanagerGzip)
      .withQueryParam("htmllibmanager.maxDataUriSize", htmllibmanagerMaxDataUriSize)
      .withQueryParam("htmllibmanager.maxage", htmllibmanagerMaxage)
      .withQueryParam("htmllibmanager.forceCQUrlInfo", htmllibmanagerForceCQUrlInfo)
      .withQueryParam("htmllibmanager.defaultthemename", htmllibmanagerDefaultthemename)
      .withQueryParam("htmllibmanager.defaultuserthemename", htmllibmanagerDefaultuserthemename)
      .withQueryParam("htmllibmanager.clientmanager", htmllibmanagerClientmanager)
      .withQueryParam("htmllibmanager.path.list", ArrayValues(htmllibmanagerPathList, MULTI))
      .withQueryParam("htmllibmanager.excluded.path.list", ArrayValues(htmllibmanagerExcludedPathList, MULTI))
      .withQueryParam("htmllibmanager.processor.js", ArrayValues(htmllibmanagerProcessorJs, MULTI))
      .withQueryParam("htmllibmanager.processor.css", ArrayValues(htmllibmanagerProcessorCss, MULTI))
      .withQueryParam("htmllibmanager.longcache.patterns", ArrayValues(htmllibmanagerLongcachePatterns, MULTI))
      .withQueryParam("htmllibmanager.longcache.format", htmllibmanagerLongcacheFormat)
      .withQueryParam("htmllibmanager.useFileSystemOutputCache", htmllibmanagerUseFileSystemOutputCache)
      .withQueryParam("htmllibmanager.fileSystemOutputCacheLocation", htmllibmanagerFileSystemOutputCacheLocation)
      .withQueryParam("htmllibmanager.disable.replacement", ArrayValues(htmllibmanagerDisableReplacement, MULTI))
      .withSuccessResponse[ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   */
  def comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param graniteWorkflowWorkflowPublishEventServiceEnabled 
   */
  def comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], graniteWorkflowWorkflowPublishEventServiceEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("granite.workflow.WorkflowPublishEventService.enabled", graniteWorkflowWorkflowPublishEventServiceEnabled)
      .withSuccessResponse[ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param bucketSize 
   */
  def comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], bucketSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("bucketSize", bucketSize)
      .withSuccessResponse[ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param defaultTimeout 
   * @param maxTimeout 
   * @param defaultPeriod 
   */
  def comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], defaultTimeout: Option[Int] = None, maxTimeout: Option[Int] = None, defaultPeriod: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("default.timeout", defaultTimeout)
      .withQueryParam("max.timeout", maxTimeout)
      .withQueryParam("default.period", defaultPeriod)
      .withSuccessResponse[ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteWorkflowCoreJobJobHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jobTopics 
   * @param allowSelfProcessTermination 
   */
  def comAdobeGraniteWorkflowCoreJobJobHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jobTopics: Seq[String], allowSelfProcessTermination: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("job.topics", ArrayValues(jobTopics, MULTI))
      .withQueryParam("allow.self.process.termination", allowSelfProcessTermination)
      .withSuccessResponse[ComAdobeGraniteWorkflowCoreJobJobHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jobTopics 
   */
  def comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jobTopics: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("job.topics", jobTopics)
      .withSuccessResponse[ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteWorkflowCorePayloadMapCacheInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param getSystemWorkflowModels 
   * @param getPackageRootPath 
   */
  def comAdobeGraniteWorkflowCorePayloadMapCache(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], getSystemWorkflowModels: Seq[String], getPackageRootPath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("getSystemWorkflowModels", ArrayValues(getSystemWorkflowModels, MULTI))
      .withQueryParam("getPackageRootPath", getPackageRootPath)
      .withSuccessResponse[ComAdobeGraniteWorkflowCorePayloadMapCacheInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param payloadMoveWhiteList 
   * @param payloadMoveHandleFromWorkflowProcess 
   */
  def comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], payloadMoveWhiteList: Seq[String], payloadMoveHandleFromWorkflowProcess: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("payload.move.white.list", ArrayValues(payloadMoveWhiteList, MULTI))
      .withQueryParam("payload.move.handle.from.workflow.process", payloadMoveHandleFromWorkflowProcess)
      .withSuccessResponse[ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteWorkflowCoreWorkflowConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqWorkflowConfigWorkflowPackagesRootPath 
   * @param cqWorkflowConfigWorkflowProcessLegacyMode 
   * @param cqWorkflowConfigAllowLocking 
   */
  def comAdobeGraniteWorkflowCoreWorkflowConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqWorkflowConfigWorkflowPackagesRootPath: Seq[String], cqWorkflowConfigWorkflowProcessLegacyMode: Option[Boolean] = None, cqWorkflowConfigAllowLocking: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.workflow.config.workflow.packages.root.path", ArrayValues(cqWorkflowConfigWorkflowPackagesRootPath, MULTI))
      .withQueryParam("cq.workflow.config.workflow.process.legacy.mode", cqWorkflowConfigWorkflowProcessLegacyMode)
      .withQueryParam("cq.workflow.config.allow.locking", cqWorkflowConfigAllowLocking)
      .withSuccessResponse[ComAdobeGraniteWorkflowCoreWorkflowConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param graniteWorkflowinboxSortPropertyName 
   * @param graniteWorkflowinboxSortOrder 
   * @param cqWorkflowJobRetry 
   * @param cqWorkflowSuperuser 
   * @param graniteWorkflowInboxQuerySize 
   * @param graniteWorkflowAdminUserGroupFilter 
   * @param graniteWorkflowEnforceWorkitemAssigneePermissions 
   * @param graniteWorkflowEnforceWorkflowInitiatorPermissions 
   * @param graniteWorkflowInjectTenantIdInJobTopics 
   * @param graniteWorkflowMaxPurgeSaveThreshold 
   * @param graniteWorkflowMaxPurgeQueryCount 
   */
  def comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], graniteWorkflowinboxSortPropertyName: Option[String] = None, graniteWorkflowinboxSortOrder: Option[String] = None, cqWorkflowJobRetry: Option[Int] = None, cqWorkflowSuperuser: Seq[String], graniteWorkflowInboxQuerySize: Option[Int] = None, graniteWorkflowAdminUserGroupFilter: Option[Boolean] = None, graniteWorkflowEnforceWorkitemAssigneePermissions: Option[Boolean] = None, graniteWorkflowEnforceWorkflowInitiatorPermissions: Option[Boolean] = None, graniteWorkflowInjectTenantIdInJobTopics: Option[Boolean] = None, graniteWorkflowMaxPurgeSaveThreshold: Option[Int] = None, graniteWorkflowMaxPurgeQueryCount: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("granite.workflowinbox.sort.propertyName", graniteWorkflowinboxSortPropertyName)
      .withQueryParam("granite.workflowinbox.sort.order", graniteWorkflowinboxSortOrder)
      .withQueryParam("cq.workflow.job.retry", cqWorkflowJobRetry)
      .withQueryParam("cq.workflow.superuser", ArrayValues(cqWorkflowSuperuser, MULTI))
      .withQueryParam("granite.workflow.inboxQuerySize", graniteWorkflowInboxQuerySize)
      .withQueryParam("granite.workflow.adminUserGroupFilter", graniteWorkflowAdminUserGroupFilter)
      .withQueryParam("granite.workflow.enforceWorkitemAssigneePermissions", graniteWorkflowEnforceWorkitemAssigneePermissions)
      .withQueryParam("granite.workflow.enforceWorkflowInitiatorPermissions", graniteWorkflowEnforceWorkflowInitiatorPermissions)
      .withQueryParam("granite.workflow.injectTenantIdInJobTopics", graniteWorkflowInjectTenantIdInJobTopics)
      .withQueryParam("granite.workflow.maxPurgeSaveThreshold", graniteWorkflowMaxPurgeSaveThreshold)
      .withQueryParam("granite.workflow.maxPurgeQueryCount", graniteWorkflowMaxPurgeQueryCount)
      .withSuccessResponse[ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeGraniteWorkflowPurgeSchedulerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param scheduledpurgeName 
   * @param scheduledpurgeWorkflowStatus 
   * @param scheduledpurgeModelIds 
   * @param scheduledpurgeDaysold 
   */
  def comAdobeGraniteWorkflowPurgeScheduler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], scheduledpurgeName: Option[String] = None, scheduledpurgeWorkflowStatus: Option[String] = None, scheduledpurgeModelIds: Seq[String], scheduledpurgeDaysold: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduledpurge.name", scheduledpurgeName)
      .withQueryParam("scheduledpurge.workflowStatus", scheduledpurgeWorkflowStatus)
      .withQueryParam("scheduledpurge.modelIds", ArrayValues(scheduledpurgeModelIds, MULTI))
      .withQueryParam("scheduledpurge.daysold", scheduledpurgeDaysold)
      .withSuccessResponse[ComAdobeGraniteWorkflowPurgeSchedulerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeOctopusNcommBootstrapInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxConnections 
   * @param maxRequests 
   * @param requestTimeout 
   * @param requestRetries 
   * @param launchTimeout 
   */
  def comAdobeOctopusNcommBootstrap(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxConnections: Option[Int] = None, maxRequests: Option[Int] = None, requestTimeout: Option[Int] = None, requestRetries: Option[Int] = None, launchTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("maxConnections", maxConnections)
      .withQueryParam("maxRequests", maxRequests)
      .withQueryParam("requestTimeout", requestTimeout)
      .withQueryParam("requestRetries", requestRetries)
      .withQueryParam("launchTimeout", launchTimeout)
      .withSuccessResponse[ComAdobeOctopusNcommBootstrapInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param communitiesIntegrationLivefyreSlingEventFilter 
   */
  def comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], communitiesIntegrationLivefyreSlingEventFilter: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("communities.integration.livefyre.sling.event.filter", communitiesIntegrationLivefyreSlingEventFilter)
      .withSuccessResponse[ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxConnections 
   * @param maxRequests 
   * @param requestTimeout 
   * @param logDir 
   */
  def comAdobeXmpWorkerFilesNcommXMPFilesNComm(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxConnections: Option[String] = None, maxRequests: Option[String] = None, requestTimeout: Option[String] = None, logDir: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("maxConnections", maxConnections)
      .withQueryParam("maxRequests", maxRequests)
      .withQueryParam("requestTimeout", requestTimeout)
      .withQueryParam("logDir", logDir)
      .withSuccessResponse[ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jdbcDriverClass 
   * @param jdbcConnectionUri 
   * @param jdbcUsername 
   * @param jdbcPassword 
   * @param jdbcValidationQuery 
   * @param defaultReadonly 
   * @param defaultAutocommit 
   * @param poolSize 
   * @param poolMaxWaitMsec 
   * @param datasourceName 
   * @param datasourceSvcProperties 
   */
  def comDayCommonsDatasourceJdbcpoolJdbcPoolService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jdbcDriverClass: Option[String] = None, jdbcConnectionUri: Option[String] = None, jdbcUsername: Option[String] = None, jdbcPassword: Option[String] = None, jdbcValidationQuery: Option[String] = None, defaultReadonly: Option[Boolean] = None, defaultAutocommit: Option[Boolean] = None, poolSize: Option[Int] = None, poolMaxWaitMsec: Option[Int] = None, datasourceName: Option[String] = None, datasourceSvcProperties: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("jdbc.driver.class", jdbcDriverClass)
      .withQueryParam("jdbc.connection.uri", jdbcConnectionUri)
      .withQueryParam("jdbc.username", jdbcUsername)
      .withQueryParam("jdbc.password", jdbcPassword)
      .withQueryParam("jdbc.validation.query", jdbcValidationQuery)
      .withQueryParam("default.readonly", defaultReadonly)
      .withQueryParam("default.autocommit", defaultAutocommit)
      .withQueryParam("pool.size", poolSize)
      .withQueryParam("pool.max.wait.msec", poolMaxWaitMsec)
      .withQueryParam("datasource.name", datasourceName)
      .withQueryParam("datasource.svc.properties", ArrayValues(datasourceSvcProperties, MULTI))
      .withSuccessResponse[ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCommonsHttpclientInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param proxyEnabled 
   * @param proxyHost 
   * @param proxyUser 
   * @param proxyPassword 
   * @param proxyNtlmHost 
   * @param proxyNtlmDomain 
   * @param proxyExceptions 
   */
  def comDayCommonsHttpclient(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], proxyEnabled: Option[Boolean] = None, proxyHost: Option[String] = None, proxyUser: Option[String] = None, proxyPassword: Option[String] = None, proxyNtlmHost: Option[String] = None, proxyNtlmDomain: Option[String] = None, proxyExceptions: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.commons.httpclient", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("proxy.enabled", proxyEnabled)
      .withQueryParam("proxy.host", proxyHost)
      .withQueryParam("proxy.user", proxyUser)
      .withQueryParam("proxy.password", proxyPassword)
      .withQueryParam("proxy.ntlm.host", proxyNtlmHost)
      .withQueryParam("proxy.ntlm.domain", proxyNtlmDomain)
      .withQueryParam("proxy.exceptions", ArrayValues(proxyExceptions, MULTI))
      .withSuccessResponse[ComDayCommonsHttpclientInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqStoreListenerAdditionalStorePaths 
   */
  def comDayCqAnalyticsImplStorePropertiesChangeListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqStoreListenerAdditionalStorePaths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.store.listener.additionalStorePaths", ArrayValues(cqStoreListenerAdditionalStorePaths, MULTI))
      .withSuccessResponse[ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param allowedPaths 
   * @param cqAnalyticsSaintExporterPagesize 
   */
  def comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], allowedPaths: Seq[String], cqAnalyticsSaintExporterPagesize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("allowed.paths", ArrayValues(allowedPaths, MULTI))
      .withQueryParam("cq.analytics.saint.exporter.pagesize", cqAnalyticsSaintExporterPagesize)
      .withSuccessResponse[ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param reportFetchAttempts 
   * @param reportFetchDelay 
   */
  def comDayCqAnalyticsSitecatalystImplImporterReportImporter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], reportFetchAttempts: Option[Int] = None, reportFetchDelay: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("report.fetch.attempts", reportFetchAttempts)
      .withQueryParam("report.fetch.delay", reportFetchDelay)
      .withSuccessResponse[ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAnalyticsAdapterfactoryContextstores 
   */
  def comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAnalyticsAdapterfactoryContextstores: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.analytics.adapterfactory.contextstores", ArrayValues(cqAnalyticsAdapterfactoryContextstores, MULTI))
      .withSuccessResponse[ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAnalyticsSitecatalystServiceDatacenterUrl 
   * @param devhostnamepatterns 
   * @param connectionTimeout 
   * @param socketTimeout 
   */
  def comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAnalyticsSitecatalystServiceDatacenterUrl: Seq[String], devhostnamepatterns: Seq[String], connectionTimeout: Option[Int] = None, socketTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.analytics.sitecatalyst.service.datacenter.url", ArrayValues(cqAnalyticsSitecatalystServiceDatacenterUrl, MULTI))
      .withQueryParam("devhostnamepatterns", ArrayValues(devhostnamepatterns, MULTI))
      .withQueryParam("connection.timeout", connectionTimeout)
      .withQueryParam("socket.timeout", socketTimeout)
      .withSuccessResponse[ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAnalyticsTestandtargetAccountoptionsupdaterEnabled 
   */
  def comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.analytics.testandtarget.accountoptionsupdater.enabled", cqAnalyticsTestandtargetAccountoptionsupdaterEnabled)
      .withSuccessResponse[ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled 
   */
  def comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.analytics.testandtarget.deleteauthoractivitylistener.enabled", cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled)
      .withSuccessResponse[ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled 
   */
  def comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled", cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled)
      .withSuccessResponse[ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAnalyticsTestandtargetSegmentimporterEnabled 
   */
  def comDayCqAnalyticsTestandtargetImplSegmentImporter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAnalyticsTestandtargetSegmentimporterEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.analytics.testandtarget.segmentimporter.enabled", cqAnalyticsTestandtargetSegmentimporterEnabled)
      .withSuccessResponse[ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param endpointUri 
   * @param connectionTimeout 
   * @param socketTimeout 
   */
  def comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], endpointUri: Option[String] = None, connectionTimeout: Option[Int] = None, socketTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("endpointUri", endpointUri)
      .withQueryParam("connectionTimeout", connectionTimeout)
      .withQueryParam("socketTimeout", socketTimeout)
      .withSuccessResponse[ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param testandtargetEndpointUrl 
   */
  def comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], testandtargetEndpointUrl: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("testandtarget.endpoint.url", testandtargetEndpointUrl)
      .withSuccessResponse[ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAnalyticsTestandtargetApiUrl 
   * @param cqAnalyticsTestandtargetTimeout 
   * @param cqAnalyticsTestandtargetSockettimeout 
   * @param cqAnalyticsTestandtargetRecommendationsUrlReplace 
   * @param cqAnalyticsTestandtargetRecommendationsUrlReplacewith 
   */
  def comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAnalyticsTestandtargetApiUrl: Option[String] = None, cqAnalyticsTestandtargetTimeout: Option[Int] = None, cqAnalyticsTestandtargetSockettimeout: Option[Int] = None, cqAnalyticsTestandtargetRecommendationsUrlReplace: Option[String] = None, cqAnalyticsTestandtargetRecommendationsUrlReplacewith: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.analytics.testandtarget.api.url", cqAnalyticsTestandtargetApiUrl)
      .withQueryParam("cq.analytics.testandtarget.timeout", cqAnalyticsTestandtargetTimeout)
      .withQueryParam("cq.analytics.testandtarget.sockettimeout", cqAnalyticsTestandtargetSockettimeout)
      .withQueryParam("cq.analytics.testandtarget.recommendations.url.replace", cqAnalyticsTestandtargetRecommendationsUrlReplace)
      .withQueryParam("cq.analytics.testandtarget.recommendations.url.replacewith", cqAnalyticsTestandtargetRecommendationsUrlReplacewith)
      .withSuccessResponse[ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAuthImplCugCugSupportImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cugExemptedPrincipals 
   * @param cugEnabled 
   * @param cugPrincipalsRegex 
   * @param cugPrincipalsReplacement 
   */
  def comDayCqAuthImplCugCugSupportImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cugExemptedPrincipals: Seq[String], cugEnabled: Option[Boolean] = None, cugPrincipalsRegex: Option[String] = None, cugPrincipalsReplacement: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cug.exempted.principals", ArrayValues(cugExemptedPrincipals, MULTI))
      .withQueryParam("cug.enabled", cugEnabled)
      .withQueryParam("cug.principals.regex", cugPrincipalsRegex)
      .withQueryParam("cug.principals.replacement", cugPrincipalsReplacement)
      .withSuccessResponse[ComDayCqAuthImplCugCugSupportImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqAuthImplLoginSelectorHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   * @param serviceRanking 
   * @param authLoginselectorMappings 
   * @param authLoginselectorChangepwMappings 
   * @param authLoginselectorDefaultloginpage 
   * @param authLoginselectorDefaultchangepwpage 
   * @param authLoginselectorHandle 
   * @param authLoginselectorHandleAllExtensions 
   */
  def comDayCqAuthImplLoginSelectorHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Option[String] = None, serviceRanking: Option[Int] = None, authLoginselectorMappings: Seq[String], authLoginselectorChangepwMappings: Seq[String], authLoginselectorDefaultloginpage: Option[String] = None, authLoginselectorDefaultchangepwpage: Option[String] = None, authLoginselectorHandle: Seq[String], authLoginselectorHandleAllExtensions: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", path)
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("auth.loginselector.mappings", ArrayValues(authLoginselectorMappings, MULTI))
      .withQueryParam("auth.loginselector.changepw.mappings", ArrayValues(authLoginselectorChangepwMappings, MULTI))
      .withQueryParam("auth.loginselector.defaultloginpage", authLoginselectorDefaultloginpage)
      .withQueryParam("auth.loginselector.defaultchangepwpage", authLoginselectorDefaultchangepwpage)
      .withQueryParam("auth.loginselector.handle", ArrayValues(authLoginselectorHandle, MULTI))
      .withQueryParam("auth.loginselector.handle.all.extensions", authLoginselectorHandleAllExtensions)
      .withSuccessResponse[ComDayCqAuthImplLoginSelectorHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqCommonsImplExternalizerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param externalizerDomains 
   * @param externalizerHost 
   * @param externalizerContextpath 
   * @param externalizerEncodedpath 
   */
  def comDayCqCommonsImplExternalizerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], externalizerDomains: Seq[String], externalizerHost: Option[String] = None, externalizerContextpath: Option[String] = None, externalizerEncodedpath: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("externalizer.domains", ArrayValues(externalizerDomains, MULTI))
      .withQueryParam("externalizer.host", externalizerHost)
      .withQueryParam("externalizer.contextpath", externalizerContextpath)
      .withQueryParam("externalizer.encodedpath", externalizerEncodedpath)
      .withSuccessResponse[ComDayCqCommonsImplExternalizerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqCommonsServletsRootMappingServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param rootmappingTarget 
   */
  def comDayCqCommonsServletsRootMappingServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], rootmappingTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("rootmapping.target", rootmappingTarget)
      .withSuccessResponse[ComDayCqCommonsServletsRootMappingServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param codeupgradetasks 
   * @param codeupgradetaskfilters 
   */
  def comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], codeupgradetasks: Seq[String], codeupgradetaskfilters: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("codeupgradetasks", ArrayValues(codeupgradetasks, MULTI))
      .withQueryParam("codeupgradetaskfilters", ArrayValues(codeupgradetaskfilters, MULTI))
      .withSuccessResponse[ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param upgradeTaskIgnoreList 
   */
  def comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], upgradeTaskIgnoreList: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("upgradeTaskIgnoreList", ArrayValues(upgradeTaskIgnoreList, MULTI))
      .withSuccessResponse[ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param effectiveBundleListPath 
   */
  def comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], effectiveBundleListPath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("effectiveBundleListPath", effectiveBundleListPath)
      .withSuccessResponse[ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqContentsyncImplContentSyncManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param contentsyncFallbackAuthorizable 
   * @param contentsyncFallbackUpdateuser 
   */
  def comDayCqContentsyncImplContentSyncManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], contentsyncFallbackAuthorizable: Option[String] = None, contentsyncFallbackUpdateuser: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("contentsync.fallback.authorizable", contentsyncFallbackAuthorizable)
      .withQueryParam("contentsync.fallback.updateuser", contentsyncFallbackUpdateuser)
      .withSuccessResponse[ComDayCqContentsyncImplContentSyncManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCommonsHandlerStandardImageHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param largeFileThreshold 
   * @param largeCommentThreshold 
   * @param cqDamEnableExtMetaExtraction 
   */
  def comDayCqDamCommonsHandlerStandardImageHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], largeFileThreshold: Option[Int] = None, largeCommentThreshold: Option[Int] = None, cqDamEnableExtMetaExtraction: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("large_file_threshold", largeFileThreshold)
      .withQueryParam("large_comment_threshold", largeCommentThreshold)
      .withQueryParam("cq.dam.enable.ext.meta.extraction", cqDamEnableExtMetaExtraction)
      .withSuccessResponse[ComDayCqDamCommonsHandlerStandardImageHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param xmpFilterApplyWhitelist 
   * @param xmpFilterWhitelist 
   * @param xmpFilterApplyBlacklist 
   * @param xmpFilterBlacklist 
   */
  def comDayCqDamCommonsMetadataXmpFilterBlackWhite(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], xmpFilterApplyWhitelist: Option[Boolean] = None, xmpFilterWhitelist: Seq[String], xmpFilterApplyBlacklist: Option[Boolean] = None, xmpFilterBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("xmp.filter.apply_whitelist", xmpFilterApplyWhitelist)
      .withQueryParam("xmp.filter.whitelist", ArrayValues(xmpFilterWhitelist, MULTI))
      .withQueryParam("xmp.filter.apply_blacklist", xmpFilterApplyBlacklist)
      .withQueryParam("xmp.filter.blacklist", ArrayValues(xmpFilterBlacklist, MULTI))
      .withSuccessResponse[ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCommonsUtilImplAssetCacheImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param largeFileMin 
   * @param cacheApply 
   * @param mimeTypes 
   */
  def comDayCqDamCommonsUtilImplAssetCacheImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], largeFileMin: Option[Int] = None, cacheApply: Option[Boolean] = None, mimeTypes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("large.file.min", largeFileMin)
      .withQueryParam("cache.apply", cacheApply)
      .withQueryParam("mime.types", ArrayValues(mimeTypes, MULTI))
      .withSuccessResponse[ComDayCqDamCommonsUtilImplAssetCacheImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamConfigAnnotationPdfDocumentWidth 
   * @param cqDamConfigAnnotationPdfDocumentHeight 
   * @param cqDamConfigAnnotationPdfDocumentPaddingHorizontal 
   * @param cqDamConfigAnnotationPdfDocumentPaddingVertical 
   * @param cqDamConfigAnnotationPdfFontSize 
   * @param cqDamConfigAnnotationPdfFontColor 
   * @param cqDamConfigAnnotationPdfFontFamily 
   * @param cqDamConfigAnnotationPdfFontLight 
   * @param cqDamConfigAnnotationPdfMarginTextImage 
   * @param cqDamConfigAnnotationPdfMinImageHeight 
   * @param cqDamConfigAnnotationPdfReviewStatusWidth 
   * @param cqDamConfigAnnotationPdfReviewStatusColorApproved 
   * @param cqDamConfigAnnotationPdfReviewStatusColorRejected 
   * @param cqDamConfigAnnotationPdfReviewStatusColorChangesRequested 
   * @param cqDamConfigAnnotationPdfAnnotationMarkerWidth 
   * @param cqDamConfigAnnotationPdfAssetMinheight 
   */
  def comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamConfigAnnotationPdfDocumentWidth: Option[Int] = None, cqDamConfigAnnotationPdfDocumentHeight: Option[Int] = None, cqDamConfigAnnotationPdfDocumentPaddingHorizontal: Option[Int] = None, cqDamConfigAnnotationPdfDocumentPaddingVertical: Option[Int] = None, cqDamConfigAnnotationPdfFontSize: Option[Int] = None, cqDamConfigAnnotationPdfFontColor: Option[String] = None, cqDamConfigAnnotationPdfFontFamily: Option[String] = None, cqDamConfigAnnotationPdfFontLight: Option[String] = None, cqDamConfigAnnotationPdfMarginTextImage: Option[Int] = None, cqDamConfigAnnotationPdfMinImageHeight: Option[Int] = None, cqDamConfigAnnotationPdfReviewStatusWidth: Option[Int] = None, cqDamConfigAnnotationPdfReviewStatusColorApproved: Option[String] = None, cqDamConfigAnnotationPdfReviewStatusColorRejected: Option[String] = None, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: Option[String] = None, cqDamConfigAnnotationPdfAnnotationMarkerWidth: Option[Int] = None, cqDamConfigAnnotationPdfAssetMinheight: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.config.annotation.pdf.document.width", cqDamConfigAnnotationPdfDocumentWidth)
      .withQueryParam("cq.dam.config.annotation.pdf.document.height", cqDamConfigAnnotationPdfDocumentHeight)
      .withQueryParam("cq.dam.config.annotation.pdf.document.padding.horizontal", cqDamConfigAnnotationPdfDocumentPaddingHorizontal)
      .withQueryParam("cq.dam.config.annotation.pdf.document.padding.vertical", cqDamConfigAnnotationPdfDocumentPaddingVertical)
      .withQueryParam("cq.dam.config.annotation.pdf.font.size", cqDamConfigAnnotationPdfFontSize)
      .withQueryParam("cq.dam.config.annotation.pdf.font.color", cqDamConfigAnnotationPdfFontColor)
      .withQueryParam("cq.dam.config.annotation.pdf.font.family", cqDamConfigAnnotationPdfFontFamily)
      .withQueryParam("cq.dam.config.annotation.pdf.font.light", cqDamConfigAnnotationPdfFontLight)
      .withQueryParam("cq.dam.config.annotation.pdf.marginTextImage", cqDamConfigAnnotationPdfMarginTextImage)
      .withQueryParam("cq.dam.config.annotation.pdf.minImageHeight", cqDamConfigAnnotationPdfMinImageHeight)
      .withQueryParam("cq.dam.config.annotation.pdf.reviewStatus.width", cqDamConfigAnnotationPdfReviewStatusWidth)
      .withQueryParam("cq.dam.config.annotation.pdf.reviewStatus.color.approved", cqDamConfigAnnotationPdfReviewStatusColorApproved)
      .withQueryParam("cq.dam.config.annotation.pdf.reviewStatus.color.rejected", cqDamConfigAnnotationPdfReviewStatusColorRejected)
      .withQueryParam("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested", cqDamConfigAnnotationPdfReviewStatusColorChangesRequested)
      .withQueryParam("cq.dam.config.annotation.pdf.annotationMarker.width", cqDamConfigAnnotationPdfAnnotationMarkerWidth)
      .withQueryParam("cq.dam.config.annotation.pdf.asset.minheight", cqDamConfigAnnotationPdfAssetMinheight)
      .withSuccessResponse[ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplAssetMoveListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   */
  def comDayCqDamCoreImplAssetMoveListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[ComDayCqDamCoreImplAssetMoveListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param isEnabled 
   */
  def comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], isEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("isEnabled", isEnabled)
      .withSuccessResponse[ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamAdhocAssetSharePrezipMaxcontentsize 
   */
  def comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamAdhocAssetSharePrezipMaxcontentsize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.adhoc.asset.share.prezip.maxcontentsize", cqDamAdhocAssetSharePrezipMaxcontentsize)
      .withSuccessResponse[ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamImageCacheMaxMemory 
   * @param cqDamImageCacheMaxAge 
   * @param cqDamImageCacheMaxDimension 
   */
  def comDayCqDamCoreImplCacheCQBufferedImageCache(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamImageCacheMaxMemory: Option[Int] = None, cqDamImageCacheMaxAge: Option[Int] = None, cqDamImageCacheMaxDimension: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.image.cache.max.memory", cqDamImageCacheMaxMemory)
      .withQueryParam("cq.dam.image.cache.max.age", cqDamImageCacheMaxAge)
      .withQueryParam("cq.dam.image.cache.max.dimension", cqDamImageCacheMaxDimension)
      .withSuccessResponse[ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplDamChangeEventListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param changeeventlistenerObservedPaths 
   */
  def comDayCqDamCoreImplDamChangeEventListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], changeeventlistenerObservedPaths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("changeeventlistener.observed.paths", ArrayValues(changeeventlistenerObservedPaths, MULTI))
      .withSuccessResponse[ComDayCqDamCoreImplDamChangeEventListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplDamEventPurgeServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerExpression 
   * @param maxSavedActivities 
   * @param saveInterval 
   * @param enableActivityPurge 
   * @param eventTypes 
   */
  def comDayCqDamCoreImplDamEventPurgeService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerExpression: Option[String] = None, maxSavedActivities: Option[Int] = None, saveInterval: Option[Int] = None, enableActivityPurge: Option[Boolean] = None, eventTypes: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withQueryParam("maxSavedActivities", maxSavedActivities)
      .withQueryParam("saveInterval", saveInterval)
      .withQueryParam("enableActivityPurge", enableActivityPurge)
      .withQueryParam("eventTypes", eventTypes)
      .withSuccessResponse[ComDayCqDamCoreImplDamEventPurgeServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplDamEventRecorderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventFilter 
   * @param eventQueueLength 
   * @param eventrecorderEnabled 
   * @param eventrecorderBlacklist 
   * @param eventrecorderEventtypes 
   */
  def comDayCqDamCoreImplDamEventRecorderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventFilter: Option[String] = None, eventQueueLength: Option[Int] = None, eventrecorderEnabled: Option[Boolean] = None, eventrecorderBlacklist: Seq[String], eventrecorderEventtypes: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.filter", eventFilter)
      .withQueryParam("event.queue.length", eventQueueLength)
      .withQueryParam("eventrecorder.enabled", eventrecorderEnabled)
      .withQueryParam("eventrecorder.blacklist", ArrayValues(eventrecorderBlacklist, MULTI))
      .withQueryParam("eventrecorder.eventtypes", eventrecorderEventtypes)
      .withSuccessResponse[ComDayCqDamCoreImplDamEventRecorderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplEventDamEventAuditListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventFilter 
   * @param enabled 
   */
  def comDayCqDamCoreImplEventDamEventAuditListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventFilter: Option[String] = None, enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.filter", eventFilter)
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[ComDayCqDamCoreImplEventDamEventAuditListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplExpiryNotificationJobImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamExpiryNotificationSchedulerIstimebased 
   * @param cqDamExpiryNotificationSchedulerTimebasedRule 
   * @param cqDamExpiryNotificationSchedulerPeriodRule 
   * @param sendEmail 
   * @param assetExpiredLimit 
   * @param priorNotificationSeconds 
   * @param cqDamExpiryNotificationUrlProtocol 
   */
  def comDayCqDamCoreImplExpiryNotificationJobImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamExpiryNotificationSchedulerIstimebased: Option[Boolean] = None, cqDamExpiryNotificationSchedulerTimebasedRule: Option[String] = None, cqDamExpiryNotificationSchedulerPeriodRule: Option[Int] = None, sendEmail: Option[Boolean] = None, assetExpiredLimit: Option[Int] = None, priorNotificationSeconds: Option[Int] = None, cqDamExpiryNotificationUrlProtocol: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.expiry.notification.scheduler.istimebased", cqDamExpiryNotificationSchedulerIstimebased)
      .withQueryParam("cq.dam.expiry.notification.scheduler.timebased.rule", cqDamExpiryNotificationSchedulerTimebasedRule)
      .withQueryParam("cq.dam.expiry.notification.scheduler.period.rule", cqDamExpiryNotificationSchedulerPeriodRule)
      .withQueryParam("send_email", sendEmail)
      .withQueryParam("asset_expired_limit", assetExpiredLimit)
      .withQueryParam("prior_notification_seconds", priorNotificationSeconds)
      .withQueryParam("cq.dam.expiry.notification.url.protocol", cqDamExpiryNotificationUrlProtocol)
      .withSuccessResponse[ComDayCqDamCoreImplExpiryNotificationJobImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param isEnabled 
   */
  def comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], isEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("isEnabled", isEnabled)
      .withSuccessResponse[ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplGfxCommonsGfxRendererInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param skipBufferedcache 
   */
  def comDayCqDamCoreImplGfxCommonsGfxRenderer(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], skipBufferedcache: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("skip.bufferedcache", skipBufferedcache)
      .withSuccessResponse[ComDayCqDamCoreImplGfxCommonsGfxRendererInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param mimetype 
   */
  def comDayCqDamCoreImplHandlerEPSFormatHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], mimetype: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("mimetype", mimetype)
      .withSuccessResponse[ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param mimetype 
   */
  def comDayCqDamCoreImplHandlerIndesignFormatHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], mimetype: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("mimetype", ArrayValues(mimetype, MULTI))
      .withSuccessResponse[ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplHandlerJpegHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamEnableExtMetaExtraction 
   * @param largeFileThreshold 
   * @param largeCommentThreshold 
   */
  def comDayCqDamCoreImplHandlerJpegHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamEnableExtMetaExtraction: Option[Boolean] = None, largeFileThreshold: Option[Int] = None, largeCommentThreshold: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.enable.ext.meta.extraction", cqDamEnableExtMetaExtraction)
      .withQueryParam("large_file_threshold", largeFileThreshold)
      .withQueryParam("large_comment_threshold", largeCommentThreshold)
      .withSuccessResponse[ComDayCqDamCoreImplHandlerJpegHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param xmphandlerCqFormats 
   */
  def comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], xmphandlerCqFormats: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("xmphandler.cq.formats", ArrayValues(xmphandlerCqFormats, MULTI))
      .withSuccessResponse[ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jmxObjectname 
   * @param propertyMeasureEnabled 
   * @param propertyName 
   * @param propertyMaxWaitMs 
   * @param propertyMaxRate 
   * @param fulltextMeasureEnabled 
   * @param fulltextName 
   * @param fulltextMaxWaitMs 
   * @param fulltextMaxRate 
   */
  def comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jmxObjectname: Option[String] = None, propertyMeasureEnabled: Option[Boolean] = None, propertyName: Option[String] = None, propertyMaxWaitMs: Option[Int] = None, propertyMaxRate: Option[Double] = None, fulltextMeasureEnabled: Option[Boolean] = None, fulltextName: Option[String] = None, fulltextMaxWaitMs: Option[Int] = None, fulltextMaxRate: Option[Double] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("jmx.objectname", jmxObjectname)
      .withQueryParam("property.measure.enabled", propertyMeasureEnabled)
      .withQueryParam("property.name", propertyName)
      .withQueryParam("property.max.wait.ms", propertyMaxWaitMs)
      .withQueryParam("property.max.rate", propertyMaxRate)
      .withQueryParam("fulltext.measure.enabled", fulltextMeasureEnabled)
      .withQueryParam("fulltext.name", fulltextName)
      .withQueryParam("fulltext.max.wait.ms", fulltextMaxWaitMs)
      .withQueryParam("fulltext.max.rate", fulltextMaxRate)
      .withSuccessResponse[ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jmxObjectname 
   */
  def comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jmxObjectname: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("jmx.objectname", jmxObjectname)
      .withSuccessResponse[ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jmxObjectname 
   * @param active 
   */
  def comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jmxObjectname: Option[String] = None, active: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("jmx.objectname", jmxObjectname)
      .withQueryParam("active", active)
      .withSuccessResponse[ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param operation 
   * @param emailEnabled 
   */
  def comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], operation: Option[String] = None, emailEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("operation", operation)
      .withQueryParam("emailEnabled", emailEnabled)
      .withSuccessResponse[ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param operation 
   * @param operationIcon 
   * @param topicName 
   * @param emailEnabled 
   */
  def comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], operation: Option[String] = None, operationIcon: Option[String] = None, topicName: Option[String] = None, emailEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("operation", operation)
      .withQueryParam("operationIcon", operationIcon)
      .withQueryParam("topicName", topicName)
      .withQueryParam("emailEnabled", emailEnabled)
      .withSuccessResponse[ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplLightboxLightboxServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletPaths 
   * @param slingServletMethods 
   * @param cqDamEnableAnonymous 
   */
  def comDayCqDamCoreImplLightboxLightboxServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletPaths: Option[String] = None, slingServletMethods: Seq[String], cqDamEnableAnonymous: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.paths", slingServletPaths)
      .withQueryParam("sling.servlet.methods", ArrayValues(slingServletMethods, MULTI))
      .withQueryParam("cq.dam.enable.anonymous", cqDamEnableAnonymous)
      .withSuccessResponse[ComDayCqDamCoreImplLightboxLightboxServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param granitedata 
   */
  def comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], granitedata: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("granite:data", ArrayValues(granitedata, MULTI))
      .withSuccessResponse[ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamAllowAllMime 
   * @param cqDamAllowedAssetMimes 
   */
  def comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamAllowAllMime: Option[Boolean] = None, cqDamAllowedAssetMimes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.allow.all.mime", cqDamAllowAllMime)
      .withQueryParam("cq.dam.allowed.asset.mimes", ArrayValues(cqDamAllowedAssetMimes, MULTI))
      .withSuccessResponse[ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamDetectAssetMimeFromContent 
   */
  def comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamDetectAssetMimeFromContent: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.detect.asset.mime.from.content", cqDamDetectAssetMimeFromContent)
      .withSuccessResponse[ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplMissingMetadataNotificationJobInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamMissingmetadataNotificationSchedulerIstimebased 
   * @param cqDamMissingmetadataNotificationSchedulerTimebasedRule 
   * @param cqDamMissingmetadataNotificationSchedulerPeriodRule 
   * @param cqDamMissingmetadataNotificationRecipient 
   */
  def comDayCqDamCoreImplMissingMetadataNotificationJob(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamMissingmetadataNotificationSchedulerIstimebased: Option[Boolean] = None, cqDamMissingmetadataNotificationSchedulerTimebasedRule: Option[String] = None, cqDamMissingmetadataNotificationSchedulerPeriodRule: Option[Int] = None, cqDamMissingmetadataNotificationRecipient: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.missingmetadata.notification.scheduler.istimebased", cqDamMissingmetadataNotificationSchedulerIstimebased)
      .withQueryParam("cq.dam.missingmetadata.notification.scheduler.timebased.rule", cqDamMissingmetadataNotificationSchedulerTimebasedRule)
      .withQueryParam("cq.dam.missingmetadata.notification.scheduler.period.rule", cqDamMissingmetadataNotificationSchedulerPeriodRule)
      .withQueryParam("cq.dam.missingmetadata.notification.recipient", cqDamMissingmetadataNotificationRecipient)
      .withSuccessResponse[ComDayCqDamCoreImplMissingMetadataNotificationJobInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param processLabel 
   * @param notifyOnComplete 
   */
  def comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], processLabel: Option[String] = None, notifyOnComplete: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("process.label", processLabel)
      .withQueryParam("Notify on Complete", notifyOnComplete)
      .withSuccessResponse[ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplProcessTextExtractionProcessInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param mimeTypes 
   * @param maxExtract 
   */
  def comDayCqDamCoreImplProcessTextExtractionProcess(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], mimeTypes: Seq[String], maxExtract: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("mimeTypes", ArrayValues(mimeTypes, MULTI))
      .withQueryParam("maxExtract", maxExtract)
      .withSuccessResponse[ComDayCqDamCoreImplProcessTextExtractionProcessInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplRenditionMakerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param xmpPropagate 
   * @param xmpExcludes 
   */
  def comDayCqDamCoreImplRenditionMakerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], xmpPropagate: Option[Boolean] = None, xmpExcludes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("xmp.propagate", xmpPropagate)
      .withQueryParam("xmp.excludes", ArrayValues(xmpExcludes, MULTI))
      .withSuccessResponse[ComDayCqDamCoreImplRenditionMakerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplReportsReportExportServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param queryBatchSize 
   */
  def comDayCqDamCoreImplReportsReportExportService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], queryBatchSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("queryBatchSize", queryBatchSize)
      .withSuccessResponse[ComDayCqDamCoreImplReportsReportExportServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplReportsReportPurgeServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerExpression 
   * @param maxSavedReports 
   * @param timeDuration 
   * @param enableReportPurge 
   */
  def comDayCqDamCoreImplReportsReportPurgeService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerExpression: Option[String] = None, maxSavedReports: Option[Int] = None, timeDuration: Option[Int] = None, enableReportPurge: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withQueryParam("maxSavedReports", maxSavedReports)
      .withQueryParam("timeDuration", timeDuration)
      .withQueryParam("enableReportPurge", enableReportPurge)
      .withSuccessResponse[ComDayCqDamCoreImplReportsReportPurgeServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletAssetDownloadServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   */
  def comDayCqDamCoreImplServletAssetDownloadServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[ComDayCqDamCoreImplServletAssetDownloadServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletAssetStatusServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamBatchStatusMaxassets 
   */
  def comDayCqDamCoreImplServletAssetStatusServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamBatchStatusMaxassets: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.batch.status.maxassets", cqDamBatchStatusMaxassets)
      .withSuccessResponse[ComDayCqDamCoreImplServletAssetStatusServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletAssetXMPSearchServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamBatchIndesignMaxassets 
   */
  def comDayCqDamCoreImplServletAssetXMPSearchServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamBatchIndesignMaxassets: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.batch.indesign.maxassets", cqDamBatchIndesignMaxassets)
      .withSuccessResponse[ComDayCqDamCoreImplServletAssetXMPSearchServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletBatchMetadataServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamBatchMetadataAssetDefault 
   * @param cqDamBatchMetadataCollectionDefault 
   * @param cqDamBatchMetadataMaxresources 
   */
  def comDayCqDamCoreImplServletBatchMetadataServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamBatchMetadataAssetDefault: Seq[String], cqDamBatchMetadataCollectionDefault: Seq[String], cqDamBatchMetadataMaxresources: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.batch.metadata.asset.default", ArrayValues(cqDamBatchMetadataAssetDefault, MULTI))
      .withQueryParam("cq.dam.batch.metadata.collection.default", ArrayValues(cqDamBatchMetadataCollectionDefault, MULTI))
      .withQueryParam("cq.dam.batch.metadata.maxresources", cqDamBatchMetadataMaxresources)
      .withSuccessResponse[ComDayCqDamCoreImplServletBatchMetadataServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletBinaryProviderServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletResourceTypes 
   * @param slingServletMethods 
   * @param cqDamDrmEnable 
   */
  def comDayCqDamCoreImplServletBinaryProviderServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletResourceTypes: Seq[String], slingServletMethods: Seq[String], cqDamDrmEnable: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.resourceTypes", ArrayValues(slingServletResourceTypes, MULTI))
      .withQueryParam("sling.servlet.methods", ArrayValues(slingServletMethods, MULTI))
      .withQueryParam("cq.dam.drm.enable", cqDamDrmEnable)
      .withSuccessResponse[ComDayCqDamCoreImplServletBinaryProviderServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletCollectionServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamBatchCollectionProperties 
   * @param cqDamBatchCollectionMaxcollections 
   */
  def comDayCqDamCoreImplServletCollectionServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamBatchCollectionProperties: Seq[String], cqDamBatchCollectionMaxcollections: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.batch.collection.properties", ArrayValues(cqDamBatchCollectionProperties, MULTI))
      .withQueryParam("cq.dam.batch.collection.maxcollections", cqDamBatchCollectionMaxcollections)
      .withSuccessResponse[ComDayCqDamCoreImplServletCollectionServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletCollectionsServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamBatchCollectionsProperties 
   * @param cqDamBatchCollectionsLimit 
   */
  def comDayCqDamCoreImplServletCollectionsServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamBatchCollectionsProperties: Seq[String], cqDamBatchCollectionsLimit: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.batch.collections.properties", ArrayValues(cqDamBatchCollectionsProperties, MULTI))
      .withQueryParam("cq.dam.batch.collections.limit", cqDamBatchCollectionsLimit)
      .withSuccessResponse[ComDayCqDamCoreImplServletCollectionsServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletCompanionServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param moreInfo 
   * @param mntoverlaydamguicontentassetsmoreinfoHtmlpath 
   */
  def comDayCqDamCoreImplServletCompanionServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], moreInfo: Option[String] = None, mntoverlaydamguicontentassetsmoreinfoHtmlpath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("More Info", moreInfo)
      .withQueryParam("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}", mntoverlaydamguicontentassetsmoreinfoHtmlpath)
      .withSuccessResponse[ComDayCqDamCoreImplServletCompanionServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletCreateAssetServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param detectDuplicate 
   */
  def comDayCqDamCoreImplServletCreateAssetServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], detectDuplicate: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("detect_duplicate", detectDuplicate)
      .withSuccessResponse[ComDayCqDamCoreImplServletCreateAssetServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletDamContentDispositionFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqMimeTypeBlacklist 
   * @param cqDamEmptyMime 
   */
  def comDayCqDamCoreImplServletDamContentDispositionFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqMimeTypeBlacklist: Seq[String], cqDamEmptyMime: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.mime.type.blacklist", ArrayValues(cqMimeTypeBlacklist, MULTI))
      .withQueryParam("cq.dam.empty.mime", cqDamEmptyMime)
      .withSuccessResponse[ComDayCqDamCoreImplServletDamContentDispositionFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletGuidLookupFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamCoreGuidlookupfilterEnabled 
   */
  def comDayCqDamCoreImplServletGuidLookupFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamCoreGuidlookupfilterEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.core.guidlookupfilter.enabled", cqDamCoreGuidlookupfilterEnabled)
      .withSuccessResponse[ComDayCqDamCoreImplServletGuidLookupFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletHealthCheckServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamSyncWorkflowId 
   * @param cqDamSyncFolderTypes 
   */
  def comDayCqDamCoreImplServletHealthCheckServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamSyncWorkflowId: Option[String] = None, cqDamSyncFolderTypes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.sync.workflow.id", cqDamSyncWorkflowId)
      .withQueryParam("cq.dam.sync.folder.types", ArrayValues(cqDamSyncFolderTypes, MULTI))
      .withSuccessResponse[ComDayCqDamCoreImplServletHealthCheckServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletMetadataGetServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletResourceTypes 
   * @param slingServletMethods 
   * @param slingServletExtensions 
   * @param slingServletSelectors 
   */
  def comDayCqDamCoreImplServletMetadataGetServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletResourceTypes: Option[String] = None, slingServletMethods: Option[String] = None, slingServletExtensions: Option[String] = None, slingServletSelectors: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.resourceTypes", slingServletResourceTypes)
      .withQueryParam("sling.servlet.methods", slingServletMethods)
      .withQueryParam("sling.servlet.extensions", slingServletExtensions)
      .withQueryParam("sling.servlet.selectors", slingServletSelectors)
      .withSuccessResponse[ComDayCqDamCoreImplServletMetadataGetServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamDrmEnable 
   */
  def comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamDrmEnable: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.drm.enable", cqDamDrmEnable)
      .withSuccessResponse[ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplServletResourceCollectionServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletResourceTypes 
   * @param slingServletMethods 
   * @param slingServletSelectors 
   * @param downloadConfig 
   * @param viewSelector 
   * @param sendEmail 
   */
  def comDayCqDamCoreImplServletResourceCollectionServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletResourceTypes: Seq[String], slingServletMethods: Option[String] = None, slingServletSelectors: Option[String] = None, downloadConfig: Option[String] = None, viewSelector: Option[String] = None, sendEmail: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.resourceTypes", ArrayValues(slingServletResourceTypes, MULTI))
      .withQueryParam("sling.servlet.methods", slingServletMethods)
      .withQueryParam("sling.servlet.selectors", slingServletSelectors)
      .withQueryParam("download.config", downloadConfig)
      .withQueryParam("view.selector", viewSelector)
      .withQueryParam("send_email", sendEmail)
      .withSuccessResponse[ComDayCqDamCoreImplServletResourceCollectionServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param createPreviewEnabled 
   * @param updatePreviewEnabled 
   * @param queueSize 
   * @param folderPreviewRenditionRegex 
   */
  def comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], createPreviewEnabled: Option[Boolean] = None, updatePreviewEnabled: Option[Boolean] = None, queueSize: Option[Int] = None, folderPreviewRenditionRegex: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("createPreviewEnabled", createPreviewEnabled)
      .withQueryParam("updatePreviewEnabled", updatePreviewEnabled)
      .withQueryParam("queueSize", queueSize)
      .withQueryParam("folderPreviewRenditionRegex", folderPreviewRenditionRegex)
      .withSuccessResponse[ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreImplUnzipUnzipConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamConfigUnzipMaxuncompressedsize 
   * @param cqDamConfigUnzipEncoding 
   */
  def comDayCqDamCoreImplUnzipUnzipConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamConfigUnzipMaxuncompressedsize: Option[Int] = None, cqDamConfigUnzipEncoding: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.config.unzip.maxuncompressedsize", cqDamConfigUnzipMaxuncompressedsize)
      .withQueryParam("cq.dam.config.unzip.encoding", cqDamConfigUnzipEncoding)
      .withSuccessResponse[ComDayCqDamCoreImplUnzipUnzipConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param processLabel 
   * @param cqDamEnableSha1 
   */
  def comDayCqDamCoreProcessExifToolExtractMetadataProcess(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], processLabel: Option[String] = None, cqDamEnableSha1: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("process.label", processLabel)
      .withQueryParam("cq.dam.enable.sha1", cqDamEnableSha1)
      .withSuccessResponse[ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreProcessExtractMetadataProcessInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param processLabel 
   * @param cqDamEnableSha1 
   */
  def comDayCqDamCoreProcessExtractMetadataProcess(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], processLabel: Option[String] = None, cqDamEnableSha1: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("process.label", processLabel)
      .withQueryParam("cq.dam.enable.sha1", cqDamEnableSha1)
      .withSuccessResponse[ComDayCqDamCoreProcessExtractMetadataProcessInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamCoreProcessMetadataProcessorProcessInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param processLabel 
   * @param cqDamEnableSha1 
   * @param cqDamMetadataXssprotectedProperties 
   */
  def comDayCqDamCoreProcessMetadataProcessorProcess(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], processLabel: Option[String] = None, cqDamEnableSha1: Option[Boolean] = None, cqDamMetadataXssprotectedProperties: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("process.label", processLabel)
      .withQueryParam("cq.dam.enable.sha1", cqDamEnableSha1)
      .withQueryParam("cq.dam.metadata.xssprotected.properties", ArrayValues(cqDamMetadataXssprotectedProperties, MULTI))
      .withSuccessResponse[ComDayCqDamCoreProcessMetadataProcessorProcessInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamHandlerFfmpegLocatorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param executableSearchpath 
   */
  def comDayCqDamHandlerFfmpegLocatorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], executableSearchpath: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("executable.searchpath", ArrayValues(executableSearchpath, MULTI))
      .withSuccessResponse[ComDayCqDamHandlerFfmpegLocatorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventFilter 
   * @param fontmgrSystemFontDir 
   * @param fontmgrAdobeFontDir 
   * @param fontmgrCustomerFontDir 
   */
  def comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventFilter: Option[String] = None, fontmgrSystemFontDir: Seq[String], fontmgrAdobeFontDir: Option[String] = None, fontmgrCustomerFontDir: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.filter", eventFilter)
      .withQueryParam("fontmgr.system.font.dir", ArrayValues(fontmgrSystemFontDir, MULTI))
      .withQueryParam("fontmgr.adobe.font.dir", fontmgrAdobeFontDir)
      .withQueryParam("fontmgr.customer.font.dir", fontmgrCustomerFontDir)
      .withSuccessResponse[ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamHandlerStandardPdfPdfHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param rasterAnnotation 
   */
  def comDayCqDamHandlerStandardPdfPdfHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], rasterAnnotation: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("raster.annotation", rasterAnnotation)
      .withSuccessResponse[ComDayCqDamHandlerStandardPdfPdfHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamHandlerStandardPsPostScriptHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param rasterAnnotation 
   */
  def comDayCqDamHandlerStandardPsPostScriptHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], rasterAnnotation: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("raster.annotation", rasterAnnotation)
      .withSuccessResponse[ComDayCqDamHandlerStandardPsPostScriptHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamHandlerStandardPsdPsdHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param largeFileThreshold 
   */
  def comDayCqDamHandlerStandardPsdPsdHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], largeFileThreshold: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("large_file_threshold", largeFileThreshold)
      .withSuccessResponse[ComDayCqDamHandlerStandardPsdPsdHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamIdsImplIDSJobProcessorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enableMultisession 
   * @param idsCcEnable 
   * @param enableRetry 
   * @param enableRetryScripterror 
   * @param externalizerDomainCqhost 
   * @param externalizerDomainHttp 
   */
  def comDayCqDamIdsImplIDSJobProcessor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enableMultisession: Option[Boolean] = None, idsCcEnable: Option[Boolean] = None, enableRetry: Option[Boolean] = None, enableRetryScripterror: Option[Boolean] = None, externalizerDomainCqhost: Option[String] = None, externalizerDomainHttp: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enable.multisession", enableMultisession)
      .withQueryParam("ids.cc.enable", idsCcEnable)
      .withQueryParam("enable.retry", enableRetry)
      .withQueryParam("enable.retry.scripterror", enableRetryScripterror)
      .withQueryParam("externalizer.domain.cqhost", externalizerDomainCqhost)
      .withQueryParam("externalizer.domain.http", externalizerDomainHttp)
      .withSuccessResponse[ComDayCqDamIdsImplIDSJobProcessorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamIdsImplIDSPoolManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxErrorsToBlacklist 
   * @param retryIntervalToWhitelist 
   * @param connectTimeout 
   * @param socketTimeout 
   * @param processLabel 
   * @param connectionUseMax 
   */
  def comDayCqDamIdsImplIDSPoolManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxErrorsToBlacklist: Option[Int] = None, retryIntervalToWhitelist: Option[Int] = None, connectTimeout: Option[Int] = None, socketTimeout: Option[Int] = None, processLabel: Option[String] = None, connectionUseMax: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("max.errors.to.blacklist", maxErrorsToBlacklist)
      .withQueryParam("retry.interval.to.whitelist", retryIntervalToWhitelist)
      .withQueryParam("connect.timeout", connectTimeout)
      .withQueryParam("socket.timeout", socketTimeout)
      .withQueryParam("process.label", processLabel)
      .withQueryParam("connection.use.max", connectionUseMax)
      .withSuccessResponse[ComDayCqDamIdsImplIDSPoolManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param processLabel 
   * @param extractPages 
   */
  def comDayCqDamInddImplHandlerIndesignXMPHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], processLabel: Option[String] = None, extractPages: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("process.label", processLabel)
      .withQueryParam("extract.pages", extractPages)
      .withSuccessResponse[ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamInddImplServletSnippetCreationServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param snippetcreationMaxcollections 
   */
  def comDayCqDamInddImplServletSnippetCreationServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], snippetcreationMaxcollections: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("snippetcreation.maxcollections", snippetcreationMaxcollections)
      .withSuccessResponse[ComDayCqDamInddImplServletSnippetCreationServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamInddProcessINDDMediaExtractProcessInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param processLabel 
   * @param cqDamInddPagesRegex 
   * @param idsJobDecoupled 
   * @param idsJobWorkflowModel 
   */
  def comDayCqDamInddProcessINDDMediaExtractProcess(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], processLabel: Option[String] = None, cqDamInddPagesRegex: Option[String] = None, idsJobDecoupled: Option[Boolean] = None, idsJobWorkflowModel: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("process.label", processLabel)
      .withQueryParam("cq.dam.indd.pages.regex", cqDamInddPagesRegex)
      .withQueryParam("ids.job.decoupled", idsJobDecoupled)
      .withQueryParam("ids.job.workflow.model", idsJobWorkflowModel)
      .withSuccessResponse[ComDayCqDamInddProcessINDDMediaExtractProcessInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param batchCommitSize 
   */
  def comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], batchCommitSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("batch.commit.size", batchCommitSize)
      .withSuccessResponse[ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerExpression 
   */
  def comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerExpression: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withSuccessResponse[ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param deleteZipFile 
   */
  def comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], deleteZipFile: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("delete.zip.file", deleteZipFile)
      .withSuccessResponse[ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamS7damDynamicmediaconfigeventlistenerEnabled 
   */
  def comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamS7damDynamicmediaconfigeventlistenerEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled", cqDamS7damDynamicmediaconfigeventlistenerEnabled)
      .withSuccessResponse[ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerExpression 
   * @param schedulerConcurrent 
   */
  def comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerExpression: Option[String] = None, schedulerConcurrent: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withQueryParam("scheduler.concurrent", schedulerConcurrent)
      .withSuccessResponse[ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingPostOperation 
   * @param slingServletMethods 
   */
  def comDayCqDamS7damCommonPostServletsSetCreateHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingPostOperation: Option[String] = None, slingServletMethods: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.post.operation", slingPostOperation)
      .withQueryParam("sling.servlet.methods", slingServletMethods)
      .withSuccessResponse[ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingPostOperation 
   * @param slingServletMethods 
   */
  def comDayCqDamS7damCommonPostServletsSetModifyHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingPostOperation: Option[String] = None, slingServletMethods: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.post.operation", slingPostOperation)
      .withQueryParam("sling.servlet.methods", slingServletMethods)
      .withSuccessResponse[ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param processLabel 
   */
  def comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], processLabel: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("process.label", processLabel)
      .withSuccessResponse[ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamS7damDamchangeeventlistenerEnabled 
   */
  def comDayCqDamS7damCommonS7damDamChangeEventListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamS7damDamchangeeventlistenerEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.s7dam.damchangeeventlistener.enabled", cqDamS7damDamchangeeventlistenerEnabled)
      .withSuccessResponse[ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletPaths 
   * @param slingServletMethods 
   */
  def comDayCqDamS7damCommonServletsS7damProductInfoServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletPaths: Option[String] = None, slingServletMethods: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.paths", slingServletPaths)
      .withQueryParam("sling.servlet.methods", slingServletMethods)
      .withSuccessResponse[ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName 
   * @param cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName 
   * @param cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName 
   * @param cqDamS7damVideoproxyclientserviceHttpReadtimeoutName 
   * @param cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName 
   * @param cqDamS7damVideoproxyclientserviceHttpMaxretrycountName 
   * @param cqDamS7damVideoproxyclientserviceUploadprogressIntervalName 
   */
  def comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: Option[Int] = None, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: Option[Int] = None, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: Option[Int] = None, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: Option[Int] = None, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: Option[Int] = None, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: Option[Int] = None, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name", cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName)
      .withQueryParam("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name", cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName)
      .withQueryParam("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name", cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName)
      .withQueryParam("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name", cqDamS7damVideoproxyclientserviceHttpReadtimeoutName)
      .withQueryParam("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name", cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName)
      .withQueryParam("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name", cqDamS7damVideoproxyclientserviceHttpMaxretrycountName)
      .withQueryParam("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name", cqDamS7damVideoproxyclientserviceUploadprogressIntervalName)
      .withSuccessResponse[ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamScene7ImplScene7APIClientImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamScene7ApiclientRecordsperpageNofilterName 
   * @param cqDamScene7ApiclientRecordsperpageWithfilterName 
   */
  def comDayCqDamScene7ImplScene7APIClientImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamScene7ApiclientRecordsperpageNofilterName: Option[Int] = None, cqDamScene7ApiclientRecordsperpageWithfilterName: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.scene7.apiclient.recordsperpage.nofilter.name", cqDamScene7ApiclientRecordsperpageNofilterName)
      .withQueryParam("cq.dam.scene7.apiclient.recordsperpage.withfilter.name", cqDamScene7ApiclientRecordsperpageWithfilterName)
      .withSuccessResponse[ComDayCqDamScene7ImplScene7APIClientImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamScene7AssetmimetypeserviceMapping 
   */
  def comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamScene7AssetmimetypeserviceMapping: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.scene7.assetmimetypeservice.mapping", ArrayValues(cqDamScene7AssetmimetypeserviceMapping, MULTI))
      .withSuccessResponse[ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamScene7ConfigurationeventlistenerEnabled 
   */
  def comDayCqDamScene7ImplScene7ConfigurationEventListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamScene7ConfigurationeventlistenerEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.scene7.configurationeventlistener.enabled", cqDamScene7ConfigurationeventlistenerEnabled)
      .withSuccessResponse[ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamScene7DamchangeeventlistenerEnabled 
   * @param cqDamScene7DamchangeeventlistenerObservedPaths 
   */
  def comDayCqDamScene7ImplScene7DamChangeEventListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamScene7DamchangeeventlistenerEnabled: Option[Boolean] = None, cqDamScene7DamchangeeventlistenerObservedPaths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.scene7.damchangeeventlistener.enabled", cqDamScene7DamchangeeventlistenerEnabled)
      .withQueryParam("cq.dam.scene7.damchangeeventlistener.observed.paths", ArrayValues(cqDamScene7DamchangeeventlistenerObservedPaths, MULTI))
      .withSuccessResponse[ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param scene7FlashTemplatesRti 
   * @param scene7FlashTemplatesRsi 
   * @param scene7FlashTemplatesRb 
   * @param scene7FlashTemplatesRurl 
   * @param scene7FlashTemplateUrlFormatParameter 
   */
  def comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], scene7FlashTemplatesRti: Option[String] = None, scene7FlashTemplatesRsi: Option[String] = None, scene7FlashTemplatesRb: Option[String] = None, scene7FlashTemplatesRurl: Option[String] = None, scene7FlashTemplateUrlFormatParameter: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scene7FlashTemplates.rti", scene7FlashTemplatesRti)
      .withQueryParam("scene7FlashTemplates.rsi", scene7FlashTemplatesRsi)
      .withQueryParam("scene7FlashTemplates.rb", scene7FlashTemplatesRb)
      .withQueryParam("scene7FlashTemplates.rurl", scene7FlashTemplatesRurl)
      .withQueryParam("scene7FlashTemplate.urlFormatParameter", scene7FlashTemplateUrlFormatParameter)
      .withSuccessResponse[ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamScene7ImplScene7UploadServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqDamScene7UploadserviceActivejobtimeoutLabel 
   * @param cqDamScene7UploadserviceConnectionmaxperrouteLabel 
   */
  def comDayCqDamScene7ImplScene7UploadServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqDamScene7UploadserviceActivejobtimeoutLabel: Option[Int] = None, cqDamScene7UploadserviceConnectionmaxperrouteLabel: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.dam.scene7.uploadservice.activejobtimeout.label", cqDamScene7UploadserviceActivejobtimeoutLabel)
      .withQueryParam("cq.dam.scene7.uploadservice.connectionmaxperroute.label", cqDamScene7UploadserviceConnectionmaxperrouteLabel)
      .withSuccessResponse[ComDayCqDamScene7ImplScene7UploadServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param getCacheExpirationUnit 
   * @param getCacheExpirationValue 
   */
  def comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], getCacheExpirationUnit: Option[String] = None, getCacheExpirationValue: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("getCacheExpirationUnit", getCacheExpirationUnit)
      .withQueryParam("getCacheExpirationValue", getCacheExpirationValue)
      .withSuccessResponse[ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param locale 
   * @param imsConfig 
   */
  def comDayCqDamStockIntegrationImplConfigurationStockConfiguration(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, locale: Option[String] = None, imsConfig: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("locale", locale)
      .withQueryParam("imsConfig", imsConfig)
      .withSuccessResponse[ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqDamVideoImplServletVideoTestServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   */
  def comDayCqDamVideoImplServletVideoTestServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[ComDayCqDamVideoImplServletVideoTestServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqExtwidgetServletsImageSpriteServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxWidth 
   * @param maxHeight 
   */
  def comDayCqExtwidgetServletsImageSpriteServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxWidth: Option[Int] = None, maxHeight: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("maxWidth", maxWidth)
      .withQueryParam("maxHeight", maxHeight)
      .withSuccessResponse[ComDayCqExtwidgetServletsImageSpriteServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqImageInternalFontFontHelperInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fontpath 
   * @param oversamplingFactor 
   */
  def comDayCqImageInternalFontFontHelper(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fontpath: Seq[String], oversamplingFactor: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.image.internal.font.FontHelper", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("fontpath", ArrayValues(fontpath, MULTI))
      .withQueryParam("oversamplingFactor", oversamplingFactor)
      .withSuccessResponse[ComDayCqImageInternalFontFontHelperInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqJcrclustersupportClusterStartLevelControllerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param clusterLevelEnable 
   * @param clusterMasterLevel 
   * @param clusterSlaveLevel 
   */
  def comDayCqJcrclustersupportClusterStartLevelController(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], clusterLevelEnable: Option[Boolean] = None, clusterMasterLevel: Option[Int] = None, clusterSlaveLevel: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cluster.level.enable", clusterLevelEnable)
      .withQueryParam("cluster.master.level", clusterMasterLevel)
      .withQueryParam("cluster.slave.level", clusterSlaveLevel)
      .withSuccessResponse[ComDayCqJcrclustersupportClusterStartLevelControllerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMailerDefaultMailServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param smtpHost 
   * @param smtpPort 
   * @param smtpUser 
   * @param smtpPassword 
   * @param fromAddress 
   * @param smtpSsl 
   * @param smtpStarttls 
   * @param debugEmail 
   */
  def comDayCqMailerDefaultMailService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], smtpHost: Option[String] = None, smtpPort: Option[Int] = None, smtpUser: Option[String] = None, smtpPassword: Option[String] = None, fromAddress: Option[String] = None, smtpSsl: Option[Boolean] = None, smtpStarttls: Option[Boolean] = None, debugEmail: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mailer.DefaultMailService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("smtp.host", smtpHost)
      .withQueryParam("smtp.port", smtpPort)
      .withQueryParam("smtp.user", smtpUser)
      .withQueryParam("smtp.password", smtpPassword)
      .withQueryParam("from.address", fromAddress)
      .withQueryParam("smtp.ssl", smtpSsl)
      .withQueryParam("smtp.starttls", smtpStarttls)
      .withQueryParam("debug.email", debugEmail)
      .withSuccessResponse[ComDayCqMailerDefaultMailServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMailerImplCqMailingServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxRecipientCount 
   */
  def comDayCqMailerImplCqMailingService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxRecipientCount: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("max.recipient.count", maxRecipientCount)
      .withSuccessResponse[ComDayCqMailerImplCqMailingServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param mailerEmailCharset 
   */
  def comDayCqMailerImplEmailCqEmailTemplateFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], mailerEmailCharset: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("mailer.email.charset", mailerEmailCharset)
      .withSuccessResponse[ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param mailerEmailEmbed 
   * @param mailerEmailCharset 
   * @param mailerEmailRetrieverUserID 
   * @param mailerEmailRetrieverUserPWD 
   */
  def comDayCqMailerImplEmailCqRetrieverTemplateFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], mailerEmailEmbed: Option[Boolean] = None, mailerEmailCharset: Option[String] = None, mailerEmailRetrieverUserID: Option[String] = None, mailerEmailRetrieverUserPWD: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("mailer.email.embed", mailerEmailEmbed)
      .withQueryParam("mailer.email.charset", mailerEmailCharset)
      .withQueryParam("mailer.email.retrieverUserID", mailerEmailRetrieverUserID)
      .withQueryParam("mailer.email.retrieverUserPWD", mailerEmailRetrieverUserPWD)
      .withSuccessResponse[ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMcmCampaignImplIntegrationConfigImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param aemMcmCampaignFormConstraints 
   * @param aemMcmCampaignPublicUrl 
   * @param aemMcmCampaignRelaxedSSL 
   */
  def comDayCqMcmCampaignImplIntegrationConfigImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], aemMcmCampaignFormConstraints: Seq[String], aemMcmCampaignPublicUrl: Option[String] = None, aemMcmCampaignRelaxedSSL: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("aem.mcm.campaign.formConstraints", ArrayValues(aemMcmCampaignFormConstraints, MULTI))
      .withQueryParam("aem.mcm.campaign.publicUrl", aemMcmCampaignPublicUrl)
      .withQueryParam("aem.mcm.campaign.relaxedSSL", aemMcmCampaignRelaxedSSL)
      .withSuccessResponse[ComDayCqMcmCampaignImplIntegrationConfigImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fromAddress 
   * @param senderHost 
   * @param maxBounceCount 
   */
  def comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fromAddress: Option[String] = None, senderHost: Option[String] = None, maxBounceCount: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("from.address", fromAddress)
      .withQueryParam("sender.host", senderHost)
      .withQueryParam("max.bounce.count", maxBounceCount)
      .withSuccessResponse[ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMcmImplMCMConfigurationInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param experienceIndirection 
   * @param touchpointIndirection 
   */
  def comDayCqMcmImplMCMConfiguration(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], experienceIndirection: Seq[String], touchpointIndirection: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("experience.indirection", ArrayValues(experienceIndirection, MULTI))
      .withQueryParam("touchpoint.indirection", ArrayValues(touchpointIndirection, MULTI))
      .withSuccessResponse[ComDayCqMcmImplMCMConfigurationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   * @param componentResourceType 
   */
  def comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None, componentResourceType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withQueryParam("component.resourceType", componentResourceType)
      .withSuccessResponse[ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   * @param componentResourceType 
   */
  def comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None, componentResourceType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withQueryParam("component.resourceType", componentResourceType)
      .withSuccessResponse[ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   * @param componentResourceType 
   */
  def comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None, componentResourceType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withQueryParam("component.resourceType", componentResourceType)
      .withSuccessResponse[ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqNotificationImplNotificationServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventFilter 
   */
  def comDayCqNotificationImplNotificationServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventFilter: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.filter", eventFilter)
      .withSuccessResponse[ComDayCqNotificationImplNotificationServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param forcelocation 
   */
  def comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], forcelocation: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("forcelocation", forcelocation)
      .withSuccessResponse[ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqPollingImporterImplManagedPollConfigImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param id 
   * @param enabled 
   * @param reference 
   * @param interval 
   * @param expression 
   * @param source 
   * @param target 
   * @param login 
   * @param password 
   */
  def comDayCqPollingImporterImplManagedPollConfigImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], id: Option[String] = None, enabled: Option[Boolean] = None, reference: Option[Boolean] = None, interval: Option[Int] = None, expression: Option[String] = None, source: Option[String] = None, target: Option[String] = None, login: Option[String] = None, password: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("id", id)
      .withQueryParam("enabled", enabled)
      .withQueryParam("reference", reference)
      .withQueryParam("interval", interval)
      .withQueryParam("expression", expression)
      .withQueryParam("source", source)
      .withQueryParam("target", target)
      .withQueryParam("login", login)
      .withQueryParam("password", password)
      .withSuccessResponse[ComDayCqPollingImporterImplManagedPollConfigImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqPollingImporterImplManagedPollingImporterImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param importerUser 
   */
  def comDayCqPollingImporterImplManagedPollingImporterImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], importerUser: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("importer.user", importerUser)
      .withSuccessResponse[ComDayCqPollingImporterImplManagedPollingImporterImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqPollingImporterImplPollingImporterImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param importerMinInterval 
   * @param importerUser 
   * @param excludePaths 
   * @param includePaths 
   */
  def comDayCqPollingImporterImplPollingImporterImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], importerMinInterval: Option[Int] = None, importerUser: Option[String] = None, excludePaths: Seq[String], includePaths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("importer.min.interval", importerMinInterval)
      .withQueryParam("importer.user", importerUser)
      .withQueryParam("exclude.paths", ArrayValues(excludePaths, MULTI))
      .withQueryParam("include.paths", ArrayValues(includePaths, MULTI))
      .withSuccessResponse[ComDayCqPollingImporterImplPollingImporterImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReplicationAuditReplicationEventListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   */
  def comDayCqReplicationAuditReplicationEventListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withSuccessResponse[ComDayCqReplicationAuditReplicationEventListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReplicationContentStaticContentBuilderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param host 
   * @param port 
   */
  def comDayCqReplicationContentStaticContentBuilder(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], host: Option[String] = None, port: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("host", host)
      .withQueryParam("port", port)
      .withSuccessResponse[ComDayCqReplicationContentStaticContentBuilderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReplicationImplAgentManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jobTopics 
   * @param serviceUserTarget 
   * @param agentProviderTarget 
   */
  def comDayCqReplicationImplAgentManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jobTopics: Option[String] = None, serviceUserTarget: Option[String] = None, agentProviderTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("job.topics", jobTopics)
      .withQueryParam("serviceUser.target", serviceUserTarget)
      .withQueryParam("agentProvider.target", agentProviderTarget)
      .withSuccessResponse[ComDayCqReplicationImplAgentManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param binaryThreshold 
   */
  def comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], binaryThreshold: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("binary.threshold", binaryThreshold)
      .withSuccessResponse[ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param preserveHierarchyNodes 
   * @param ignoreVersioning 
   * @param importAcl 
   * @param saveThreshold 
   * @param preserveUserPaths 
   * @param preserveUuid 
   * @param preserveUuidNodetypes 
   * @param preserveUuidSubtrees 
   * @param autoCommit 
   */
  def comDayCqReplicationImplContentDurboDurboImportConfigurationProv(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], preserveHierarchyNodes: Option[Boolean] = None, ignoreVersioning: Option[Boolean] = None, importAcl: Option[Boolean] = None, saveThreshold: Option[Int] = None, preserveUserPaths: Option[Boolean] = None, preserveUuid: Option[Boolean] = None, preserveUuidNodetypes: Seq[String], preserveUuidSubtrees: Seq[String], autoCommit: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("preserve.hierarchy.nodes", preserveHierarchyNodes)
      .withQueryParam("ignore.versioning", ignoreVersioning)
      .withQueryParam("import.acl", importAcl)
      .withQueryParam("save.threshold", saveThreshold)
      .withQueryParam("preserve.user.paths", preserveUserPaths)
      .withQueryParam("preserve.uuid", preserveUuid)
      .withQueryParam("preserve.uuid.nodetypes", ArrayValues(preserveUuidNodetypes, MULTI))
      .withQueryParam("preserve.uuid.subtrees", ArrayValues(preserveUuidSubtrees, MULTI))
      .withQueryParam("auto.commit", autoCommit)
      .withSuccessResponse[ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param replicationContentUseFileStorage 
   * @param replicationContentMaxCommitAttempts 
   */
  def comDayCqReplicationImplReplicationContentFactoryProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], replicationContentUseFileStorage: Option[Boolean] = None, replicationContentMaxCommitAttempts: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("replication.content.useFileStorage", replicationContentUseFileStorage)
      .withQueryParam("replication.content.maxCommitAttempts", replicationContentMaxCommitAttempts)
      .withSuccessResponse[ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReplicationImplReplicationReceiverImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param receiverTmpfileThreshold 
   * @param receiverPackagesUseInstall 
   */
  def comDayCqReplicationImplReplicationReceiverImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], receiverTmpfileThreshold: Option[Int] = None, receiverPackagesUseInstall: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("receiver.tmpfile.threshold", receiverTmpfileThreshold)
      .withQueryParam("receiver.packages.use.install", receiverPackagesUseInstall)
      .withSuccessResponse[ComDayCqReplicationImplReplicationReceiverImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReplicationImplReplicatorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param distributeEvents 
   */
  def comDayCqReplicationImplReplicatorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], distributeEvents: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("distribute_events", distributeEvents)
      .withSuccessResponse[ComDayCqReplicationImplReplicatorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReplicationImplReverseReplicatorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerPeriod 
   */
  def comDayCqReplicationImplReverseReplicator(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerPeriod: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.period", schedulerPeriod)
      .withSuccessResponse[ComDayCqReplicationImplReverseReplicatorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param disabledCipherSuites 
   * @param enabledCipherSuites 
   */
  def comDayCqReplicationImplTransportBinaryLessTransportHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], disabledCipherSuites: Seq[String], enabledCipherSuites: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("disabled.cipher.suites", ArrayValues(disabledCipherSuites, MULTI))
      .withQueryParam("enabled.cipher.suites", ArrayValues(enabledCipherSuites, MULTI))
      .withSuccessResponse[ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReplicationImplTransportHttpInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param disabledCipherSuites 
   * @param enabledCipherSuites 
   */
  def comDayCqReplicationImplTransportHttp(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], disabledCipherSuites: Seq[String], enabledCipherSuites: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.replication.impl.transport.Http", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("disabled.cipher.suites", ArrayValues(disabledCipherSuites, MULTI))
      .withQueryParam("enabled.cipher.suites", ArrayValues(enabledCipherSuites, MULTI))
      .withSuccessResponse[ComDayCqReplicationImplTransportHttpInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReportingImplCacheCacheImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param repcacheEnable 
   * @param repcacheTtl 
   * @param repcacheMax 
   */
  def comDayCqReportingImplCacheCacheImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], repcacheEnable: Option[Boolean] = None, repcacheTtl: Option[Int] = None, repcacheMax: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("repcache.enable", repcacheEnable)
      .withQueryParam("repcache.ttl", repcacheTtl)
      .withQueryParam("repcache.max", repcacheMax)
      .withSuccessResponse[ComDayCqReportingImplCacheCacheImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReportingImplConfigServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param repconfTimezone 
   * @param repconfLocale 
   * @param repconfSnapshots 
   * @param repconfRepdir 
   * @param repconfHourofday 
   * @param repconfMinofhour 
   * @param repconfMaxrows 
   * @param repconfFakedata 
   * @param repconfSnapshotuser 
   * @param repconfEnforcesnapshotuser 
   */
  def comDayCqReportingImplConfigServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], repconfTimezone: Option[String] = None, repconfLocale: Option[String] = None, repconfSnapshots: Option[String] = None, repconfRepdir: Option[String] = None, repconfHourofday: Option[Int] = None, repconfMinofhour: Option[Int] = None, repconfMaxrows: Option[Int] = None, repconfFakedata: Option[Boolean] = None, repconfSnapshotuser: Option[String] = None, repconfEnforcesnapshotuser: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("repconf.timezone", repconfTimezone)
      .withQueryParam("repconf.locale", repconfLocale)
      .withQueryParam("repconf.snapshots", repconfSnapshots)
      .withQueryParam("repconf.repdir", repconfRepdir)
      .withQueryParam("repconf.hourofday", repconfHourofday)
      .withQueryParam("repconf.minofhour", repconfMinofhour)
      .withQueryParam("repconf.maxrows", repconfMaxrows)
      .withQueryParam("repconf.fakedata", repconfFakedata)
      .withQueryParam("repconf.snapshotuser", repconfSnapshotuser)
      .withQueryParam("repconf.enforcesnapshotuser", repconfEnforcesnapshotuser)
      .withSuccessResponse[ComDayCqReportingImplConfigServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqReportingImplRLogAnalyzerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param requestLogOutput 
   */
  def comDayCqReportingImplRLogAnalyzer(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], requestLogOutput: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("request.log.output", requestLogOutput)
      .withSuccessResponse[ComDayCqReportingImplRLogAnalyzerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerPeriod 
   * @param schedulerConcurrent 
   * @param serviceBadLinkToleranceInterval 
   * @param serviceCheckOverridePatterns 
   * @param serviceCacheBrokenInternalLinks 
   * @param serviceSpecialLinkPrefix 
   * @param serviceSpecialLinkPatterns 
   */
  def comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerPeriod: Option[Int] = None, schedulerConcurrent: Option[Boolean] = None, serviceBadLinkToleranceInterval: Option[Int] = None, serviceCheckOverridePatterns: Seq[String], serviceCacheBrokenInternalLinks: Option[Boolean] = None, serviceSpecialLinkPrefix: Seq[String], serviceSpecialLinkPatterns: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.period", schedulerPeriod)
      .withQueryParam("scheduler.concurrent", schedulerConcurrent)
      .withQueryParam("service.bad_link_tolerance_interval", serviceBadLinkToleranceInterval)
      .withQueryParam("service.check_override_patterns", ArrayValues(serviceCheckOverridePatterns, MULTI))
      .withQueryParam("service.cache_broken_internal_links", serviceCacheBrokenInternalLinks)
      .withQueryParam("service.special_link_prefix", ArrayValues(serviceSpecialLinkPrefix, MULTI))
      .withQueryParam("service.special_link_patterns", ArrayValues(serviceSpecialLinkPatterns, MULTI))
      .withSuccessResponse[ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerPeriod 
   * @param schedulerConcurrent 
   * @param goodLinkTestInterval 
   * @param badLinkTestInterval 
   * @param linkUnusedInterval 
   * @param connectionTimeout 
   */
  def comDayCqRewriterLinkcheckerImplLinkCheckerTask(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerPeriod: Option[Int] = None, schedulerConcurrent: Option[Boolean] = None, goodLinkTestInterval: Option[Int] = None, badLinkTestInterval: Option[Int] = None, linkUnusedInterval: Option[Int] = None, connectionTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.period", schedulerPeriod)
      .withQueryParam("scheduler.concurrent", schedulerConcurrent)
      .withQueryParam("good_link_test_interval", goodLinkTestInterval)
      .withQueryParam("bad_link_test_interval", badLinkTestInterval)
      .withQueryParam("link_unused_interval", linkUnusedInterval)
      .withQueryParam("connection.timeout", connectionTimeout)
      .withSuccessResponse[ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param linkcheckertransformerDisableRewriting 
   * @param linkcheckertransformerDisableChecking 
   * @param linkcheckertransformerMapCacheSize 
   * @param linkcheckertransformerStrictExtensionCheck 
   * @param linkcheckertransformerStripHtmltExtension 
   * @param linkcheckertransformerRewriteElements 
   * @param linkcheckertransformerStripExtensionPathBlacklist 
   */
  def comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], linkcheckertransformerDisableRewriting: Option[Boolean] = None, linkcheckertransformerDisableChecking: Option[Boolean] = None, linkcheckertransformerMapCacheSize: Option[Int] = None, linkcheckertransformerStrictExtensionCheck: Option[Boolean] = None, linkcheckertransformerStripHtmltExtension: Option[Boolean] = None, linkcheckertransformerRewriteElements: Seq[String], linkcheckertransformerStripExtensionPathBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("linkcheckertransformer.disableRewriting", linkcheckertransformerDisableRewriting)
      .withQueryParam("linkcheckertransformer.disableChecking", linkcheckertransformerDisableChecking)
      .withQueryParam("linkcheckertransformer.mapCacheSize", linkcheckertransformerMapCacheSize)
      .withQueryParam("linkcheckertransformer.strictExtensionCheck", linkcheckertransformerStrictExtensionCheck)
      .withQueryParam("linkcheckertransformer.stripHtmltExtension", linkcheckertransformerStripHtmltExtension)
      .withQueryParam("linkcheckertransformer.rewriteElements", ArrayValues(linkcheckertransformerRewriteElements, MULTI))
      .withQueryParam("linkcheckertransformer.stripExtensionPathBlacklist", ArrayValues(linkcheckertransformerStripExtensionPathBlacklist, MULTI))
      .withSuccessResponse[ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceMaxLinksPerHost 
   * @param serviceSaveExternalLinkReferences 
   */
  def comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceMaxLinksPerHost: Option[Int] = None, serviceSaveExternalLinkReferences: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.max_links_per_host", serviceMaxLinksPerHost)
      .withQueryParam("service.save_external_link_references", serviceSaveExternalLinkReferences)
      .withSuccessResponse[ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqRewriterProcessorImplHtmlParserFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param htmlparserProcessTags 
   * @param htmlparserPreserveCamelCase 
   */
  def comDayCqRewriterProcessorImplHtmlParserFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], htmlparserProcessTags: Seq[String], htmlparserPreserveCamelCase: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("htmlparser.processTags", ArrayValues(htmlparserProcessTags, MULTI))
      .withQueryParam("htmlparser.preserveCamelCase", htmlparserPreserveCamelCase)
      .withSuccessResponse[ComDayCqRewriterProcessorImplHtmlParserFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqSearchImplBuilderQueryBuilderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param excerptProperties 
   * @param cacheMaxEntries 
   * @param cacheEntryLifetime 
   * @param xpathUnion 
   */
  def comDayCqSearchImplBuilderQueryBuilderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], excerptProperties: Seq[String], cacheMaxEntries: Option[Int] = None, cacheEntryLifetime: Option[Int] = None, xpathUnion: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("excerpt.properties", ArrayValues(excerptProperties, MULTI))
      .withQueryParam("cache.max.entries", cacheMaxEntries)
      .withQueryParam("cache.entry.lifetime", cacheEntryLifetime)
      .withQueryParam("xpath.union", xpathUnion)
      .withSuccessResponse[ComDayCqSearchImplBuilderQueryBuilderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param pathBuilderTarget 
   * @param suggestBasepath 
   */
  def comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], pathBuilderTarget: Option[String] = None, suggestBasepath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("pathBuilder.target", pathBuilderTarget)
      .withQueryParam("suggest.basepath", suggestBasepath)
      .withSuccessResponse[ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqSearchpromoteConfighandlerEnabled 
   */
  def comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqSearchpromoteConfighandlerEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.searchpromote.confighandler.enabled", cqSearchpromoteConfighandlerEnabled)
      .withSuccessResponse[ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqSearchpromoteConfigurationServerUri 
   * @param cqSearchpromoteConfigurationEnvironment 
   * @param connectionTimeout 
   * @param socketTimeout 
   */
  def comDayCqSearchpromoteImplSearchPromoteServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqSearchpromoteConfigurationServerUri: Option[String] = None, cqSearchpromoteConfigurationEnvironment: Option[String] = None, connectionTimeout: Option[Int] = None, socketTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.searchpromote.configuration.server.uri", cqSearchpromoteConfigurationServerUri)
      .withQueryParam("cq.searchpromote.configuration.environment", cqSearchpromoteConfigurationEnvironment)
      .withQueryParam("connection.timeout", connectionTimeout)
      .withQueryParam("socket.timeout", socketTimeout)
      .withSuccessResponse[ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqSecurityACLSetupInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqAclsetupRules 
   */
  def comDayCqSecurityACLSetup(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqAclsetupRules: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.security.ACLSetup", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.aclsetup.rules", ArrayValues(cqAclsetupRules, MULTI))
      .withSuccessResponse[ComDayCqSecurityACLSetupInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqStatisticsImplStatisticsServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerPeriod 
   * @param schedulerConcurrent 
   * @param path 
   * @param workspace 
   * @param keywordsPath 
   * @param asyncEntries 
   */
  def comDayCqStatisticsImplStatisticsServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerPeriod: Option[Int] = None, schedulerConcurrent: Option[Boolean] = None, path: Option[String] = None, workspace: Option[String] = None, keywordsPath: Option[String] = None, asyncEntries: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.period", schedulerPeriod)
      .withQueryParam("scheduler.concurrent", schedulerConcurrent)
      .withQueryParam("path", path)
      .withQueryParam("workspace", workspace)
      .withQueryParam("keywordsPath", keywordsPath)
      .withQueryParam("asyncEntries", asyncEntries)
      .withSuccessResponse[ComDayCqStatisticsImplStatisticsServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqTaggingImplJcrTagManagerFactoryImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param validationEnabled 
   */
  def comDayCqTaggingImplJcrTagManagerFactoryImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], validationEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("validation.enabled", validationEnabled)
      .withSuccessResponse[ComDayCqTaggingImplJcrTagManagerFactoryImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param ignorePath 
   */
  def comDayCqTaggingImplSearchTagPredicateEvaluator(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], ignorePath: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("ignore_path", ignorePath)
      .withSuccessResponse[ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqTaggingImplTagGarbageCollectorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerExpression 
   */
  def comDayCqTaggingImplTagGarbageCollector(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerExpression: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withSuccessResponse[ComDayCqTaggingImplTagGarbageCollectorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqPagesupdatehandlerImageresourcetypes 
   */
  def comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqPagesupdatehandlerImageresourcetypes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.pagesupdatehandler.imageresourcetypes", ArrayValues(cqPagesupdatehandlerImageresourcetypes, MULTI))
      .withSuccessResponse[ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqContentsyncPathrewritertransformerMappingLinks 
   * @param cqContentsyncPathrewritertransformerMappingClientlibs 
   * @param cqContentsyncPathrewritertransformerMappingImages 
   * @param cqContentsyncPathrewritertransformerAttributePattern 
   * @param cqContentsyncPathrewritertransformerClientlibraryPattern 
   * @param cqContentsyncPathrewritertransformerClientlibraryReplace 
   */
  def comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqContentsyncPathrewritertransformerMappingLinks: Seq[String], cqContentsyncPathrewritertransformerMappingClientlibs: Seq[String], cqContentsyncPathrewritertransformerMappingImages: Seq[String], cqContentsyncPathrewritertransformerAttributePattern: Option[String] = None, cqContentsyncPathrewritertransformerClientlibraryPattern: Option[String] = None, cqContentsyncPathrewritertransformerClientlibraryReplace: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.contentsync.pathrewritertransformer.mapping.links", ArrayValues(cqContentsyncPathrewritertransformerMappingLinks, MULTI))
      .withQueryParam("cq.contentsync.pathrewritertransformer.mapping.clientlibs", ArrayValues(cqContentsyncPathrewritertransformerMappingClientlibs, MULTI))
      .withQueryParam("cq.contentsync.pathrewritertransformer.mapping.images", ArrayValues(cqContentsyncPathrewritertransformerMappingImages, MULTI))
      .withQueryParam("cq.contentsync.pathrewritertransformer.attribute.pattern", cqContentsyncPathrewritertransformerAttributePattern)
      .withQueryParam("cq.contentsync.pathrewritertransformer.clientlibrary.pattern", cqContentsyncPathrewritertransformerClientlibraryPattern)
      .withQueryParam("cq.contentsync.pathrewritertransformer.clientlibrary.replace", cqContentsyncPathrewritertransformerClientlibraryReplace)
      .withSuccessResponse[ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param authoringUIModeServiceDefault 
   */
  def comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], authoringUIModeServiceDefault: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("authoringUIModeService.default", authoringUIModeServiceDefault)
      .withSuccessResponse[ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplCommandsWCMCommandServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param wcmcommandservletDeleteWhitelist 
   */
  def comDayCqWcmCoreImplCommandsWCMCommandServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], wcmcommandservletDeleteWhitelist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("wcmcommandservlet.delete_whitelist", ArrayValues(wcmcommandservletDeleteWhitelist, MULTI))
      .withSuccessResponse[ComDayCqWcmCoreImplCommandsWCMCommandServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param dimDefaultMode 
   * @param dimAppcacheEnabled 
   */
  def comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], dimDefaultMode: Option[String] = None, dimAppcacheEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("dim.default.mode", dimDefaultMode)
      .withQueryParam("dim.appcache.enabled", dimAppcacheEnabled)
      .withSuccessResponse[ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplEventPageEventAuditListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param configured 
   */
  def comDayCqWcmCoreImplEventPageEventAuditListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], configured: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("configured", configured)
      .withSuccessResponse[ComDayCqWcmCoreImplEventPageEventAuditListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplEventPagePostProcessorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param paths 
   */
  def comDayCqWcmCoreImplEventPagePostProcessor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], paths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("paths", ArrayValues(paths, MULTI))
      .withSuccessResponse[ComDayCqWcmCoreImplEventPagePostProcessorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param paths 
   * @param excludedPaths 
   */
  def comDayCqWcmCoreImplEventRepositoryChangeEventListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], paths: Seq[String], excludedPaths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("paths", ArrayValues(paths, MULTI))
      .withQueryParam("excludedPaths", ArrayValues(excludedPaths, MULTI))
      .withSuccessResponse[ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplEventTemplatePostProcessorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param paths 
   */
  def comDayCqWcmCoreImplEventTemplatePostProcessor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], paths: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("paths", paths)
      .withSuccessResponse[ComDayCqWcmCoreImplEventTemplatePostProcessorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplLanguageManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param langmgrListPath 
   * @param langmgrCountryDefault 
   */
  def comDayCqWcmCoreImplLanguageManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], langmgrListPath: Option[String] = None, langmgrCountryDefault: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("langmgr.list.path", langmgrListPath)
      .withQueryParam("langmgr.country.default", ArrayValues(langmgrCountryDefault, MULTI))
      .withSuccessResponse[ComDayCqWcmCoreImplLanguageManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param linkExpiredPrefix 
   * @param linkExpiredRemove 
   * @param linkExpiredSuffix 
   * @param linkInvalidPrefix 
   * @param linkInvalidRemove 
   * @param linkInvalidSuffix 
   * @param linkPredatedPrefix 
   * @param linkPredatedRemove 
   * @param linkPredatedSuffix 
   * @param linkWcmmodes 
   */
  def comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], linkExpiredPrefix: Option[String] = None, linkExpiredRemove: Option[Boolean] = None, linkExpiredSuffix: Option[String] = None, linkInvalidPrefix: Option[String] = None, linkInvalidRemove: Option[Boolean] = None, linkInvalidSuffix: Option[String] = None, linkPredatedPrefix: Option[String] = None, linkPredatedRemove: Option[Boolean] = None, linkPredatedSuffix: Option[String] = None, linkWcmmodes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("link.expired.prefix", linkExpiredPrefix)
      .withQueryParam("link.expired.remove", linkExpiredRemove)
      .withQueryParam("link.expired.suffix", linkExpiredSuffix)
      .withQueryParam("link.invalid.prefix", linkInvalidPrefix)
      .withQueryParam("link.invalid.remove", linkInvalidRemove)
      .withQueryParam("link.invalid.suffix", linkInvalidSuffix)
      .withQueryParam("link.predated.prefix", linkPredatedPrefix)
      .withQueryParam("link.predated.remove", linkPredatedRemove)
      .withQueryParam("link.predated.suffix", linkPredatedSuffix)
      .withQueryParam("link.wcmmodes", ArrayValues(linkWcmmodes, MULTI))
      .withSuccessResponse[ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param pageInfoProviderPropertyRegexDefault 
   * @param pageInfoProviderPropertyName 
   */
  def comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], pageInfoProviderPropertyRegexDefault: Option[String] = None, pageInfoProviderPropertyName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("page.info.provider.property.regex.default", pageInfoProviderPropertyRegexDefault)
      .withQueryParam("page.info.provider.property.name", pageInfoProviderPropertyName)
      .withSuccessResponse[ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param illegalCharMapping 
   * @param pageSubTreeActivationCheck 
   */
  def comDayCqWcmCoreImplPagePageManagerFactoryImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], illegalCharMapping: Option[String] = None, pageSubTreeActivationCheck: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("illegalCharMapping", illegalCharMapping)
      .withQueryParam("pageSubTreeActivationCheck", pageSubTreeActivationCheck)
      .withSuccessResponse[ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param contentReferenceConfigResourceTypes 
   */
  def comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], contentReferenceConfigResourceTypes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("contentReferenceConfig.resourceTypes", ArrayValues(contentReferenceConfigResourceTypes, MULTI))
      .withSuccessResponse[ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param damShowexpired 
   * @param damShowhidden 
   * @param tagTitleSearch 
   * @param guessTotal 
   * @param damExpiryProperty 
   */
  def comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], damShowexpired: Option[Boolean] = None, damShowhidden: Option[Boolean] = None, tagTitleSearch: Option[Boolean] = None, guessTotal: Option[String] = None, damExpiryProperty: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("dam.showexpired", damShowexpired)
      .withQueryParam("dam.showhidden", damShowhidden)
      .withQueryParam("tagTitleSearch", tagTitleSearch)
      .withQueryParam("guessTotal", guessTotal)
      .withQueryParam("dam.expiryProperty", damExpiryProperty)
      .withSuccessResponse[ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param itemResourceTypes 
   */
  def comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], itemResourceTypes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("item.resource.types", ArrayValues(itemResourceTypes, MULTI))
      .withSuccessResponse[ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param guessTotal 
   * @param tagTitleSearch 
   */
  def comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], guessTotal: Option[String] = None, tagTitleSearch: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("guessTotal", guessTotal)
      .withQueryParam("tagTitleSearch", tagTitleSearch)
      .withSuccessResponse[ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplServletsFindReplaceServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param scope 
   */
  def comDayCqWcmCoreImplServletsFindReplaceServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], scope: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scope", ArrayValues(scope, MULTI))
      .withSuccessResponse[ComDayCqWcmCoreImplServletsFindReplaceServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplServletsReferenceSearchServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param referencesearchservletMaxReferencesPerPage 
   * @param referencesearchservletMaxPages 
   */
  def comDayCqWcmCoreImplServletsReferenceSearchServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], referencesearchservletMaxReferencesPerPage: Option[Int] = None, referencesearchservletMaxPages: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("referencesearchservlet.maxReferencesPerPage", referencesearchservletMaxReferencesPerPage)
      .withQueryParam("referencesearchservlet.maxPages", referencesearchservletMaxPages)
      .withSuccessResponse[ComDayCqWcmCoreImplServletsReferenceSearchServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplServletsThumbnailServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param workspace 
   * @param dimensions 
   */
  def comDayCqWcmCoreImplServletsThumbnailServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], workspace: Option[String] = None, dimensions: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("workspace", workspace)
      .withQueryParam("dimensions", ArrayValues(dimensions, MULTI))
      .withSuccessResponse[ComDayCqWcmCoreImplServletsThumbnailServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param nonValidChars 
   */
  def comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], nonValidChars: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("nonValidChars", nonValidChars)
      .withSuccessResponse[ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param defaultExternalizerDomain 
   */
  def comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], defaultExternalizerDomain: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("default.externalizer.domain", defaultExternalizerDomain)
      .withSuccessResponse[ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplVersionManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param versionmanagerCreateVersionOnActivation 
   * @param versionmanagerPurgingEnabled 
   * @param versionmanagerPurgePaths 
   * @param versionmanagerIvPaths 
   * @param versionmanagerMaxAgeDays 
   * @param versionmanagerMaxNumberVersions 
   * @param versionmanagerMinNumberVersions 
   */
  def comDayCqWcmCoreImplVersionManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], versionmanagerCreateVersionOnActivation: Option[Boolean] = None, versionmanagerPurgingEnabled: Option[Boolean] = None, versionmanagerPurgePaths: Seq[String], versionmanagerIvPaths: Seq[String], versionmanagerMaxAgeDays: Option[Int] = None, versionmanagerMaxNumberVersions: Option[Int] = None, versionmanagerMinNumberVersions: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("versionmanager.createVersionOnActivation", versionmanagerCreateVersionOnActivation)
      .withQueryParam("versionmanager.purgingEnabled", versionmanagerPurgingEnabled)
      .withQueryParam("versionmanager.purgePaths", ArrayValues(versionmanagerPurgePaths, MULTI))
      .withQueryParam("versionmanager.ivPaths", ArrayValues(versionmanagerIvPaths, MULTI))
      .withQueryParam("versionmanager.maxAgeDays", versionmanagerMaxAgeDays)
      .withQueryParam("versionmanager.maxNumberVersions", versionmanagerMaxNumberVersions)
      .withQueryParam("versionmanager.minNumberVersions", versionmanagerMinNumberVersions)
      .withSuccessResponse[ComDayCqWcmCoreImplVersionManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplVersionPurgeTaskInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param versionpurgePaths 
   * @param versionpurgeRecursive 
   * @param versionpurgeMaxVersions 
   * @param versionpurgeMinVersions 
   * @param versionpurgeMaxAgeDays 
   */
  def comDayCqWcmCoreImplVersionPurgeTask(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], versionpurgePaths: Seq[String], versionpurgeRecursive: Option[Boolean] = None, versionpurgeMaxVersions: Option[Int] = None, versionpurgeMinVersions: Option[Int] = None, versionpurgeMaxAgeDays: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("versionpurge.paths", ArrayValues(versionpurgePaths, MULTI))
      .withQueryParam("versionpurge.recursive", versionpurgeRecursive)
      .withQueryParam("versionpurge.maxVersions", versionpurgeMaxVersions)
      .withQueryParam("versionpurge.minVersions", versionpurgeMinVersions)
      .withQueryParam("versionpurge.maxAgeDays", versionpurgeMaxAgeDays)
      .withSuccessResponse[ComDayCqWcmCoreImplVersionPurgeTaskInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplWCMDebugFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param wcmdbgfilterEnabled 
   * @param wcmdbgfilterJspDebug 
   */
  def comDayCqWcmCoreImplWCMDebugFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], wcmdbgfilterEnabled: Option[Boolean] = None, wcmdbgfilterJspDebug: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("wcmdbgfilter.enabled", wcmdbgfilterEnabled)
      .withQueryParam("wcmdbgfilter.jspDebug", wcmdbgfilterJspDebug)
      .withSuccessResponse[ComDayCqWcmCoreImplWCMDebugFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param wcmdevmodefilterEnabled 
   */
  def comDayCqWcmCoreImplWCMDeveloperModeFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], wcmdevmodefilterEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("wcmdevmodefilter.enabled", wcmdevmodefilterEnabled)
      .withSuccessResponse[ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreImplWarpTimeWarpFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param filterOrder 
   * @param filterScope 
   */
  def comDayCqWcmCoreImplWarpTimeWarpFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], filterOrder: Option[String] = None, filterScope: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("filter.order", filterOrder)
      .withQueryParam("filter.scope", filterScope)
      .withSuccessResponse[ComDayCqWcmCoreImplWarpTimeWarpFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreMvtMVTStatisticsImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param mvtstatisticsTrackingurl 
   */
  def comDayCqWcmCoreMvtMVTStatisticsImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], mvtstatisticsTrackingurl: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("mvtstatistics.trackingurl", mvtstatisticsTrackingurl)
      .withSuccessResponse[ComDayCqWcmCoreMvtMVTStatisticsImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreStatsPageViewStatisticsImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param pageviewstatisticsTrackingurl 
   * @param pageviewstatisticsTrackingscriptEnabled 
   */
  def comDayCqWcmCoreStatsPageViewStatisticsImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], pageviewstatisticsTrackingurl: Option[String] = None, pageviewstatisticsTrackingscriptEnabled: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("pageviewstatistics.trackingurl", pageviewstatisticsTrackingurl)
      .withQueryParam("pageviewstatistics.trackingscript.enabled", pageviewstatisticsTrackingscriptEnabled)
      .withSuccessResponse[ComDayCqWcmCoreStatsPageViewStatisticsImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmCoreWCMRequestFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param wcmfilterMode 
   */
  def comDayCqWcmCoreWCMRequestFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], wcmfilterMode: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("wcmfilter.mode", wcmfilterMode)
      .withSuccessResponse[ComDayCqWcmCoreWCMRequestFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterDesignPackageImporterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param extractFilter 
   */
  def comDayCqWcmDesignimporterDesignPackageImporter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], extractFilter: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("extract.filter", ArrayValues(extractFilter, MULTI))
      .withSuccessResponse[ComDayCqWcmDesignimporterDesignPackageImporterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param filepattern 
   * @param buildPageNodes 
   * @param buildClientLibs 
   * @param buildCanvasComponent 
   */
  def comDayCqWcmDesignimporterImplCanvasBuilderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], filepattern: Option[String] = None, buildPageNodes: Option[Boolean] = None, buildClientLibs: Option[Boolean] = None, buildCanvasComponent: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("filepattern", filepattern)
      .withQueryParam("build.page.nodes", buildPageNodes)
      .withQueryParam("build.client.libs", buildClientLibs)
      .withQueryParam("build.canvas.component", buildCanvasComponent)
      .withSuccessResponse[ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param minThreadPoolSize 
   * @param maxThreadPoolSize 
   */
  def comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], minThreadPoolSize: Option[Int] = None, maxThreadPoolSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("minThreadPoolSize", minThreadPoolSize)
      .withQueryParam("maxThreadPoolSize", maxThreadPoolSize)
      .withSuccessResponse[ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param searchPattern 
   * @param replacePattern 
   */
  def comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], searchPattern: Option[String] = None, replacePattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("search.pattern", searchPattern)
      .withQueryParam("replace.pattern", replacePattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param filepattern 
   * @param deviceGroups 
   * @param buildPageNodes 
   * @param buildClientLibs 
   * @param buildCanvasComponent 
   */
  def comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], filepattern: Option[String] = None, deviceGroups: Seq[String], buildPageNodes: Option[Boolean] = None, buildClientLibs: Option[Boolean] = None, buildCanvasComponent: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("filepattern", filepattern)
      .withQueryParam("device.groups", ArrayValues(deviceGroups, MULTI))
      .withQueryParam("build.page.nodes", buildPageNodes)
      .withQueryParam("build.client.libs", buildClientLibs)
      .withQueryParam("build.canvas.component", buildCanvasComponent)
      .withSuccessResponse[ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   * @param componentResourceType 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None, componentResourceType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withQueryParam("component.resourceType", componentResourceType)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   * @param componentResourceType 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None, componentResourceType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withQueryParam("component.resourceType", componentResourceType)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   * @param componentResourceType 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None, componentResourceType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withQueryParam("component.resourceType", componentResourceType)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   * @param componentResourceType 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None, componentResourceType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withQueryParam("component.resourceType", componentResourceType)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param tagpattern 
   */
  def comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, tagpattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("tagpattern", tagpattern)
      .withSuccessResponse[ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmFoundationFormsImplFormChooserServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceName 
   * @param slingServletResourceTypes 
   * @param slingServletSelectors 
   * @param slingServletMethods 
   * @param formsFormchooserservletAdvansesearchRequire 
   */
  def comDayCqWcmFoundationFormsImplFormChooserServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceName: Option[String] = None, slingServletResourceTypes: Option[String] = None, slingServletSelectors: Option[String] = None, slingServletMethods: Seq[String], formsFormchooserservletAdvansesearchRequire: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.name", serviceName)
      .withQueryParam("sling.servlet.resourceTypes", slingServletResourceTypes)
      .withQueryParam("sling.servlet.selectors", slingServletSelectors)
      .withQueryParam("sling.servlet.methods", ArrayValues(slingServletMethods, MULTI))
      .withQueryParam("forms.formchooserservlet.advansesearch.require", formsFormchooserservletAdvansesearchRequire)
      .withSuccessResponse[ComDayCqWcmFoundationFormsImplFormChooserServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param formsFormparagraphpostprocessorEnabled 
   * @param formsFormparagraphpostprocessorFormresourcetypes 
   */
  def comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], formsFormparagraphpostprocessorEnabled: Option[Boolean] = None, formsFormparagraphpostprocessorFormresourcetypes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("forms.formparagraphpostprocessor.enabled", formsFormparagraphpostprocessorEnabled)
      .withQueryParam("forms.formparagraphpostprocessor.formresourcetypes", ArrayValues(formsFormparagraphpostprocessorFormresourcetypes, MULTI))
      .withSuccessResponse[ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param nameWhitelist 
   * @param allowExpressions 
   */
  def comDayCqWcmFoundationFormsImplFormsHandlingServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], nameWhitelist: Option[String] = None, allowExpressions: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name.whitelist", nameWhitelist)
      .withQueryParam("allow.expressions", allowExpressions)
      .withSuccessResponse[ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmFoundationFormsImplMailServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletResourceTypes 
   * @param slingServletSelectors 
   * @param resourceWhitelist 
   * @param resourceBlacklist 
   */
  def comDayCqWcmFoundationFormsImplMailServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletResourceTypes: Option[String] = None, slingServletSelectors: Option[String] = None, resourceWhitelist: Seq[String], resourceBlacklist: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.resourceTypes", slingServletResourceTypes)
      .withQueryParam("sling.servlet.selectors", slingServletSelectors)
      .withQueryParam("resource.whitelist", ArrayValues(resourceWhitelist, MULTI))
      .withQueryParam("resource.blacklist", resourceBlacklist)
      .withSuccessResponse[ComDayCqWcmFoundationFormsImplMailServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param adaptSupportedWidths 
   */
  def comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], adaptSupportedWidths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("adapt.supported.widths", ArrayValues(adaptSupportedWidths, MULTI))
      .withSuccessResponse[ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmFoundationImplHTTPAuthHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   * @param authHttpNologin 
   * @param authHttpRealm 
   * @param authDefaultLoginpage 
   * @param authCredForm 
   * @param authCredUtf8 
   */
  def comDayCqWcmFoundationImplHTTPAuthHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Option[String] = None, authHttpNologin: Option[Boolean] = None, authHttpRealm: Option[String] = None, authDefaultLoginpage: Option[String] = None, authCredForm: Seq[String], authCredUtf8: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", path)
      .withQueryParam("auth.http.nologin", authHttpNologin)
      .withQueryParam("auth.http.realm", authHttpRealm)
      .withQueryParam("auth.default.loginpage", authDefaultLoginpage)
      .withQueryParam("auth.cred.form", ArrayValues(authCredForm, MULTI))
      .withQueryParam("auth.cred.utf8", ArrayValues(authCredUtf8, MULTI))
      .withSuccessResponse[ComDayCqWcmFoundationImplHTTPAuthHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmFoundationImplPageImpressionsTrackerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingAuthRequirements 
   */
  def comDayCqWcmFoundationImplPageImpressionsTracker(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingAuthRequirements: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.auth.requirements", slingAuthRequirements)
      .withSuccessResponse[ComDayCqWcmFoundationImplPageImpressionsTrackerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmFoundationImplPageRedirectServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param excludedResourceTypes 
   */
  def comDayCqWcmFoundationImplPageRedirectServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], excludedResourceTypes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("excluded.resource.types", ArrayValues(excludedResourceTypes, MULTI))
      .withSuccessResponse[ComDayCqWcmFoundationImplPageRedirectServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param defaultAttachmentTypeBlacklist 
   * @param baselineAttachmentTypeBlacklist 
   */
  def comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], defaultAttachmentTypeBlacklist: Seq[String], baselineAttachmentTypeBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("default.attachment.type.blacklist", ArrayValues(defaultAttachmentTypeBlacklist, MULTI))
      .withQueryParam("baseline.attachment.type.blacklist", ArrayValues(baselineAttachmentTypeBlacklist, MULTI))
      .withSuccessResponse[ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param parameterWhitelist 
   * @param parameterWhitelistPrefixes 
   * @param binaryParameterWhitelist 
   * @param modifierWhitelist 
   * @param operationWhitelist 
   * @param operationWhitelistPrefixes 
   * @param typehintWhitelist 
   * @param resourcetypeWhitelist 
   */
  def comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], parameterWhitelist: Seq[String], parameterWhitelistPrefixes: Seq[String], binaryParameterWhitelist: Seq[String], modifierWhitelist: Seq[String], operationWhitelist: Seq[String], operationWhitelistPrefixes: Seq[String], typehintWhitelist: Seq[String], resourcetypeWhitelist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("parameter.whitelist", ArrayValues(parameterWhitelist, MULTI))
      .withQueryParam("parameter.whitelist.prefixes", ArrayValues(parameterWhitelistPrefixes, MULTI))
      .withQueryParam("binary.parameter.whitelist", ArrayValues(binaryParameterWhitelist, MULTI))
      .withQueryParam("modifier.whitelist", ArrayValues(modifierWhitelist, MULTI))
      .withQueryParam("operation.whitelist", ArrayValues(operationWhitelist, MULTI))
      .withQueryParam("operation.whitelist.prefixes", ArrayValues(operationWhitelistPrefixes, MULTI))
      .withQueryParam("typehint.whitelist", ArrayValues(typehintWhitelist, MULTI))
      .withQueryParam("resourcetype.whitelist", ArrayValues(resourcetypeWhitelist, MULTI))
      .withSuccessResponse[ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param deviceInfoTransformerEnabled 
   * @param deviceInfoTransformerCssStyle 
   */
  def comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], deviceInfoTransformerEnabled: Option[Boolean] = None, deviceInfoTransformerCssStyle: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("device.info.transformer.enabled", deviceInfoTransformerEnabled)
      .withQueryParam("device.info.transformer.css.style", deviceInfoTransformerCssStyle)
      .withSuccessResponse[ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param redirectEnabled 
   * @param redirectStatsEnabled 
   * @param redirectExtensions 
   * @param redirectPaths 
   */
  def comDayCqWcmMobileCoreImplRedirectRedirectFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], redirectEnabled: Option[Boolean] = None, redirectStatsEnabled: Option[Boolean] = None, redirectExtensions: Seq[String], redirectPaths: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("redirect.enabled", redirectEnabled)
      .withQueryParam("redirect.stats.enabled", redirectStatsEnabled)
      .withQueryParam("redirect.extensions", ArrayValues(redirectExtensions, MULTI))
      .withQueryParam("redirect.paths", ArrayValues(redirectPaths, MULTI))
      .withSuccessResponse[ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqWcmMsmActionExcludednodetypes 
   * @param cqWcmMsmActionExcludedparagraphitems 
   * @param cqWcmMsmActionExcludedprops 
   * @param contentcopyactionOrderStyle 
   */
  def comDayCqWcmMsmImplActionsContentCopyActionFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqWcmMsmActionExcludednodetypes: Seq[String], cqWcmMsmActionExcludedparagraphitems: Seq[String], cqWcmMsmActionExcludedprops: Seq[String], contentcopyactionOrderStyle: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.wcm.msm.action.excludednodetypes", ArrayValues(cqWcmMsmActionExcludednodetypes, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedparagraphitems", ArrayValues(cqWcmMsmActionExcludedparagraphitems, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedprops", ArrayValues(cqWcmMsmActionExcludedprops, MULTI))
      .withQueryParam("contentcopyaction.order.style", contentcopyactionOrderStyle)
      .withSuccessResponse[ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqWcmMsmActionExcludednodetypes 
   * @param cqWcmMsmActionExcludedparagraphitems 
   * @param cqWcmMsmActionExcludedprops 
   */
  def comDayCqWcmMsmImplActionsContentDeleteActionFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqWcmMsmActionExcludednodetypes: Seq[String], cqWcmMsmActionExcludedparagraphitems: Seq[String], cqWcmMsmActionExcludedprops: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.wcm.msm.action.excludednodetypes", ArrayValues(cqWcmMsmActionExcludednodetypes, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedparagraphitems", ArrayValues(cqWcmMsmActionExcludedparagraphitems, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedprops", ArrayValues(cqWcmMsmActionExcludedprops, MULTI))
      .withSuccessResponse[ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqWcmMsmActionExcludednodetypes 
   * @param cqWcmMsmActionExcludedparagraphitems 
   * @param cqWcmMsmActionExcludedprops 
   * @param cqWcmMsmActionIgnoredMixin 
   */
  def comDayCqWcmMsmImplActionsContentUpdateActionFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqWcmMsmActionExcludednodetypes: Seq[String], cqWcmMsmActionExcludedparagraphitems: Seq[String], cqWcmMsmActionExcludedprops: Seq[String], cqWcmMsmActionIgnoredMixin: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.wcm.msm.action.excludednodetypes", ArrayValues(cqWcmMsmActionExcludednodetypes, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedparagraphitems", ArrayValues(cqWcmMsmActionExcludedparagraphitems, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedprops", ArrayValues(cqWcmMsmActionExcludedprops, MULTI))
      .withQueryParam("cq.wcm.msm.action.ignoredMixin", ArrayValues(cqWcmMsmActionIgnoredMixin, MULTI))
      .withSuccessResponse[ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqWcmMsmActionExcludednodetypes 
   * @param cqWcmMsmActionExcludedparagraphitems 
   * @param cqWcmMsmActionExcludedprops 
   */
  def comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqWcmMsmActionExcludednodetypes: Seq[String], cqWcmMsmActionExcludedparagraphitems: Seq[String], cqWcmMsmActionExcludedprops: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.wcm.msm.action.excludednodetypes", ArrayValues(cqWcmMsmActionExcludednodetypes, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedparagraphitems", ArrayValues(cqWcmMsmActionExcludedparagraphitems, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedprops", ArrayValues(cqWcmMsmActionExcludedprops, MULTI))
      .withSuccessResponse[ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqWcmMsmActionExcludednodetypes 
   * @param cqWcmMsmActionExcludedparagraphitems 
   * @param cqWcmMsmActionExcludedprops 
   * @param cqWcmMsmImplActionsPagemovePropReferenceUpdate 
   */
  def comDayCqWcmMsmImplActionsPageMoveActionFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqWcmMsmActionExcludednodetypes: Seq[String], cqWcmMsmActionExcludedparagraphitems: Seq[String], cqWcmMsmActionExcludedprops: Seq[String], cqWcmMsmImplActionsPagemovePropReferenceUpdate: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.wcm.msm.action.excludednodetypes", ArrayValues(cqWcmMsmActionExcludednodetypes, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedparagraphitems", ArrayValues(cqWcmMsmActionExcludedparagraphitems, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedprops", ArrayValues(cqWcmMsmActionExcludedprops, MULTI))
      .withQueryParam("cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate", cqWcmMsmImplActionsPagemovePropReferenceUpdate)
      .withSuccessResponse[ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqWcmMsmActionExcludednodetypes 
   * @param cqWcmMsmActionExcludedparagraphitems 
   * @param cqWcmMsmActionExcludedprops 
   * @param cqWcmMsmImplActionReferencesupdatePropUpdateNested 
   */
  def comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqWcmMsmActionExcludednodetypes: Seq[String], cqWcmMsmActionExcludedparagraphitems: Seq[String], cqWcmMsmActionExcludedprops: Seq[String], cqWcmMsmImplActionReferencesupdatePropUpdateNested: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.wcm.msm.action.excludednodetypes", ArrayValues(cqWcmMsmActionExcludednodetypes, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedparagraphitems", ArrayValues(cqWcmMsmActionExcludedparagraphitems, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedprops", ArrayValues(cqWcmMsmActionExcludedprops, MULTI))
      .withQueryParam("cq.wcm.msm.impl.action.referencesupdate.prop_updateNested", cqWcmMsmImplActionReferencesupdatePropUpdateNested)
      .withSuccessResponse[ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqWcmMsmActionExcludednodetypes 
   * @param cqWcmMsmActionExcludedparagraphitems 
   * @param cqWcmMsmActionExcludedprops 
   */
  def comDayCqWcmMsmImplActionsVersionCopyActionFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqWcmMsmActionExcludednodetypes: Seq[String], cqWcmMsmActionExcludedparagraphitems: Seq[String], cqWcmMsmActionExcludedprops: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.wcm.msm.action.excludednodetypes", ArrayValues(cqWcmMsmActionExcludednodetypes, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedparagraphitems", ArrayValues(cqWcmMsmActionExcludedparagraphitems, MULTI))
      .withQueryParam("cq.wcm.msm.action.excludedprops", ArrayValues(cqWcmMsmActionExcludedprops, MULTI))
      .withSuccessResponse[ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param liverelationshipmgrRelationsconfigDefault 
   */
  def comDayCqWcmMsmImplLiveRelationshipManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], liverelationshipmgrRelationsconfigDefault: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("liverelationshipmgr.relationsconfig.default", liverelationshipmgrRelationsconfigDefault)
      .withSuccessResponse[ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMsmImplRolloutManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventFilter 
   * @param rolloutmgrExcludedpropsDefault 
   * @param rolloutmgrExcludedparagraphpropsDefault 
   * @param rolloutmgrExcludednodetypesDefault 
   * @param rolloutmgrThreadpoolMaxsize 
   * @param rolloutmgrThreadpoolMaxshutdowntime 
   * @param rolloutmgrThreadpoolPriority 
   * @param rolloutmgrCommitSize 
   * @param rolloutmgrConflicthandlingEnabled 
   */
  def comDayCqWcmMsmImplRolloutManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventFilter: Option[String] = None, rolloutmgrExcludedpropsDefault: Seq[String], rolloutmgrExcludedparagraphpropsDefault: Seq[String], rolloutmgrExcludednodetypesDefault: Seq[String], rolloutmgrThreadpoolMaxsize: Option[Int] = None, rolloutmgrThreadpoolMaxshutdowntime: Option[Int] = None, rolloutmgrThreadpoolPriority: Option[String] = None, rolloutmgrCommitSize: Option[Int] = None, rolloutmgrConflicthandlingEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.filter", eventFilter)
      .withQueryParam("rolloutmgr.excludedprops.default", ArrayValues(rolloutmgrExcludedpropsDefault, MULTI))
      .withQueryParam("rolloutmgr.excludedparagraphprops.default", ArrayValues(rolloutmgrExcludedparagraphpropsDefault, MULTI))
      .withQueryParam("rolloutmgr.excludednodetypes.default", ArrayValues(rolloutmgrExcludednodetypesDefault, MULTI))
      .withQueryParam("rolloutmgr.threadpool.maxsize", rolloutmgrThreadpoolMaxsize)
      .withQueryParam("rolloutmgr.threadpool.maxshutdowntime", rolloutmgrThreadpoolMaxshutdowntime)
      .withQueryParam("rolloutmgr.threadpool.priority", rolloutmgrThreadpoolPriority)
      .withQueryParam("rolloutmgr.commit.size", rolloutmgrCommitSize)
      .withQueryParam("rolloutmgr.conflicthandling.enabled", rolloutmgrConflicthandlingEnabled)
      .withSuccessResponse[ComDayCqWcmMsmImplRolloutManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmMsmImplServletsAuditLogServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param auditlogservletDefaultEventsCount 
   * @param auditlogservletDefaultPath 
   */
  def comDayCqWcmMsmImplServletsAuditLogServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], auditlogservletDefaultEventsCount: Option[Int] = None, auditlogservletDefaultPath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("auditlogservlet.default.events.count", auditlogservletDefaultEventsCount)
      .withQueryParam("auditlogservlet.default.path", auditlogservletDefaultPath)
      .withSuccessResponse[ComDayCqWcmMsmImplServletsAuditLogServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmNotificationEmailImplEmailChannelInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param emailFrom 
   */
  def comDayCqWcmNotificationEmailImplEmailChannel(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], emailFrom: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("email.from", emailFrom)
      .withSuccessResponse[ComDayCqWcmNotificationEmailImplEmailChannelInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmNotificationImplNotificationManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventTopics 
   */
  def comDayCqWcmNotificationImplNotificationManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventTopics: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.topics", ArrayValues(eventTopics, MULTI))
      .withSuccessResponse[ComDayCqWcmNotificationImplNotificationManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmScriptingImplBVPManagerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param comDayCqWcmScriptingBvpScriptEngines 
   */
  def comDayCqWcmScriptingImplBVPManager(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], comDayCqWcmScriptingBvpScriptEngines: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("com.day.cq.wcm.scripting.bvp.script.engines", ArrayValues(comDayCqWcmScriptingBvpScriptEngines, MULTI))
      .withSuccessResponse[ComDayCqWcmScriptingImplBVPManagerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmUndoUndoConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cqWcmUndoEnabled 
   * @param cqWcmUndoPath 
   * @param cqWcmUndoValidity 
   * @param cqWcmUndoSteps 
   * @param cqWcmUndoPersistence 
   * @param cqWcmUndoPersistenceMode 
   * @param cqWcmUndoMarkermode 
   * @param cqWcmUndoWhitelist 
   * @param cqWcmUndoBlacklist 
   */
  def comDayCqWcmUndoUndoConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cqWcmUndoEnabled: Option[Boolean] = None, cqWcmUndoPath: Option[String] = None, cqWcmUndoValidity: Option[Int] = None, cqWcmUndoSteps: Option[Int] = None, cqWcmUndoPersistence: Option[String] = None, cqWcmUndoPersistenceMode: Option[Boolean] = None, cqWcmUndoMarkermode: Option[String] = None, cqWcmUndoWhitelist: Seq[String], cqWcmUndoBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cq.wcm.undo.enabled", cqWcmUndoEnabled)
      .withQueryParam("cq.wcm.undo.path", cqWcmUndoPath)
      .withQueryParam("cq.wcm.undo.validity", cqWcmUndoValidity)
      .withQueryParam("cq.wcm.undo.steps", cqWcmUndoSteps)
      .withQueryParam("cq.wcm.undo.persistence", cqWcmUndoPersistence)
      .withQueryParam("cq.wcm.undo.persistence.mode", cqWcmUndoPersistenceMode)
      .withQueryParam("cq.wcm.undo.markermode", cqWcmUndoMarkermode)
      .withQueryParam("cq.wcm.undo.whitelist", ArrayValues(cqWcmUndoWhitelist, MULTI))
      .withQueryParam("cq.wcm.undo.blacklist", ArrayValues(cqWcmUndoBlacklist, MULTI))
      .withSuccessResponse[ComDayCqWcmUndoUndoConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param flushAgents 
   */
  def comDayCqWcmWebservicesupportImplReplicationEventListener(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], flushAgents: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("Flush agents", ArrayValues(flushAgents, MULTI))
      .withSuccessResponse[ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param eventFilter 
   * @param minThreadPoolSize 
   * @param maxThreadPoolSize 
   * @param cqWcmWorkflowTerminateOnActivate 
   * @param cqWcmWorklfowTerminateExclusionList 
   */
  def comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], eventFilter: Option[String] = None, minThreadPoolSize: Option[Int] = None, maxThreadPoolSize: Option[Int] = None, cqWcmWorkflowTerminateOnActivate: Option[Boolean] = None, cqWcmWorklfowTerminateExclusionList: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("event.filter", eventFilter)
      .withQueryParam("minThreadPoolSize", minThreadPoolSize)
      .withQueryParam("maxThreadPoolSize", maxThreadPoolSize)
      .withQueryParam("cq.wcm.workflow.terminate.on.activate", cqWcmWorkflowTerminateOnActivate)
      .withQueryParam("cq.wcm.worklfow.terminate.exclusion.list", ArrayValues(cqWcmWorklfowTerminateExclusionList, MULTI))
      .withSuccessResponse[ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param workflowpackageinfoproviderFilter 
   * @param workflowpackageinfoproviderFilterRootpath 
   */
  def comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], workflowpackageinfoproviderFilter: Seq[String], workflowpackageinfoproviderFilterRootpath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("workflowpackageinfoprovider.filter", ArrayValues(workflowpackageinfoproviderFilter, MULTI))
      .withQueryParam("workflowpackageinfoprovider.filter.rootpath", workflowpackageinfoproviderFilterRootpath)
      .withSuccessResponse[ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWidgetImplHtmlLibraryManagerImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param htmllibmanagerClientmanager 
   * @param htmllibmanagerDebug 
   * @param htmllibmanagerDebugConsole 
   * @param htmllibmanagerDebugInitJs 
   * @param htmllibmanagerDefaultthemename 
   * @param htmllibmanagerDefaultuserthemename 
   * @param htmllibmanagerFirebuglitePath 
   * @param htmllibmanagerForceCQUrlInfo 
   * @param htmllibmanagerGzip 
   * @param htmllibmanagerMaxage 
   * @param htmllibmanagerMaxDataUriSize 
   * @param htmllibmanagerMinify 
   * @param htmllibmanagerPathList 
   * @param htmllibmanagerTiming 
   */
  def comDayCqWidgetImplHtmlLibraryManagerImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], htmllibmanagerClientmanager: Option[String] = None, htmllibmanagerDebug: Option[Boolean] = None, htmllibmanagerDebugConsole: Option[Boolean] = None, htmllibmanagerDebugInitJs: Option[String] = None, htmllibmanagerDefaultthemename: Option[String] = None, htmllibmanagerDefaultuserthemename: Option[String] = None, htmllibmanagerFirebuglitePath: Option[String] = None, htmllibmanagerForceCQUrlInfo: Option[Boolean] = None, htmllibmanagerGzip: Option[Boolean] = None, htmllibmanagerMaxage: Option[Int] = None, htmllibmanagerMaxDataUriSize: Option[Int] = None, htmllibmanagerMinify: Option[Boolean] = None, htmllibmanagerPathList: Seq[String], htmllibmanagerTiming: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("htmllibmanager.clientmanager", htmllibmanagerClientmanager)
      .withQueryParam("htmllibmanager.debug", htmllibmanagerDebug)
      .withQueryParam("htmllibmanager.debug.console", htmllibmanagerDebugConsole)
      .withQueryParam("htmllibmanager.debug.init.js", htmllibmanagerDebugInitJs)
      .withQueryParam("htmllibmanager.defaultthemename", htmllibmanagerDefaultthemename)
      .withQueryParam("htmllibmanager.defaultuserthemename", htmllibmanagerDefaultuserthemename)
      .withQueryParam("htmllibmanager.firebuglite.path", htmllibmanagerFirebuglitePath)
      .withQueryParam("htmllibmanager.forceCQUrlInfo", htmllibmanagerForceCQUrlInfo)
      .withQueryParam("htmllibmanager.gzip", htmllibmanagerGzip)
      .withQueryParam("htmllibmanager.maxage", htmllibmanagerMaxage)
      .withQueryParam("htmllibmanager.maxDataUriSize", htmllibmanagerMaxDataUriSize)
      .withQueryParam("htmllibmanager.minify", htmllibmanagerMinify)
      .withQueryParam("htmllibmanager.path.list", ArrayValues(htmllibmanagerPathList, MULTI))
      .withQueryParam("htmllibmanager.timing", htmllibmanagerTiming)
      .withSuccessResponse[ComDayCqWidgetImplHtmlLibraryManagerImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWidgetImplWidgetExtensionProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param extendableWidgets 
   * @param widgetextensionproviderDebug 
   */
  def comDayCqWidgetImplWidgetExtensionProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], extendableWidgets: Seq[String], widgetextensionproviderDebug: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("extendable.widgets", ArrayValues(extendableWidgets, MULTI))
      .withQueryParam("widgetextensionprovider.debug", widgetextensionproviderDebug)
      .withSuccessResponse[ComDayCqWidgetImplWidgetExtensionProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWorkflowImplEmailEMailNotificationServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param fromAddress 
   * @param hostPrefix 
   * @param notifyOnabort 
   * @param notifyOncomplete 
   * @param notifyOncontainercomplete 
   * @param notifyUseronly 
   */
  def comDayCqWorkflowImplEmailEMailNotificationService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], fromAddress: Option[String] = None, hostPrefix: Option[String] = None, notifyOnabort: Option[Boolean] = None, notifyOncomplete: Option[Boolean] = None, notifyOncontainercomplete: Option[Boolean] = None, notifyUseronly: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("from.address", fromAddress)
      .withQueryParam("host.prefix", hostPrefix)
      .withQueryParam("notify.onabort", notifyOnabort)
      .withQueryParam("notify.oncomplete", notifyOncomplete)
      .withQueryParam("notify.oncontainercomplete", notifyOncontainercomplete)
      .withQueryParam("notify.useronly", notifyUseronly)
      .withSuccessResponse[ComDayCqWorkflowImplEmailEMailNotificationServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param notifyOnupdate 
   * @param notifyOncomplete 
   */
  def comDayCqWorkflowImplEmailTaskEMailNotificationService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], notifyOnupdate: Option[Boolean] = None, notifyOncomplete: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("notify.onupdate", notifyOnupdate)
      .withQueryParam("notify.oncomplete", notifyOncomplete)
      .withSuccessResponse[ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   * @param tokenRequiredAttr 
   * @param tokenAlternateUrl 
   * @param tokenEncapsulated 
   * @param skipTokenRefresh 
   */
  def comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Option[String] = None, tokenRequiredAttr: Option[String] = None, tokenAlternateUrl: Option[String] = None, tokenEncapsulated: Option[Boolean] = None, skipTokenRefresh: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", path)
      .withQueryParam("token.required.attr", tokenRequiredAttr)
      .withQueryParam("token.alternate.url", tokenAlternateUrl)
      .withQueryParam("token.encapsulated", tokenEncapsulated)
      .withQueryParam("skip.token.refresh", ArrayValues(skipTokenRefresh, MULTI))
      .withSuccessResponse[ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : ComDayCrxSecurityTokenImplTokenCleanupTaskInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enableTokenCleanupTask 
   * @param schedulerExpression 
   * @param batchSize 
   */
  def comDayCrxSecurityTokenImplTokenCleanupTask(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enableTokenCleanupTask: Option[Boolean] = None, schedulerExpression: Option[String] = None, batchSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enable.token.cleanup.task", enableTokenCleanupTask)
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withQueryParam("batch.size", batchSize)
      .withSuccessResponse[ComDayCrxSecurityTokenImplTokenCleanupTaskInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : GuideLocalizationServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param supportedLocales 
   * @param localizableProperties 
   */
  def guideLocalizationService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], supportedLocales: Seq[String], localizableProperties: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/Guide Localization Service", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("supportedLocales", ArrayValues(supportedLocales, MULTI))
      .withQueryParam("Localizable Properties", ArrayValues(localizableProperties, MULTI))
      .withSuccessResponse[GuideLocalizationServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : MessagingUserComponentFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param priority 
   */
  def messagingUserComponentFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], priority: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/MessagingUserComponentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("priority", priority)
      .withSuccessResponse[MessagingUserComponentFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheAriesJmxFrameworkStateConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param attributeChangeNotificationEnabled 
   */
  def orgApacheAriesJmxFrameworkStateConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], attributeChangeNotificationEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("attributeChangeNotificationEnabled", attributeChangeNotificationEnabled)
      .withSuccessResponse[OrgApacheAriesJmxFrameworkStateConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixEventadminImplEventAdminInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheFelixEventadminThreadPoolSize 
   * @param orgApacheFelixEventadminAsyncToSyncThreadRatio 
   * @param orgApacheFelixEventadminTimeout 
   * @param orgApacheFelixEventadminRequireTopic 
   * @param orgApacheFelixEventadminIgnoreTimeout 
   * @param orgApacheFelixEventadminIgnoreTopic 
   */
  def orgApacheFelixEventadminImplEventAdmin(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheFelixEventadminThreadPoolSize: Option[Int] = None, orgApacheFelixEventadminAsyncToSyncThreadRatio: Option[Double] = None, orgApacheFelixEventadminTimeout: Option[Int] = None, orgApacheFelixEventadminRequireTopic: Option[Boolean] = None, orgApacheFelixEventadminIgnoreTimeout: Seq[String], orgApacheFelixEventadminIgnoreTopic: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.felix.eventadmin.ThreadPoolSize", orgApacheFelixEventadminThreadPoolSize)
      .withQueryParam("org.apache.felix.eventadmin.AsyncToSyncThreadRatio", orgApacheFelixEventadminAsyncToSyncThreadRatio)
      .withQueryParam("org.apache.felix.eventadmin.Timeout", orgApacheFelixEventadminTimeout)
      .withQueryParam("org.apache.felix.eventadmin.RequireTopic", orgApacheFelixEventadminRequireTopic)
      .withQueryParam("org.apache.felix.eventadmin.IgnoreTimeout", ArrayValues(orgApacheFelixEventadminIgnoreTimeout, MULTI))
      .withQueryParam("org.apache.felix.eventadmin.IgnoreTopic", ArrayValues(orgApacheFelixEventadminIgnoreTopic, MULTI))
      .withSuccessResponse[OrgApacheFelixEventadminImplEventAdminInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixHttpInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheFelixHttpHost 
   * @param orgApacheFelixHttpEnable 
   * @param orgOsgiServiceHttpPort 
   * @param orgApacheFelixHttpTimeout 
   * @param orgApacheFelixHttpsEnable 
   * @param orgOsgiServiceHttpPortSecure 
   * @param orgApacheFelixHttpsKeystore 
   * @param orgApacheFelixHttpsKeystorePassword 
   * @param orgApacheFelixHttpsKeystoreKeyPassword 
   * @param orgApacheFelixHttpsTruststore 
   * @param orgApacheFelixHttpsTruststorePassword 
   * @param orgApacheFelixHttpsClientcertificate 
   * @param orgApacheFelixHttpContextPath 
   * @param orgApacheFelixHttpMbeans 
   * @param orgApacheFelixHttpSessionTimeout 
   * @param orgApacheFelixHttpJettyThreadpoolMax 
   * @param orgApacheFelixHttpJettyAcceptors 
   * @param orgApacheFelixHttpJettySelectors 
   * @param orgApacheFelixHttpJettyHeaderBufferSize 
   * @param orgApacheFelixHttpJettyRequestBufferSize 
   * @param orgApacheFelixHttpJettyResponseBufferSize 
   * @param orgApacheFelixHttpJettyMaxFormSize 
   * @param orgApacheFelixHttpPathExclusions 
   * @param orgApacheFelixHttpsJettyCiphersuitesExcluded 
   * @param orgApacheFelixHttpsJettyCiphersuitesIncluded 
   * @param orgApacheFelixHttpJettySendServerHeader 
   * @param orgApacheFelixHttpsJettyProtocolsIncluded 
   * @param orgApacheFelixHttpsJettyProtocolsExcluded 
   * @param orgApacheFelixProxyLoadBalancerConnectionEnable 
   * @param orgApacheFelixHttpsJettyRenegotiateAllowed 
   * @param orgApacheFelixHttpsJettySessionCookieHttpOnly 
   * @param orgApacheFelixHttpsJettySessionCookieSecure 
   * @param orgEclipseJettyServletSessionIdPathParameterName 
   * @param orgEclipseJettyServletCheckingRemoteSessionIdEncoding 
   * @param orgEclipseJettyServletSessionCookie 
   * @param orgEclipseJettyServletSessionDomain 
   * @param orgEclipseJettyServletSessionPath 
   * @param orgEclipseJettyServletMaxAge 
   * @param orgApacheFelixHttpName 
   * @param orgApacheFelixJettyGziphandlerEnable 
   * @param orgApacheFelixJettyGzipMinGzipSize 
   * @param orgApacheFelixJettyGzipCompressionLevel 
   * @param orgApacheFelixJettyGzipInflateBufferSize 
   * @param orgApacheFelixJettyGzipSyncFlush 
   * @param orgApacheFelixJettyGzipExcludedUserAgents 
   * @param orgApacheFelixJettyGzipIncludedMethods 
   * @param orgApacheFelixJettyGzipExcludedMethods 
   * @param orgApacheFelixJettyGzipIncludedPaths 
   * @param orgApacheFelixJettyGzipExcludedPaths 
   * @param orgApacheFelixJettyGzipIncludedMimeTypes 
   * @param orgApacheFelixJettyGzipExcludedMimeTypes 
   * @param orgApacheFelixHttpSessionInvalidate 
   * @param orgApacheFelixHttpSessionUniqueid 
   */
  def orgApacheFelixHttp(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheFelixHttpHost: Option[String] = None, orgApacheFelixHttpEnable: Option[Boolean] = None, orgOsgiServiceHttpPort: Option[Int] = None, orgApacheFelixHttpTimeout: Option[Int] = None, orgApacheFelixHttpsEnable: Option[Boolean] = None, orgOsgiServiceHttpPortSecure: Option[Int] = None, orgApacheFelixHttpsKeystore: Option[String] = None, orgApacheFelixHttpsKeystorePassword: Option[String] = None, orgApacheFelixHttpsKeystoreKeyPassword: Option[String] = None, orgApacheFelixHttpsTruststore: Option[String] = None, orgApacheFelixHttpsTruststorePassword: Option[String] = None, orgApacheFelixHttpsClientcertificate: Option[String] = None, orgApacheFelixHttpContextPath: Option[String] = None, orgApacheFelixHttpMbeans: Option[Boolean] = None, orgApacheFelixHttpSessionTimeout: Option[Int] = None, orgApacheFelixHttpJettyThreadpoolMax: Option[Int] = None, orgApacheFelixHttpJettyAcceptors: Option[Int] = None, orgApacheFelixHttpJettySelectors: Option[Int] = None, orgApacheFelixHttpJettyHeaderBufferSize: Option[Int] = None, orgApacheFelixHttpJettyRequestBufferSize: Option[Int] = None, orgApacheFelixHttpJettyResponseBufferSize: Option[Int] = None, orgApacheFelixHttpJettyMaxFormSize: Option[Int] = None, orgApacheFelixHttpPathExclusions: Seq[String], orgApacheFelixHttpsJettyCiphersuitesExcluded: Seq[String], orgApacheFelixHttpsJettyCiphersuitesIncluded: Seq[String], orgApacheFelixHttpJettySendServerHeader: Option[Boolean] = None, orgApacheFelixHttpsJettyProtocolsIncluded: Seq[String], orgApacheFelixHttpsJettyProtocolsExcluded: Seq[String], orgApacheFelixProxyLoadBalancerConnectionEnable: Option[Boolean] = None, orgApacheFelixHttpsJettyRenegotiateAllowed: Option[Boolean] = None, orgApacheFelixHttpsJettySessionCookieHttpOnly: Option[Boolean] = None, orgApacheFelixHttpsJettySessionCookieSecure: Option[Boolean] = None, orgEclipseJettyServletSessionIdPathParameterName: Option[String] = None, orgEclipseJettyServletCheckingRemoteSessionIdEncoding: Option[Boolean] = None, orgEclipseJettyServletSessionCookie: Option[String] = None, orgEclipseJettyServletSessionDomain: Option[String] = None, orgEclipseJettyServletSessionPath: Option[String] = None, orgEclipseJettyServletMaxAge: Option[Int] = None, orgApacheFelixHttpName: Option[String] = None, orgApacheFelixJettyGziphandlerEnable: Option[Boolean] = None, orgApacheFelixJettyGzipMinGzipSize: Option[Int] = None, orgApacheFelixJettyGzipCompressionLevel: Option[Int] = None, orgApacheFelixJettyGzipInflateBufferSize: Option[Int] = None, orgApacheFelixJettyGzipSyncFlush: Option[Boolean] = None, orgApacheFelixJettyGzipExcludedUserAgents: Seq[String], orgApacheFelixJettyGzipIncludedMethods: Seq[String], orgApacheFelixJettyGzipExcludedMethods: Seq[String], orgApacheFelixJettyGzipIncludedPaths: Seq[String], orgApacheFelixJettyGzipExcludedPaths: Seq[String], orgApacheFelixJettyGzipIncludedMimeTypes: Seq[String], orgApacheFelixJettyGzipExcludedMimeTypes: Seq[String], orgApacheFelixHttpSessionInvalidate: Option[Boolean] = None, orgApacheFelixHttpSessionUniqueid: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.http", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.felix.http.host", orgApacheFelixHttpHost)
      .withQueryParam("org.apache.felix.http.enable", orgApacheFelixHttpEnable)
      .withQueryParam("org.osgi.service.http.port", orgOsgiServiceHttpPort)
      .withQueryParam("org.apache.felix.http.timeout", orgApacheFelixHttpTimeout)
      .withQueryParam("org.apache.felix.https.enable", orgApacheFelixHttpsEnable)
      .withQueryParam("org.osgi.service.http.port.secure", orgOsgiServiceHttpPortSecure)
      .withQueryParam("org.apache.felix.https.keystore", orgApacheFelixHttpsKeystore)
      .withQueryParam("org.apache.felix.https.keystore.password", orgApacheFelixHttpsKeystorePassword)
      .withQueryParam("org.apache.felix.https.keystore.key.password", orgApacheFelixHttpsKeystoreKeyPassword)
      .withQueryParam("org.apache.felix.https.truststore", orgApacheFelixHttpsTruststore)
      .withQueryParam("org.apache.felix.https.truststore.password", orgApacheFelixHttpsTruststorePassword)
      .withQueryParam("org.apache.felix.https.clientcertificate", orgApacheFelixHttpsClientcertificate)
      .withQueryParam("org.apache.felix.http.context_path", orgApacheFelixHttpContextPath)
      .withQueryParam("org.apache.felix.http.mbeans", orgApacheFelixHttpMbeans)
      .withQueryParam("org.apache.felix.http.session.timeout", orgApacheFelixHttpSessionTimeout)
      .withQueryParam("org.apache.felix.http.jetty.threadpool.max", orgApacheFelixHttpJettyThreadpoolMax)
      .withQueryParam("org.apache.felix.http.jetty.acceptors", orgApacheFelixHttpJettyAcceptors)
      .withQueryParam("org.apache.felix.http.jetty.selectors", orgApacheFelixHttpJettySelectors)
      .withQueryParam("org.apache.felix.http.jetty.headerBufferSize", orgApacheFelixHttpJettyHeaderBufferSize)
      .withQueryParam("org.apache.felix.http.jetty.requestBufferSize", orgApacheFelixHttpJettyRequestBufferSize)
      .withQueryParam("org.apache.felix.http.jetty.responseBufferSize", orgApacheFelixHttpJettyResponseBufferSize)
      .withQueryParam("org.apache.felix.http.jetty.maxFormSize", orgApacheFelixHttpJettyMaxFormSize)
      .withQueryParam("org.apache.felix.http.path_exclusions", ArrayValues(orgApacheFelixHttpPathExclusions, MULTI))
      .withQueryParam("org.apache.felix.https.jetty.ciphersuites.excluded", ArrayValues(orgApacheFelixHttpsJettyCiphersuitesExcluded, MULTI))
      .withQueryParam("org.apache.felix.https.jetty.ciphersuites.included", ArrayValues(orgApacheFelixHttpsJettyCiphersuitesIncluded, MULTI))
      .withQueryParam("org.apache.felix.http.jetty.sendServerHeader", orgApacheFelixHttpJettySendServerHeader)
      .withQueryParam("org.apache.felix.https.jetty.protocols.included", ArrayValues(orgApacheFelixHttpsJettyProtocolsIncluded, MULTI))
      .withQueryParam("org.apache.felix.https.jetty.protocols.excluded", ArrayValues(orgApacheFelixHttpsJettyProtocolsExcluded, MULTI))
      .withQueryParam("org.apache.felix.proxy.load.balancer.connection.enable", orgApacheFelixProxyLoadBalancerConnectionEnable)
      .withQueryParam("org.apache.felix.https.jetty.renegotiateAllowed", orgApacheFelixHttpsJettyRenegotiateAllowed)
      .withQueryParam("org.apache.felix.https.jetty.session.cookie.httpOnly", orgApacheFelixHttpsJettySessionCookieHttpOnly)
      .withQueryParam("org.apache.felix.https.jetty.session.cookie.secure", orgApacheFelixHttpsJettySessionCookieSecure)
      .withQueryParam("org.eclipse.jetty.servlet.SessionIdPathParameterName", orgEclipseJettyServletSessionIdPathParameterName)
      .withQueryParam("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding", orgEclipseJettyServletCheckingRemoteSessionIdEncoding)
      .withQueryParam("org.eclipse.jetty.servlet.SessionCookie", orgEclipseJettyServletSessionCookie)
      .withQueryParam("org.eclipse.jetty.servlet.SessionDomain", orgEclipseJettyServletSessionDomain)
      .withQueryParam("org.eclipse.jetty.servlet.SessionPath", orgEclipseJettyServletSessionPath)
      .withQueryParam("org.eclipse.jetty.servlet.MaxAge", orgEclipseJettyServletMaxAge)
      .withQueryParam("org.apache.felix.http.name", orgApacheFelixHttpName)
      .withQueryParam("org.apache.felix.jetty.gziphandler.enable", orgApacheFelixJettyGziphandlerEnable)
      .withQueryParam("org.apache.felix.jetty.gzip.minGzipSize", orgApacheFelixJettyGzipMinGzipSize)
      .withQueryParam("org.apache.felix.jetty.gzip.compressionLevel", orgApacheFelixJettyGzipCompressionLevel)
      .withQueryParam("org.apache.felix.jetty.gzip.inflateBufferSize", orgApacheFelixJettyGzipInflateBufferSize)
      .withQueryParam("org.apache.felix.jetty.gzip.syncFlush", orgApacheFelixJettyGzipSyncFlush)
      .withQueryParam("org.apache.felix.jetty.gzip.excludedUserAgents", ArrayValues(orgApacheFelixJettyGzipExcludedUserAgents, MULTI))
      .withQueryParam("org.apache.felix.jetty.gzip.includedMethods", ArrayValues(orgApacheFelixJettyGzipIncludedMethods, MULTI))
      .withQueryParam("org.apache.felix.jetty.gzip.excludedMethods", ArrayValues(orgApacheFelixJettyGzipExcludedMethods, MULTI))
      .withQueryParam("org.apache.felix.jetty.gzip.includedPaths", ArrayValues(orgApacheFelixJettyGzipIncludedPaths, MULTI))
      .withQueryParam("org.apache.felix.jetty.gzip.excludedPaths", ArrayValues(orgApacheFelixJettyGzipExcludedPaths, MULTI))
      .withQueryParam("org.apache.felix.jetty.gzip.includedMimeTypes", ArrayValues(orgApacheFelixJettyGzipIncludedMimeTypes, MULTI))
      .withQueryParam("org.apache.felix.jetty.gzip.excludedMimeTypes", ArrayValues(orgApacheFelixJettyGzipExcludedMimeTypes, MULTI))
      .withQueryParam("org.apache.felix.http.session.invalidate", orgApacheFelixHttpSessionInvalidate)
      .withQueryParam("org.apache.felix.http.session.uniqueid", orgApacheFelixHttpSessionUniqueid)
      .withSuccessResponse[OrgApacheFelixHttpInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixHttpSslfilterSslFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param sslForwardHeader 
   * @param sslForwardValue 
   * @param sslForwardCertHeader 
   * @param rewriteAbsoluteUrls 
   */
  def orgApacheFelixHttpSslfilterSslFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], sslForwardHeader: Option[String] = None, sslForwardValue: Option[String] = None, sslForwardCertHeader: Option[String] = None, rewriteAbsoluteUrls: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("ssl-forward.header", sslForwardHeader)
      .withQueryParam("ssl-forward.value", sslForwardValue)
      .withQueryParam("ssl-forward-cert.header", sslForwardCertHeader)
      .withQueryParam("rewrite.absolute.urls", rewriteAbsoluteUrls)
      .withSuccessResponse[OrgApacheFelixHttpSslfilterSslFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixJaasConfigurationFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jaasControlFlag 
   * @param jaasRanking 
   * @param jaasRealmName 
   * @param jaasClassname 
   * @param jaasOptions 
   */
  def orgApacheFelixJaasConfigurationFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jaasControlFlag: Option[String] = None, jaasRanking: Option[Int] = None, jaasRealmName: Option[String] = None, jaasClassname: Option[String] = None, jaasOptions: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.jaas.Configuration.factory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("jaas.controlFlag", jaasControlFlag)
      .withQueryParam("jaas.ranking", jaasRanking)
      .withQueryParam("jaas.realmName", jaasRealmName)
      .withQueryParam("jaas.classname", jaasClassname)
      .withQueryParam("jaas.options", ArrayValues(jaasOptions, MULTI))
      .withSuccessResponse[OrgApacheFelixJaasConfigurationFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixJaasConfigurationSpiInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jaasDefaultRealmName 
   * @param jaasConfigProviderName 
   * @param jaasGlobalConfigPolicy 
   */
  def orgApacheFelixJaasConfigurationSpi(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jaasDefaultRealmName: Option[String] = None, jaasConfigProviderName: Option[String] = None, jaasGlobalConfigPolicy: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("jaas.defaultRealmName", jaasDefaultRealmName)
      .withQueryParam("jaas.configProviderName", jaasConfigProviderName)
      .withQueryParam("jaas.globalConfigPolicy", jaasGlobalConfigPolicy)
      .withSuccessResponse[OrgApacheFelixJaasConfigurationSpiInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixScrScrServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param dsLoglevel 
   * @param dsFactoryEnabled 
   * @param dsDelayedKeepInstances 
   * @param dsLockTimeoutMilliseconds 
   * @param dsStopTimeoutMilliseconds 
   * @param dsGlobalExtender 
   */
  def orgApacheFelixScrScrService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], dsLoglevel: Option[Int] = None, dsFactoryEnabled: Option[Boolean] = None, dsDelayedKeepInstances: Option[Boolean] = None, dsLockTimeoutMilliseconds: Option[Int] = None, dsStopTimeoutMilliseconds: Option[Int] = None, dsGlobalExtender: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.scr.ScrService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("ds.loglevel", dsLoglevel)
      .withQueryParam("ds.factory.enabled", dsFactoryEnabled)
      .withQueryParam("ds.delayed.keepInstances", dsDelayedKeepInstances)
      .withQueryParam("ds.lock.timeout.milliseconds", dsLockTimeoutMilliseconds)
      .withQueryParam("ds.stop.timeout.milliseconds", dsStopTimeoutMilliseconds)
      .withQueryParam("ds.global.extender", dsGlobalExtender)
      .withSuccessResponse[OrgApacheFelixScrScrServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixSystemreadyImplComponentsCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param componentsList 
   * @param `type` 
   */
  def orgApacheFelixSystemreadyImplComponentsCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], componentsList: Seq[String], `type`: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("components.list", ArrayValues(componentsList, MULTI))
      .withQueryParam("type", `type`)
      .withSuccessResponse[OrgApacheFelixSystemreadyImplComponentsCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param timeout 
   * @param targetStartLevel 
   * @param targetStartLevelPropName 
   * @param `type` 
   */
  def orgApacheFelixSystemreadyImplFrameworkStartCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], timeout: Option[Int] = None, targetStartLevel: Option[Int] = None, targetStartLevelPropName: Option[String] = None, `type`: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("timeout", timeout)
      .withQueryParam("target.start.level", targetStartLevel)
      .withQueryParam("target.start.level.prop.name", targetStartLevelPropName)
      .withQueryParam("type", `type`)
      .withSuccessResponse[OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixSystemreadyImplServicesCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param servicesList 
   * @param `type` 
   */
  def orgApacheFelixSystemreadyImplServicesCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], servicesList: Seq[String], `type`: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("services.list", ArrayValues(servicesList, MULTI))
      .withQueryParam("type", `type`)
      .withSuccessResponse[OrgApacheFelixSystemreadyImplServicesCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param osgiHttpWhiteboardServletPattern 
   * @param osgiHttpWhiteboardContextSelect 
   */
  def orgApacheFelixSystemreadyImplServletSystemAliveServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], osgiHttpWhiteboardServletPattern: Option[String] = None, osgiHttpWhiteboardContextSelect: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("osgi.http.whiteboard.servlet.pattern", osgiHttpWhiteboardServletPattern)
      .withQueryParam("osgi.http.whiteboard.context.select", osgiHttpWhiteboardContextSelect)
      .withSuccessResponse[OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param osgiHttpWhiteboardServletPattern 
   * @param osgiHttpWhiteboardContextSelect 
   */
  def orgApacheFelixSystemreadyImplServletSystemReadyServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], osgiHttpWhiteboardServletPattern: Option[String] = None, osgiHttpWhiteboardContextSelect: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("osgi.http.whiteboard.servlet.pattern", osgiHttpWhiteboardServletPattern)
      .withQueryParam("osgi.http.whiteboard.context.select", osgiHttpWhiteboardContextSelect)
      .withSuccessResponse[OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixSystemreadySystemReadyMonitorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param pollInterval 
   */
  def orgApacheFelixSystemreadySystemReadyMonitor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], pollInterval: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("poll.interval", pollInterval)
      .withSuccessResponse[OrgApacheFelixSystemreadySystemReadyMonitorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param managerRoot 
   * @param httpServiceFilter 
   * @param defaultRender 
   * @param realm 
   * @param username 
   * @param password 
   * @param category 
   * @param locale 
   * @param loglevel 
   * @param plugins 
   */
  def orgApacheFelixWebconsoleInternalServletOsgiManager(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], managerRoot: Option[String] = None, httpServiceFilter: Option[String] = None, defaultRender: Option[String] = None, realm: Option[String] = None, username: Option[String] = None, password: Option[String] = None, category: Option[String] = None, locale: Option[String] = None, loglevel: Option[Int] = None, plugins: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("manager.root", managerRoot)
      .withQueryParam("http.service.filter", httpServiceFilter)
      .withQueryParam("default.render", defaultRender)
      .withQueryParam("realm", realm)
      .withQueryParam("username", username)
      .withQueryParam("password", password)
      .withQueryParam("category", category)
      .withQueryParam("locale", locale)
      .withQueryParam("loglevel", loglevel)
      .withQueryParam("plugins", plugins)
      .withSuccessResponse[OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxSize 
   */
  def orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("max.size", maxSize)
      .withSuccessResponse[OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param felixMemoryusageDumpThreshold 
   * @param felixMemoryusageDumpInterval 
   * @param felixMemoryusageDumpLocation 
   */
  def orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], felixMemoryusageDumpThreshold: Option[Int] = None, felixMemoryusageDumpInterval: Option[Int] = None, felixMemoryusageDumpLocation: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("felix.memoryusage.dump.threshold", felixMemoryusageDumpThreshold)
      .withQueryParam("felix.memoryusage.dump.interval", felixMemoryusageDumpInterval)
      .withQueryParam("felix.memoryusage.dump.location", felixMemoryusageDumpLocation)
      .withSuccessResponse[OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheHttpProxyconfiguratorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param proxyEnabled 
   * @param proxyHost 
   * @param proxyPort 
   * @param proxyUser 
   * @param proxyPassword 
   * @param proxyExceptions 
   */
  def orgApacheHttpProxyconfigurator(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], proxyEnabled: Option[Boolean] = None, proxyHost: Option[String] = None, proxyPort: Option[Int] = None, proxyUser: Option[String] = None, proxyPassword: Option[String] = None, proxyExceptions: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.http.proxyconfigurator", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("proxy.enabled", proxyEnabled)
      .withQueryParam("proxy.host", proxyHost)
      .withQueryParam("proxy.port", proxyPort)
      .withQueryParam("proxy.user", proxyUser)
      .withQueryParam("proxy.password", proxyPassword)
      .withQueryParam("proxy.exceptions", ArrayValues(proxyExceptions, MULTI))
      .withSuccessResponse[OrgApacheHttpProxyconfiguratorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param dir 
   */
  def orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], dir: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("dir", dir)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   */
  def orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", path)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param mongouri 
   * @param db 
   * @param socketKeepAlive 
   * @param cache 
   * @param nodeCachePercentage 
   * @param prevDocCachePercentage 
   * @param childrenCachePercentage 
   * @param diffCachePercentage 
   * @param cacheSegmentCount 
   * @param cacheStackMoveDistance 
   * @param blobCacheSize 
   * @param persistentCache 
   * @param journalCache 
   * @param customBlobStore 
   * @param journalGCInterval 
   * @param journalGCMaxAge 
   * @param prefetchExternalChanges 
   * @param role 
   * @param versionGcMaxAgeInSecs 
   * @param versionGCExpression 
   * @param versionGCTimeLimitInSecs 
   * @param blobGcMaxAgeInSecs 
   * @param blobTrackSnapshotIntervalInSecs 
   * @param repositoryHome 
   * @param maxReplicationLagInSecs 
   * @param documentStoreType 
   * @param bundlingDisabled 
   * @param updateLimit 
   * @param persistentCacheIncludes 
   * @param leaseCheckMode 
   */
  def orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], mongouri: Option[String] = None, db: Option[String] = None, socketKeepAlive: Option[Boolean] = None, cache: Option[Int] = None, nodeCachePercentage: Option[Int] = None, prevDocCachePercentage: Option[Int] = None, childrenCachePercentage: Option[Int] = None, diffCachePercentage: Option[Int] = None, cacheSegmentCount: Option[Int] = None, cacheStackMoveDistance: Option[Int] = None, blobCacheSize: Option[Int] = None, persistentCache: Option[String] = None, journalCache: Option[String] = None, customBlobStore: Option[Boolean] = None, journalGCInterval: Option[Int] = None, journalGCMaxAge: Option[Int] = None, prefetchExternalChanges: Option[Boolean] = None, role: Option[String] = None, versionGcMaxAgeInSecs: Option[Int] = None, versionGCExpression: Option[String] = None, versionGCTimeLimitInSecs: Option[Int] = None, blobGcMaxAgeInSecs: Option[Int] = None, blobTrackSnapshotIntervalInSecs: Option[Int] = None, repositoryHome: Option[String] = None, maxReplicationLagInSecs: Option[Int] = None, documentStoreType: Option[String] = None, bundlingDisabled: Option[Boolean] = None, updateLimit: Option[Int] = None, persistentCacheIncludes: Seq[String], leaseCheckMode: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("mongouri", mongouri)
      .withQueryParam("db", db)
      .withQueryParam("socketKeepAlive", socketKeepAlive)
      .withQueryParam("cache", cache)
      .withQueryParam("nodeCachePercentage", nodeCachePercentage)
      .withQueryParam("prevDocCachePercentage", prevDocCachePercentage)
      .withQueryParam("childrenCachePercentage", childrenCachePercentage)
      .withQueryParam("diffCachePercentage", diffCachePercentage)
      .withQueryParam("cacheSegmentCount", cacheSegmentCount)
      .withQueryParam("cacheStackMoveDistance", cacheStackMoveDistance)
      .withQueryParam("blobCacheSize", blobCacheSize)
      .withQueryParam("persistentCache", persistentCache)
      .withQueryParam("journalCache", journalCache)
      .withQueryParam("customBlobStore", customBlobStore)
      .withQueryParam("journalGCInterval", journalGCInterval)
      .withQueryParam("journalGCMaxAge", journalGCMaxAge)
      .withQueryParam("prefetchExternalChanges", prefetchExternalChanges)
      .withQueryParam("role", role)
      .withQueryParam("versionGcMaxAgeInSecs", versionGcMaxAgeInSecs)
      .withQueryParam("versionGCExpression", versionGCExpression)
      .withQueryParam("versionGCTimeLimitInSecs", versionGCTimeLimitInSecs)
      .withQueryParam("blobGcMaxAgeInSecs", blobGcMaxAgeInSecs)
      .withQueryParam("blobTrackSnapshotIntervalInSecs", blobTrackSnapshotIntervalInSecs)
      .withQueryParam("repository.home", repositoryHome)
      .withQueryParam("maxReplicationLagInSecs", maxReplicationLagInSecs)
      .withQueryParam("documentStoreType", documentStoreType)
      .withQueryParam("bundlingDisabled", bundlingDisabled)
      .withQueryParam("updateLimit", updateLimit)
      .withQueryParam("persistentCacheIncludes", ArrayValues(persistentCacheIncludes, MULTI))
      .withQueryParam("leaseCheckMode", leaseCheckMode)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param persistentCacheIncludes 
   */
  def orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], persistentCacheIncludes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("persistentCacheIncludes", ArrayValues(persistentCacheIncludes, MULTI))
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param includedPaths 
   * @param enableAsyncObserver 
   * @param observerQueueSize 
   */
  def orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], includedPaths: Seq[String], enableAsyncObserver: Option[Boolean] = None, observerQueueSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("includedPaths", ArrayValues(includedPaths, MULTI))
      .withQueryParam("enableAsyncObserver", enableAsyncObserver)
      .withQueryParam("observerQueueSize", observerQueueSize)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param asyncConfigs 
   * @param leaseTimeOutMinutes 
   * @param failingIndexTimeoutSeconds 
   * @param errorWarnIntervalSeconds 
   */
  def orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], asyncConfigs: Seq[String], leaseTimeOutMinutes: Option[Int] = None, failingIndexTimeoutSeconds: Option[Int] = None, errorWarnIntervalSeconds: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("asyncConfigs", ArrayValues(asyncConfigs, MULTI))
      .withQueryParam("leaseTimeOutMinutes", leaseTimeOutMinutes)
      .withQueryParam("failingIndexTimeoutSeconds", failingIndexTimeoutSeconds)
      .withQueryParam("errorWarnIntervalSeconds", errorWarnIntervalSeconds)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param disabled 
   * @param debug 
   * @param localIndexDir 
   * @param enableOpenIndexAsync 
   * @param threadPoolSize 
   * @param prefetchIndexFiles 
   * @param extractedTextCacheSizeInMB 
   * @param extractedTextCacheExpiryInSecs 
   * @param alwaysUsePreExtractedCache 
   * @param booleanClauseLimit 
   * @param enableHybridIndexing 
   * @param hybridQueueSize 
   * @param disableStoredIndexDefinition 
   * @param deletedBlobsCollectionEnabled 
   * @param propIndexCleanerIntervalInSecs 
   * @param enableSingleBlobIndexFiles 
   */
  def orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], disabled: Option[Boolean] = None, debug: Option[Boolean] = None, localIndexDir: Option[String] = None, enableOpenIndexAsync: Option[Boolean] = None, threadPoolSize: Option[Int] = None, prefetchIndexFiles: Option[Boolean] = None, extractedTextCacheSizeInMB: Option[Int] = None, extractedTextCacheExpiryInSecs: Option[Int] = None, alwaysUsePreExtractedCache: Option[Boolean] = None, booleanClauseLimit: Option[Int] = None, enableHybridIndexing: Option[Boolean] = None, hybridQueueSize: Option[Int] = None, disableStoredIndexDefinition: Option[Boolean] = None, deletedBlobsCollectionEnabled: Option[Boolean] = None, propIndexCleanerIntervalInSecs: Option[Int] = None, enableSingleBlobIndexFiles: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("disabled", disabled)
      .withQueryParam("debug", debug)
      .withQueryParam("localIndexDir", localIndexDir)
      .withQueryParam("enableOpenIndexAsync", enableOpenIndexAsync)
      .withQueryParam("threadPoolSize", threadPoolSize)
      .withQueryParam("prefetchIndexFiles", prefetchIndexFiles)
      .withQueryParam("extractedTextCacheSizeInMB", extractedTextCacheSizeInMB)
      .withQueryParam("extractedTextCacheExpiryInSecs", extractedTextCacheExpiryInSecs)
      .withQueryParam("alwaysUsePreExtractedCache", alwaysUsePreExtractedCache)
      .withQueryParam("booleanClauseLimit", booleanClauseLimit)
      .withQueryParam("enableHybridIndexing", enableHybridIndexing)
      .withQueryParam("hybridQueueSize", hybridQueueSize)
      .withQueryParam("disableStoredIndexDefinition", disableStoredIndexDefinition)
      .withQueryParam("deletedBlobsCollectionEnabled", deletedBlobsCollectionEnabled)
      .withQueryParam("propIndexCleanerIntervalInSecs", propIndexCleanerIntervalInSecs)
      .withQueryParam("enableSingleBlobIndexFiles", enableSingleBlobIndexFiles)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param solrHomePath 
   * @param solrCoreName 
   */
  def orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], solrHomePath: Option[String] = None, solrCoreName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("solr.home.path", solrHomePath)
      .withQueryParam("solr.core.name", solrCoreName)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   */
  def orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param pathDescField 
   * @param pathChildField 
   * @param pathParentField 
   * @param pathExactField 
   * @param catchAllField 
   * @param collapsedPathField 
   * @param pathDepthField 
   * @param commitPolicy 
   * @param rows 
   * @param pathRestrictions 
   * @param propertyRestrictions 
   * @param primarytypesRestrictions 
   * @param ignoredProperties 
   * @param usedProperties 
   * @param typeMappings 
   * @param propertyMappings 
   * @param collapseJcrcontentNodes 
   */
  def orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], pathDescField: Option[String] = None, pathChildField: Option[String] = None, pathParentField: Option[String] = None, pathExactField: Option[String] = None, catchAllField: Option[String] = None, collapsedPathField: Option[String] = None, pathDepthField: Option[String] = None, commitPolicy: Option[String] = None, rows: Option[Int] = None, pathRestrictions: Option[Boolean] = None, propertyRestrictions: Option[Boolean] = None, primarytypesRestrictions: Option[Boolean] = None, ignoredProperties: Seq[String], usedProperties: Seq[String], typeMappings: Seq[String], propertyMappings: Seq[String], collapseJcrcontentNodes: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path.desc.field", pathDescField)
      .withQueryParam("path.child.field", pathChildField)
      .withQueryParam("path.parent.field", pathParentField)
      .withQueryParam("path.exact.field", pathExactField)
      .withQueryParam("catch.all.field", catchAllField)
      .withQueryParam("collapsed.path.field", collapsedPathField)
      .withQueryParam("path.depth.field", pathDepthField)
      .withQueryParam("commit.policy", commitPolicy)
      .withQueryParam("rows", rows)
      .withQueryParam("path.restrictions", pathRestrictions)
      .withQueryParam("property.restrictions", propertyRestrictions)
      .withQueryParam("primarytypes.restrictions", primarytypesRestrictions)
      .withQueryParam("ignored.properties", ArrayValues(ignoredProperties, MULTI))
      .withQueryParam("used.properties", ArrayValues(usedProperties, MULTI))
      .withQueryParam("type.mappings", ArrayValues(typeMappings, MULTI))
      .withQueryParam("property.mappings", ArrayValues(propertyMappings, MULTI))
      .withQueryParam("collapse.jcrcontent.nodes", collapseJcrcontentNodes)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param solrHttpUrl 
   * @param solrZkHost 
   * @param solrCollection 
   * @param solrSocketTimeout 
   * @param solrConnectionTimeout 
   * @param solrShardsNo 
   * @param solrReplicationFactor 
   * @param solrConfDir 
   */
  def orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], solrHttpUrl: Option[String] = None, solrZkHost: Option[String] = None, solrCollection: Option[String] = None, solrSocketTimeout: Option[Int] = None, solrConnectionTimeout: Option[Int] = None, solrShardsNo: Option[Int] = None, solrReplicationFactor: Option[Int] = None, solrConfDir: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("solr.http.url", solrHttpUrl)
      .withQueryParam("solr.zk.host", solrZkHost)
      .withQueryParam("solr.collection", solrCollection)
      .withQueryParam("solr.socket.timeout", solrSocketTimeout)
      .withQueryParam("solr.connection.timeout", solrConnectionTimeout)
      .withQueryParam("solr.shards.no", solrShardsNo)
      .withQueryParam("solr.replication.factor", solrReplicationFactor)
      .withQueryParam("solr.conf.dir", solrConfDir)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param queryAggregation 
   */
  def orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], queryAggregation: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("query.aggregation", queryAggregation)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serverType 
   */
  def orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serverType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("server.type", serverType)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param providerType 
   */
  def orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], providerType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("providerType", providerType)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxItems 
   * @param maxPathDepth 
   * @param enabled 
   */
  def orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxItems: Option[Int] = None, maxPathDepth: Option[Int] = None, enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("maxItems", maxItems)
      .withQueryParam("maxPathDepth", maxPathDepth)
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param queryLimitInMemory 
   * @param queryLimitReads 
   * @param queryFailTraversal 
   * @param fastQuerySize 
   */
  def orgApacheJackrabbitOakQueryQueryEngineSettingsService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], queryLimitInMemory: Option[Int] = None, queryLimitReads: Option[Int] = None, queryFailTraversal: Option[Boolean] = None, fastQuerySize: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("queryLimitInMemory", queryLimitInMemory)
      .withQueryParam("queryLimitReads", queryLimitReads)
      .withQueryParam("queryFailTraversal", queryFailTraversal)
      .withQueryParam("fastQuerySize", fastQuerySize)
      .withSuccessResponse[OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheJackrabbitOakAuthenticationAppName 
   * @param orgApacheJackrabbitOakAuthenticationConfigSpiName 
   */
  def orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheJackrabbitOakAuthenticationAppName: Option[String] = None, orgApacheJackrabbitOakAuthenticationConfigSpiName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.jackrabbit.oak.authentication.appName", orgApacheJackrabbitOakAuthenticationAppName)
      .withQueryParam("org.apache.jackrabbit.oak.authentication.configSpiName", orgApacheJackrabbitOakAuthenticationConfigSpiName)
      .withSuccessResponse[OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param providerName 
   * @param hostName 
   * @param hostPort 
   * @param hostSsl 
   * @param hostTls 
   * @param hostNoCertCheck 
   * @param bindDn 
   * @param bindPassword 
   * @param searchTimeout 
   * @param adminPoolMaxActive 
   * @param adminPoolLookupOnValidate 
   * @param userPoolMaxActive 
   * @param userPoolLookupOnValidate 
   * @param userBaseDN 
   * @param userObjectclass 
   * @param userIdAttribute 
   * @param userExtraFilter 
   * @param userMakeDnPath 
   * @param groupBaseDN 
   * @param groupObjectclass 
   * @param groupNameAttribute 
   * @param groupExtraFilter 
   * @param groupMakeDnPath 
   * @param groupMemberAttribute 
   * @param useUidForExtId 
   * @param customattributes 
   */
  def orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], providerName: Option[String] = None, hostName: Option[String] = None, hostPort: Option[Int] = None, hostSsl: Option[Boolean] = None, hostTls: Option[Boolean] = None, hostNoCertCheck: Option[Boolean] = None, bindDn: Option[String] = None, bindPassword: Option[String] = None, searchTimeout: Option[String] = None, adminPoolMaxActive: Option[Int] = None, adminPoolLookupOnValidate: Option[Boolean] = None, userPoolMaxActive: Option[Int] = None, userPoolLookupOnValidate: Option[Boolean] = None, userBaseDN: Option[String] = None, userObjectclass: Seq[String], userIdAttribute: Option[String] = None, userExtraFilter: Option[String] = None, userMakeDnPath: Option[Boolean] = None, groupBaseDN: Option[String] = None, groupObjectclass: Seq[String], groupNameAttribute: Option[String] = None, groupExtraFilter: Option[String] = None, groupMakeDnPath: Option[Boolean] = None, groupMemberAttribute: Option[String] = None, useUidForExtId: Option[Boolean] = None, customattributes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("provider.name", providerName)
      .withQueryParam("host.name", hostName)
      .withQueryParam("host.port", hostPort)
      .withQueryParam("host.ssl", hostSsl)
      .withQueryParam("host.tls", hostTls)
      .withQueryParam("host.noCertCheck", hostNoCertCheck)
      .withQueryParam("bind.dn", bindDn)
      .withQueryParam("bind.password", bindPassword)
      .withQueryParam("searchTimeout", searchTimeout)
      .withQueryParam("adminPool.maxActive", adminPoolMaxActive)
      .withQueryParam("adminPool.lookupOnValidate", adminPoolLookupOnValidate)
      .withQueryParam("userPool.maxActive", userPoolMaxActive)
      .withQueryParam("userPool.lookupOnValidate", userPoolLookupOnValidate)
      .withQueryParam("user.baseDN", userBaseDN)
      .withQueryParam("user.objectclass", ArrayValues(userObjectclass, MULTI))
      .withQueryParam("user.idAttribute", userIdAttribute)
      .withQueryParam("user.extraFilter", userExtraFilter)
      .withQueryParam("user.makeDnPath", userMakeDnPath)
      .withQueryParam("group.baseDN", groupBaseDN)
      .withQueryParam("group.objectclass", ArrayValues(groupObjectclass, MULTI))
      .withQueryParam("group.nameAttribute", groupNameAttribute)
      .withQueryParam("group.extraFilter", groupExtraFilter)
      .withQueryParam("group.makeDnPath", groupMakeDnPath)
      .withQueryParam("group.memberAttribute", groupMemberAttribute)
      .withQueryParam("useUidForExtId", useUidForExtId)
      .withQueryParam("customattributes", ArrayValues(customattributes, MULTI))
      .withSuccessResponse[OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param tokenExpiration 
   * @param tokenLength 
   * @param tokenRefresh 
   * @param tokenCleanupThreshold 
   * @param passwordHashAlgorithm 
   * @param passwordHashIterations 
   * @param passwordSaltSize 
   */
  def orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], tokenExpiration: Option[String] = None, tokenLength: Option[String] = None, tokenRefresh: Option[Boolean] = None, tokenCleanupThreshold: Option[Int] = None, passwordHashAlgorithm: Option[String] = None, passwordHashIterations: Option[Int] = None, passwordSaltSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("tokenExpiration", tokenExpiration)
      .withQueryParam("tokenLength", tokenLength)
      .withQueryParam("tokenRefresh", tokenRefresh)
      .withQueryParam("tokenCleanupThreshold", tokenCleanupThreshold)
      .withQueryParam("passwordHashAlgorithm", passwordHashAlgorithm)
      .withQueryParam("passwordHashIterations", passwordHashIterations)
      .withQueryParam("passwordSaltSize", passwordSaltSize)
      .withSuccessResponse[OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param permissionsJr2 
   * @param importBehavior 
   * @param readPaths 
   * @param administrativePrincipals 
   * @param configurationRanking 
   */
  def orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], permissionsJr2: Option[String] = None, importBehavior: Option[String] = None, readPaths: Seq[String], administrativePrincipals: Seq[String], configurationRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("permissionsJr2", permissionsJr2)
      .withQueryParam("importBehavior", importBehavior)
      .withQueryParam("readPaths", ArrayValues(readPaths, MULTI))
      .withQueryParam("administrativePrincipals", ArrayValues(administrativePrincipals, MULTI))
      .withQueryParam("configurationRanking", configurationRanking)
      .withSuccessResponse[OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param requiredServicePids 
   * @param authorizationCompositionType 
   */
  def orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], requiredServicePids: Seq[String], authorizationCompositionType: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("requiredServicePids", ArrayValues(requiredServicePids, MULTI))
      .withQueryParam("authorizationCompositionType", authorizationCompositionType)
      .withSuccessResponse[OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param length 
   */
  def orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], length: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("length", length)
      .withSuccessResponse[OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param usersPath 
   * @param groupsPath 
   * @param systemRelativePath 
   * @param defaultDepth 
   * @param importBehavior 
   * @param passwordHashAlgorithm 
   * @param passwordHashIterations 
   * @param passwordSaltSize 
   * @param omitAdminPw 
   * @param supportAutoSave 
   * @param passwordMaxAge 
   * @param initialPasswordChange 
   * @param passwordHistorySize 
   * @param passwordExpiryForAdmin 
   * @param cacheExpiration 
   * @param enableRFC7613UsercaseMappedProfile 
   */
  def orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], usersPath: Option[String] = None, groupsPath: Option[String] = None, systemRelativePath: Option[String] = None, defaultDepth: Option[Int] = None, importBehavior: Option[String] = None, passwordHashAlgorithm: Option[String] = None, passwordHashIterations: Option[Int] = None, passwordSaltSize: Option[Int] = None, omitAdminPw: Option[Boolean] = None, supportAutoSave: Option[Boolean] = None, passwordMaxAge: Option[Int] = None, initialPasswordChange: Option[Boolean] = None, passwordHistorySize: Option[Int] = None, passwordExpiryForAdmin: Option[Boolean] = None, cacheExpiration: Option[Int] = None, enableRFC7613UsercaseMappedProfile: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("usersPath", usersPath)
      .withQueryParam("groupsPath", groupsPath)
      .withQueryParam("systemRelativePath", systemRelativePath)
      .withQueryParam("defaultDepth", defaultDepth)
      .withQueryParam("importBehavior", importBehavior)
      .withQueryParam("passwordHashAlgorithm", passwordHashAlgorithm)
      .withQueryParam("passwordHashIterations", passwordHashIterations)
      .withQueryParam("passwordSaltSize", passwordSaltSize)
      .withQueryParam("omitAdminPw", omitAdminPw)
      .withQueryParam("supportAutoSave", supportAutoSave)
      .withQueryParam("passwordMaxAge", passwordMaxAge)
      .withQueryParam("initialPasswordChange", initialPasswordChange)
      .withQueryParam("passwordHistorySize", passwordHistorySize)
      .withQueryParam("passwordExpiryForAdmin", passwordExpiryForAdmin)
      .withQueryParam("cacheExpiration", cacheExpiration)
      .withQueryParam("enableRFC7613UsercaseMappedProfile", enableRFC7613UsercaseMappedProfile)
      .withSuccessResponse[OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param accountName 
   * @param containerName 
   * @param accessKey 
   * @param rootPath 
   * @param connectionURL 
   */
  def orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], accountName: Option[String] = None, containerName: Option[String] = None, accessKey: Option[String] = None, rootPath: Option[String] = None, connectionURL: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("accountName", accountName)
      .withQueryParam("containerName", containerName)
      .withQueryParam("accessKey", accessKey)
      .withQueryParam("rootPath", rootPath)
      .withQueryParam("connectionURL", connectionURL)
      .withSuccessResponse[OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param repositoryHome 
   * @param tarmkMode 
   * @param tarmkSize 
   * @param segmentCacheSize 
   * @param stringCacheSize 
   * @param templateCacheSize 
   * @param stringDeduplicationCacheSize 
   * @param templateDeduplicationCacheSize 
   * @param nodeDeduplicationCacheSize 
   * @param pauseCompaction 
   * @param compactionRetryCount 
   * @param compactionForceTimeout 
   * @param compactionSizeDeltaEstimation 
   * @param compactionDisableEstimation 
   * @param compactionRetainedGenerations 
   * @param compactionMemoryThreshold 
   * @param compactionProgressLog 
   * @param standby 
   * @param customBlobStore 
   * @param customSegmentStore 
   * @param splitPersistence 
   * @param repositoryBackupDir 
   * @param blobGcMaxAgeInSecs 
   * @param blobTrackSnapshotIntervalInSecs 
   * @param role 
   * @param registerDescriptors 
   * @param dispatchChanges 
   */
  def orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], repositoryHome: Option[String] = None, tarmkMode: Option[String] = None, tarmkSize: Option[Int] = None, segmentCacheSize: Option[Int] = None, stringCacheSize: Option[Int] = None, templateCacheSize: Option[Int] = None, stringDeduplicationCacheSize: Option[Int] = None, templateDeduplicationCacheSize: Option[Int] = None, nodeDeduplicationCacheSize: Option[Int] = None, pauseCompaction: Option[Boolean] = None, compactionRetryCount: Option[Int] = None, compactionForceTimeout: Option[Int] = None, compactionSizeDeltaEstimation: Option[Int] = None, compactionDisableEstimation: Option[Boolean] = None, compactionRetainedGenerations: Option[Int] = None, compactionMemoryThreshold: Option[Int] = None, compactionProgressLog: Option[Int] = None, standby: Option[Boolean] = None, customBlobStore: Option[Boolean] = None, customSegmentStore: Option[Boolean] = None, splitPersistence: Option[Boolean] = None, repositoryBackupDir: Option[String] = None, blobGcMaxAgeInSecs: Option[Int] = None, blobTrackSnapshotIntervalInSecs: Option[Int] = None, role: Option[String] = None, registerDescriptors: Option[Boolean] = None, dispatchChanges: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("repository.home", repositoryHome)
      .withQueryParam("tarmk.mode", tarmkMode)
      .withQueryParam("tarmk.size", tarmkSize)
      .withQueryParam("segmentCache.size", segmentCacheSize)
      .withQueryParam("stringCache.size", stringCacheSize)
      .withQueryParam("templateCache.size", templateCacheSize)
      .withQueryParam("stringDeduplicationCache.size", stringDeduplicationCacheSize)
      .withQueryParam("templateDeduplicationCache.size", templateDeduplicationCacheSize)
      .withQueryParam("nodeDeduplicationCache.size", nodeDeduplicationCacheSize)
      .withQueryParam("pauseCompaction", pauseCompaction)
      .withQueryParam("compaction.retryCount", compactionRetryCount)
      .withQueryParam("compaction.force.timeout", compactionForceTimeout)
      .withQueryParam("compaction.sizeDeltaEstimation", compactionSizeDeltaEstimation)
      .withQueryParam("compaction.disableEstimation", compactionDisableEstimation)
      .withQueryParam("compaction.retainedGenerations", compactionRetainedGenerations)
      .withQueryParam("compaction.memoryThreshold", compactionMemoryThreshold)
      .withQueryParam("compaction.progressLog", compactionProgressLog)
      .withQueryParam("standby", standby)
      .withQueryParam("customBlobStore", customBlobStore)
      .withQueryParam("customSegmentStore", customSegmentStore)
      .withQueryParam("splitPersistence", splitPersistence)
      .withQueryParam("repository.backup.dir", repositoryBackupDir)
      .withQueryParam("blobGcMaxAgeInSecs", blobGcMaxAgeInSecs)
      .withQueryParam("blobTrackSnapshotIntervalInSecs", blobTrackSnapshotIntervalInSecs)
      .withQueryParam("role", role)
      .withQueryParam("registerDescriptors", registerDescriptors)
      .withQueryParam("dispatchChanges", dispatchChanges)
      .withSuccessResponse[OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param commitsTrackerWriterGroups 
   */
  def orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], commitsTrackerWriterGroups: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("commitsTrackerWriterGroups", ArrayValues(commitsTrackerWriterGroups, MULTI))
      .withSuccessResponse[OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param repositoryHome 
   * @param tarmkMode 
   * @param tarmkSize 
   * @param segmentCacheSize 
   * @param stringCacheSize 
   * @param templateCacheSize 
   * @param stringDeduplicationCacheSize 
   * @param templateDeduplicationCacheSize 
   * @param nodeDeduplicationCacheSize 
   * @param pauseCompaction 
   * @param compactionRetryCount 
   * @param compactionForceTimeout 
   * @param compactionSizeDeltaEstimation 
   * @param compactionDisableEstimation 
   * @param compactionRetainedGenerations 
   * @param compactionMemoryThreshold 
   * @param compactionProgressLog 
   * @param standby 
   * @param customBlobStore 
   * @param customSegmentStore 
   * @param splitPersistence 
   * @param repositoryBackupDir 
   * @param blobGcMaxAgeInSecs 
   * @param blobTrackSnapshotIntervalInSecs 
   */
  def orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], repositoryHome: Option[String] = None, tarmkMode: Option[String] = None, tarmkSize: Option[Int] = None, segmentCacheSize: Option[Int] = None, stringCacheSize: Option[Int] = None, templateCacheSize: Option[Int] = None, stringDeduplicationCacheSize: Option[Int] = None, templateDeduplicationCacheSize: Option[Int] = None, nodeDeduplicationCacheSize: Option[Int] = None, pauseCompaction: Option[Boolean] = None, compactionRetryCount: Option[Int] = None, compactionForceTimeout: Option[Int] = None, compactionSizeDeltaEstimation: Option[Int] = None, compactionDisableEstimation: Option[Boolean] = None, compactionRetainedGenerations: Option[Int] = None, compactionMemoryThreshold: Option[Int] = None, compactionProgressLog: Option[Int] = None, standby: Option[Boolean] = None, customBlobStore: Option[Boolean] = None, customSegmentStore: Option[Boolean] = None, splitPersistence: Option[Boolean] = None, repositoryBackupDir: Option[String] = None, blobGcMaxAgeInSecs: Option[Int] = None, blobTrackSnapshotIntervalInSecs: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("repository.home", repositoryHome)
      .withQueryParam("tarmk.mode", tarmkMode)
      .withQueryParam("tarmk.size", tarmkSize)
      .withQueryParam("segmentCache.size", segmentCacheSize)
      .withQueryParam("stringCache.size", stringCacheSize)
      .withQueryParam("templateCache.size", templateCacheSize)
      .withQueryParam("stringDeduplicationCache.size", stringDeduplicationCacheSize)
      .withQueryParam("templateDeduplicationCache.size", templateDeduplicationCacheSize)
      .withQueryParam("nodeDeduplicationCache.size", nodeDeduplicationCacheSize)
      .withQueryParam("pauseCompaction", pauseCompaction)
      .withQueryParam("compaction.retryCount", compactionRetryCount)
      .withQueryParam("compaction.force.timeout", compactionForceTimeout)
      .withQueryParam("compaction.sizeDeltaEstimation", compactionSizeDeltaEstimation)
      .withQueryParam("compaction.disableEstimation", compactionDisableEstimation)
      .withQueryParam("compaction.retainedGenerations", compactionRetainedGenerations)
      .withQueryParam("compaction.memoryThreshold", compactionMemoryThreshold)
      .withQueryParam("compaction.progressLog", compactionProgressLog)
      .withQueryParam("standby", standby)
      .withQueryParam("customBlobStore", customBlobStore)
      .withQueryParam("customSegmentStore", customSegmentStore)
      .withQueryParam("splitPersistence", splitPersistence)
      .withQueryParam("repository.backup.dir", repositoryBackupDir)
      .withQueryParam("blobGcMaxAgeInSecs", blobGcMaxAgeInSecs)
      .withQueryParam("blobTrackSnapshotIntervalInSecs", blobTrackSnapshotIntervalInSecs)
      .withSuccessResponse[OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheSlingInstallerConfigurationPersist 
   * @param mode 
   * @param port 
   * @param primaryHost 
   * @param interval 
   * @param primaryAllowedClientIpRanges 
   * @param secure 
   * @param standbyReadtimeout 
   * @param standbyAutoclean 
   */
  def orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheSlingInstallerConfigurationPersist: Option[Boolean] = None, mode: Option[String] = None, port: Option[Int] = None, primaryHost: Option[String] = None, interval: Option[Int] = None, primaryAllowedClientIpRanges: Seq[String], secure: Option[Boolean] = None, standbyReadtimeout: Option[Int] = None, standbyAutoclean: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.sling.installer.configuration.persist", orgApacheSlingInstallerConfigurationPersist)
      .withQueryParam("mode", mode)
      .withQueryParam("port", port)
      .withQueryParam("primary.host", primaryHost)
      .withQueryParam("interval", interval)
      .withQueryParam("primary.allowed-client-ip-ranges", ArrayValues(primaryAllowedClientIpRanges, MULTI))
      .withQueryParam("secure", secure)
      .withQueryParam("standby.readtimeout", standbyReadtimeout)
      .withQueryParam("standby.autoclean", standbyAutoclean)
      .withSuccessResponse[OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param handlerName 
   * @param userExpirationTime 
   * @param userAutoMembership 
   * @param userPropertyMapping 
   * @param userPathPrefix 
   * @param userMembershipExpTime 
   * @param userMembershipNestingDepth 
   * @param userDynamicMembership 
   * @param userDisableMissing 
   * @param groupExpirationTime 
   * @param groupAutoMembership 
   * @param groupPropertyMapping 
   * @param groupPathPrefix 
   * @param enableRFC7613UsercaseMappedProfile 
   */
  def orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], handlerName: Option[String] = None, userExpirationTime: Option[String] = None, userAutoMembership: Seq[String], userPropertyMapping: Seq[String], userPathPrefix: Option[String] = None, userMembershipExpTime: Option[String] = None, userMembershipNestingDepth: Option[Int] = None, userDynamicMembership: Option[Boolean] = None, userDisableMissing: Option[Boolean] = None, groupExpirationTime: Option[String] = None, groupAutoMembership: Seq[String], groupPropertyMapping: Seq[String], groupPathPrefix: Option[String] = None, enableRFC7613UsercaseMappedProfile: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("handler.name", handlerName)
      .withQueryParam("user.expirationTime", userExpirationTime)
      .withQueryParam("user.autoMembership", ArrayValues(userAutoMembership, MULTI))
      .withQueryParam("user.propertyMapping", ArrayValues(userPropertyMapping, MULTI))
      .withQueryParam("user.pathPrefix", userPathPrefix)
      .withQueryParam("user.membershipExpTime", userMembershipExpTime)
      .withQueryParam("user.membershipNestingDepth", userMembershipNestingDepth)
      .withQueryParam("user.dynamicMembership", userDynamicMembership)
      .withQueryParam("user.disableMissing", userDisableMissing)
      .withQueryParam("group.expirationTime", groupExpirationTime)
      .withQueryParam("group.autoMembership", ArrayValues(groupAutoMembership, MULTI))
      .withQueryParam("group.propertyMapping", ArrayValues(groupPropertyMapping, MULTI))
      .withQueryParam("group.pathPrefix", groupPathPrefix)
      .withQueryParam("enableRFC7613UsercaseMappedProfile", enableRFC7613UsercaseMappedProfile)
      .withSuccessResponse[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jaasRanking 
   * @param jaasControlFlag 
   * @param jaasRealmName 
   * @param idpName 
   * @param syncHandlerName 
   */
  def orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jaasRanking: Option[Int] = None, jaasControlFlag: Option[String] = None, jaasRealmName: Option[String] = None, idpName: Option[String] = None, syncHandlerName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("jaas.ranking", jaasRanking)
      .withQueryParam("jaas.controlFlag", jaasControlFlag)
      .withQueryParam("jaas.realmName", jaasRealmName)
      .withQueryParam("idp.name", idpName)
      .withQueryParam("sync.handlerName", syncHandlerName)
      .withSuccessResponse[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param protectExternalId 
   */
  def orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], protectExternalId: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("protectExternalId", protectExternalId)
      .withSuccessResponse[OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param cugSupportedPaths 
   * @param cugEnabled 
   * @param configurationRanking 
   */
  def orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], cugSupportedPaths: Seq[String], cugEnabled: Option[Boolean] = None, configurationRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("cugSupportedPaths", ArrayValues(cugSupportedPaths, MULTI))
      .withQueryParam("cugEnabled", cugEnabled)
      .withQueryParam("configurationRanking", configurationRanking)
      .withSuccessResponse[OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param principalNames 
   */
  def orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], principalNames: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("principalNames", ArrayValues(principalNames, MULTI))
      .withSuccessResponse[OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabledActions 
   * @param userPrivilegeNames 
   * @param groupPrivilegeNames 
   * @param constraint 
   */
  def orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabledActions: Option[String] = None, userPrivilegeNames: Seq[String], groupPrivilegeNames: Seq[String], constraint: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabledActions", enabledActions)
      .withQueryParam("userPrivilegeNames", ArrayValues(userPrivilegeNames, MULTI))
      .withQueryParam("groupPrivilegeNames", ArrayValues(groupPrivilegeNames, MULTI))
      .withQueryParam("constraint", constraint)
      .withSuccessResponse[OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param packageRoots 
   */
  def orgApacheJackrabbitVaultPackagingImplPackagingImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], packageRoots: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("packageRoots", ArrayValues(packageRoots, MULTI))
      .withSuccessResponse[OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param homePath 
   */
  def orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], homePath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("homePath", homePath)
      .withSuccessResponse[OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingAuthCoreImplLogoutServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletMethods 
   * @param slingServletPaths 
   */
  def orgApacheSlingAuthCoreImplLogoutServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletMethods: Seq[String], slingServletPaths: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.methods", ArrayValues(slingServletMethods, MULTI))
      .withQueryParam("sling.servlet.paths", slingServletPaths)
      .withSuccessResponse[OrgApacheSlingAuthCoreImplLogoutServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   */
  def orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCaconfigImplConfigurationResolverImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param configBucketNames 
   */
  def orgApacheSlingCaconfigImplConfigurationResolverImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], configBucketNames: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("configBucketNames", ArrayValues(configBucketNames, MULTI))
      .withSuccessResponse[OrgApacheSlingCaconfigImplConfigurationResolverImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   * @param configPropertyInheritancePropertyNames 
   */
  def orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None, configPropertyInheritancePropertyNames: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withQueryParam("configPropertyInheritancePropertyNames", ArrayValues(configPropertyInheritancePropertyNames, MULTI))
      .withSuccessResponse[OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   */
  def orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param description 
   * @param overrides 
   * @param enabled 
   * @param serviceRanking 
   */
  def orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], description: Option[String] = None, overrides: Seq[String], enabled: Option[Boolean] = None, serviceRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("description", description)
      .withQueryParam("overrides", ArrayValues(overrides, MULTI))
      .withQueryParam("enabled", enabled)
      .withQueryParam("service.ranking", serviceRanking)
      .withSuccessResponse[OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   * @param serviceRanking 
   */
  def orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None, serviceRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withQueryParam("service.ranking", serviceRanking)
      .withSuccessResponse[OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param ignorePropertyNameRegex 
   * @param configCollectionPropertiesResourceNames 
   */
  def orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], ignorePropertyNameRegex: Seq[String], configCollectionPropertiesResourceNames: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("ignorePropertyNameRegex", ArrayValues(ignorePropertyNameRegex, MULTI))
      .withQueryParam("configCollectionPropertiesResourceNames", ArrayValues(configCollectionPropertiesResourceNames, MULTI))
      .withSuccessResponse[OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   * @param configPath 
   * @param fallbackPaths 
   * @param configCollectionInheritancePropertyNames 
   */
  def orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None, configPath: Option[String] = None, fallbackPaths: Seq[String], configCollectionInheritancePropertyNames: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withQueryParam("configPath", configPath)
      .withQueryParam("fallbackPaths", ArrayValues(fallbackPaths, MULTI))
      .withQueryParam("configCollectionInheritancePropertyNames", ArrayValues(configCollectionInheritancePropertyNames, MULTI))
      .withSuccessResponse[OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param enabled 
   * @param configRefResourceNames 
   * @param configRefPropertyNames 
   * @param serviceRanking 
   */
  def orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], enabled: Option[Boolean] = None, configRefResourceNames: Seq[String], configRefPropertyNames: Seq[String], serviceRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("enabled", enabled)
      .withQueryParam("configRefResourceNames", ArrayValues(configRefResourceNames, MULTI))
      .withQueryParam("configRefPropertyNames", ArrayValues(configRefPropertyNames, MULTI))
      .withQueryParam("service.ranking", serviceRanking)
      .withSuccessResponse[OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param parserFeatures 
   */
  def orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], parserFeatures: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("parser.features", ArrayValues(parserFeatures, MULTI))
      .withSuccessResponse[OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCommonsLogLogManagerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheSlingCommonsLogLevel 
   * @param orgApacheSlingCommonsLogFile 
   * @param orgApacheSlingCommonsLogFileNumber 
   * @param orgApacheSlingCommonsLogFileSize 
   * @param orgApacheSlingCommonsLogPattern 
   * @param orgApacheSlingCommonsLogConfigurationFile 
   * @param orgApacheSlingCommonsLogPackagingDataEnabled 
   * @param orgApacheSlingCommonsLogMaxCallerDataDepth 
   * @param orgApacheSlingCommonsLogMaxOldFileCountInDump 
   * @param orgApacheSlingCommonsLogNumOfLines 
   */
  def orgApacheSlingCommonsLogLogManager(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheSlingCommonsLogLevel: Option[String] = None, orgApacheSlingCommonsLogFile: Option[String] = None, orgApacheSlingCommonsLogFileNumber: Option[Int] = None, orgApacheSlingCommonsLogFileSize: Option[String] = None, orgApacheSlingCommonsLogPattern: Option[String] = None, orgApacheSlingCommonsLogConfigurationFile: Option[String] = None, orgApacheSlingCommonsLogPackagingDataEnabled: Option[Boolean] = None, orgApacheSlingCommonsLogMaxCallerDataDepth: Option[Int] = None, orgApacheSlingCommonsLogMaxOldFileCountInDump: Option[Int] = None, orgApacheSlingCommonsLogNumOfLines: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.commons.log.LogManager", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.sling.commons.log.level", orgApacheSlingCommonsLogLevel)
      .withQueryParam("org.apache.sling.commons.log.file", orgApacheSlingCommonsLogFile)
      .withQueryParam("org.apache.sling.commons.log.file.number", orgApacheSlingCommonsLogFileNumber)
      .withQueryParam("org.apache.sling.commons.log.file.size", orgApacheSlingCommonsLogFileSize)
      .withQueryParam("org.apache.sling.commons.log.pattern", orgApacheSlingCommonsLogPattern)
      .withQueryParam("org.apache.sling.commons.log.configurationFile", orgApacheSlingCommonsLogConfigurationFile)
      .withQueryParam("org.apache.sling.commons.log.packagingDataEnabled", orgApacheSlingCommonsLogPackagingDataEnabled)
      .withQueryParam("org.apache.sling.commons.log.maxCallerDataDepth", orgApacheSlingCommonsLogMaxCallerDataDepth)
      .withQueryParam("org.apache.sling.commons.log.maxOldFileCountInDump", orgApacheSlingCommonsLogMaxOldFileCountInDump)
      .withQueryParam("org.apache.sling.commons.log.numOfLines", orgApacheSlingCommonsLogNumOfLines)
      .withSuccessResponse[OrgApacheSlingCommonsLogLogManagerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheSlingCommonsLogLevel 
   * @param orgApacheSlingCommonsLogFile 
   * @param orgApacheSlingCommonsLogPattern 
   * @param orgApacheSlingCommonsLogNames 
   * @param orgApacheSlingCommonsLogAdditiv 
   */
  def orgApacheSlingCommonsLogLogManagerFactoryConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheSlingCommonsLogLevel: Option[String] = None, orgApacheSlingCommonsLogFile: Option[String] = None, orgApacheSlingCommonsLogPattern: Option[String] = None, orgApacheSlingCommonsLogNames: Seq[String], orgApacheSlingCommonsLogAdditiv: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.sling.commons.log.level", orgApacheSlingCommonsLogLevel)
      .withQueryParam("org.apache.sling.commons.log.file", orgApacheSlingCommonsLogFile)
      .withQueryParam("org.apache.sling.commons.log.pattern", orgApacheSlingCommonsLogPattern)
      .withQueryParam("org.apache.sling.commons.log.names", ArrayValues(orgApacheSlingCommonsLogNames, MULTI))
      .withQueryParam("org.apache.sling.commons.log.additiv", orgApacheSlingCommonsLogAdditiv)
      .withSuccessResponse[OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheSlingCommonsLogFile 
   * @param orgApacheSlingCommonsLogFileNumber 
   * @param orgApacheSlingCommonsLogFileSize 
   * @param orgApacheSlingCommonsLogFileBuffered 
   */
  def orgApacheSlingCommonsLogLogManagerFactoryWriter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheSlingCommonsLogFile: Option[String] = None, orgApacheSlingCommonsLogFileNumber: Option[Int] = None, orgApacheSlingCommonsLogFileSize: Option[String] = None, orgApacheSlingCommonsLogFileBuffered: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.sling.commons.log.file", orgApacheSlingCommonsLogFile)
      .withQueryParam("org.apache.sling.commons.log.file.number", orgApacheSlingCommonsLogFileNumber)
      .withQueryParam("org.apache.sling.commons.log.file.size", orgApacheSlingCommonsLogFileSize)
      .withQueryParam("org.apache.sling.commons.log.file.buffered", orgApacheSlingCommonsLogFileBuffered)
      .withSuccessResponse[OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCommonsMetricsInternalLogReporterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param period 
   * @param timeUnit 
   * @param level 
   * @param loggerName 
   * @param prefix 
   * @param pattern 
   * @param registryName 
   */
  def orgApacheSlingCommonsMetricsInternalLogReporter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], period: Option[Int] = None, timeUnit: Option[String] = None, level: Option[String] = None, loggerName: Option[String] = None, prefix: Option[String] = None, pattern: Option[String] = None, registryName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("period", period)
      .withQueryParam("timeUnit", timeUnit)
      .withQueryParam("level", level)
      .withQueryParam("loggerName", loggerName)
      .withQueryParam("prefix", prefix)
      .withQueryParam("pattern", pattern)
      .withQueryParam("registryName", registryName)
      .withSuccessResponse[OrgApacheSlingCommonsMetricsInternalLogReporterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param datasources 
   * @param step 
   * @param archives 
   * @param path 
   */
  def orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], datasources: Seq[String], step: Option[Int] = None, archives: Seq[String], path: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("datasources", ArrayValues(datasources, MULTI))
      .withQueryParam("step", step)
      .withQueryParam("archives", ArrayValues(archives, MULTI))
      .withQueryParam("path", path)
      .withSuccessResponse[OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param mimeTypes 
   */
  def orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], mimeTypes: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("mime.types", ArrayValues(mimeTypes, MULTI))
      .withSuccessResponse[OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param poolName 
   * @param allowedPoolNames 
   * @param schedulerUseleaderforsingle 
   * @param metricsFilters 
   * @param slowThresholdMillis 
   */
  def orgApacheSlingCommonsSchedulerImplQuartzScheduler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], poolName: Option[String] = None, allowedPoolNames: Seq[String], schedulerUseleaderforsingle: Option[Boolean] = None, metricsFilters: Seq[String], slowThresholdMillis: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("poolName", poolName)
      .withQueryParam("allowedPoolNames", ArrayValues(allowedPoolNames, MULTI))
      .withQueryParam("scheduler.useleaderforsingle", schedulerUseleaderforsingle)
      .withQueryParam("metrics.filters", ArrayValues(metricsFilters, MULTI))
      .withQueryParam("slowThresholdMillis", slowThresholdMillis)
      .withSuccessResponse[OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxQuartzJobDurationAcceptable 
   */
  def orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxQuartzJobDurationAcceptable: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("max.quartzJob.duration.acceptable", maxQuartzJobDurationAcceptable)
      .withSuccessResponse[OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param minPoolSize 
   * @param maxPoolSize 
   * @param queueSize 
   * @param maxThreadAge 
   * @param keepAliveTime 
   * @param blockPolicy 
   * @param shutdownGraceful 
   * @param daemon 
   * @param shutdownWaitTime 
   * @param priority 
   */
  def orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, minPoolSize: Option[Int] = None, maxPoolSize: Option[Int] = None, queueSize: Option[Int] = None, maxThreadAge: Option[Int] = None, keepAliveTime: Option[Int] = None, blockPolicy: Option[String] = None, shutdownGraceful: Option[Boolean] = None, daemon: Option[Boolean] = None, shutdownWaitTime: Option[Int] = None, priority: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("minPoolSize", minPoolSize)
      .withQueryParam("maxPoolSize", maxPoolSize)
      .withQueryParam("queueSize", queueSize)
      .withQueryParam("maxThreadAge", maxThreadAge)
      .withQueryParam("keepAliveTime", keepAliveTime)
      .withQueryParam("blockPolicy", blockPolicy)
      .withQueryParam("shutdownGraceful", shutdownGraceful)
      .withQueryParam("daemon", daemon)
      .withQueryParam("shutdownWaitTime", shutdownWaitTime)
      .withQueryParam("priority", priority)
      .withSuccessResponse[OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDatasourceDataSourceFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param datasourceName 
   * @param datasourceSvcPropName 
   * @param driverClassName 
   * @param url 
   * @param username 
   * @param password 
   * @param defaultAutoCommit 
   * @param defaultReadOnly 
   * @param defaultTransactionIsolation 
   * @param defaultCatalog 
   * @param maxActive 
   * @param maxIdle 
   * @param minIdle 
   * @param initialSize 
   * @param maxWait 
   * @param maxAge 
   * @param testOnBorrow 
   * @param testOnReturn 
   * @param testWhileIdle 
   * @param validationQuery 
   * @param validationQueryTimeout 
   * @param timeBetweenEvictionRunsMillis 
   * @param minEvictableIdleTimeMillis 
   * @param connectionProperties 
   * @param initSQL 
   * @param jdbcInterceptors 
   * @param validationInterval 
   * @param logValidationErrors 
   * @param datasourceSvcProperties 
   */
  def orgApacheSlingDatasourceDataSourceFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], datasourceName: Option[String] = None, datasourceSvcPropName: Option[String] = None, driverClassName: Option[String] = None, url: Option[String] = None, username: Option[String] = None, password: Option[String] = None, defaultAutoCommit: Option[String] = None, defaultReadOnly: Option[String] = None, defaultTransactionIsolation: Option[String] = None, defaultCatalog: Option[String] = None, maxActive: Option[Int] = None, maxIdle: Option[Int] = None, minIdle: Option[Int] = None, initialSize: Option[Int] = None, maxWait: Option[Int] = None, maxAge: Option[Int] = None, testOnBorrow: Option[Boolean] = None, testOnReturn: Option[Boolean] = None, testWhileIdle: Option[Boolean] = None, validationQuery: Option[String] = None, validationQueryTimeout: Option[Int] = None, timeBetweenEvictionRunsMillis: Option[Int] = None, minEvictableIdleTimeMillis: Option[Int] = None, connectionProperties: Option[String] = None, initSQL: Option[String] = None, jdbcInterceptors: Option[String] = None, validationInterval: Option[Int] = None, logValidationErrors: Option[Boolean] = None, datasourceSvcProperties: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("datasource.name", datasourceName)
      .withQueryParam("datasource.svc.prop.name", datasourceSvcPropName)
      .withQueryParam("driverClassName", driverClassName)
      .withQueryParam("url", url)
      .withQueryParam("username", username)
      .withQueryParam("password", password)
      .withQueryParam("defaultAutoCommit", defaultAutoCommit)
      .withQueryParam("defaultReadOnly", defaultReadOnly)
      .withQueryParam("defaultTransactionIsolation", defaultTransactionIsolation)
      .withQueryParam("defaultCatalog", defaultCatalog)
      .withQueryParam("maxActive", maxActive)
      .withQueryParam("maxIdle", maxIdle)
      .withQueryParam("minIdle", minIdle)
      .withQueryParam("initialSize", initialSize)
      .withQueryParam("maxWait", maxWait)
      .withQueryParam("maxAge", maxAge)
      .withQueryParam("testOnBorrow", testOnBorrow)
      .withQueryParam("testOnReturn", testOnReturn)
      .withQueryParam("testWhileIdle", testWhileIdle)
      .withQueryParam("validationQuery", validationQuery)
      .withQueryParam("validationQueryTimeout", validationQueryTimeout)
      .withQueryParam("timeBetweenEvictionRunsMillis", timeBetweenEvictionRunsMillis)
      .withQueryParam("minEvictableIdleTimeMillis", minEvictableIdleTimeMillis)
      .withQueryParam("connectionProperties", connectionProperties)
      .withQueryParam("initSQL", initSQL)
      .withQueryParam("jdbcInterceptors", jdbcInterceptors)
      .withQueryParam("validationInterval", validationInterval)
      .withQueryParam("logValidationErrors", logValidationErrors)
      .withQueryParam("datasource.svc.properties", ArrayValues(datasourceSvcProperties, MULTI))
      .withSuccessResponse[OrgApacheSlingDatasourceDataSourceFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param datasourceName 
   * @param datasourceSvcPropName 
   * @param datasourceJndiName 
   * @param jndiProperties 
   */
  def orgApacheSlingDatasourceJNDIDataSourceFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], datasourceName: Option[String] = None, datasourceSvcPropName: Option[String] = None, datasourceJndiName: Option[String] = None, jndiProperties: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("datasource.name", datasourceName)
      .withQueryParam("datasource.svc.prop.name", datasourceSvcPropName)
      .withQueryParam("datasource.jndi.name", datasourceJndiName)
      .withQueryParam("jndi.properties", ArrayValues(jndiProperties, MULTI))
      .withSuccessResponse[OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDiscoveryOakConfigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param connectorPingTimeout 
   * @param connectorPingInterval 
   * @param discoveryLiteCheckInterval 
   * @param clusterSyncServiceTimeout 
   * @param clusterSyncServiceInterval 
   * @param enableSyncToken 
   * @param minEventDelay 
   * @param socketConnectTimeout 
   * @param soTimeout 
   * @param topologyConnectorUrls 
   * @param topologyConnectorWhitelist 
   * @param autoStopLocalLoopEnabled 
   * @param gzipConnectorRequestsEnabled 
   * @param hmacEnabled 
   * @param enableEncryption 
   * @param sharedKey 
   * @param hmacSharedKeyTTL 
   * @param backoffStandbyFactor 
   * @param backoffStableFactor 
   */
  def orgApacheSlingDiscoveryOakConfig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], connectorPingTimeout: Option[Int] = None, connectorPingInterval: Option[Int] = None, discoveryLiteCheckInterval: Option[Int] = None, clusterSyncServiceTimeout: Option[Int] = None, clusterSyncServiceInterval: Option[Int] = None, enableSyncToken: Option[Boolean] = None, minEventDelay: Option[Int] = None, socketConnectTimeout: Option[Int] = None, soTimeout: Option[Int] = None, topologyConnectorUrls: Seq[String], topologyConnectorWhitelist: Seq[String], autoStopLocalLoopEnabled: Option[Boolean] = None, gzipConnectorRequestsEnabled: Option[Boolean] = None, hmacEnabled: Option[Boolean] = None, enableEncryption: Option[Boolean] = None, sharedKey: Option[String] = None, hmacSharedKeyTTL: Option[Int] = None, backoffStandbyFactor: Option[String] = None, backoffStableFactor: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.discovery.oak.Config", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("connectorPingTimeout", connectorPingTimeout)
      .withQueryParam("connectorPingInterval", connectorPingInterval)
      .withQueryParam("discoveryLiteCheckInterval", discoveryLiteCheckInterval)
      .withQueryParam("clusterSyncServiceTimeout", clusterSyncServiceTimeout)
      .withQueryParam("clusterSyncServiceInterval", clusterSyncServiceInterval)
      .withQueryParam("enableSyncToken", enableSyncToken)
      .withQueryParam("minEventDelay", minEventDelay)
      .withQueryParam("socketConnectTimeout", socketConnectTimeout)
      .withQueryParam("soTimeout", soTimeout)
      .withQueryParam("topologyConnectorUrls", ArrayValues(topologyConnectorUrls, MULTI))
      .withQueryParam("topologyConnectorWhitelist", ArrayValues(topologyConnectorWhitelist, MULTI))
      .withQueryParam("autoStopLocalLoopEnabled", autoStopLocalLoopEnabled)
      .withQueryParam("gzipConnectorRequestsEnabled", gzipConnectorRequestsEnabled)
      .withQueryParam("hmacEnabled", hmacEnabled)
      .withQueryParam("enableEncryption", enableEncryption)
      .withQueryParam("sharedKey", sharedKey)
      .withQueryParam("hmacSharedKeyTTL", hmacSharedKeyTTL)
      .withQueryParam("backoffStandbyFactor", backoffStandbyFactor)
      .withQueryParam("backoffStableFactor", backoffStableFactor)
      .withSuccessResponse[OrgApacheSlingDiscoveryOakConfigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcName 
   * @param hcTags 
   * @param hcMbeanName 
   */
  def orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcName: Option[String] = None, hcTags: Seq[String], hcMbeanName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.name", hcName)
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("hc.mbean.name", hcMbeanName)
      .withSuccessResponse[OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param title 
   * @param details 
   * @param enabled 
   * @param serviceName 
   * @param logLevel 
   * @param allowedRoots 
   * @param queueProcessingEnabled 
   * @param packageImporterEndpoints 
   * @param passiveQueues 
   * @param priorityQueues 
   * @param retryStrategy 
   * @param retryAttempts 
   * @param requestAuthorizationStrategyTarget 
   * @param transportSecretProviderTarget 
   * @param packageBuilderTarget 
   * @param triggersTarget 
   * @param queueProvider 
   * @param asyncDelivery 
   * @param httpConnTimeout 
   */
  def orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, title: Option[String] = None, details: Option[String] = None, enabled: Option[Boolean] = None, serviceName: Option[String] = None, logLevel: Option[String] = None, allowedRoots: Seq[String], queueProcessingEnabled: Option[Boolean] = None, packageImporterEndpoints: Seq[String], passiveQueues: Seq[String], priorityQueues: Seq[String], retryStrategy: Option[String] = None, retryAttempts: Option[Int] = None, requestAuthorizationStrategyTarget: Option[String] = None, transportSecretProviderTarget: Option[String] = None, packageBuilderTarget: Option[String] = None, triggersTarget: Option[String] = None, queueProvider: Option[String] = None, asyncDelivery: Option[Boolean] = None, httpConnTimeout: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("title", title)
      .withQueryParam("details", details)
      .withQueryParam("enabled", enabled)
      .withQueryParam("serviceName", serviceName)
      .withQueryParam("log.level", logLevel)
      .withQueryParam("allowed.roots", ArrayValues(allowedRoots, MULTI))
      .withQueryParam("queue.processing.enabled", queueProcessingEnabled)
      .withQueryParam("packageImporter.endpoints", ArrayValues(packageImporterEndpoints, MULTI))
      .withQueryParam("passiveQueues", ArrayValues(passiveQueues, MULTI))
      .withQueryParam("priorityQueues", ArrayValues(priorityQueues, MULTI))
      .withQueryParam("retry.strategy", retryStrategy)
      .withQueryParam("retry.attempts", retryAttempts)
      .withQueryParam("requestAuthorizationStrategy.target", requestAuthorizationStrategyTarget)
      .withQueryParam("transportSecretProvider.target", transportSecretProviderTarget)
      .withQueryParam("packageBuilder.target", packageBuilderTarget)
      .withQueryParam("triggers.target", triggersTarget)
      .withQueryParam("queue.provider", queueProvider)
      .withQueryParam("async.delivery", asyncDelivery)
      .withQueryParam("http.conn.timeout", httpConnTimeout)
      .withSuccessResponse[OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param jcrPrivilege 
   */
  def orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, jcrPrivilege: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("jcrPrivilege", jcrPrivilege)
      .withSuccessResponse[OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param title 
   * @param details 
   * @param enabled 
   * @param serviceName 
   * @param logLevel 
   * @param allowedRoots 
   * @param requestAuthorizationStrategyTarget 
   * @param queueProviderFactoryTarget 
   * @param packageBuilderTarget 
   * @param triggersTarget 
   * @param priorityQueues 
   */
  def orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, title: Option[String] = None, details: Option[String] = None, enabled: Option[Boolean] = None, serviceName: Option[String] = None, logLevel: Option[String] = None, allowedRoots: Seq[String], requestAuthorizationStrategyTarget: Option[String] = None, queueProviderFactoryTarget: Option[String] = None, packageBuilderTarget: Option[String] = None, triggersTarget: Option[String] = None, priorityQueues: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("title", title)
      .withQueryParam("details", details)
      .withQueryParam("enabled", enabled)
      .withQueryParam("serviceName", serviceName)
      .withQueryParam("log.level", logLevel)
      .withQueryParam("allowed.roots", ArrayValues(allowedRoots, MULTI))
      .withQueryParam("requestAuthorizationStrategy.target", requestAuthorizationStrategyTarget)
      .withQueryParam("queueProviderFactory.target", queueProviderFactoryTarget)
      .withQueryParam("packageBuilder.target", packageBuilderTarget)
      .withQueryParam("triggers.target", triggersTarget)
      .withQueryParam("priorityQueues", ArrayValues(priorityQueues, MULTI))
      .withSuccessResponse[OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param title 
   * @param details 
   * @param enabled 
   * @param serviceName 
   * @param logLevel 
   * @param queueProcessingEnabled 
   * @param packageExporterEndpoints 
   * @param pullItems 
   * @param httpConnTimeout 
   * @param requestAuthorizationStrategyTarget 
   * @param transportSecretProviderTarget 
   * @param packageBuilderTarget 
   * @param triggersTarget 
   */
  def orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, title: Option[String] = None, details: Option[String] = None, enabled: Option[Boolean] = None, serviceName: Option[String] = None, logLevel: Option[String] = None, queueProcessingEnabled: Option[Boolean] = None, packageExporterEndpoints: Seq[String], pullItems: Option[Int] = None, httpConnTimeout: Option[Int] = None, requestAuthorizationStrategyTarget: Option[String] = None, transportSecretProviderTarget: Option[String] = None, packageBuilderTarget: Option[String] = None, triggersTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("title", title)
      .withQueryParam("details", details)
      .withQueryParam("enabled", enabled)
      .withQueryParam("serviceName", serviceName)
      .withQueryParam("log.level", logLevel)
      .withQueryParam("queue.processing.enabled", queueProcessingEnabled)
      .withQueryParam("packageExporter.endpoints", ArrayValues(packageExporterEndpoints, MULTI))
      .withQueryParam("pull.items", pullItems)
      .withQueryParam("http.conn.timeout", httpConnTimeout)
      .withQueryParam("requestAuthorizationStrategy.target", requestAuthorizationStrategyTarget)
      .withQueryParam("transportSecretProvider.target", transportSecretProviderTarget)
      .withQueryParam("packageBuilder.target", packageBuilderTarget)
      .withQueryParam("triggers.target", triggersTarget)
      .withSuccessResponse[OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param title 
   * @param details 
   * @param enabled 
   * @param serviceName 
   * @param logLevel 
   * @param queueProcessingEnabled 
   * @param packageExporterTarget 
   * @param packageImporterTarget 
   * @param requestAuthorizationStrategyTarget 
   * @param triggersTarget 
   */
  def orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, title: Option[String] = None, details: Option[String] = None, enabled: Option[Boolean] = None, serviceName: Option[String] = None, logLevel: Option[String] = None, queueProcessingEnabled: Option[Boolean] = None, packageExporterTarget: Option[String] = None, packageImporterTarget: Option[String] = None, requestAuthorizationStrategyTarget: Option[String] = None, triggersTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("title", title)
      .withQueryParam("details", details)
      .withQueryParam("enabled", enabled)
      .withQueryParam("serviceName", serviceName)
      .withQueryParam("log.level", logLevel)
      .withQueryParam("queue.processing.enabled", queueProcessingEnabled)
      .withQueryParam("packageExporter.target", packageExporterTarget)
      .withQueryParam("packageImporter.target", packageImporterTarget)
      .withQueryParam("requestAuthorizationStrategy.target", requestAuthorizationStrategyTarget)
      .withQueryParam("triggers.target", triggersTarget)
      .withSuccessResponse[OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param title 
   * @param details 
   * @param enabled 
   * @param serviceName 
   * @param logLevel 
   * @param queueProcessingEnabled 
   * @param passiveQueues 
   * @param packageExporterEndpoints 
   * @param packageImporterEndpoints 
   * @param retryStrategy 
   * @param retryAttempts 
   * @param pullItems 
   * @param httpConnTimeout 
   * @param requestAuthorizationStrategyTarget 
   * @param transportSecretProviderTarget 
   * @param packageBuilderTarget 
   * @param triggersTarget 
   */
  def orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, title: Option[String] = None, details: Option[String] = None, enabled: Option[Boolean] = None, serviceName: Option[String] = None, logLevel: Option[String] = None, queueProcessingEnabled: Option[Boolean] = None, passiveQueues: Seq[String], packageExporterEndpoints: Seq[String], packageImporterEndpoints: Seq[String], retryStrategy: Option[String] = None, retryAttempts: Option[Int] = None, pullItems: Option[Int] = None, httpConnTimeout: Option[Int] = None, requestAuthorizationStrategyTarget: Option[String] = None, transportSecretProviderTarget: Option[String] = None, packageBuilderTarget: Option[String] = None, triggersTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("title", title)
      .withQueryParam("details", details)
      .withQueryParam("enabled", enabled)
      .withQueryParam("serviceName", serviceName)
      .withQueryParam("log.level", logLevel)
      .withQueryParam("queue.processing.enabled", queueProcessingEnabled)
      .withQueryParam("passiveQueues", ArrayValues(passiveQueues, MULTI))
      .withQueryParam("packageExporter.endpoints", ArrayValues(packageExporterEndpoints, MULTI))
      .withQueryParam("packageImporter.endpoints", ArrayValues(packageImporterEndpoints, MULTI))
      .withQueryParam("retry.strategy", retryStrategy)
      .withQueryParam("retry.attempts", retryAttempts)
      .withQueryParam("pull.items", pullItems)
      .withQueryParam("http.conn.timeout", httpConnTimeout)
      .withQueryParam("requestAuthorizationStrategy.target", requestAuthorizationStrategyTarget)
      .withQueryParam("transportSecretProvider.target", transportSecretProviderTarget)
      .withQueryParam("packageBuilder.target", packageBuilderTarget)
      .withQueryParam("triggers.target", triggersTarget)
      .withSuccessResponse[OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcName 
   * @param hcTags 
   * @param hcMbeanName 
   * @param numberOfRetriesAllowed 
   */
  def orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcName: Option[String] = None, hcTags: Seq[String], hcMbeanName: Option[String] = None, numberOfRetriesAllowed: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.name", hcName)
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("hc.mbean.name", hcMbeanName)
      .withQueryParam("numberOfRetriesAllowed", numberOfRetriesAllowed)
      .withSuccessResponse[OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param queue 
   * @param dropInvalidItems 
   * @param agentTarget 
   */
  def orgApacheSlingDistributionPackagingImplExporterAgentDistributio(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, queue: Option[String] = None, dropInvalidItems: Option[Boolean] = None, agentTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("queue", queue)
      .withQueryParam("drop.invalid.items", dropInvalidItems)
      .withQueryParam("agent.target", agentTarget)
      .withSuccessResponse[OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param packageBuilderTarget 
   */
  def orgApacheSlingDistributionPackagingImplExporterLocalDistributio(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, packageBuilderTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("packageBuilder.target", packageBuilderTarget)
      .withSuccessResponse[OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param endpoints 
   * @param pullItems 
   * @param packageBuilderTarget 
   * @param transportSecretProviderTarget 
   */
  def orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, endpoints: Seq[String], pullItems: Option[Int] = None, packageBuilderTarget: Option[String] = None, transportSecretProviderTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("endpoints", ArrayValues(endpoints, MULTI))
      .withQueryParam("pull.items", pullItems)
      .withQueryParam("packageBuilder.target", packageBuilderTarget)
      .withQueryParam("transportSecretProvider.target", transportSecretProviderTarget)
      .withSuccessResponse[OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param packageBuilderTarget 
   */
  def orgApacheSlingDistributionPackagingImplImporterLocalDistributio(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, packageBuilderTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("packageBuilder.target", packageBuilderTarget)
      .withSuccessResponse[OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param endpoints 
   * @param transportSecretProviderTarget 
   */
  def orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, endpoints: Seq[String], transportSecretProviderTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("endpoints", ArrayValues(endpoints, MULTI))
      .withQueryParam("transportSecretProvider.target", transportSecretProviderTarget)
      .withSuccessResponse[OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param serviceName 
   * @param path 
   * @param privilegeName 
   */
  def orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, serviceName: Option[String] = None, path: Option[String] = None, privilegeName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("service.name", serviceName)
      .withQueryParam("path", path)
      .withQueryParam("privilege.name", privilegeName)
      .withSuccessResponse[OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param providerRoots 
   * @param kind 
   */
  def orgApacheSlingDistributionResourcesImplDistributionConfiguration(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], providerRoots: Option[String] = None, kind: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("provider.roots", providerRoots)
      .withQueryParam("kind", kind)
      .withSuccessResponse[OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param providerRoots 
   * @param kind 
   */
  def orgApacheSlingDistributionResourcesImplDistributionServiceResour(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], providerRoots: Option[String] = None, kind: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("provider.roots", providerRoots)
      .withQueryParam("kind", kind)
      .withSuccessResponse[OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param `type` 
   * @param formatTarget 
   * @param tempFsFolder 
   * @param fileThreshold 
   * @param memoryUnit 
   * @param useOffHeapMemory 
   * @param digestAlgorithm 
   * @param monitoringQueueSize 
   * @param cleanupDelay 
   * @param packageFilters 
   * @param propertyFilters 
   */
  def orgApacheSlingDistributionSerializationImplDistributionPackageBu(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, `type`: Option[String] = None, formatTarget: Option[String] = None, tempFsFolder: Option[String] = None, fileThreshold: Option[Int] = None, memoryUnit: Option[String] = None, useOffHeapMemory: Option[Boolean] = None, digestAlgorithm: Option[String] = None, monitoringQueueSize: Option[Int] = None, cleanupDelay: Option[Int] = None, packageFilters: Seq[String], propertyFilters: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("type", `type`)
      .withQueryParam("format.target", formatTarget)
      .withQueryParam("tempFsFolder", tempFsFolder)
      .withQueryParam("fileThreshold", fileThreshold)
      .withQueryParam("memoryUnit", memoryUnit)
      .withQueryParam("useOffHeapMemory", useOffHeapMemory)
      .withQueryParam("digestAlgorithm", digestAlgorithm)
      .withQueryParam("monitoringQueueSize", monitoringQueueSize)
      .withQueryParam("cleanupDelay", cleanupDelay)
      .withQueryParam("package.filters", ArrayValues(packageFilters, MULTI))
      .withQueryParam("property.filters", ArrayValues(propertyFilters, MULTI))
      .withSuccessResponse[OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param `type` 
   * @param importMode 
   * @param aclHandling 
   * @param packageRoots 
   * @param packageFilters 
   * @param propertyFilters 
   * @param tempFsFolder 
   * @param useBinaryReferences 
   * @param autoSaveThreshold 
   * @param cleanupDelay 
   * @param fileThreshold 
   * @param mEGABYTES 
   * @param useOffHeapMemory 
   * @param digestAlgorithm 
   * @param monitoringQueueSize 
   * @param pathsMapping 
   * @param strictImport 
   */
  def orgApacheSlingDistributionSerializationImplVltVaultDistribution(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, `type`: Option[String] = None, importMode: Option[String] = None, aclHandling: Option[String] = None, packageRoots: Option[String] = None, packageFilters: Seq[String], propertyFilters: Seq[String], tempFsFolder: Option[String] = None, useBinaryReferences: Option[Boolean] = None, autoSaveThreshold: Option[Int] = None, cleanupDelay: Option[Int] = None, fileThreshold: Option[Int] = None, mEGABYTES: Option[String] = None, useOffHeapMemory: Option[Boolean] = None, digestAlgorithm: Option[String] = None, monitoringQueueSize: Option[Int] = None, pathsMapping: Seq[String], strictImport: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("type", `type`)
      .withQueryParam("importMode", importMode)
      .withQueryParam("aclHandling", aclHandling)
      .withQueryParam("package.roots", packageRoots)
      .withQueryParam("package.filters", ArrayValues(packageFilters, MULTI))
      .withQueryParam("property.filters", ArrayValues(propertyFilters, MULTI))
      .withQueryParam("tempFsFolder", tempFsFolder)
      .withQueryParam("useBinaryReferences", useBinaryReferences)
      .withQueryParam("autoSaveThreshold", autoSaveThreshold)
      .withQueryParam("cleanupDelay", cleanupDelay)
      .withQueryParam("fileThreshold", fileThreshold)
      .withQueryParam("MEGA_BYTES", mEGABYTES)
      .withQueryParam("useOffHeapMemory", useOffHeapMemory)
      .withQueryParam("digestAlgorithm", digestAlgorithm)
      .withQueryParam("monitoringQueueSize", monitoringQueueSize)
      .withQueryParam("pathsMapping", ArrayValues(pathsMapping, MULTI))
      .withQueryParam("strictImport", strictImport)
      .withSuccessResponse[OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param username 
   * @param password 
   */
  def orgApacheSlingDistributionTransportImplUserCredentialsDistributi(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, username: Option[String] = None, password: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("username", username)
      .withQueryParam("password", password)
      .withSuccessResponse[OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param path 
   */
  def orgApacheSlingDistributionTriggerImplDistributionEventDistribute(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, path: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("path", path)
      .withSuccessResponse[OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param path 
   * @param ignoredPathsPatterns 
   * @param serviceName 
   * @param deep 
   */
  def orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, path: Option[String] = None, ignoredPathsPatterns: Seq[String], serviceName: Option[String] = None, deep: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("path", path)
      .withQueryParam("ignoredPathsPatterns", ArrayValues(ignoredPathsPatterns, MULTI))
      .withQueryParam("serviceName", serviceName)
      .withQueryParam("deep", deep)
      .withSuccessResponse[OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param path 
   * @param serviceName 
   * @param nuggetsPath 
   */
  def orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, path: Option[String] = None, serviceName: Option[String] = None, nuggetsPath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("path", path)
      .withQueryParam("serviceName", serviceName)
      .withQueryParam("nuggetsPath", nuggetsPath)
      .withSuccessResponse[OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param endpoint 
   * @param transportSecretProviderTarget 
   */
  def orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, endpoint: Option[String] = None, transportSecretProviderTarget: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("endpoint", endpoint)
      .withQueryParam("transportSecretProvider.target", transportSecretProviderTarget)
      .withSuccessResponse[OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param path 
   */
  def orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, path: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("path", path)
      .withSuccessResponse[OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param path 
   * @param seconds 
   * @param serviceName 
   */
  def orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, path: Option[String] = None, seconds: Option[String] = None, serviceName: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("path", path)
      .withQueryParam("seconds", seconds)
      .withQueryParam("serviceName", serviceName)
      .withSuccessResponse[OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param osgiHttpWhiteboardContextSelect 
   * @param osgiHttpWhiteboardListener 
   * @param authSudoCookie 
   * @param authSudoParameter 
   * @param authAnnonymous 
   * @param slingAuthRequirements 
   * @param slingAuthAnonymousUser 
   * @param slingAuthAnonymousPassword 
   * @param authHttp 
   * @param authHttpRealm 
   * @param authUriSuffix 
   */
  def orgApacheSlingEngineImplAuthSlingAuthenticator(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], osgiHttpWhiteboardContextSelect: Option[String] = None, osgiHttpWhiteboardListener: Option[String] = None, authSudoCookie: Option[String] = None, authSudoParameter: Option[String] = None, authAnnonymous: Option[Boolean] = None, slingAuthRequirements: Seq[String], slingAuthAnonymousUser: Option[String] = None, slingAuthAnonymousPassword: Option[String] = None, authHttp: Option[String] = None, authHttpRealm: Option[String] = None, authUriSuffix: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("osgi.http.whiteboard.context.select", osgiHttpWhiteboardContextSelect)
      .withQueryParam("osgi.http.whiteboard.listener", osgiHttpWhiteboardListener)
      .withQueryParam("auth.sudo.cookie", authSudoCookie)
      .withQueryParam("auth.sudo.parameter", authSudoParameter)
      .withQueryParam("auth.annonymous", authAnnonymous)
      .withQueryParam("sling.auth.requirements", ArrayValues(slingAuthRequirements, MULTI))
      .withQueryParam("sling.auth.anonymous.user", slingAuthAnonymousUser)
      .withQueryParam("sling.auth.anonymous.password", slingAuthAnonymousPassword)
      .withQueryParam("auth.http", authHttp)
      .withQueryParam("auth.http.realm", authHttpRealm)
      .withQueryParam("auth.uri.suffix", ArrayValues(authUriSuffix, MULTI))
      .withSuccessResponse[OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param extensions 
   * @param minDurationMs 
   * @param maxDurationMs 
   * @param compactLogFormat 
   */
  def orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], extensions: Seq[String], minDurationMs: Option[Int] = None, maxDurationMs: Option[Int] = None, compactLogFormat: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("extensions", ArrayValues(extensions, MULTI))
      .withQueryParam("minDurationMs", minDurationMs)
      .withQueryParam("maxDurationMs", maxDurationMs)
      .withQueryParam("compactLogFormat", compactLogFormat)
      .withSuccessResponse[OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingEngineImplLogRequestLoggerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param requestLogOutput 
   * @param requestLogOutputtype 
   * @param requestLogEnabled 
   * @param accessLogOutput 
   * @param accessLogOutputtype 
   * @param accessLogEnabled 
   */
  def orgApacheSlingEngineImplLogRequestLogger(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], requestLogOutput: Option[String] = None, requestLogOutputtype: Option[Int] = None, requestLogEnabled: Option[Boolean] = None, accessLogOutput: Option[String] = None, accessLogOutputtype: Option[Int] = None, accessLogEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("request.log.output", requestLogOutput)
      .withQueryParam("request.log.outputtype", requestLogOutputtype)
      .withQueryParam("request.log.enabled", requestLogEnabled)
      .withQueryParam("access.log.output", accessLogOutput)
      .withQueryParam("access.log.outputtype", accessLogOutputtype)
      .withQueryParam("access.log.enabled", accessLogEnabled)
      .withSuccessResponse[OrgApacheSlingEngineImplLogRequestLoggerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingEngineImplLogRequestLoggerServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param requestLogServiceFormat 
   * @param requestLogServiceOutput 
   * @param requestLogServiceOutputtype 
   * @param requestLogServiceOnentry 
   */
  def orgApacheSlingEngineImplLogRequestLoggerService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], requestLogServiceFormat: Option[String] = None, requestLogServiceOutput: Option[String] = None, requestLogServiceOutputtype: Option[Int] = None, requestLogServiceOnentry: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("request.log.service.format", requestLogServiceFormat)
      .withQueryParam("request.log.service.output", requestLogServiceOutput)
      .withQueryParam("request.log.service.outputtype", requestLogServiceOutputtype)
      .withQueryParam("request.log.service.onentry", requestLogServiceOnentry)
      .withSuccessResponse[OrgApacheSlingEngineImplLogRequestLoggerServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingEngineImplSlingMainServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingMaxCalls 
   * @param slingMaxInclusions 
   * @param slingTraceAllow 
   * @param slingMaxRecordRequests 
   * @param slingStorePatternRequests 
   * @param slingServerinfo 
   * @param slingAdditionalResponseHeaders 
   */
  def orgApacheSlingEngineImplSlingMainServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingMaxCalls: Option[Int] = None, slingMaxInclusions: Option[Int] = None, slingTraceAllow: Option[Boolean] = None, slingMaxRecordRequests: Option[Int] = None, slingStorePatternRequests: Seq[String], slingServerinfo: Option[String] = None, slingAdditionalResponseHeaders: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.max.calls", slingMaxCalls)
      .withQueryParam("sling.max.inclusions", slingMaxInclusions)
      .withQueryParam("sling.trace.allow", slingTraceAllow)
      .withQueryParam("sling.max.record.requests", slingMaxRecordRequests)
      .withQueryParam("sling.store.pattern.requests", ArrayValues(slingStorePatternRequests, MULTI))
      .withQueryParam("sling.serverinfo", slingServerinfo)
      .withQueryParam("sling.additional.response.headers", ArrayValues(slingAdditionalResponseHeaders, MULTI))
      .withSuccessResponse[OrgApacheSlingEngineImplSlingMainServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingEngineParametersInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingDefaultParameterEncoding 
   * @param slingDefaultMaxParameters 
   * @param fileLocation 
   * @param fileThreshold 
   * @param fileMax 
   * @param requestMax 
   * @param slingDefaultParameterCheckForAdditionalContainerParameters 
   */
  def orgApacheSlingEngineParameters(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingDefaultParameterEncoding: Option[String] = None, slingDefaultMaxParameters: Option[Int] = None, fileLocation: Option[String] = None, fileThreshold: Option[Int] = None, fileMax: Option[Int] = None, requestMax: Option[Int] = None, slingDefaultParameterCheckForAdditionalContainerParameters: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.engine.parameters", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.default.parameter.encoding", slingDefaultParameterEncoding)
      .withQueryParam("sling.default.max.parameters", slingDefaultMaxParameters)
      .withQueryParam("file.location", fileLocation)
      .withQueryParam("file.threshold", fileThreshold)
      .withQueryParam("file.max", fileMax)
      .withQueryParam("request.max", requestMax)
      .withQueryParam("sling.default.parameter.checkForAdditionalContainerParameters", slingDefaultParameterCheckForAdditionalContainerParameters)
      .withSuccessResponse[OrgApacheSlingEngineParametersInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingEventImplEventingThreadPoolInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param minPoolSize 
   */
  def orgApacheSlingEventImplEventingThreadPool(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], minPoolSize: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("minPoolSize", minPoolSize)
      .withSuccessResponse[OrgApacheSlingEventImplEventingThreadPoolInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingEventImplJobsDefaultJobManagerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param queuePriority 
   * @param queueRetries 
   * @param queueRetrydelay 
   * @param queueMaxparallel 
   */
  def orgApacheSlingEventImplJobsDefaultJobManager(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], queuePriority: Option[String] = None, queueRetries: Option[Int] = None, queueRetrydelay: Option[Int] = None, queueMaxparallel: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("queue.priority", queuePriority)
      .withQueryParam("queue.retries", queueRetries)
      .withQueryParam("queue.retrydelay", queueRetrydelay)
      .withQueryParam("queue.maxparallel", queueMaxparallel)
      .withSuccessResponse[OrgApacheSlingEventImplJobsDefaultJobManagerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jobConsumermanagerDisableDistribution 
   * @param startupDelay 
   * @param cleanupPeriod 
   */
  def orgApacheSlingEventImplJobsJcrPersistenceHandler(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jobConsumermanagerDisableDistribution: Option[Boolean] = None, startupDelay: Option[Int] = None, cleanupPeriod: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("job.consumermanager.disableDistribution", jobConsumermanagerDisableDistribution)
      .withQueryParam("startup.delay", startupDelay)
      .withQueryParam("cleanup.period", cleanupPeriod)
      .withSuccessResponse[OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingEventImplJobsJobConsumerManagerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheSlingInstallerConfigurationPersist 
   * @param jobConsumermanagerWhitelist 
   * @param jobConsumermanagerBlacklist 
   */
  def orgApacheSlingEventImplJobsJobConsumerManager(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheSlingInstallerConfigurationPersist: Option[Boolean] = None, jobConsumermanagerWhitelist: Seq[String], jobConsumermanagerBlacklist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.sling.installer.configuration.persist", orgApacheSlingInstallerConfigurationPersist)
      .withQueryParam("job.consumermanager.whitelist", ArrayValues(jobConsumermanagerWhitelist, MULTI))
      .withQueryParam("job.consumermanager.blacklist", ArrayValues(jobConsumermanagerBlacklist, MULTI))
      .withSuccessResponse[OrgApacheSlingEventImplJobsJobConsumerManagerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingEventJobsQueueConfigurationInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param queueName 
   * @param queueTopics 
   * @param queueType 
   * @param queuePriority 
   * @param queueRetries 
   * @param queueRetrydelay 
   * @param queueMaxparallel 
   * @param queueKeepJobs 
   * @param queuePreferRunOnCreationInstance 
   * @param queueThreadPoolSize 
   * @param serviceRanking 
   */
  def orgApacheSlingEventJobsQueueConfiguration(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], queueName: Option[String] = None, queueTopics: Seq[String], queueType: Option[String] = None, queuePriority: Option[String] = None, queueRetries: Option[Int] = None, queueRetrydelay: Option[Int] = None, queueMaxparallel: Option[Double] = None, queueKeepJobs: Option[Boolean] = None, queuePreferRunOnCreationInstance: Option[Boolean] = None, queueThreadPoolSize: Option[Int] = None, serviceRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("queue.name", queueName)
      .withQueryParam("queue.topics", ArrayValues(queueTopics, MULTI))
      .withQueryParam("queue.type", queueType)
      .withQueryParam("queue.priority", queuePriority)
      .withQueryParam("queue.retries", queueRetries)
      .withQueryParam("queue.retrydelay", queueRetrydelay)
      .withQueryParam("queue.maxparallel", queueMaxparallel)
      .withQueryParam("queue.keepJobs", queueKeepJobs)
      .withQueryParam("queue.preferRunOnCreationInstance", queuePreferRunOnCreationInstance)
      .withQueryParam("queue.threadPoolSize", queueThreadPoolSize)
      .withQueryParam("service.ranking", serviceRanking)
      .withSuccessResponse[OrgApacheSlingEventJobsQueueConfigurationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param users 
   * @param groups 
   */
  def orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], users: Seq[String], groups: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("users", ArrayValues(users, MULTI))
      .withQueryParam("groups", ArrayValues(groups, MULTI))
      .withSuccessResponse[OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingFeatureflagsFeatureInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param description 
   * @param enabled 
   */
  def orgApacheSlingFeatureflagsFeature(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, description: Option[String] = None, enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.featureflags.Feature", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("description", description)
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[OrgApacheSlingFeatureflagsFeatureInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param name 
   * @param description 
   * @param enabled 
   */
  def orgApacheSlingFeatureflagsImplConfiguredFeature(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], name: Option[String] = None, description: Option[String] = None, enabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("name", name)
      .withQueryParam("description", description)
      .withQueryParam("enabled", enabled)
      .withSuccessResponse[OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingHapiImplHApiUtilImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheSlingHapiToolsResourcetype 
   * @param orgApacheSlingHapiToolsCollectionresourcetype 
   * @param orgApacheSlingHapiToolsSearchpaths 
   * @param orgApacheSlingHapiToolsExternalurl 
   * @param orgApacheSlingHapiToolsEnabled 
   */
  def orgApacheSlingHapiImplHApiUtilImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheSlingHapiToolsResourcetype: Option[String] = None, orgApacheSlingHapiToolsCollectionresourcetype: Option[String] = None, orgApacheSlingHapiToolsSearchpaths: Seq[String], orgApacheSlingHapiToolsExternalurl: Option[String] = None, orgApacheSlingHapiToolsEnabled: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.sling.hapi.tools.resourcetype", orgApacheSlingHapiToolsResourcetype)
      .withQueryParam("org.apache.sling.hapi.tools.collectionresourcetype", orgApacheSlingHapiToolsCollectionresourcetype)
      .withQueryParam("org.apache.sling.hapi.tools.searchpaths", ArrayValues(orgApacheSlingHapiToolsSearchpaths, MULTI))
      .withQueryParam("org.apache.sling.hapi.tools.externalurl", orgApacheSlingHapiToolsExternalurl)
      .withQueryParam("org.apache.sling.hapi.tools.enabled", orgApacheSlingHapiToolsEnabled)
      .withSuccessResponse[OrgApacheSlingHapiImplHApiUtilImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingHcCoreImplCompositeHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcName 
   * @param hcTags 
   * @param hcMbeanName 
   * @param filterTags 
   * @param filterCombineTagsWithOr 
   */
  def orgApacheSlingHcCoreImplCompositeHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcName: Option[String] = None, hcTags: Seq[String], hcMbeanName: Option[String] = None, filterTags: Seq[String], filterCombineTagsWithOr: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.name", hcName)
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("hc.mbean.name", hcMbeanName)
      .withQueryParam("filter.tags", ArrayValues(filterTags, MULTI))
      .withQueryParam("filter.combineTagsWithOr", filterCombineTagsWithOr)
      .withSuccessResponse[OrgApacheSlingHcCoreImplCompositeHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param timeoutInMs 
   * @param longRunningFutureThresholdForCriticalMs 
   * @param resultCacheTtlInMs 
   */
  def orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], timeoutInMs: Option[Int] = None, longRunningFutureThresholdForCriticalMs: Option[Int] = None, resultCacheTtlInMs: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("timeoutInMs", timeoutInMs)
      .withQueryParam("longRunningFutureThresholdForCriticalMs", longRunningFutureThresholdForCriticalMs)
      .withQueryParam("resultCacheTtlInMs", resultCacheTtlInMs)
      .withSuccessResponse[OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcName 
   * @param hcTags 
   * @param hcMbeanName 
   * @param mbeanName 
   * @param attributeName 
   * @param attributeValueConstraint 
   */
  def orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcName: Option[String] = None, hcTags: Seq[String], hcMbeanName: Option[String] = None, mbeanName: Option[String] = None, attributeName: Option[String] = None, attributeValueConstraint: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.name", hcName)
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("hc.mbean.name", hcMbeanName)
      .withQueryParam("mbean.name", mbeanName)
      .withQueryParam("attribute.name", attributeName)
      .withQueryParam("attribute.value.constraint", attributeValueConstraint)
      .withSuccessResponse[OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingHcCoreImplScriptableHealthCheckInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param hcName 
   * @param hcTags 
   * @param hcMbeanName 
   * @param expression 
   * @param languageExtension 
   */
  def orgApacheSlingHcCoreImplScriptableHealthCheck(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], hcName: Option[String] = None, hcTags: Seq[String], hcMbeanName: Option[String] = None, expression: Option[String] = None, languageExtension: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("hc.name", hcName)
      .withQueryParam("hc.tags", ArrayValues(hcTags, MULTI))
      .withQueryParam("hc.mbean.name", hcMbeanName)
      .withQueryParam("expression", expression)
      .withQueryParam("language.extension", languageExtension)
      .withSuccessResponse[OrgApacheSlingHcCoreImplScriptableHealthCheckInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param servletPath 
   * @param disabled 
   * @param corsAccessControlAllowOrigin 
   */
  def orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], servletPath: Option[String] = None, disabled: Option[Boolean] = None, corsAccessControlAllowOrigin: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("servletPath", servletPath)
      .withQueryParam("disabled", disabled)
      .withQueryParam("cors.accessControlAllowOrigin", corsAccessControlAllowOrigin)
      .withSuccessResponse[OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param totalWidth 
   * @param colWidthName 
   * @param colWidthResult 
   * @param colWidthTiming 
   */
  def orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], totalWidth: Option[Int] = None, colWidthName: Option[Int] = None, colWidthResult: Option[Int] = None, colWidthTiming: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("totalWidth", totalWidth)
      .withQueryParam("colWidthName", colWidthName)
      .withQueryParam("colWidthResult", colWidthResult)
      .withQueryParam("colWidthTiming", colWidthTiming)
      .withSuccessResponse[OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingI18nImplI18NFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param slingFilterScope 
   */
  def orgApacheSlingI18nImplI18NFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, slingFilterScope: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("sling.filter.scope", ArrayValues(slingFilterScope, MULTI))
      .withSuccessResponse[OrgApacheSlingI18nImplI18NFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingI18nImplJcrResourceBundleProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param localeDefault 
   * @param preloadBundles 
   * @param invalidationDelay 
   */
  def orgApacheSlingI18nImplJcrResourceBundleProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], localeDefault: Option[String] = None, preloadBundles: Option[Boolean] = None, invalidationDelay: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("locale.default", localeDefault)
      .withQueryParam("preload.bundles", preloadBundles)
      .withQueryParam("invalidation.delay", invalidationDelay)
      .withSuccessResponse[OrgApacheSlingI18nImplJcrResourceBundleProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param handlerSchemes 
   * @param slingJcrinstallFolderNameRegexp 
   * @param slingJcrinstallFolderMaxDepth 
   * @param slingJcrinstallSearchPath 
   * @param slingJcrinstallNewConfigPath 
   * @param slingJcrinstallSignalPath 
   * @param slingJcrinstallEnableWriteback 
   */
  def orgApacheSlingInstallerProviderJcrImplJcrInstaller(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], handlerSchemes: Seq[String], slingJcrinstallFolderNameRegexp: Option[String] = None, slingJcrinstallFolderMaxDepth: Option[Int] = None, slingJcrinstallSearchPath: Seq[String], slingJcrinstallNewConfigPath: Option[String] = None, slingJcrinstallSignalPath: Option[String] = None, slingJcrinstallEnableWriteback: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("handler.schemes", ArrayValues(handlerSchemes, MULTI))
      .withQueryParam("sling.jcrinstall.folder.name.regexp", slingJcrinstallFolderNameRegexp)
      .withQueryParam("sling.jcrinstall.folder.max.depth", slingJcrinstallFolderMaxDepth)
      .withQueryParam("sling.jcrinstall.search.path", ArrayValues(slingJcrinstallSearchPath, MULTI))
      .withQueryParam("sling.jcrinstall.new.config.path", slingJcrinstallNewConfigPath)
      .withQueryParam("sling.jcrinstall.signal.path", slingJcrinstallSignalPath)
      .withQueryParam("sling.jcrinstall.enable.writeback", slingJcrinstallEnableWriteback)
      .withSuccessResponse[OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param whitelistBypass 
   * @param whitelistBundlesRegexp 
   */
  def orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], whitelistBypass: Option[Boolean] = None, whitelistBundlesRegexp: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("whitelist.bypass", whitelistBypass)
      .withQueryParam("whitelist.bundles.regexp", whitelistBundlesRegexp)
      .withSuccessResponse[OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param whitelistName 
   * @param whitelistBundles 
   */
  def orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], whitelistName: Option[String] = None, whitelistBundles: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("whitelist.name", whitelistName)
      .withQueryParam("whitelist.bundles", ArrayValues(whitelistBundles, MULTI))
      .withSuccessResponse[OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param alias 
   * @param davCreateAbsoluteUri 
   * @param davProtectedhandlers 
   */
  def orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], alias: Option[String] = None, davCreateAbsoluteUri: Option[Boolean] = None, davProtectedhandlers: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("alias", alias)
      .withQueryParam("dav.create-absolute-uri", davCreateAbsoluteUri)
      .withQueryParam("dav.protectedhandlers", davProtectedhandlers)
      .withSuccessResponse[OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param javaNamingFactoryInitial 
   * @param javaNamingProviderUrl 
   */
  def orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], javaNamingFactoryInitial: Option[String] = None, javaNamingProviderUrl: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("java.naming.factory.initial", javaNamingFactoryInitial)
      .withQueryParam("java.naming.provider.url", javaNamingProviderUrl)
      .withSuccessResponse[OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param port 
   */
  def orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], port: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("port", port)
      .withSuccessResponse[OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param references 
   */
  def orgApacheSlingJcrRepoinitImplRepositoryInitializer(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], references: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("references", ArrayValues(references, MULTI))
      .withSuccessResponse[OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrRepoinitRepositoryInitializerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param references 
   * @param scripts 
   */
  def orgApacheSlingJcrRepoinitRepositoryInitializer(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], references: Seq[String], scripts: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("references", ArrayValues(references, MULTI))
      .withQueryParam("scripts", ArrayValues(scripts, MULTI))
      .withSuccessResponse[OrgApacheSlingJcrRepoinitRepositoryInitializerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param resourceResolverSearchpath 
   * @param resourceResolverManglenamespaces 
   * @param resourceResolverAllowDirect 
   * @param resourceResolverRequiredProviders 
   * @param resourceResolverRequiredProvidernames 
   * @param resourceResolverVirtual 
   * @param resourceResolverMapping 
   * @param resourceResolverMapLocation 
   * @param resourceResolverMapObservation 
   * @param resourceResolverDefaultVanityRedirectStatus 
   * @param resourceResolverEnableVanitypath 
   * @param resourceResolverVanitypathMaxEntries 
   * @param resourceResolverVanitypathMaxEntriesStartup 
   * @param resourceResolverVanitypathBloomfilterMaxBytes 
   * @param resourceResolverOptimizeAliasResolution 
   * @param resourceResolverVanitypathWhitelist 
   * @param resourceResolverVanitypathBlacklist 
   * @param resourceResolverVanityPrecedence 
   * @param resourceResolverProviderhandlingParanoid 
   * @param resourceResolverLogClosing 
   * @param resourceResolverLogUnclosed 
   */
  def orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], resourceResolverSearchpath: Seq[String], resourceResolverManglenamespaces: Option[Boolean] = None, resourceResolverAllowDirect: Option[Boolean] = None, resourceResolverRequiredProviders: Seq[String], resourceResolverRequiredProvidernames: Seq[String], resourceResolverVirtual: Seq[String], resourceResolverMapping: Seq[String], resourceResolverMapLocation: Option[String] = None, resourceResolverMapObservation: Seq[String], resourceResolverDefaultVanityRedirectStatus: Option[Int] = None, resourceResolverEnableVanitypath: Option[Boolean] = None, resourceResolverVanitypathMaxEntries: Option[Int] = None, resourceResolverVanitypathMaxEntriesStartup: Option[Boolean] = None, resourceResolverVanitypathBloomfilterMaxBytes: Option[Int] = None, resourceResolverOptimizeAliasResolution: Option[Boolean] = None, resourceResolverVanitypathWhitelist: Seq[String], resourceResolverVanitypathBlacklist: Seq[String], resourceResolverVanityPrecedence: Option[Boolean] = None, resourceResolverProviderhandlingParanoid: Option[Boolean] = None, resourceResolverLogClosing: Option[Boolean] = None, resourceResolverLogUnclosed: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("resource.resolver.searchpath", ArrayValues(resourceResolverSearchpath, MULTI))
      .withQueryParam("resource.resolver.manglenamespaces", resourceResolverManglenamespaces)
      .withQueryParam("resource.resolver.allowDirect", resourceResolverAllowDirect)
      .withQueryParam("resource.resolver.required.providers", ArrayValues(resourceResolverRequiredProviders, MULTI))
      .withQueryParam("resource.resolver.required.providernames", ArrayValues(resourceResolverRequiredProvidernames, MULTI))
      .withQueryParam("resource.resolver.virtual", ArrayValues(resourceResolverVirtual, MULTI))
      .withQueryParam("resource.resolver.mapping", ArrayValues(resourceResolverMapping, MULTI))
      .withQueryParam("resource.resolver.map.location", resourceResolverMapLocation)
      .withQueryParam("resource.resolver.map.observation", ArrayValues(resourceResolverMapObservation, MULTI))
      .withQueryParam("resource.resolver.default.vanity.redirect.status", resourceResolverDefaultVanityRedirectStatus)
      .withQueryParam("resource.resolver.enable.vanitypath", resourceResolverEnableVanitypath)
      .withQueryParam("resource.resolver.vanitypath.maxEntries", resourceResolverVanitypathMaxEntries)
      .withQueryParam("resource.resolver.vanitypath.maxEntries.startup", resourceResolverVanitypathMaxEntriesStartup)
      .withQueryParam("resource.resolver.vanitypath.bloomfilter.maxBytes", resourceResolverVanitypathBloomfilterMaxBytes)
      .withQueryParam("resource.resolver.optimize.alias.resolution", resourceResolverOptimizeAliasResolution)
      .withQueryParam("resource.resolver.vanitypath.whitelist", ArrayValues(resourceResolverVanitypathWhitelist, MULTI))
      .withQueryParam("resource.resolver.vanitypath.blacklist", ArrayValues(resourceResolverVanitypathBlacklist, MULTI))
      .withQueryParam("resource.resolver.vanity.precedence", resourceResolverVanityPrecedence)
      .withQueryParam("resource.resolver.providerhandling.paranoid", resourceResolverProviderhandlingParanoid)
      .withQueryParam("resource.resolver.log.closing", resourceResolverLogClosing)
      .withQueryParam("resource.resolver.log.unclosed", resourceResolverLogUnclosed)
      .withSuccessResponse[OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param allowOnlySystemUser 
   */
  def orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], allowOnlySystemUser: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("allow.only.system.user", allowOnlySystemUser)
      .withSuccessResponse[OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param path 
   * @param checkpathPrefix 
   * @param jcrPath 
   */
  def orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], path: Option[String] = None, checkpathPrefix: Option[String] = None, jcrPath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("path", path)
      .withQueryParam("checkpath.prefix", checkpathPrefix)
      .withQueryParam("jcrPath", jcrPath)
      .withSuccessResponse[OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param typeCollections 
   * @param typeNoncollections 
   * @param typeContent 
   */
  def orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, typeCollections: Option[String] = None, typeNoncollections: Option[String] = None, typeContent: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("type.collections", typeCollections)
      .withQueryParam("type.noncollections", typeNoncollections)
      .withQueryParam("type.content", typeContent)
      .withSuccessResponse[OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   */
  def orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withSuccessResponse[OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param davRoot 
   * @param davCreateAbsoluteUri 
   * @param davRealm 
   * @param collectionTypes 
   * @param filterPrefixes 
   * @param filterTypes 
   * @param filterUris 
   * @param typeCollections 
   * @param typeNoncollections 
   * @param typeContent 
   */
  def orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], davRoot: Option[String] = None, davCreateAbsoluteUri: Option[Boolean] = None, davRealm: Option[String] = None, collectionTypes: Seq[String], filterPrefixes: Seq[String], filterTypes: Option[String] = None, filterUris: Option[String] = None, typeCollections: Option[String] = None, typeNoncollections: Option[String] = None, typeContent: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("dav.root", davRoot)
      .withQueryParam("dav.create-absolute-uri", davCreateAbsoluteUri)
      .withQueryParam("dav.realm", davRealm)
      .withQueryParam("collection.types", ArrayValues(collectionTypes, MULTI))
      .withQueryParam("filter.prefixes", ArrayValues(filterPrefixes, MULTI))
      .withQueryParam("filter.types", filterTypes)
      .withQueryParam("filter.uris", filterUris)
      .withQueryParam("type.collections", typeCollections)
      .withQueryParam("type.noncollections", typeNoncollections)
      .withQueryParam("type.content", typeContent)
      .withSuccessResponse[OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingJmxProviderImplJMXResourceProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param providerRoots 
   */
  def orgApacheSlingJmxProviderImplJMXResourceProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], providerRoots: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("provider.roots", providerRoots)
      .withSuccessResponse[OrgApacheSlingJmxProviderImplJMXResourceProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingModelsImplModelAdapterFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param osgiHttpWhiteboardListener 
   * @param osgiHttpWhiteboardContextSelect 
   * @param maxRecursionDepth 
   * @param cleanupJobPeriod 
   */
  def orgApacheSlingModelsImplModelAdapterFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], osgiHttpWhiteboardListener: Option[String] = None, osgiHttpWhiteboardContextSelect: Option[String] = None, maxRecursionDepth: Option[Int] = None, cleanupJobPeriod: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("osgi.http.whiteboard.listener", osgiHttpWhiteboardListener)
      .withQueryParam("osgi.http.whiteboard.context.select", osgiHttpWhiteboardContextSelect)
      .withQueryParam("max.recursion.depth", maxRecursionDepth)
      .withQueryParam("cleanup.job.period", cleanupJobPeriod)
      .withSuccessResponse[OrgApacheSlingModelsImplModelAdapterFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param maxRecursionLevels 
   */
  def orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], maxRecursionLevels: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("max.recursion.levels", maxRecursionLevels)
      .withSuccessResponse[OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param felixInventoryPrinterName 
   * @param felixInventoryPrinterTitle 
   * @param path 
   */
  def orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], felixInventoryPrinterName: Option[String] = None, felixInventoryPrinterTitle: Option[String] = None, path: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("felix.inventory.printer.name", felixInventoryPrinterName)
      .withQueryParam("felix.inventory.printer.title", felixInventoryPrinterTitle)
      .withQueryParam("path", path)
      .withSuccessResponse[OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param mergeRoot 
   * @param mergeReadOnly 
   */
  def orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], mergeRoot: Option[String] = None, mergeReadOnly: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("merge.root", mergeRoot)
      .withQueryParam("merge.readOnly", mergeReadOnly)
      .withSuccessResponse[OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingResourcemergerPickerOverridingInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param mergeRoot 
   * @param mergeReadOnly 
   */
  def orgApacheSlingResourcemergerPickerOverriding(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], mergeRoot: Option[String] = None, mergeReadOnly: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("merge.root", mergeRoot)
      .withQueryParam("merge.readOnly", mergeReadOnly)
      .withSuccessResponse[OrgApacheSlingResourcemergerPickerOverridingInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingScriptingCoreImplScriptCacheImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheSlingScriptingCacheSize 
   * @param orgApacheSlingScriptingCacheAdditionalExtensions 
   */
  def orgApacheSlingScriptingCoreImplScriptCacheImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheSlingScriptingCacheSize: Option[Int] = None, orgApacheSlingScriptingCacheAdditionalExtensions: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.sling.scripting.cache.size", orgApacheSlingScriptingCacheSize)
      .withQueryParam("org.apache.sling.scripting.cache.additional_extensions", ArrayValues(orgApacheSlingScriptingCacheAdditionalExtensions, MULTI))
      .withSuccessResponse[OrgApacheSlingScriptingCoreImplScriptCacheImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param logStacktraceOnclose 
   */
  def orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], logStacktraceOnclose: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("log.stacktrace.onclose", logStacktraceOnclose)
      .withSuccessResponse[OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param javaClassdebuginfo 
   * @param javaJavaEncoding 
   * @param javaCompilerSourceVM 
   * @param javaCompilerTargetVM 
   */
  def orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], javaClassdebuginfo: Option[Boolean] = None, javaJavaEncoding: Option[String] = None, javaCompilerSourceVM: Option[String] = None, javaCompilerTargetVM: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("java.classdebuginfo", javaClassdebuginfo)
      .withQueryParam("java.javaEncoding", javaJavaEncoding)
      .withQueryParam("java.compilerSourceVM", javaCompilerSourceVM)
      .withQueryParam("java.compilerTargetVM", javaCompilerTargetVM)
      .withSuccessResponse[OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheSlingScriptingJavascriptRhinoOptLevel 
   */
  def orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheSlingScriptingJavascriptRhinoOptLevel: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.sling.scripting.javascript.rhino.optLevel", orgApacheSlingScriptingJavascriptRhinoOptLevel)
      .withSuccessResponse[OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param jasperCompilerTargetVM 
   * @param jasperCompilerSourceVM 
   * @param jasperClassdebuginfo 
   * @param jasperEnablePooling 
   * @param jasperIeClassId 
   * @param jasperGenStringAsCharArray 
   * @param jasperKeepgenerated 
   * @param jasperMappedfile 
   * @param jasperTrimSpaces 
   * @param jasperDisplaySourceFragments 
   * @param defaultIsSession 
   */
  def orgApacheSlingScriptingJspJspScriptEngineFactory(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], jasperCompilerTargetVM: Option[String] = None, jasperCompilerSourceVM: Option[String] = None, jasperClassdebuginfo: Option[Boolean] = None, jasperEnablePooling: Option[Boolean] = None, jasperIeClassId: Option[String] = None, jasperGenStringAsCharArray: Option[Boolean] = None, jasperKeepgenerated: Option[Boolean] = None, jasperMappedfile: Option[Boolean] = None, jasperTrimSpaces: Option[Boolean] = None, jasperDisplaySourceFragments: Option[Boolean] = None, defaultIsSession: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("jasper.compilerTargetVM", jasperCompilerTargetVM)
      .withQueryParam("jasper.compilerSourceVM", jasperCompilerSourceVM)
      .withQueryParam("jasper.classdebuginfo", jasperClassdebuginfo)
      .withQueryParam("jasper.enablePooling", jasperEnablePooling)
      .withQueryParam("jasper.ieClassId", jasperIeClassId)
      .withQueryParam("jasper.genStringAsCharArray", jasperGenStringAsCharArray)
      .withQueryParam("jasper.keepgenerated", jasperKeepgenerated)
      .withQueryParam("jasper.mappedfile", jasperMappedfile)
      .withQueryParam("jasper.trimSpaces", jasperTrimSpaces)
      .withQueryParam("jasper.displaySourceFragments", jasperDisplaySourceFragments)
      .withQueryParam("default.is.session", defaultIsSession)
      .withSuccessResponse[OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param orgApacheSlingScriptingSightlyJsBindings 
   */
  def orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], orgApacheSlingScriptingSightlyJsBindings: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("org.apache.sling.scripting.sightly.js.bindings", ArrayValues(orgApacheSlingScriptingSightlyJsBindings, MULTI))
      .withSuccessResponse[OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingSecurityImplContentDispositionFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingContentDispositionPaths 
   * @param slingContentDispositionExcludedPaths 
   * @param slingContentDispositionAllPaths 
   */
  def orgApacheSlingSecurityImplContentDispositionFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingContentDispositionPaths: Seq[String], slingContentDispositionExcludedPaths: Seq[String], slingContentDispositionAllPaths: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.content.disposition.paths", ArrayValues(slingContentDispositionPaths, MULTI))
      .withQueryParam("sling.content.disposition.excluded.paths", ArrayValues(slingContentDispositionExcludedPaths, MULTI))
      .withQueryParam("sling.content.disposition.all.paths", slingContentDispositionAllPaths)
      .withSuccessResponse[OrgApacheSlingSecurityImplContentDispositionFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingSecurityImplReferrerFilterInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param allowEmpty 
   * @param allowHosts 
   * @param allowHostsRegexp 
   * @param filterMethods 
   * @param excludeAgentsRegexp 
   */
  def orgApacheSlingSecurityImplReferrerFilter(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], allowEmpty: Option[Boolean] = None, allowHosts: Seq[String], allowHostsRegexp: Seq[String], filterMethods: Seq[String], excludeAgentsRegexp: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("allow.empty", allowEmpty)
      .withQueryParam("allow.hosts", ArrayValues(allowHosts, MULTI))
      .withQueryParam("allow.hosts.regexp", ArrayValues(allowHostsRegexp, MULTI))
      .withQueryParam("filter.methods", ArrayValues(filterMethods, MULTI))
      .withQueryParam("exclude.agents.regexp", ArrayValues(excludeAgentsRegexp, MULTI))
      .withSuccessResponse[OrgApacheSlingSecurityImplReferrerFilterInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param userMapping 
   * @param userDefault 
   * @param userEnableDefaultMapping 
   * @param requireValidation 
   */
  def orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], userMapping: Seq[String], userDefault: Option[String] = None, userEnableDefaultMapping: Option[Boolean] = None, requireValidation: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("user.mapping", ArrayValues(userMapping, MULTI))
      .withQueryParam("user.default", userDefault)
      .withQueryParam("user.enable.default.mapping", userEnableDefaultMapping)
      .withQueryParam("require.validation", requireValidation)
      .withSuccessResponse[OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param serviceRanking 
   * @param userMapping 
   */
  def orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], serviceRanking: Option[Int] = None, userMapping: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("user.mapping", ArrayValues(userMapping, MULTI))
      .withSuccessResponse[OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingServletsGetDefaultGetServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param aliases 
   * @param index 
   * @param indexFiles 
   * @param enableHtml 
   * @param enableJson 
   * @param enableTxt 
   * @param enableXml 
   * @param jsonMaximumresults 
   * @param ecmaSuport 
   */
  def orgApacheSlingServletsGetDefaultGetServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], aliases: Seq[String], index: Option[Boolean] = None, indexFiles: Seq[String], enableHtml: Option[Boolean] = None, enableJson: Option[Boolean] = None, enableTxt: Option[Boolean] = None, enableXml: Option[Boolean] = None, jsonMaximumresults: Option[Int] = None, ecmaSuport: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("aliases", ArrayValues(aliases, MULTI))
      .withQueryParam("index", index)
      .withQueryParam("index.files", ArrayValues(indexFiles, MULTI))
      .withQueryParam("enable.html", enableHtml)
      .withQueryParam("enable.json", enableJson)
      .withQueryParam("enable.txt", enableTxt)
      .withQueryParam("enable.xml", enableXml)
      .withQueryParam("json.maximumresults", jsonMaximumresults)
      .withQueryParam("ecmaSuport", ecmaSuport)
      .withSuccessResponse[OrgApacheSlingServletsGetDefaultGetServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingServletSelectors 
   * @param ecmaSuport 
   */
  def orgApacheSlingServletsGetImplVersionVersionInfoServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingServletSelectors: Seq[String], ecmaSuport: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.servlet.selectors", ArrayValues(slingServletSelectors, MULTI))
      .withQueryParam("ecmaSuport", ecmaSuport)
      .withSuccessResponse[OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param schedulerExpression 
   * @param schedulerConcurrent 
   * @param chunkCleanupAge 
   */
  def orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], schedulerExpression: Option[String] = None, schedulerConcurrent: Option[Boolean] = None, chunkCleanupAge: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("scheduler.expression", schedulerExpression)
      .withQueryParam("scheduler.concurrent", schedulerConcurrent)
      .withQueryParam("chunk.cleanup.age", chunkCleanupAge)
      .withSuccessResponse[OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingServletsPostImplSlingPostServletInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param servletPostDateFormats 
   * @param servletPostNodeNameHints 
   * @param servletPostNodeNameMaxLength 
   * @param servletPostCheckinNewVersionableNodes 
   * @param servletPostAutoCheckout 
   * @param servletPostAutoCheckin 
   * @param servletPostIgnorePattern 
   */
  def orgApacheSlingServletsPostImplSlingPostServlet(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], servletPostDateFormats: Seq[String], servletPostNodeNameHints: Seq[String], servletPostNodeNameMaxLength: Option[Int] = None, servletPostCheckinNewVersionableNodes: Option[Boolean] = None, servletPostAutoCheckout: Option[Boolean] = None, servletPostAutoCheckin: Option[Boolean] = None, servletPostIgnorePattern: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("servlet.post.dateFormats", ArrayValues(servletPostDateFormats, MULTI))
      .withQueryParam("servlet.post.nodeNameHints", ArrayValues(servletPostNodeNameHints, MULTI))
      .withQueryParam("servlet.post.nodeNameMaxLength", servletPostNodeNameMaxLength)
      .withQueryParam("servlet.post.checkinNewVersionableNodes", servletPostCheckinNewVersionableNodes)
      .withQueryParam("servlet.post.autoCheckout", servletPostAutoCheckout)
      .withQueryParam("servlet.post.autoCheckin", servletPostAutoCheckin)
      .withQueryParam("servlet.post.ignorePattern", servletPostIgnorePattern)
      .withSuccessResponse[OrgApacheSlingServletsPostImplSlingPostServletInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingServletsResolverSlingServletResolverInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param servletresolverServletRoot 
   * @param servletresolverCacheSize 
   * @param servletresolverPaths 
   * @param servletresolverDefaultExtensions 
   */
  def orgApacheSlingServletsResolverSlingServletResolver(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], servletresolverServletRoot: Option[String] = None, servletresolverCacheSize: Option[Int] = None, servletresolverPaths: Seq[String], servletresolverDefaultExtensions: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("servletresolver.servletRoot", servletresolverServletRoot)
      .withQueryParam("servletresolver.cacheSize", servletresolverCacheSize)
      .withQueryParam("servletresolver.paths", ArrayValues(servletresolverPaths, MULTI))
      .withQueryParam("servletresolver.defaultExtensions", ArrayValues(servletresolverDefaultExtensions, MULTI))
      .withSuccessResponse[OrgApacheSlingServletsResolverSlingServletResolverInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param slingName 
   * @param slingDescription 
   */
  def orgApacheSlingSettingsImplSlingSettingsServiceImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], slingName: Option[String] = None, slingDescription: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("sling.name", slingName)
      .withQueryParam("sling.description", slingDescription)
      .withSuccessResponse[OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingStartupfilterImplStartupFilterImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param activeByDefault 
   * @param defaultMessage 
   */
  def orgApacheSlingStartupfilterImplStartupFilterImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], activeByDefault: Option[Boolean] = None, defaultMessage: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("active.by.default", activeByDefault)
      .withQueryParam("default.message", defaultMessage)
      .withSuccessResponse[OrgApacheSlingStartupfilterImplStartupFilterImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingTenantInternalTenantProviderImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param tenantRoot 
   * @param tenantPathMatcher 
   */
  def orgApacheSlingTenantInternalTenantProviderImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], tenantRoot: Option[String] = None, tenantPathMatcher: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("tenant.root", tenantRoot)
      .withQueryParam("tenant.path.matcher", ArrayValues(tenantPathMatcher, MULTI))
      .withSuccessResponse[OrgApacheSlingTenantInternalTenantProviderImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingTracerInternalLogTracerInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param tracerSets 
   * @param enabled 
   * @param servletEnabled 
   * @param recordingCacheSizeInMB 
   * @param recordingCacheDurationInSecs 
   * @param recordingCompressionEnabled 
   * @param gzipResponse 
   */
  def orgApacheSlingTracerInternalLogTracer(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], tracerSets: Seq[String], enabled: Option[Boolean] = None, servletEnabled: Option[Boolean] = None, recordingCacheSizeInMB: Option[Int] = None, recordingCacheDurationInSecs: Option[Int] = None, recordingCompressionEnabled: Option[Boolean] = None, gzipResponse: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("tracerSets", ArrayValues(tracerSets, MULTI))
      .withQueryParam("enabled", enabled)
      .withQueryParam("servletEnabled", servletEnabled)
      .withQueryParam("recordingCacheSizeInMB", recordingCacheSizeInMB)
      .withQueryParam("recordingCacheDurationInSecs", recordingCacheDurationInSecs)
      .withQueryParam("recordingCompressionEnabled", recordingCompressionEnabled)
      .withQueryParam("gzipResponse", gzipResponse)
      .withSuccessResponse[OrgApacheSlingTracerInternalLogTracerInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
        /**
   * Expected answers:
   *   code 200 : OrgApacheSlingXssImplXSSFilterImplInfo (Successfully retrieved configuration parameters)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param propertylist 
   * @param policyPath 
   */
  def orgApacheSlingXssImplXSSFilterImpl(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, propertylist: Seq[String], policyPath: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withQueryParam("policyPath", policyPath)
      .withSuccessResponse[OrgApacheSlingXssImplXSSFilterImplInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
      

}

