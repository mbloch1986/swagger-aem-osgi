/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
  #[serde(rename = "name")]
  name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "type")]
  _type: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "format.target")]
  format_target: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "tempFsFolder")]
  temp_fs_folder: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "fileThreshold")]
  file_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "memoryUnit")]
  memory_unit: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "useOffHeapMemory")]
  use_off_heap_memory: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "digestAlgorithm")]
  digest_algorithm: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "monitoringQueueSize")]
  monitoring_queue_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cleanupDelay")]
  cleanup_delay: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "package.filters")]
  package_filters: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "property.filters")]
  property_filters: Option<::models::ConfigNodePropertyArray>
}

impl OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
  pub fn new() -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
      name: None,
      _type: None,
      format_target: None,
      temp_fs_folder: None,
      file_threshold: None,
      memory_unit: None,
      use_off_heap_memory: None,
      digest_algorithm: None,
      monitoring_queue_size: None,
      cleanup_delay: None,
      package_filters: None,
      property_filters: None
    }
  }

  pub fn set_name(&mut self, name: ::models::ConfigNodePropertyString) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set__type(&mut self, _type: ::models::ConfigNodePropertyDropDown) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_format_target(&mut self, format_target: ::models::ConfigNodePropertyString) {
    self.format_target = Some(format_target);
  }

  pub fn with_format_target(mut self, format_target: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self.format_target = Some(format_target);
    self
  }

  pub fn format_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.format_target.as_ref()
  }

  pub fn reset_format_target(&mut self) {
    self.format_target = None;
  }

  pub fn set_temp_fs_folder(&mut self, temp_fs_folder: ::models::ConfigNodePropertyString) {
    self.temp_fs_folder = Some(temp_fs_folder);
  }

  pub fn with_temp_fs_folder(mut self, temp_fs_folder: ::models::ConfigNodePropertyString) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self.temp_fs_folder = Some(temp_fs_folder);
    self
  }

  pub fn temp_fs_folder(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.temp_fs_folder.as_ref()
  }

  pub fn reset_temp_fs_folder(&mut self) {
    self.temp_fs_folder = None;
  }

  pub fn set_file_threshold(&mut self, file_threshold: ::models::ConfigNodePropertyInteger) {
    self.file_threshold = Some(file_threshold);
  }

  pub fn with_file_threshold(mut self, file_threshold: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self.file_threshold = Some(file_threshold);
    self
  }

  pub fn file_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.file_threshold.as_ref()
  }

  pub fn reset_file_threshold(&mut self) {
    self.file_threshold = None;
  }

  pub fn set_memory_unit(&mut self, memory_unit: ::models::ConfigNodePropertyDropDown) {
    self.memory_unit = Some(memory_unit);
  }

  pub fn with_memory_unit(mut self, memory_unit: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self.memory_unit = Some(memory_unit);
    self
  }

  pub fn memory_unit(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.memory_unit.as_ref()
  }

  pub fn reset_memory_unit(&mut self) {
    self.memory_unit = None;
  }

  pub fn set_use_off_heap_memory(&mut self, use_off_heap_memory: ::models::ConfigNodePropertyBoolean) {
    self.use_off_heap_memory = Some(use_off_heap_memory);
  }

  pub fn with_use_off_heap_memory(mut self, use_off_heap_memory: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self.use_off_heap_memory = Some(use_off_heap_memory);
    self
  }

  pub fn use_off_heap_memory(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.use_off_heap_memory.as_ref()
  }

  pub fn reset_use_off_heap_memory(&mut self) {
    self.use_off_heap_memory = None;
  }

  pub fn set_digest_algorithm(&mut self, digest_algorithm: ::models::ConfigNodePropertyDropDown) {
    self.digest_algorithm = Some(digest_algorithm);
  }

  pub fn with_digest_algorithm(mut self, digest_algorithm: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self.digest_algorithm = Some(digest_algorithm);
    self
  }

  pub fn digest_algorithm(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.digest_algorithm.as_ref()
  }

  pub fn reset_digest_algorithm(&mut self) {
    self.digest_algorithm = None;
  }

  pub fn set_monitoring_queue_size(&mut self, monitoring_queue_size: ::models::ConfigNodePropertyInteger) {
    self.monitoring_queue_size = Some(monitoring_queue_size);
  }

  pub fn with_monitoring_queue_size(mut self, monitoring_queue_size: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self.monitoring_queue_size = Some(monitoring_queue_size);
    self
  }

  pub fn monitoring_queue_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.monitoring_queue_size.as_ref()
  }

  pub fn reset_monitoring_queue_size(&mut self) {
    self.monitoring_queue_size = None;
  }

  pub fn set_cleanup_delay(&mut self, cleanup_delay: ::models::ConfigNodePropertyInteger) {
    self.cleanup_delay = Some(cleanup_delay);
  }

  pub fn with_cleanup_delay(mut self, cleanup_delay: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self.cleanup_delay = Some(cleanup_delay);
    self
  }

  pub fn cleanup_delay(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cleanup_delay.as_ref()
  }

  pub fn reset_cleanup_delay(&mut self) {
    self.cleanup_delay = None;
  }

  pub fn set_package_filters(&mut self, package_filters: ::models::ConfigNodePropertyArray) {
    self.package_filters = Some(package_filters);
  }

  pub fn with_package_filters(mut self, package_filters: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self.package_filters = Some(package_filters);
    self
  }

  pub fn package_filters(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.package_filters.as_ref()
  }

  pub fn reset_package_filters(&mut self) {
    self.package_filters = None;
  }

  pub fn set_property_filters(&mut self, property_filters: ::models::ConfigNodePropertyArray) {
    self.property_filters = Some(property_filters);
  }

  pub fn with_property_filters(mut self, property_filters: ::models::ConfigNodePropertyArray) -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    self.property_filters = Some(property_filters);
    self
  }

  pub fn property_filters(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.property_filters.as_ref()
  }

  pub fn reset_property_filters(&mut self) {
    self.property_filters = None;
  }

}



