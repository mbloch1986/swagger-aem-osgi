//
// ConfigmgrAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class ConfigmgrAPI {
    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter showPlaceholder: (query)  (optional)
     - parameter maximumCacheEntries: (query)  (optional)
     - parameter afScriptingCompatversion: (query)  (optional)
     - parameter makeFileNameUnique: (query)  (optional)
     - parameter generatingCompliantData: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, showPlaceholder: Bool? = nil, maximumCacheEntries: Int? = nil, afScriptingCompatversion: String? = nil, makeFileNameUnique: Bool? = nil, generatingCompliantData: Bool? = nil, completion: @escaping ((_ data: AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo?,_ error: Error?) -> Void)) {
        adaptiveFormAndInteractiveCommunicationWebChannelConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, showPlaceholder: showPlaceholder, maximumCacheEntries: maximumCacheEntries, afScriptingCompatversion: afScriptingCompatversion, makeFileNameUnique: makeFileNameUnique, generatingCompliantData: generatingCompliantData).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter showPlaceholder: (query)  (optional)
     - parameter maximumCacheEntries: (query)  (optional)
     - parameter afScriptingCompatversion: (query)  (optional)
     - parameter makeFileNameUnique: (query)  (optional)
     - parameter generatingCompliantData: (query)  (optional)
     - returns: RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo> 
     */
    open class func adaptiveFormAndInteractiveCommunicationWebChannelConfigurationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, showPlaceholder: Bool? = nil, maximumCacheEntries: Int? = nil, afScriptingCompatversion: String? = nil, makeFileNameUnique: Bool? = nil, generatingCompliantData: Bool? = nil) -> RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo> {
        let path = "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "showPlaceholder": showPlaceholder, 
            "maximumCacheEntries": maximumCacheEntries?.encodeToJSON(), 
            "af.scripting.compatversion": afScriptingCompatversion, 
            "makeFileNameUnique": makeFileNameUnique, 
            "generatingCompliantData": generatingCompliantData
        ])

        let requestBuilder: RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fontList: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fontList: [String]? = nil, completion: @escaping ((_ data: AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo?,_ error: Error?) -> Void)) {
        adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fontList: fontList).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fontList: (query)  (optional)
     - returns: RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo> 
     */
    open class func adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fontList: [String]? = nil) -> RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo> {
        let path = "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fontList": fontList
        ])

        let requestBuilder: RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsComponentQueryCacheSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func analyticsComponentQueryCacheService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsComponentQueryCacheSize: Int? = nil, completion: @escaping ((_ data: AnalyticsComponentQueryCacheServiceInfo?,_ error: Error?) -> Void)) {
        analyticsComponentQueryCacheServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsComponentQueryCacheSize: cqAnalyticsComponentQueryCacheSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/Analytics Component Query Cache Service
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsComponentQueryCacheSize: (query)  (optional)
     - returns: RequestBuilder<AnalyticsComponentQueryCacheServiceInfo> 
     */
    open class func analyticsComponentQueryCacheServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsComponentQueryCacheSize: Int? = nil) -> RequestBuilder<AnalyticsComponentQueryCacheServiceInfo> {
        let path = "/system/console/configMgr/Analytics Component Query Cache Service"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.analytics.component.query.cache.size": cqAnalyticsComponentQueryCacheSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AnalyticsComponentQueryCacheServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter styleString: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apacheSlingHealthCheckResultHTMLSerializer(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, styleString: String? = nil, completion: @escaping ((_ data: ApacheSlingHealthCheckResultHTMLSerializerInfo?,_ error: Error?) -> Void)) {
        apacheSlingHealthCheckResultHTMLSerializerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, styleString: styleString).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/Apache Sling Health Check Result HTML Serializer
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter styleString: (query)  (optional)
     - returns: RequestBuilder<ApacheSlingHealthCheckResultHTMLSerializerInfo> 
     */
    open class func apacheSlingHealthCheckResultHTMLSerializerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, styleString: String? = nil) -> RequestBuilder<ApacheSlingHealthCheckResultHTMLSerializerInfo> {
        let path = "/system/console/configMgr/Apache Sling Health Check Result HTML Serializer"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "styleString": styleString
        ])

        let requestBuilder: RequestBuilder<ApacheSlingHealthCheckResultHTMLSerializerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formsManagerConfigIncludeOOTBTemplates: (query)  (optional)
     - parameter formsManagerConfigIncludeDeprecatedTemplates: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formsManagerConfigIncludeOOTBTemplates: Bool? = nil, formsManagerConfigIncludeDeprecatedTemplates: Bool? = nil, completion: @escaping ((_ data: ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo?,_ error: Error?) -> Void)) {
        comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, formsManagerConfigIncludeOOTBTemplates: formsManagerConfigIncludeOOTBTemplates, formsManagerConfigIncludeDeprecatedTemplates: formsManagerConfigIncludeDeprecatedTemplates).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formsManagerConfigIncludeOOTBTemplates: (query)  (optional)
     - parameter formsManagerConfigIncludeDeprecatedTemplates: (query)  (optional)
     - returns: RequestBuilder<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo> 
     */
    open class func comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formsManagerConfigIncludeOOTBTemplates: Bool? = nil, formsManagerConfigIncludeDeprecatedTemplates: Bool? = nil) -> RequestBuilder<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "formsManagerConfig.includeOOTBTemplates": formsManagerConfigIncludeOOTBTemplates, 
            "formsManagerConfig.includeDeprecatedTemplates": formsManagerConfigIncludeDeprecatedTemplates
        ])

        let requestBuilder: RequestBuilder<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isTransactionRecordingEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeAemTransactionCoreImplTransactionRecorder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isTransactionRecordingEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeAemTransactionCoreImplTransactionRecorderInfo?,_ error: Error?) -> Void)) {
        comAdobeAemTransactionCoreImplTransactionRecorderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isTransactionRecordingEnabled: isTransactionRecordingEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isTransactionRecordingEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeAemTransactionCoreImplTransactionRecorderInfo> 
     */
    open class func comAdobeAemTransactionCoreImplTransactionRecorderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isTransactionRecordingEnabled: Bool? = nil) -> RequestBuilder<ComAdobeAemTransactionCoreImplTransactionRecorderInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "isTransactionRecordingEnabled": isTransactionRecordingEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeAemTransactionCoreImplTransactionRecorderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, completion: @escaping ((_ data: ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo?,_ error: Error?) -> Void)) {
        comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - returns: RequestBuilder<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo> 
     */
    open class func comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil) -> RequestBuilder<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.name": hcName, 
            "hc.tags": hcTags, 
            "hc.mbean.name": hcMbeanName
        ])

        let requestBuilder: RequestBuilder<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, completion: @escaping ((_ data: ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo?,_ error: Error?) -> Void)) {
        comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - returns: RequestBuilder<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo> 
     */
    open class func comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil) -> RequestBuilder<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.name": hcName, 
            "hc.tags": hcTags, 
            "hc.mbean.name": hcMbeanName
        ])

        let requestBuilder: RequestBuilder<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter preUpgradeMaintenanceTasks: (query)  (optional)
     - parameter preUpgradeHcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, preUpgradeMaintenanceTasks: [String]? = nil, preUpgradeHcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo?,_ error: Error?) -> Void)) {
        comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, preUpgradeMaintenanceTasks: preUpgradeMaintenanceTasks, preUpgradeHcTags: preUpgradeHcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter preUpgradeMaintenanceTasks: (query)  (optional)
     - parameter preUpgradeHcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo> 
     */
    open class func comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, preUpgradeMaintenanceTasks: [String]? = nil, preUpgradeHcTags: [String]? = nil) -> RequestBuilder<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "pre-upgrade.maintenance.tasks": preUpgradeMaintenanceTasks, 
            "pre-upgrade.hc.tags": preUpgradeHcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rootPath: (query)  (optional)
     - parameter fixInconsistencies: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rootPath: String? = nil, fixInconsistencies: Bool? = nil, completion: @escaping ((_ data: ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo?,_ error: Error?) -> Void)) {
        comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, rootPath: rootPath, fixInconsistencies: fixInconsistencies).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rootPath: (query)  (optional)
     - parameter fixInconsistencies: (query)  (optional)
     - returns: RequestBuilder<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo> 
     */
    open class func comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rootPath: String? = nil, fixInconsistencies: Bool? = nil) -> RequestBuilder<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "root.path": rootPath, 
            "fix.inconsistencies": fixInconsistencies
        ])

        let requestBuilder: RequestBuilder<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAccountmanagerTokenValidityPeriod: (query)  (optional)
     - parameter cqAccountmanagerConfigRequestnewaccountMail: (query)  (optional)
     - parameter cqAccountmanagerConfigRequestnewpwdMail: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqAccountApiAccountManagementService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAccountmanagerTokenValidityPeriod: Int? = nil, cqAccountmanagerConfigRequestnewaccountMail: String? = nil, cqAccountmanagerConfigRequestnewpwdMail: String? = nil, completion: @escaping ((_ data: ComAdobeCqAccountApiAccountManagementServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeCqAccountApiAccountManagementServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAccountmanagerTokenValidityPeriod: cqAccountmanagerTokenValidityPeriod, cqAccountmanagerConfigRequestnewaccountMail: cqAccountmanagerConfigRequestnewaccountMail, cqAccountmanagerConfigRequestnewpwdMail: cqAccountmanagerConfigRequestnewpwdMail).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.account.api.AccountManagementService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAccountmanagerTokenValidityPeriod: (query)  (optional)
     - parameter cqAccountmanagerConfigRequestnewaccountMail: (query)  (optional)
     - parameter cqAccountmanagerConfigRequestnewpwdMail: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqAccountApiAccountManagementServiceInfo> 
     */
    open class func comAdobeCqAccountApiAccountManagementServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAccountmanagerTokenValidityPeriod: Int? = nil, cqAccountmanagerConfigRequestnewaccountMail: String? = nil, cqAccountmanagerConfigRequestnewpwdMail: String? = nil) -> RequestBuilder<ComAdobeCqAccountApiAccountManagementServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.accountmanager.token.validity.period": cqAccountmanagerTokenValidityPeriod?.encodeToJSON(), 
            "cq.accountmanager.config.requestnewaccount.mail": cqAccountmanagerConfigRequestnewaccountMail, 
            "cq.accountmanager.config.requestnewpwd.mail": cqAccountmanagerConfigRequestnewpwdMail
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqAccountApiAccountManagementServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAccountmanagerConfigInformnewaccountMail: (query)  (optional)
     - parameter cqAccountmanagerConfigInformnewpwdMail: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqAccountImplAccountManagementServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAccountmanagerConfigInformnewaccountMail: String? = nil, cqAccountmanagerConfigInformnewpwdMail: String? = nil, completion: @escaping ((_ data: ComAdobeCqAccountImplAccountManagementServletInfo?,_ error: Error?) -> Void)) {
        comAdobeCqAccountImplAccountManagementServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAccountmanagerConfigInformnewaccountMail: cqAccountmanagerConfigInformnewaccountMail, cqAccountmanagerConfigInformnewpwdMail: cqAccountmanagerConfigInformnewpwdMail).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAccountmanagerConfigInformnewaccountMail: (query)  (optional)
     - parameter cqAccountmanagerConfigInformnewpwdMail: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqAccountImplAccountManagementServletInfo> 
     */
    open class func comAdobeCqAccountImplAccountManagementServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAccountmanagerConfigInformnewaccountMail: String? = nil, cqAccountmanagerConfigInformnewpwdMail: String? = nil) -> RequestBuilder<ComAdobeCqAccountImplAccountManagementServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.accountmanager.config.informnewaccount.mail": cqAccountmanagerConfigInformnewaccountMail, 
            "cq.accountmanager.config.informnewpwd.mail": cqAccountmanagerConfigInformnewpwdMail
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqAccountImplAccountManagementServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAddressLocationDefaultMaxResults: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqAddressImplLocationLocationListServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAddressLocationDefaultMaxResults: Int? = nil, completion: @escaping ((_ data: ComAdobeCqAddressImplLocationLocationListServletInfo?,_ error: Error?) -> Void)) {
        comAdobeCqAddressImplLocationLocationListServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAddressLocationDefaultMaxResults: cqAddressLocationDefaultMaxResults).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAddressLocationDefaultMaxResults: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqAddressImplLocationLocationListServletInfo> 
     */
    open class func comAdobeCqAddressImplLocationLocationListServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAddressLocationDefaultMaxResults: Int? = nil) -> RequestBuilder<ComAdobeCqAddressImplLocationLocationListServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.address.location.default.maxResults": cqAddressLocationDefaultMaxResults?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqAddressImplLocationLocationListServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqAuditPurgeDam(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int? = nil, auditlogRuleTypes: String? = nil, completion: @escaping ((_ data: ComAdobeCqAuditPurgeDamInfo?,_ error: Error?) -> Void)) {
        comAdobeCqAuditPurgeDamWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, auditlogRuleName: auditlogRuleName, auditlogRuleContentpath: auditlogRuleContentpath, auditlogRuleMinimumage: auditlogRuleMinimumage, auditlogRuleTypes: auditlogRuleTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.audit.purge.Dam
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqAuditPurgeDamInfo> 
     */
    open class func comAdobeCqAuditPurgeDamWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int? = nil, auditlogRuleTypes: String? = nil) -> RequestBuilder<ComAdobeCqAuditPurgeDamInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.audit.purge.Dam"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "auditlog.rule.name": auditlogRuleName, 
            "auditlog.rule.contentpath": auditlogRuleContentpath, 
            "auditlog.rule.minimumage": auditlogRuleMinimumage?.encodeToJSON(), 
            "auditlog.rule.types": auditlogRuleTypes
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqAuditPurgeDamInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqAuditPurgePages(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int? = nil, auditlogRuleTypes: String? = nil, completion: @escaping ((_ data: ComAdobeCqAuditPurgePagesInfo?,_ error: Error?) -> Void)) {
        comAdobeCqAuditPurgePagesWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, auditlogRuleName: auditlogRuleName, auditlogRuleContentpath: auditlogRuleContentpath, auditlogRuleMinimumage: auditlogRuleMinimumage, auditlogRuleTypes: auditlogRuleTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.audit.purge.Pages
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqAuditPurgePagesInfo> 
     */
    open class func comAdobeCqAuditPurgePagesWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int? = nil, auditlogRuleTypes: String? = nil) -> RequestBuilder<ComAdobeCqAuditPurgePagesInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.audit.purge.Pages"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "auditlog.rule.name": auditlogRuleName, 
            "auditlog.rule.contentpath": auditlogRuleContentpath, 
            "auditlog.rule.minimumage": auditlogRuleMinimumage?.encodeToJSON(), 
            "auditlog.rule.types": auditlogRuleTypes
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqAuditPurgePagesInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqAuditPurgeReplication(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int? = nil, auditlogRuleTypes: String? = nil, completion: @escaping ((_ data: ComAdobeCqAuditPurgeReplicationInfo?,_ error: Error?) -> Void)) {
        comAdobeCqAuditPurgeReplicationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, auditlogRuleName: auditlogRuleName, auditlogRuleContentpath: auditlogRuleContentpath, auditlogRuleMinimumage: auditlogRuleMinimumage, auditlogRuleTypes: auditlogRuleTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.audit.purge.Replication
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqAuditPurgeReplicationInfo> 
     */
    open class func comAdobeCqAuditPurgeReplicationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int? = nil, auditlogRuleTypes: String? = nil) -> RequestBuilder<ComAdobeCqAuditPurgeReplicationInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.audit.purge.Replication"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "auditlog.rule.name": auditlogRuleName, 
            "auditlog.rule.contentpath": auditlogRuleContentpath, 
            "auditlog.rule.minimumage": auditlogRuleMinimumage?.encodeToJSON(), 
            "auditlog.rule.types": auditlogRuleTypes
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqAuditPurgeReplicationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter keypairId: (query)  (optional)
     - parameter keypairAlias: (query)  (optional)
     - parameter cdnrewriterAttributes: (query)  (optional)
     - parameter cdnRewriterDistributionDomain: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, keypairId: String? = nil, keypairAlias: String? = nil, cdnrewriterAttributes: [String]? = nil, cdnRewriterDistributionDomain: String? = nil, completion: @escaping ((_ data: ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCdnRewriterImplAWSCloudFrontRewriterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, keypairId: keypairId, keypairAlias: keypairAlias, cdnrewriterAttributes: cdnrewriterAttributes, cdnRewriterDistributionDomain: cdnRewriterDistributionDomain).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter keypairId: (query)  (optional)
     - parameter keypairAlias: (query)  (optional)
     - parameter cdnrewriterAttributes: (query)  (optional)
     - parameter cdnRewriterDistributionDomain: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo> 
     */
    open class func comAdobeCqCdnRewriterImplAWSCloudFrontRewriterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, keypairId: String? = nil, keypairAlias: String? = nil, cdnrewriterAttributes: [String]? = nil, cdnRewriterDistributionDomain: String? = nil) -> RequestBuilder<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "keypair.id": keypairId, 
            "keypair.alias": keypairAlias, 
            "cdnrewriter.attributes": cdnrewriterAttributes, 
            "cdn.rewriter.distribution.domain": cdnRewriterDistributionDomain
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cdnConfigDistributionDomain: (query)  (optional)
     - parameter cdnConfigEnableRewriting: (query)  (optional)
     - parameter cdnConfigPathPrefixes: (query)  (optional)
     - parameter cdnConfigCdnttl: (query)  (optional)
     - parameter cdnConfigApplicationProtocol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cdnConfigDistributionDomain: String? = nil, cdnConfigEnableRewriting: Bool? = nil, cdnConfigPathPrefixes: [String]? = nil, cdnConfigCdnttl: Int? = nil, cdnConfigApplicationProtocol: String? = nil, completion: @escaping ((_ data: ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCdnRewriterImplCDNConfigServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cdnConfigDistributionDomain: cdnConfigDistributionDomain, cdnConfigEnableRewriting: cdnConfigEnableRewriting, cdnConfigPathPrefixes: cdnConfigPathPrefixes, cdnConfigCdnttl: cdnConfigCdnttl, cdnConfigApplicationProtocol: cdnConfigApplicationProtocol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cdnConfigDistributionDomain: (query)  (optional)
     - parameter cdnConfigEnableRewriting: (query)  (optional)
     - parameter cdnConfigPathPrefixes: (query)  (optional)
     - parameter cdnConfigCdnttl: (query)  (optional)
     - parameter cdnConfigApplicationProtocol: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo> 
     */
    open class func comAdobeCqCdnRewriterImplCDNConfigServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cdnConfigDistributionDomain: String? = nil, cdnConfigEnableRewriting: Bool? = nil, cdnConfigPathPrefixes: [String]? = nil, cdnConfigCdnttl: Int? = nil, cdnConfigApplicationProtocol: String? = nil) -> RequestBuilder<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cdn.config.distribution.domain": cdnConfigDistributionDomain, 
            "cdn.config.enable.rewriting": cdnConfigEnableRewriting, 
            "cdn.config.path.prefixes": cdnConfigPathPrefixes, 
            "cdn.config.cdnttl": cdnConfigCdnttl?.encodeToJSON(), 
            "cdn.config.application.protocol": cdnConfigApplicationProtocol
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter cdnrewriterAttributes: (query)  (optional)
     - parameter cdnRewriterDistributionDomain: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCdnRewriterImplCDNRewriter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, cdnrewriterAttributes: [String]? = nil, cdnRewriterDistributionDomain: String? = nil, completion: @escaping ((_ data: ComAdobeCqCdnRewriterImplCDNRewriterInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCdnRewriterImplCDNRewriterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, cdnrewriterAttributes: cdnrewriterAttributes, cdnRewriterDistributionDomain: cdnRewriterDistributionDomain).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter cdnrewriterAttributes: (query)  (optional)
     - parameter cdnRewriterDistributionDomain: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCdnRewriterImplCDNRewriterInfo> 
     */
    open class func comAdobeCqCdnRewriterImplCDNRewriterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, cdnrewriterAttributes: [String]? = nil, cdnRewriterDistributionDomain: String? = nil) -> RequestBuilder<ComAdobeCqCdnRewriterImplCDNRewriterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "cdnrewriter.attributes": cdnrewriterAttributes, 
            "cdn.rewriter.distribution.domain": cdnRewriterDistributionDomain
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCdnRewriterImplCDNRewriterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter flushAgents: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, flushAgents: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, flushAgents: flushAgents).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter flushAgents: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo> 
     */
    open class func comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, flushAgents: [String]? = nil) -> RequestBuilder<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "flush.agents": flushAgents
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCommerceImplAssetDynamicImageHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil, completion: @escaping ((_ data: ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCommerceImplAssetDynamicImageHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommerceAssetHandlerActive: cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName: cqCommerceAssetHandlerName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo> 
     */
    open class func comAdobeCqCommerceImplAssetDynamicImageHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil) -> RequestBuilder<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.commerce.asset.handler.active": cqCommerceAssetHandlerActive, 
            "cq.commerce.asset.handler.name": cqCommerceAssetHandlerName
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerFallback: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerFallback: String? = nil, completion: @escaping ((_ data: ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommerceAssetHandlerFallback: cqCommerceAssetHandlerFallback).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerFallback: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo> 
     */
    open class func comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerFallback: String? = nil) -> RequestBuilder<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.commerce.asset.handler.fallback": cqCommerceAssetHandlerFallback
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCommerceImplAssetStaticImageHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil, completion: @escaping ((_ data: ComAdobeCqCommerceImplAssetStaticImageHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCommerceImplAssetStaticImageHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommerceAssetHandlerActive: cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName: cqCommerceAssetHandlerName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo> 
     */
    open class func comAdobeCqCommerceImplAssetStaticImageHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil) -> RequestBuilder<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.commerce.asset.handler.active": cqCommerceAssetHandlerActive, 
            "cq.commerce.asset.handler.name": cqCommerceAssetHandlerName
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCommerceImplAssetVideoHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil, completion: @escaping ((_ data: ComAdobeCqCommerceImplAssetVideoHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCommerceImplAssetVideoHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommerceAssetHandlerActive: cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName: cqCommerceAssetHandlerName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCommerceImplAssetVideoHandlerInfo> 
     */
    open class func comAdobeCqCommerceImplAssetVideoHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil) -> RequestBuilder<ComAdobeCqCommerceImplAssetVideoHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.commerce.asset.handler.active": cqCommerceAssetHandlerActive, 
            "cq.commerce.asset.handler.name": cqCommerceAssetHandlerName
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCommerceImplAssetVideoHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommercePromotionRoot: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCommerceImplPromotionPromotionManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommercePromotionRoot: String? = nil, completion: @escaping ((_ data: ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCommerceImplPromotionPromotionManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommercePromotionRoot: cqCommercePromotionRoot).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommercePromotionRoot: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo> 
     */
    open class func comAdobeCqCommerceImplPromotionPromotionManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommercePromotionRoot: String? = nil) -> RequestBuilder<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.commerce.promotion.root": cqCommercePromotionRoot
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceCataloggeneratorBucketsize: (query)  (optional)
     - parameter cqCommerceCataloggeneratorBucketname: (query)  (optional)
     - parameter cqCommerceCataloggeneratorExcludedtemplateproperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceCataloggeneratorBucketsize: Int? = nil, cqCommerceCataloggeneratorBucketname: String? = nil, cqCommerceCataloggeneratorExcludedtemplateproperties: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommerceCataloggeneratorBucketsize: cqCommerceCataloggeneratorBucketsize, cqCommerceCataloggeneratorBucketname: cqCommerceCataloggeneratorBucketname, cqCommerceCataloggeneratorExcludedtemplateproperties: cqCommerceCataloggeneratorExcludedtemplateproperties).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceCataloggeneratorBucketsize: (query)  (optional)
     - parameter cqCommerceCataloggeneratorBucketname: (query)  (optional)
     - parameter cqCommerceCataloggeneratorExcludedtemplateproperties: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo> 
     */
    open class func comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceCataloggeneratorBucketsize: Int? = nil, cqCommerceCataloggeneratorBucketname: String? = nil, cqCommerceCataloggeneratorExcludedtemplateproperties: [String]? = nil) -> RequestBuilder<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.commerce.cataloggenerator.bucketsize": cqCommerceCataloggeneratorBucketsize?.encodeToJSON(), 
            "cq.commerce.cataloggenerator.bucketname": cqCommerceCataloggeneratorBucketname, 
            "cq.commerce.cataloggenerator.excludedtemplateproperties": cqCommerceCataloggeneratorExcludedtemplateproperties
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommercePageeventlistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCommercePimImplPageEventListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommercePageeventlistenerEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqCommercePimImplPageEventListenerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCommercePimImplPageEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommercePageeventlistenerEnabled: cqCommercePageeventlistenerEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommercePageeventlistenerEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCommercePimImplPageEventListenerInfo> 
     */
    open class func comAdobeCqCommercePimImplPageEventListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommercePageeventlistenerEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqCommercePimImplPageEventListenerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.commerce.pageeventlistener.enabled": cqCommercePageeventlistenerEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCommercePimImplPageEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter feedGeneratorAlgorithm: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, feedGeneratorAlgorithm: String? = nil, completion: @escaping ((_ data: ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqCommercePimImplProductfeedProductFeedServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, feedGeneratorAlgorithm: feedGeneratorAlgorithm).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter feedGeneratorAlgorithm: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo> 
     */
    open class func comAdobeCqCommercePimImplProductfeedProductFeedServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, feedGeneratorAlgorithm: String? = nil) -> RequestBuilder<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "Feed generator algorithm": feedGeneratorAlgorithm
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportingservicesUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqContentinsightImplReportingServicesSettingsProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportingservicesUrl: String? = nil, completion: @escaping ((_ data: ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeCqContentinsightImplReportingServicesSettingsProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, reportingservicesUrl: reportingservicesUrl).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportingservicesUrl: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo> 
     */
    open class func comAdobeCqContentinsightImplReportingServicesSettingsProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportingservicesUrl: String? = nil) -> RequestBuilder<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "reportingservices.url": reportingservicesUrl
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter brightedgeUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, brightedgeUrl: String? = nil, completion: @escaping ((_ data: ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo?,_ error: Error?) -> Void)) {
        comAdobeCqContentinsightImplServletsBrightEdgeProxyServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, brightedgeUrl: brightedgeUrl).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter brightedgeUrl: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo> 
     */
    open class func comAdobeCqContentinsightImplServletsBrightEdgeProxyServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, brightedgeUrl: String? = nil) -> RequestBuilder<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "brightedge.url": brightedgeUrl
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportingservicesProxyWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqContentinsightImplServletsReportingServicesProxyServle(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportingservicesProxyWhitelist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo?,_ error: Error?) -> Void)) {
        comAdobeCqContentinsightImplServletsReportingServicesProxyServleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, reportingservicesProxyWhitelist: reportingservicesProxyWhitelist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportingservicesProxyWhitelist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo> 
     */
    open class func comAdobeCqContentinsightImplServletsReportingServicesProxyServleWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportingservicesProxyWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "reportingservices.proxy.whitelist": reportingservicesProxyWhitelist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damCfmComponentResourceType: (query)  (optional)
     - parameter damCfmComponentFileReferenceProp: (query)  (optional)
     - parameter damCfmComponentElementsProp: (query)  (optional)
     - parameter damCfmComponentVariationProp: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamCfmImplComponentComponentConfigImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damCfmComponentResourceType: String? = nil, damCfmComponentFileReferenceProp: String? = nil, damCfmComponentElementsProp: String? = nil, damCfmComponentVariationProp: String? = nil, completion: @escaping ((_ data: ComAdobeCqDamCfmImplComponentComponentConfigImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamCfmImplComponentComponentConfigImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, damCfmComponentResourceType: damCfmComponentResourceType, damCfmComponentFileReferenceProp: damCfmComponentFileReferenceProp, damCfmComponentElementsProp: damCfmComponentElementsProp, damCfmComponentVariationProp: damCfmComponentVariationProp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damCfmComponentResourceType: (query)  (optional)
     - parameter damCfmComponentFileReferenceProp: (query)  (optional)
     - parameter damCfmComponentElementsProp: (query)  (optional)
     - parameter damCfmComponentVariationProp: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo> 
     */
    open class func comAdobeCqDamCfmImplComponentComponentConfigImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damCfmComponentResourceType: String? = nil, damCfmComponentFileReferenceProp: String? = nil, damCfmComponentElementsProp: String? = nil, damCfmComponentVariationProp: String? = nil) -> RequestBuilder<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "dam.cfm.component.resourceType": damCfmComponentResourceType, 
            "dam.cfm.component.fileReferenceProp": damCfmComponentFileReferenceProp, 
            "dam.cfm.component.elementsProp": damCfmComponentElementsProp, 
            "dam.cfm.component.variationProp": damCfmComponentVariationProp
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damCfmResourceTypes: (query)  (optional)
     - parameter damCfmReferenceProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamCfmImplConfFeatureConfigImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damCfmResourceTypes: [String]? = nil, damCfmReferenceProperties: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqDamCfmImplConfFeatureConfigImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamCfmImplConfFeatureConfigImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, damCfmResourceTypes: damCfmResourceTypes, damCfmReferenceProperties: damCfmReferenceProperties).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damCfmResourceTypes: (query)  (optional)
     - parameter damCfmReferenceProperties: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo> 
     */
    open class func comAdobeCqDamCfmImplConfFeatureConfigImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damCfmResourceTypes: [String]? = nil, damCfmReferenceProperties: [String]? = nil) -> RequestBuilder<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "dam.cfm.resourceTypes": damCfmResourceTypes, 
            "dam.cfm.referenceProperties": damCfmReferenceProperties
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamCfmImplContentRewriterAssetProcessor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil, completion: @escaping ((_ data: ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamCfmImplContentRewriterAssetProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pipelineType: pipelineType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo> 
     */
    open class func comAdobeCqDamCfmImplContentRewriterAssetProcessorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil) -> RequestBuilder<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "pipeline.type": pipelineType
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamCfmImplContentRewriterParRangeFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil, completion: @escaping ((_ data: ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamCfmImplContentRewriterParRangeFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pipelineType: pipelineType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo> 
     */
    open class func comAdobeCqDamCfmImplContentRewriterParRangeFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil) -> RequestBuilder<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "pipeline.type": pipelineType
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamCfmImplContentRewriterPayloadFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil, completion: @escaping ((_ data: ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamCfmImplContentRewriterPayloadFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pipelineType: pipelineType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo> 
     */
    open class func comAdobeCqDamCfmImplContentRewriterPayloadFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil) -> RequestBuilder<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "pipeline.type": pipelineType
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxMemory: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamDmProcessImagePTiffManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxMemory: Int? = nil, completion: @escaping ((_ data: ComAdobeCqDamDmProcessImagePTiffManagerImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamDmProcessImagePTiffManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxMemory: maxMemory).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxMemory: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo> 
     */
    open class func comAdobeCqDamDmProcessImagePTiffManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxMemory: Int? = nil) -> RequestBuilder<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "maxMemory": maxMemory?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dmreplicateonmodifyEnabled: (query)  (optional)
     - parameter dmreplicateonmodifyForcesyncdeletes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dmreplicateonmodifyEnabled: Bool? = nil, dmreplicateonmodifyForcesyncdeletes: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, dmreplicateonmodifyEnabled: dmreplicateonmodifyEnabled, dmreplicateonmodifyForcesyncdeletes: dmreplicateonmodifyForcesyncdeletes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dmreplicateonmodifyEnabled: (query)  (optional)
     - parameter dmreplicateonmodifyForcesyncdeletes: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo> 
     */
    open class func comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dmreplicateonmodifyEnabled: Bool? = nil, dmreplicateonmodifyForcesyncdeletes: Bool? = nil) -> RequestBuilder<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "dmreplicateonmodify.enabled": dmreplicateonmodifyEnabled, 
            "dmreplicateonmodify.forcesyncdeletes": dmreplicateonmodifyForcesyncdeletes
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeDamMacSyncClientSoTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeDamMacSyncClientSoTimeout: Int? = nil, completion: @escaping ((_ data: ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamMacSyncHelperImplMACSyncClientImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeDamMacSyncClientSoTimeout: comAdobeDamMacSyncClientSoTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeDamMacSyncClientSoTimeout: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo> 
     */
    open class func comAdobeCqDamMacSyncHelperImplMACSyncClientImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeDamMacSyncClientSoTimeout: Int? = nil) -> RequestBuilder<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.dam.mac.sync.client.so.timeout": comAdobeDamMacSyncClientSoTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncservicePlatform: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: [String]? = nil, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: Bool? = nil, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: Int? = nil, comAdobeCqDamMacSyncDamsyncservicePlatform: String? = nil, completion: @escaping ((_ data: ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamMacSyncImplDAMSyncServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, comAdobeCqDamMacSyncDamsyncservicePlatform: comAdobeCqDamMacSyncDamsyncservicePlatform).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncservicePlatform: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo> 
     */
    open class func comAdobeCqDamMacSyncImplDAMSyncServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: [String]? = nil, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: Bool? = nil, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: Int? = nil, comAdobeCqDamMacSyncDamsyncservicePlatform: String? = nil) -> RequestBuilder<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths": comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, 
            "com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions": comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, 
            "com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms": comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs?.encodeToJSON(), 
            "com.adobe.cq.dam.mac.sync.damsyncservice.platform": comAdobeCqDamMacSyncDamsyncservicePlatform
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nuiEnabled: (query)  (optional)
     - parameter nuiServiceUrl: (query)  (optional)
     - parameter nuiApiKey: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nuiEnabled: Bool? = nil, nuiServiceUrl: String? = nil, nuiApiKey: String? = nil, completion: @escaping ((_ data: ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamProcessorNuiImplNuiAssetProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, nuiEnabled: nuiEnabled, nuiServiceUrl: nuiServiceUrl, nuiApiKey: nuiApiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nuiEnabled: (query)  (optional)
     - parameter nuiServiceUrl: (query)  (optional)
     - parameter nuiApiKey: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo> 
     */
    open class func comAdobeCqDamProcessorNuiImplNuiAssetProcessorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nuiEnabled: Bool? = nil, nuiServiceUrl: String? = nil, nuiApiKey: String? = nil) -> RequestBuilder<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "nuiEnabled": nuiEnabled, 
            "nuiServiceUrl": nuiServiceUrl, 
            "nuiApiKey": nuiApiKey
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tcpPort: (query)  (optional)
     - parameter allowRemoteAccess: (query)  (optional)
     - parameter maxRenderRgnPixels: (query)  (optional)
     - parameter maxMessageSize: (query)  (optional)
     - parameter randomAccessUrlTimeout: (query)  (optional)
     - parameter workerThreads: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamS7imagingImplIsImageServerComponent(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tcpPort: String? = nil, allowRemoteAccess: Bool? = nil, maxRenderRgnPixels: String? = nil, maxMessageSize: String? = nil, randomAccessUrlTimeout: Int? = nil, workerThreads: Int? = nil, completion: @escaping ((_ data: ComAdobeCqDamS7imagingImplIsImageServerComponentInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamS7imagingImplIsImageServerComponentWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, tcpPort: tcpPort, allowRemoteAccess: allowRemoteAccess, maxRenderRgnPixels: maxRenderRgnPixels, maxMessageSize: maxMessageSize, randomAccessUrlTimeout: randomAccessUrlTimeout, workerThreads: workerThreads).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tcpPort: (query)  (optional)
     - parameter allowRemoteAccess: (query)  (optional)
     - parameter maxRenderRgnPixels: (query)  (optional)
     - parameter maxMessageSize: (query)  (optional)
     - parameter randomAccessUrlTimeout: (query)  (optional)
     - parameter workerThreads: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo> 
     */
    open class func comAdobeCqDamS7imagingImplIsImageServerComponentWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tcpPort: String? = nil, allowRemoteAccess: Bool? = nil, maxRenderRgnPixels: String? = nil, maxMessageSize: String? = nil, randomAccessUrlTimeout: Int? = nil, workerThreads: Int? = nil) -> RequestBuilder<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "TcpPort": tcpPort, 
            "AllowRemoteAccess": allowRemoteAccess, 
            "MaxRenderRgnPixels": maxRenderRgnPixels, 
            "MaxMessageSize": maxMessageSize, 
            "RandomAccessUrlTimeout": randomAccessUrlTimeout?.encodeToJSON(), 
            "WorkerThreads": workerThreads?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cacheEnable: (query)  (optional)
     - parameter cacheRootPaths: (query)  (optional)
     - parameter cacheMaxSize: (query)  (optional)
     - parameter cacheMaxEntries: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamS7imagingImplPsPlatformServerServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cacheEnable: Bool? = nil, cacheRootPaths: [String]? = nil, cacheMaxSize: Int? = nil, cacheMaxEntries: Int? = nil, completion: @escaping ((_ data: ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamS7imagingImplPsPlatformServerServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cacheEnable: cacheEnable, cacheRootPaths: cacheRootPaths, cacheMaxSize: cacheMaxSize, cacheMaxEntries: cacheMaxEntries).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cacheEnable: (query)  (optional)
     - parameter cacheRootPaths: (query)  (optional)
     - parameter cacheMaxSize: (query)  (optional)
     - parameter cacheMaxEntries: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo> 
     */
    open class func comAdobeCqDamS7imagingImplPsPlatformServerServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cacheEnable: Bool? = nil, cacheRootPaths: [String]? = nil, cacheMaxSize: Int? = nil, cacheMaxEntries: Int? = nil) -> RequestBuilder<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cache.enable": cacheEnable, 
            "cache.rootPaths": cacheRootPaths, 
            "cache.maxSize": cacheMaxSize?.encodeToJSON(), 
            "cache.maxEntries": cacheMaxEntries?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter pathPrefix: (query)  (optional)
     - parameter createVersion: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamWebdavImplIoAssetIOHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, pathPrefix: String? = nil, createVersion: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamWebdavImplIoAssetIOHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, pathPrefix: pathPrefix, createVersion: createVersion).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter pathPrefix: (query)  (optional)
     - parameter createVersion: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo> 
     */
    open class func comAdobeCqDamWebdavImplIoAssetIOHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, pathPrefix: String? = nil, createVersion: Bool? = nil) -> RequestBuilder<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "pathPrefix": pathPrefix, 
            "createVersion": createVersion
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingEnable: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingSchedulerPeriod: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingStagingTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamWebdavVersionLinkingEnable: Bool? = nil, cqDamWebdavVersionLinkingSchedulerPeriod: Int? = nil, cqDamWebdavVersionLinkingStagingTimeout: Int? = nil, completion: @escaping ((_ data: ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamWebdavVersionLinkingEnable: cqDamWebdavVersionLinkingEnable, cqDamWebdavVersionLinkingSchedulerPeriod: cqDamWebdavVersionLinkingSchedulerPeriod, cqDamWebdavVersionLinkingStagingTimeout: cqDamWebdavVersionLinkingStagingTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingEnable: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingSchedulerPeriod: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingStagingTimeout: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo> 
     */
    open class func comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamWebdavVersionLinkingEnable: Bool? = nil, cqDamWebdavVersionLinkingSchedulerPeriod: Int? = nil, cqDamWebdavVersionLinkingStagingTimeout: Int? = nil) -> RequestBuilder<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.webdav.version.linking.enable": cqDamWebdavVersionLinkingEnable, 
            "cq.dam.webdav.version.linking.scheduler.period": cqDamWebdavVersionLinkingSchedulerPeriod?.encodeToJSON(), 
            "cq.dam.webdav.version.linking.staging.timeout": cqDamWebdavVersionLinkingStagingTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDamWebdavImplIoSpecialFilesHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDamWebdavImplIoSpecialFilesHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo> 
     */
    open class func comAdobeCqDamWebdavImplIoSpecialFilesHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: [String]? = nil) -> RequestBuilder<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters": comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter firewallDeserializationWhitelist: (query)  (optional)
     - parameter firewallDeserializationBlacklist: (query)  (optional)
     - parameter firewallDeserializationDiagnostics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDeserfwImplDeserializationFirewallImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, firewallDeserializationWhitelist: [String]? = nil, firewallDeserializationBlacklist: [String]? = nil, firewallDeserializationDiagnostics: String? = nil, completion: @escaping ((_ data: ComAdobeCqDeserfwImplDeserializationFirewallImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDeserfwImplDeserializationFirewallImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, firewallDeserializationWhitelist: firewallDeserializationWhitelist, firewallDeserializationBlacklist: firewallDeserializationBlacklist, firewallDeserializationDiagnostics: firewallDeserializationDiagnostics).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter firewallDeserializationWhitelist: (query)  (optional)
     - parameter firewallDeserializationBlacklist: (query)  (optional)
     - parameter firewallDeserializationDiagnostics: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo> 
     */
    open class func comAdobeCqDeserfwImplDeserializationFirewallImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, firewallDeserializationWhitelist: [String]? = nil, firewallDeserializationBlacklist: [String]? = nil, firewallDeserializationDiagnostics: String? = nil) -> RequestBuilder<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "firewall.deserialization.whitelist": firewallDeserializationWhitelist, 
            "firewall.deserialization.blacklist": firewallDeserializationBlacklist, 
            "firewall.deserialization.diagnostics": firewallDeserializationDiagnostics
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDtmImplServiceDTMWebServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectionTimeout: Int? = nil, socketTimeout: Int? = nil, completion: @escaping ((_ data: ComAdobeCqDtmImplServiceDTMWebServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDtmImplServiceDTMWebServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, connectionTimeout: connectionTimeout, socketTimeout: socketTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo> 
     */
    open class func comAdobeCqDtmImplServiceDTMWebServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectionTimeout: Int? = nil, socketTimeout: Int? = nil) -> RequestBuilder<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "connection.timeout": connectionTimeout?.encodeToJSON(), 
            "socket.timeout": socketTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dtmStagingIpWhitelist: (query)  (optional)
     - parameter dtmProductionIpWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDtmImplServletsDTMDeployHookServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dtmStagingIpWhitelist: [String]? = nil, dtmProductionIpWhitelist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqDtmImplServletsDTMDeployHookServletInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDtmImplServletsDTMDeployHookServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, dtmStagingIpWhitelist: dtmStagingIpWhitelist, dtmProductionIpWhitelist: dtmProductionIpWhitelist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dtmStagingIpWhitelist: (query)  (optional)
     - parameter dtmProductionIpWhitelist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo> 
     */
    open class func comAdobeCqDtmImplServletsDTMDeployHookServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dtmStagingIpWhitelist: [String]? = nil, dtmProductionIpWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "dtm.staging.ip.whitelist": dtmStagingIpWhitelist, 
            "dtm.production.ip.whitelist": dtmProductionIpWhitelist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter endpointUri: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqDtmReactorImplServiceWebServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, endpointUri: String? = nil, connectionTimeout: Int? = nil, socketTimeout: Int? = nil, completion: @escaping ((_ data: ComAdobeCqDtmReactorImplServiceWebServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqDtmReactorImplServiceWebServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, endpointUri: endpointUri, connectionTimeout: connectionTimeout, socketTimeout: socketTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter endpointUri: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo> 
     */
    open class func comAdobeCqDtmReactorImplServiceWebServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, endpointUri: String? = nil, connectionTimeout: Int? = nil, socketTimeout: Int? = nil) -> RequestBuilder<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "endpointUri": endpointUri, 
            "connectionTimeout": connectionTimeout?.encodeToJSON(), 
            "socketTimeout": socketTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter disabledForGroups: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqExperiencelogImplExperienceLogConfigServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, disabledForGroups: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo?,_ error: Error?) -> Void)) {
        comAdobeCqExperiencelogImplExperienceLogConfigServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, disabledForGroups: disabledForGroups).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter disabledForGroups: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo> 
     */
    open class func comAdobeCqExperiencelogImplExperienceLogConfigServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, disabledForGroups: [String]? = nil) -> RequestBuilder<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled, 
            "disabledForGroups": disabledForGroups
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter packageNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqHcContentPackagesHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, packageNames: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqHcContentPackagesHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeCqHcContentPackagesHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName, packageNames: packageNames).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter packageNames: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqHcContentPackagesHealthCheckInfo> 
     */
    open class func comAdobeCqHcContentPackagesHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, packageNames: [String]? = nil) -> RequestBuilder<ComAdobeCqHcContentPackagesHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.name": hcName, 
            "hc.tags": hcTags, 
            "hc.mbean.name": hcMbeanName, 
            "package.names": packageNames
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqHcContentPackagesHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter historyRequestFilterExcludedSelectors: (query)  (optional)
     - parameter historyRequestFilterExcludedExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqHistoryImplHistoryRequestFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, historyRequestFilterExcludedSelectors: [String]? = nil, historyRequestFilterExcludedExtensions: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqHistoryImplHistoryRequestFilterInfo?,_ error: Error?) -> Void)) {
        comAdobeCqHistoryImplHistoryRequestFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, historyRequestFilterExcludedSelectors: historyRequestFilterExcludedSelectors, historyRequestFilterExcludedExtensions: historyRequestFilterExcludedExtensions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter historyRequestFilterExcludedSelectors: (query)  (optional)
     - parameter historyRequestFilterExcludedExtensions: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqHistoryImplHistoryRequestFilterInfo> 
     */
    open class func comAdobeCqHistoryImplHistoryRequestFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, historyRequestFilterExcludedSelectors: [String]? = nil, historyRequestFilterExcludedExtensions: [String]? = nil) -> RequestBuilder<ComAdobeCqHistoryImplHistoryRequestFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "history.requestFilter.excludedSelectors": historyRequestFilterExcludedSelectors, 
            "history.requestFilter.excludedExtensions": historyRequestFilterExcludedExtensions
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqHistoryImplHistoryRequestFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter historyServiceResourceTypes: (query)  (optional)
     - parameter historyServicePathFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqHistoryImplHistoryServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, historyServiceResourceTypes: [String]? = nil, historyServicePathFilter: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqHistoryImplHistoryServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqHistoryImplHistoryServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, historyServiceResourceTypes: historyServiceResourceTypes, historyServicePathFilter: historyServicePathFilter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter historyServiceResourceTypes: (query)  (optional)
     - parameter historyServicePathFilter: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqHistoryImplHistoryServiceImplInfo> 
     */
    open class func comAdobeCqHistoryImplHistoryServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, historyServiceResourceTypes: [String]? = nil, historyServicePathFilter: [String]? = nil) -> RequestBuilder<ComAdobeCqHistoryImplHistoryServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "history.service.resourceTypes": historyServiceResourceTypes, 
            "history.service.pathFilter": historyServicePathFilter
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqHistoryImplHistoryServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter inboxImplTypeproviderRegistrypaths: (query)  (optional)
     - parameter inboxImplTypeproviderLegacypaths: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlFailureitem: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlWorkitem: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlTask: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqInboxImplTypeproviderItemTypeProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, inboxImplTypeproviderRegistrypaths: [String]? = nil, inboxImplTypeproviderLegacypaths: [String]? = nil, inboxImplTypeproviderDefaulturlFailureitem: String? = nil, inboxImplTypeproviderDefaulturlWorkitem: String? = nil, inboxImplTypeproviderDefaulturlTask: String? = nil, completion: @escaping ((_ data: ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeCqInboxImplTypeproviderItemTypeProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, inboxImplTypeproviderRegistrypaths: inboxImplTypeproviderRegistrypaths, inboxImplTypeproviderLegacypaths: inboxImplTypeproviderLegacypaths, inboxImplTypeproviderDefaulturlFailureitem: inboxImplTypeproviderDefaulturlFailureitem, inboxImplTypeproviderDefaulturlWorkitem: inboxImplTypeproviderDefaulturlWorkitem, inboxImplTypeproviderDefaulturlTask: inboxImplTypeproviderDefaulturlTask).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter inboxImplTypeproviderRegistrypaths: (query)  (optional)
     - parameter inboxImplTypeproviderLegacypaths: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlFailureitem: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlWorkitem: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlTask: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo> 
     */
    open class func comAdobeCqInboxImplTypeproviderItemTypeProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, inboxImplTypeproviderRegistrypaths: [String]? = nil, inboxImplTypeproviderLegacypaths: [String]? = nil, inboxImplTypeproviderDefaulturlFailureitem: String? = nil, inboxImplTypeproviderDefaulturlWorkitem: String? = nil, inboxImplTypeproviderDefaulturlTask: String? = nil) -> RequestBuilder<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "inbox.impl.typeprovider.registrypaths": inboxImplTypeproviderRegistrypaths, 
            "inbox.impl.typeprovider.legacypaths": inboxImplTypeproviderLegacypaths, 
            "inbox.impl.typeprovider.defaulturl.failureitem": inboxImplTypeproviderDefaulturlFailureitem, 
            "inbox.impl.typeprovider.defaulturl.workitem": inboxImplTypeproviderDefaulturlWorkitem, 
            "inbox.impl.typeprovider.defaulturl.task": inboxImplTypeproviderDefaulturlTask
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter imageQuality: (query)  (optional)
     - parameter imageSupportedResolutions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqProjectsImplServletProjectImageServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, imageQuality: String? = nil, imageSupportedResolutions: String? = nil, completion: @escaping ((_ data: ComAdobeCqProjectsImplServletProjectImageServletInfo?,_ error: Error?) -> Void)) {
        comAdobeCqProjectsImplServletProjectImageServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, imageQuality: imageQuality, imageSupportedResolutions: imageSupportedResolutions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter imageQuality: (query)  (optional)
     - parameter imageSupportedResolutions: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqProjectsImplServletProjectImageServletInfo> 
     */
    open class func comAdobeCqProjectsImplServletProjectImageServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, imageQuality: String? = nil, imageSupportedResolutions: String? = nil) -> RequestBuilder<ComAdobeCqProjectsImplServletProjectImageServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "image.quality": imageQuality, 
            "image.supported.resolutions": imageSupportedResolutions
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqProjectsImplServletProjectImageServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scheduledpurgeName: (query)  (optional)
     - parameter scheduledpurgePurgeActive: (query)  (optional)
     - parameter scheduledpurgeTemplates: (query)  (optional)
     - parameter scheduledpurgePurgeGroups: (query)  (optional)
     - parameter scheduledpurgePurgeAssets: (query)  (optional)
     - parameter scheduledpurgeTerminateRunningWorkflows: (query)  (optional)
     - parameter scheduledpurgeDaysold: (query)  (optional)
     - parameter scheduledpurgeSaveThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqProjectsPurgeScheduler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scheduledpurgeName: String? = nil, scheduledpurgePurgeActive: Bool? = nil, scheduledpurgeTemplates: [String]? = nil, scheduledpurgePurgeGroups: Bool? = nil, scheduledpurgePurgeAssets: Bool? = nil, scheduledpurgeTerminateRunningWorkflows: Bool? = nil, scheduledpurgeDaysold: Int? = nil, scheduledpurgeSaveThreshold: Int? = nil, completion: @escaping ((_ data: ComAdobeCqProjectsPurgeSchedulerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqProjectsPurgeSchedulerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, scheduledpurgeName: scheduledpurgeName, scheduledpurgePurgeActive: scheduledpurgePurgeActive, scheduledpurgeTemplates: scheduledpurgeTemplates, scheduledpurgePurgeGroups: scheduledpurgePurgeGroups, scheduledpurgePurgeAssets: scheduledpurgePurgeAssets, scheduledpurgeTerminateRunningWorkflows: scheduledpurgeTerminateRunningWorkflows, scheduledpurgeDaysold: scheduledpurgeDaysold, scheduledpurgeSaveThreshold: scheduledpurgeSaveThreshold).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.projects.purge.Scheduler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scheduledpurgeName: (query)  (optional)
     - parameter scheduledpurgePurgeActive: (query)  (optional)
     - parameter scheduledpurgeTemplates: (query)  (optional)
     - parameter scheduledpurgePurgeGroups: (query)  (optional)
     - parameter scheduledpurgePurgeAssets: (query)  (optional)
     - parameter scheduledpurgeTerminateRunningWorkflows: (query)  (optional)
     - parameter scheduledpurgeDaysold: (query)  (optional)
     - parameter scheduledpurgeSaveThreshold: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqProjectsPurgeSchedulerInfo> 
     */
    open class func comAdobeCqProjectsPurgeSchedulerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scheduledpurgeName: String? = nil, scheduledpurgePurgeActive: Bool? = nil, scheduledpurgeTemplates: [String]? = nil, scheduledpurgePurgeGroups: Bool? = nil, scheduledpurgePurgeAssets: Bool? = nil, scheduledpurgeTerminateRunningWorkflows: Bool? = nil, scheduledpurgeDaysold: Int? = nil, scheduledpurgeSaveThreshold: Int? = nil) -> RequestBuilder<ComAdobeCqProjectsPurgeSchedulerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduledpurge.name": scheduledpurgeName, 
            "scheduledpurge.purgeActive": scheduledpurgePurgeActive, 
            "scheduledpurge.templates": scheduledpurgeTemplates, 
            "scheduledpurge.purgeGroups": scheduledpurgePurgeGroups, 
            "scheduledpurge.purgeAssets": scheduledpurgePurgeAssets, 
            "scheduledpurge.terminateRunningWorkflows": scheduledpurgeTerminateRunningWorkflows, 
            "scheduledpurge.daysold": scheduledpurgeDaysold?.encodeToJSON(), 
            "scheduledpurge.saveThreshold": scheduledpurgeSaveThreshold?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqProjectsPurgeSchedulerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter includePaths: (query)  (optional)
     - parameter exporterUser: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScheduledExporterImplScheduledExporterImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, includePaths: [String]? = nil, exporterUser: String? = nil, completion: @escaping ((_ data: ComAdobeCqScheduledExporterImplScheduledExporterImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScheduledExporterImplScheduledExporterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, includePaths: includePaths, exporterUser: exporterUser).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter includePaths: (query)  (optional)
     - parameter exporterUser: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo> 
     */
    open class func comAdobeCqScheduledExporterImplScheduledExporterImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, includePaths: [String]? = nil, exporterUser: String? = nil) -> RequestBuilder<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "include.paths": includePaths, 
            "exporter.user": exporterUser
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplUrl: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplApikey: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplProject: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplEnvironment: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplSendFrequency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensAnalyticsImplUrl: String? = nil, comAdobeCqScreensAnalyticsImplApikey: String? = nil, comAdobeCqScreensAnalyticsImplProject: String? = nil, comAdobeCqScreensAnalyticsImplEnvironment: String? = nil, comAdobeCqScreensAnalyticsImplSendFrequency: Int? = nil, completion: @escaping ((_ data: ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeCqScreensAnalyticsImplUrl: comAdobeCqScreensAnalyticsImplUrl, comAdobeCqScreensAnalyticsImplApikey: comAdobeCqScreensAnalyticsImplApikey, comAdobeCqScreensAnalyticsImplProject: comAdobeCqScreensAnalyticsImplProject, comAdobeCqScreensAnalyticsImplEnvironment: comAdobeCqScreensAnalyticsImplEnvironment, comAdobeCqScreensAnalyticsImplSendFrequency: comAdobeCqScreensAnalyticsImplSendFrequency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplUrl: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplApikey: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplProject: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplEnvironment: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplSendFrequency: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo> 
     */
    open class func comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensAnalyticsImplUrl: String? = nil, comAdobeCqScreensAnalyticsImplApikey: String? = nil, comAdobeCqScreensAnalyticsImplProject: String? = nil, comAdobeCqScreensAnalyticsImplEnvironment: String? = nil, comAdobeCqScreensAnalyticsImplSendFrequency: Int? = nil) -> RequestBuilder<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.cq.screens.analytics.impl.url": comAdobeCqScreensAnalyticsImplUrl, 
            "com.adobe.cq.screens.analytics.impl.apikey": comAdobeCqScreensAnalyticsImplApikey, 
            "com.adobe.cq.screens.analytics.impl.project": comAdobeCqScreensAnalyticsImplProject, 
            "com.adobe.cq.screens.analytics.impl.environment": comAdobeCqScreensAnalyticsImplEnvironment, 
            "com.adobe.cq.screens.analytics.impl.sendFrequency": comAdobeCqScreensAnalyticsImplSendFrequency?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeAemScreensPlayerPingfrequency: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordSpecialchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinlowercasechars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinuppercasechars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinnumberchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinspecialchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinlength: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensDeviceImplDeviceService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeAemScreensPlayerPingfrequency: Int? = nil, comAdobeAemScreensDevicePaswordSpecialchars: String? = nil, comAdobeAemScreensDevicePaswordMinlowercasechars: Int? = nil, comAdobeAemScreensDevicePaswordMinuppercasechars: Int? = nil, comAdobeAemScreensDevicePaswordMinnumberchars: Int? = nil, comAdobeAemScreensDevicePaswordMinspecialchars: Int? = nil, comAdobeAemScreensDevicePaswordMinlength: Int? = nil, completion: @escaping ((_ data: ComAdobeCqScreensDeviceImplDeviceServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensDeviceImplDeviceServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeAemScreensPlayerPingfrequency: comAdobeAemScreensPlayerPingfrequency, comAdobeAemScreensDevicePaswordSpecialchars: comAdobeAemScreensDevicePaswordSpecialchars, comAdobeAemScreensDevicePaswordMinlowercasechars: comAdobeAemScreensDevicePaswordMinlowercasechars, comAdobeAemScreensDevicePaswordMinuppercasechars: comAdobeAemScreensDevicePaswordMinuppercasechars, comAdobeAemScreensDevicePaswordMinnumberchars: comAdobeAemScreensDevicePaswordMinnumberchars, comAdobeAemScreensDevicePaswordMinspecialchars: comAdobeAemScreensDevicePaswordMinspecialchars, comAdobeAemScreensDevicePaswordMinlength: comAdobeAemScreensDevicePaswordMinlength).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeAemScreensPlayerPingfrequency: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordSpecialchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinlowercasechars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinuppercasechars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinnumberchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinspecialchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinlength: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensDeviceImplDeviceServiceInfo> 
     */
    open class func comAdobeCqScreensDeviceImplDeviceServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeAemScreensPlayerPingfrequency: Int? = nil, comAdobeAemScreensDevicePaswordSpecialchars: String? = nil, comAdobeAemScreensDevicePaswordMinlowercasechars: Int? = nil, comAdobeAemScreensDevicePaswordMinuppercasechars: Int? = nil, comAdobeAemScreensDevicePaswordMinnumberchars: Int? = nil, comAdobeAemScreensDevicePaswordMinspecialchars: Int? = nil, comAdobeAemScreensDevicePaswordMinlength: Int? = nil) -> RequestBuilder<ComAdobeCqScreensDeviceImplDeviceServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.aem.screens.player.pingfrequency": comAdobeAemScreensPlayerPingfrequency?.encodeToJSON(), 
            "com.adobe.aem.screens.device.pasword.specialchars": comAdobeAemScreensDevicePaswordSpecialchars, 
            "com.adobe.aem.screens.device.pasword.minlowercasechars": comAdobeAemScreensDevicePaswordMinlowercasechars?.encodeToJSON(), 
            "com.adobe.aem.screens.device.pasword.minuppercasechars": comAdobeAemScreensDevicePaswordMinuppercasechars?.encodeToJSON(), 
            "com.adobe.aem.screens.device.pasword.minnumberchars": comAdobeAemScreensDevicePaswordMinnumberchars?.encodeToJSON(), 
            "com.adobe.aem.screens.device.pasword.minspecialchars": comAdobeAemScreensDevicePaswordMinspecialchars?.encodeToJSON(), 
            "com.adobe.aem.screens.device.pasword.minlength": comAdobeAemScreensDevicePaswordMinlength?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensDeviceImplDeviceServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deviceRegistrationTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deviceRegistrationTimeout: Int? = nil, completion: @escaping ((_ data: ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, deviceRegistrationTimeout: deviceRegistrationTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deviceRegistrationTimeout: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo> 
     */
    open class func comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deviceRegistrationTimeout: Int? = nil) -> RequestBuilder<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "deviceRegistrationTimeout": deviceRegistrationTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqPagesupdatehandlerImageresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerProductresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerVideoresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerDynamicsequenceresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerPreviewmodepaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensImplHandlerChannelsUpdateHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqPagesupdatehandlerImageresourcetypes: [String]? = nil, cqPagesupdatehandlerProductresourcetypes: [String]? = nil, cqPagesupdatehandlerVideoresourcetypes: [String]? = nil, cqPagesupdatehandlerDynamicsequenceresourcetypes: [String]? = nil, cqPagesupdatehandlerPreviewmodepaths: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensImplHandlerChannelsUpdateHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqPagesupdatehandlerImageresourcetypes: cqPagesupdatehandlerImageresourcetypes, cqPagesupdatehandlerProductresourcetypes: cqPagesupdatehandlerProductresourcetypes, cqPagesupdatehandlerVideoresourcetypes: cqPagesupdatehandlerVideoresourcetypes, cqPagesupdatehandlerDynamicsequenceresourcetypes: cqPagesupdatehandlerDynamicsequenceresourcetypes, cqPagesupdatehandlerPreviewmodepaths: cqPagesupdatehandlerPreviewmodepaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqPagesupdatehandlerImageresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerProductresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerVideoresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerDynamicsequenceresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerPreviewmodepaths: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo> 
     */
    open class func comAdobeCqScreensImplHandlerChannelsUpdateHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqPagesupdatehandlerImageresourcetypes: [String]? = nil, cqPagesupdatehandlerProductresourcetypes: [String]? = nil, cqPagesupdatehandlerVideoresourcetypes: [String]? = nil, cqPagesupdatehandlerDynamicsequenceresourcetypes: [String]? = nil, cqPagesupdatehandlerPreviewmodepaths: [String]? = nil) -> RequestBuilder<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.pagesupdatehandler.imageresourcetypes": cqPagesupdatehandlerImageresourcetypes, 
            "cq.pagesupdatehandler.productresourcetypes": cqPagesupdatehandlerProductresourcetypes, 
            "cq.pagesupdatehandler.videoresourcetypes": cqPagesupdatehandlerVideoresourcetypes, 
            "cq.pagesupdatehandler.dynamicsequenceresourcetypes": cqPagesupdatehandlerDynamicsequenceresourcetypes, 
            "cq.pagesupdatehandler.previewmodepaths": cqPagesupdatehandlerPreviewmodepaths
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, completion: @escaping ((_ data: ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo> 
     */
    open class func comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil) -> RequestBuilder<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.expression": schedulerExpression
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeAemScreensImplRemoteRequestTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeAemScreensImplRemoteRequestTimeout: Int? = nil, completion: @escaping ((_ data: ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensImplRemoteImplDistributedHttpClientImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeAemScreensImplRemoteRequestTimeout: comAdobeAemScreensImplRemoteRequestTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeAemScreensImplRemoteRequestTimeout: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo> 
     */
    open class func comAdobeCqScreensImplRemoteImplDistributedHttpClientImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeAemScreensImplRemoteRequestTimeout: Int? = nil) -> RequestBuilder<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.aem.screens.impl.remote.request_timeout": comAdobeAemScreensImplRemoteRequestTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter screensChannelsPropertiesToRemove: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensImplScreensChannelPostProcessor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, screensChannelsPropertiesToRemove: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqScreensImplScreensChannelPostProcessorInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensImplScreensChannelPostProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, screensChannelsPropertiesToRemove: screensChannelsPropertiesToRemove).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter screensChannelsPropertiesToRemove: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensImplScreensChannelPostProcessorInfo> 
     */
    open class func comAdobeCqScreensImplScreensChannelPostProcessorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, screensChannelsPropertiesToRemove: [String]? = nil) -> RequestBuilder<ComAdobeCqScreensImplScreensChannelPostProcessorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "screens.channels.properties.to.remove": screensChannelsPropertiesToRemove
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensImplScreensChannelPostProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: [String]? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: Int? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: Int? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: Bool? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: String? = nil, completion: @escaping ((_ data: ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo> 
     */
    open class func comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: [String]? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: Int? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: Int? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: Bool? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: String? = nil) -> RequestBuilder<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, 
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, 
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout?.encodeToJSON(), 
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, 
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, 
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport?.encodeToJSON(), 
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, 
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, 
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter globalSize: (query)  (optional)
     - parameter maxDiskUsage: (query)  (optional)
     - parameter persistenceEnabled: (query)  (optional)
     - parameter threadPoolMaxSize: (query)  (optional)
     - parameter scheduledThreadPoolMaxSize: (query)  (optional)
     - parameter gracefulShutdownTimeout: (query)  (optional)
     - parameter queues: (query)  (optional)
     - parameter topics: (query)  (optional)
     - parameter addressesMaxDeliveryAttempts: (query)  (optional)
     - parameter addressesExpiryDelay: (query)  (optional)
     - parameter addressesAddressFullMessagePolicy: (query)  (optional)
     - parameter addressesMaxSizeBytes: (query)  (optional)
     - parameter addressesPageSizeBytes: (query)  (optional)
     - parameter addressesPageCacheMaxSize: (query)  (optional)
     - parameter clusterUser: (query)  (optional)
     - parameter clusterPassword: (query)  (optional)
     - parameter clusterCallTimeout: (query)  (optional)
     - parameter clusterCallFailoverTimeout: (query)  (optional)
     - parameter clusterClientFailureCheckPeriod: (query)  (optional)
     - parameter clusterNotificationAttempts: (query)  (optional)
     - parameter clusterNotificationInterval: (query)  (optional)
     - parameter idCacheSize: (query)  (optional)
     - parameter clusterConfirmationWindowSize: (query)  (optional)
     - parameter clusterConnectionTtl: (query)  (optional)
     - parameter clusterDuplicateDetection: (query)  (optional)
     - parameter clusterInitialConnectAttempts: (query)  (optional)
     - parameter clusterMaxRetryInterval: (query)  (optional)
     - parameter clusterMinLargeMessageSize: (query)  (optional)
     - parameter clusterProducerWindowSize: (query)  (optional)
     - parameter clusterReconnectAttempts: (query)  (optional)
     - parameter clusterRetryInterval: (query)  (optional)
     - parameter clusterRetryIntervalMultiplier: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, globalSize: Int? = nil, maxDiskUsage: Int? = nil, persistenceEnabled: Bool? = nil, threadPoolMaxSize: Int? = nil, scheduledThreadPoolMaxSize: Int? = nil, gracefulShutdownTimeout: Int? = nil, queues: [String]? = nil, topics: [String]? = nil, addressesMaxDeliveryAttempts: Int? = nil, addressesExpiryDelay: Int? = nil, addressesAddressFullMessagePolicy: String? = nil, addressesMaxSizeBytes: Int? = nil, addressesPageSizeBytes: Int? = nil, addressesPageCacheMaxSize: Int? = nil, clusterUser: String? = nil, clusterPassword: String? = nil, clusterCallTimeout: Int? = nil, clusterCallFailoverTimeout: Int? = nil, clusterClientFailureCheckPeriod: Int? = nil, clusterNotificationAttempts: Int? = nil, clusterNotificationInterval: Int? = nil, idCacheSize: Int? = nil, clusterConfirmationWindowSize: Int? = nil, clusterConnectionTtl: Int? = nil, clusterDuplicateDetection: Bool? = nil, clusterInitialConnectAttempts: Int? = nil, clusterMaxRetryInterval: Int? = nil, clusterMinLargeMessageSize: Int? = nil, clusterProducerWindowSize: Int? = nil, clusterReconnectAttempts: Int? = nil, clusterRetryInterval: Int? = nil, clusterRetryIntervalMultiplier: Double? = nil, completion: @escaping ((_ data: ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensMqActivemqImplArtemisJMSProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, globalSize: globalSize, maxDiskUsage: maxDiskUsage, persistenceEnabled: persistenceEnabled, threadPoolMaxSize: threadPoolMaxSize, scheduledThreadPoolMaxSize: scheduledThreadPoolMaxSize, gracefulShutdownTimeout: gracefulShutdownTimeout, queues: queues, topics: topics, addressesMaxDeliveryAttempts: addressesMaxDeliveryAttempts, addressesExpiryDelay: addressesExpiryDelay, addressesAddressFullMessagePolicy: addressesAddressFullMessagePolicy, addressesMaxSizeBytes: addressesMaxSizeBytes, addressesPageSizeBytes: addressesPageSizeBytes, addressesPageCacheMaxSize: addressesPageCacheMaxSize, clusterUser: clusterUser, clusterPassword: clusterPassword, clusterCallTimeout: clusterCallTimeout, clusterCallFailoverTimeout: clusterCallFailoverTimeout, clusterClientFailureCheckPeriod: clusterClientFailureCheckPeriod, clusterNotificationAttempts: clusterNotificationAttempts, clusterNotificationInterval: clusterNotificationInterval, idCacheSize: idCacheSize, clusterConfirmationWindowSize: clusterConfirmationWindowSize, clusterConnectionTtl: clusterConnectionTtl, clusterDuplicateDetection: clusterDuplicateDetection, clusterInitialConnectAttempts: clusterInitialConnectAttempts, clusterMaxRetryInterval: clusterMaxRetryInterval, clusterMinLargeMessageSize: clusterMinLargeMessageSize, clusterProducerWindowSize: clusterProducerWindowSize, clusterReconnectAttempts: clusterReconnectAttempts, clusterRetryInterval: clusterRetryInterval, clusterRetryIntervalMultiplier: clusterRetryIntervalMultiplier).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter globalSize: (query)  (optional)
     - parameter maxDiskUsage: (query)  (optional)
     - parameter persistenceEnabled: (query)  (optional)
     - parameter threadPoolMaxSize: (query)  (optional)
     - parameter scheduledThreadPoolMaxSize: (query)  (optional)
     - parameter gracefulShutdownTimeout: (query)  (optional)
     - parameter queues: (query)  (optional)
     - parameter topics: (query)  (optional)
     - parameter addressesMaxDeliveryAttempts: (query)  (optional)
     - parameter addressesExpiryDelay: (query)  (optional)
     - parameter addressesAddressFullMessagePolicy: (query)  (optional)
     - parameter addressesMaxSizeBytes: (query)  (optional)
     - parameter addressesPageSizeBytes: (query)  (optional)
     - parameter addressesPageCacheMaxSize: (query)  (optional)
     - parameter clusterUser: (query)  (optional)
     - parameter clusterPassword: (query)  (optional)
     - parameter clusterCallTimeout: (query)  (optional)
     - parameter clusterCallFailoverTimeout: (query)  (optional)
     - parameter clusterClientFailureCheckPeriod: (query)  (optional)
     - parameter clusterNotificationAttempts: (query)  (optional)
     - parameter clusterNotificationInterval: (query)  (optional)
     - parameter idCacheSize: (query)  (optional)
     - parameter clusterConfirmationWindowSize: (query)  (optional)
     - parameter clusterConnectionTtl: (query)  (optional)
     - parameter clusterDuplicateDetection: (query)  (optional)
     - parameter clusterInitialConnectAttempts: (query)  (optional)
     - parameter clusterMaxRetryInterval: (query)  (optional)
     - parameter clusterMinLargeMessageSize: (query)  (optional)
     - parameter clusterProducerWindowSize: (query)  (optional)
     - parameter clusterReconnectAttempts: (query)  (optional)
     - parameter clusterRetryInterval: (query)  (optional)
     - parameter clusterRetryIntervalMultiplier: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo> 
     */
    open class func comAdobeCqScreensMqActivemqImplArtemisJMSProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, globalSize: Int? = nil, maxDiskUsage: Int? = nil, persistenceEnabled: Bool? = nil, threadPoolMaxSize: Int? = nil, scheduledThreadPoolMaxSize: Int? = nil, gracefulShutdownTimeout: Int? = nil, queues: [String]? = nil, topics: [String]? = nil, addressesMaxDeliveryAttempts: Int? = nil, addressesExpiryDelay: Int? = nil, addressesAddressFullMessagePolicy: String? = nil, addressesMaxSizeBytes: Int? = nil, addressesPageSizeBytes: Int? = nil, addressesPageCacheMaxSize: Int? = nil, clusterUser: String? = nil, clusterPassword: String? = nil, clusterCallTimeout: Int? = nil, clusterCallFailoverTimeout: Int? = nil, clusterClientFailureCheckPeriod: Int? = nil, clusterNotificationAttempts: Int? = nil, clusterNotificationInterval: Int? = nil, idCacheSize: Int? = nil, clusterConfirmationWindowSize: Int? = nil, clusterConnectionTtl: Int? = nil, clusterDuplicateDetection: Bool? = nil, clusterInitialConnectAttempts: Int? = nil, clusterMaxRetryInterval: Int? = nil, clusterMinLargeMessageSize: Int? = nil, clusterProducerWindowSize: Int? = nil, clusterReconnectAttempts: Int? = nil, clusterRetryInterval: Int? = nil, clusterRetryIntervalMultiplier: Double? = nil) -> RequestBuilder<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "global.size": globalSize?.encodeToJSON(), 
            "max.disk.usage": maxDiskUsage?.encodeToJSON(), 
            "persistence.enabled": persistenceEnabled, 
            "thread.pool.max.size": threadPoolMaxSize?.encodeToJSON(), 
            "scheduled.thread.pool.max.size": scheduledThreadPoolMaxSize?.encodeToJSON(), 
            "graceful.shutdown.timeout": gracefulShutdownTimeout?.encodeToJSON(), 
            "queues": queues, 
            "topics": topics, 
            "addresses.max.delivery.attempts": addressesMaxDeliveryAttempts?.encodeToJSON(), 
            "addresses.expiry.delay": addressesExpiryDelay?.encodeToJSON(), 
            "addresses.address.full.message.policy": addressesAddressFullMessagePolicy, 
            "addresses.max.size.bytes": addressesMaxSizeBytes?.encodeToJSON(), 
            "addresses.page.size.bytes": addressesPageSizeBytes?.encodeToJSON(), 
            "addresses.page.cache.max.size": addressesPageCacheMaxSize?.encodeToJSON(), 
            "cluster.user": clusterUser, 
            "cluster.password": clusterPassword, 
            "cluster.call.timeout": clusterCallTimeout?.encodeToJSON(), 
            "cluster.call.failover.timeout": clusterCallFailoverTimeout?.encodeToJSON(), 
            "cluster.client.failure.check.period": clusterClientFailureCheckPeriod?.encodeToJSON(), 
            "cluster.notification.attempts": clusterNotificationAttempts?.encodeToJSON(), 
            "cluster.notification.interval": clusterNotificationInterval?.encodeToJSON(), 
            "id.cache.size": idCacheSize?.encodeToJSON(), 
            "cluster.confirmation.window.size": clusterConfirmationWindowSize?.encodeToJSON(), 
            "cluster.connection.ttl": clusterConnectionTtl?.encodeToJSON(), 
            "cluster.duplicate.detection": clusterDuplicateDetection, 
            "cluster.initial.connect.attempts": clusterInitialConnectAttempts?.encodeToJSON(), 
            "cluster.max.retry.interval": clusterMaxRetryInterval?.encodeToJSON(), 
            "cluster.min.large.message.size": clusterMinLargeMessageSize?.encodeToJSON(), 
            "cluster.producer.window.size": clusterProducerWindowSize?.encodeToJSON(), 
            "cluster.reconnect.attempts": clusterReconnectAttempts?.encodeToJSON(), 
            "cluster.retry.interval": clusterRetryInterval?.encodeToJSON(), 
            "cluster.retry.interval.multiplier": clusterRetryIntervalMultiplier
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: (query)  (optional)
     - parameter comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: [String]? = nil, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: String? = nil, completion: @escaping ((_ data: ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: (query)  (optional)
     - parameter comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo> 
     */
    open class func comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: [String]? = nil, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: String? = nil) -> RequestBuilder<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath": comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, 
            "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency": comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disableSmartSync: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disableSmartSync: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disableSmartSync: disableSmartSync).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disableSmartSync: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo> 
     */
    open class func comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disableSmartSync: Bool? = nil) -> RequestBuilder<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "disableSmartSync": disableSmartSync
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableDataTriggeredContent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableDataTriggeredContent: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo?,_ error: Error?) -> Void)) {
        comAdobeCqScreensSegmentationImplSegmentationFeatureFlagWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enableDataTriggeredContent: enableDataTriggeredContent).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableDataTriggeredContent: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo> 
     */
    open class func comAdobeCqScreensSegmentationImplSegmentationFeatureFlagWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableDataTriggeredContent: Bool? = nil) -> RequestBuilder<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enableDataTriggeredContent": enableDataTriggeredContent
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo> 
     */
    open class func comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo> 
     */
    open class func comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter dispatcherAddress: (query)  (optional)
     - parameter dispatcherFilterAllowed: (query)  (optional)
     - parameter dispatcherFilterBlocked: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, dispatcherAddress: String? = nil, dispatcherFilterAllowed: [String]? = nil, dispatcherFilterBlocked: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, dispatcherAddress: dispatcherAddress, dispatcherFilterAllowed: dispatcherFilterAllowed, dispatcherFilterBlocked: dispatcherFilterBlocked).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter dispatcherAddress: (query)  (optional)
     - parameter dispatcherFilterAllowed: (query)  (optional)
     - parameter dispatcherFilterBlocked: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo> 
     */
    open class func comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, dispatcherAddress: String? = nil, dispatcherFilterAllowed: [String]? = nil, dispatcherFilterBlocked: [String]? = nil) -> RequestBuilder<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags, 
            "dispatcher.address": dispatcherAddress, 
            "dispatcher.filter.allowed": dispatcherFilterAllowed, 
            "dispatcher.filter.blocked": dispatcherFilterBlocked
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo> 
     */
    open class func comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter webserverAddress: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, webserverAddress: String? = nil, completion: @escaping ((_ data: ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, webserverAddress: webserverAddress).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter webserverAddress: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo> 
     */
    open class func comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, webserverAddress: String? = nil) -> RequestBuilder<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags, 
            "webserver.address": webserverAddress
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter ttl1: (query)  (optional)
     - parameter ttl2: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, ttl1: Int? = nil, ttl2: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialAccountverificationImplAccountManagementConfigImWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enable: enable, ttl1: ttl1, ttl2: ttl2).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter ttl1: (query)  (optional)
     - parameter ttl2: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo> 
     */
    open class func comAdobeCqSocialAccountverificationImplAccountManagementConfigImWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, ttl1: Int? = nil, ttl2: Int? = nil) -> RequestBuilder<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enable": enable, 
            "ttl1": ttl1?.encodeToJSON(), 
            "ttl2": ttl2?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priority: priority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo> 
     */
    open class func comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priority": priority?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priority: priority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo> 
     */
    open class func comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priority": priority?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo> 
     */
    open class func comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.topics": eventTopics, 
            "event.filter": eventFilter
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter accepted: (query)  (optional)
     - parameter ranked: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, accepted: Bool? = nil, ranked: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, accepted: accepted, ranked: ranked).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter accepted: (query)  (optional)
     - parameter ranked: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo> 
     */
    open class func comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, accepted: Bool? = nil, ranked: Int? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "accepted": accepted, 
            "ranked": ranked?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ranking: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ranking: Int? = nil, enable: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, ranking: ranking, enable: enable).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ranking: (query)  (optional)
     - parameter enable: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo> 
     */
    open class func comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ranking: Int? = nil, enable: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "ranking": ranking?.encodeToJSON(), 
            "enable": enable
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter streamPath: (query)  (optional)
     - parameter streamName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, streamPath: String? = nil, streamName: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, streamPath: streamPath, streamName: streamName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter streamPath: (query)  (optional)
     - parameter streamName: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo> 
     */
    open class func comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, streamPath: String? = nil, streamName: String? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "streamPath": streamPath, 
            "streamName": streamName
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRetry: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRetry: Int? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxRetry: maxRetry, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRetry: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo> 
     */
    open class func comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRetry: Int? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "MaxRetry": maxRetry?.encodeToJSON(), 
            "fieldWhitelist": fieldWhitelist, 
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter extensionOrder: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, attachmentTypeBlacklist: String? = nil, extensionOrder: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, attachmentTypeBlacklist: attachmentTypeBlacklist, extensionOrder: extensionOrder).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter extensionOrder: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo> 
     */
    open class func comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, attachmentTypeBlacklist: String? = nil, extensionOrder: Int? = nil) -> RequestBuilder<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "attachmentTypeBlacklist": attachmentTypeBlacklist, 
            "extension.order": extensionOrder?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timezonesExpirytime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCalendarServletsTimeZoneServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timezonesExpirytime: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCalendarServletsTimeZoneServletInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCalendarServletsTimeZoneServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, timezonesExpirytime: timezonesExpirytime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timezonesExpirytime: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo> 
     */
    open class func comAdobeCqSocialCalendarServletsTimeZoneServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timezonesExpirytime: Int? = nil) -> RequestBuilder<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "timezones.expirytime": timezonesExpirytime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ranking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ranking: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, ranking: ranking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ranking: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo> 
     */
    open class func comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ranking: Int? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "ranking": ranking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo> 
     */
    open class func comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist, 
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo> 
     */
    open class func comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist, 
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numUserLimit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numUserLimit: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, numUserLimit: numUserLimit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numUserLimit: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo> 
     */
    open class func comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numUserLimit: Int? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "numUserLimit": numUserLimit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableScheduledPostsSearch: (query)  (optional)
     - parameter numberOfMinutes: (query)  (optional)
     - parameter maxSearchLimit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableScheduledPostsSearch: Bool? = nil, numberOfMinutes: Int? = nil, maxSearchLimit: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enableScheduledPostsSearch: enableScheduledPostsSearch, numberOfMinutes: numberOfMinutes, maxSearchLimit: maxSearchLimit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableScheduledPostsSearch: (query)  (optional)
     - parameter numberOfMinutes: (query)  (optional)
     - parameter maxSearchLimit: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo> 
     */
    open class func comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableScheduledPostsSearch: Bool? = nil, numberOfMinutes: Int? = nil, maxSearchLimit: Int? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enableScheduledPostsSearch": enableScheduledPostsSearch, 
            "numberOfMinutes": numberOfMinutes?.encodeToJSON(), 
            "maxSearchLimit": maxSearchLimit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter corsEnabling: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, corsEnabling: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsCorsCORSAuthenticationFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, corsEnabling: corsEnabling).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter corsEnabling: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo> 
     */
    open class func comAdobeCqSocialCommonsCorsCORSAuthenticationFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, corsEnabling: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cors.enabling": corsEnabling
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priorityOrder": priorityOrder?.encodeToJSON(), 
            "replyEmailPatterns": replyEmailPatterns
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contextPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contextPath: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, contextPath: contextPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contextPath: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contextPath: String? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "context.path": contextPath
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.topics": eventTopics
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priorityOrder": priorityOrder?.encodeToJSON(), 
            "replyEmailPatterns": replyEmailPatterns
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter patternTime: (query)  (optional)
     - parameter patternNewline: (query)  (optional)
     - parameter patternDayOfMonth: (query)  (optional)
     - parameter patternMonth: (query)  (optional)
     - parameter patternYear: (query)  (optional)
     - parameter patternDate: (query)  (optional)
     - parameter patternDateTime: (query)  (optional)
     - parameter patternEmail: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, patternTime: String? = nil, patternNewline: String? = nil, patternDayOfMonth: String? = nil, patternMonth: String? = nil, patternYear: String? = nil, patternDate: String? = nil, patternDateTime: String? = nil, patternEmail: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, patternTime: patternTime, patternNewline: patternNewline, patternDayOfMonth: patternDayOfMonth, patternMonth: patternMonth, patternYear: patternYear, patternDate: patternDate, patternDateTime: patternDateTime, patternEmail: patternEmail).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter patternTime: (query)  (optional)
     - parameter patternNewline: (query)  (optional)
     - parameter patternDayOfMonth: (query)  (optional)
     - parameter patternMonth: (query)  (optional)
     - parameter patternYear: (query)  (optional)
     - parameter patternDate: (query)  (optional)
     - parameter patternDateTime: (query)  (optional)
     - parameter patternEmail: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, patternTime: String? = nil, patternNewline: String? = nil, patternDayOfMonth: String? = nil, patternMonth: String? = nil, patternYear: String? = nil, patternDate: String? = nil, patternDateTime: String? = nil, patternEmail: String? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "pattern.time": patternTime, 
            "pattern.newline": patternNewline, 
            "pattern.dayOfMonth": patternDayOfMonth, 
            "pattern.month": patternMonth, 
            "pattern.year": patternYear, 
            "pattern.date": patternDate, 
            "pattern.dateTime": patternDateTime, 
            "pattern.email": patternEmail
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter emailName: (query)  (optional)
     - parameter emailCreatePostFromReply: (query)  (optional)
     - parameter emailAddCommentIdTo: (query)  (optional)
     - parameter emailSubjectMaximumLength: (query)  (optional)
     - parameter emailReplyToAddress: (query)  (optional)
     - parameter emailReplyToDelimiter: (query)  (optional)
     - parameter emailTrackerIdPrefixInSubject: (query)  (optional)
     - parameter emailTrackerIdPrefixInBody: (query)  (optional)
     - parameter emailAsHTML: (query)  (optional)
     - parameter emailDefaultUserName: (query)  (optional)
     - parameter emailTemplatesRootPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, emailName: String? = nil, emailCreatePostFromReply: Bool? = nil, emailAddCommentIdTo: String? = nil, emailSubjectMaximumLength: Int? = nil, emailReplyToAddress: String? = nil, emailReplyToDelimiter: String? = nil, emailTrackerIdPrefixInSubject: String? = nil, emailTrackerIdPrefixInBody: String? = nil, emailAsHTML: Bool? = nil, emailDefaultUserName: String? = nil, emailTemplatesRootPath: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, emailName: emailName, emailCreatePostFromReply: emailCreatePostFromReply, emailAddCommentIdTo: emailAddCommentIdTo, emailSubjectMaximumLength: emailSubjectMaximumLength, emailReplyToAddress: emailReplyToAddress, emailReplyToDelimiter: emailReplyToDelimiter, emailTrackerIdPrefixInSubject: emailTrackerIdPrefixInSubject, emailTrackerIdPrefixInBody: emailTrackerIdPrefixInBody, emailAsHTML: emailAsHTML, emailDefaultUserName: emailDefaultUserName, emailTemplatesRootPath: emailTemplatesRootPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter emailName: (query)  (optional)
     - parameter emailCreatePostFromReply: (query)  (optional)
     - parameter emailAddCommentIdTo: (query)  (optional)
     - parameter emailSubjectMaximumLength: (query)  (optional)
     - parameter emailReplyToAddress: (query)  (optional)
     - parameter emailReplyToDelimiter: (query)  (optional)
     - parameter emailTrackerIdPrefixInSubject: (query)  (optional)
     - parameter emailTrackerIdPrefixInBody: (query)  (optional)
     - parameter emailAsHTML: (query)  (optional)
     - parameter emailDefaultUserName: (query)  (optional)
     - parameter emailTemplatesRootPath: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, emailName: String? = nil, emailCreatePostFromReply: Bool? = nil, emailAddCommentIdTo: String? = nil, emailSubjectMaximumLength: Int? = nil, emailReplyToAddress: String? = nil, emailReplyToDelimiter: String? = nil, emailTrackerIdPrefixInSubject: String? = nil, emailTrackerIdPrefixInBody: String? = nil, emailAsHTML: Bool? = nil, emailDefaultUserName: String? = nil, emailTemplatesRootPath: String? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "email.name": emailName, 
            "email.createPostFromReply": emailCreatePostFromReply, 
            "email.addCommentIdTo": emailAddCommentIdTo, 
            "email.subjectMaximumLength": emailSubjectMaximumLength?.encodeToJSON(), 
            "email.replyToAddress": emailReplyToAddress, 
            "email.replyToDelimiter": emailReplyToDelimiter, 
            "email.trackerIdPrefixInSubject": emailTrackerIdPrefixInSubject, 
            "email.trackerIdPrefixInBody": emailTrackerIdPrefixInBody, 
            "email.asHTML": emailAsHTML, 
            "email.defaultUserName": emailDefaultUserName, 
            "email.templates.rootPath": emailTemplatesRootPath
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectProtocol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectProtocol: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, connectProtocol: connectProtocol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectProtocol: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectProtocol: String? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "connectProtocol": connectProtocol
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priorityOrder": priorityOrder?.encodeToJSON(), 
            "replyEmailPatterns": replyEmailPatterns
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priorityOrder": priorityOrder?.encodeToJSON(), 
            "replyEmailPatterns": replyEmailPatterns
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priorityOrder": priorityOrder?.encodeToJSON(), 
            "replyEmailPatterns": replyEmailPatterns
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priorityOrder": priorityOrder?.encodeToJSON(), 
            "replyEmailPatterns": replyEmailPatterns
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replyEmailPatterns: [String]? = nil, priorityOrder: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, replyEmailPatterns: replyEmailPatterns, priorityOrder: priorityOrder).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replyEmailPatterns: [String]? = nil, priorityOrder: Int? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "replyEmailPatterns": replyEmailPatterns, 
            "priorityOrder": priorityOrder?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo> 
     */
    open class func comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priorityOrder": priorityOrder?.encodeToJSON(), 
            "replyEmailPatterns": replyEmailPatterns
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numberOfDays: (query)  (optional)
     - parameter ageOfFile: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numberOfDays: Int? = nil, ageOfFile: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, numberOfDays: numberOfDays, ageOfFile: ageOfFile).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numberOfDays: (query)  (optional)
     - parameter ageOfFile: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo> 
     */
    open class func comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numberOfDays: Int? = nil, ageOfFile: Int? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "numberOfDays": numberOfDays?.encodeToJSON(), 
            "ageOfFile": ageOfFile?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter verbs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, verbs: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter, verbs: verbs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter verbs: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo> 
     */
    open class func comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, verbs: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.topics": eventTopics, 
            "event.filter": eventFilter, 
            "verbs": verbs
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter uGCLimit: (query)  (optional)
     - parameter ugcLimitDuration: (query)  (optional)
     - parameter domains: (query)  (optional)
     - parameter toList: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, uGCLimit: Int? = nil, ugcLimitDuration: Int? = nil, domains: [String]? = nil, toList: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enable: enable, uGCLimit: uGCLimit, ugcLimitDuration: ugcLimitDuration, domains: domains, toList: toList).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter uGCLimit: (query)  (optional)
     - parameter ugcLimitDuration: (query)  (optional)
     - parameter domains: (query)  (optional)
     - parameter toList: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo> 
     */
    open class func comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, uGCLimit: Int? = nil, ugcLimitDuration: Int? = nil, domains: [String]? = nil, toList: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enable": enable, 
            "UGCLimit": uGCLimit?.encodeToJSON(), 
            "ugcLimitDuration": ugcLimitDuration?.encodeToJSON(), 
            "domains": domains, 
            "toList": toList
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthCloudConfigRoot: (query)  (optional)
     - parameter providerConfigRoot: (query)  (optional)
     - parameter providerConfigCreateTagsEnabled: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)
     - parameter providerConfigFacebookFetchFields: (query)  (optional)
     - parameter providerConfigFacebookFields: (query)  (optional)
     - parameter providerConfigRefreshUserdataEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthCloudConfigRoot: String? = nil, providerConfigRoot: String? = nil, providerConfigCreateTagsEnabled: Bool? = nil, providerConfigUserFolder: String? = nil, providerConfigFacebookFetchFields: Bool? = nil, providerConfigFacebookFields: [String]? = nil, providerConfigRefreshUserdataEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialConnectOauthImplFacebookProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId, oauthCloudConfigRoot: oauthCloudConfigRoot, providerConfigRoot: providerConfigRoot, providerConfigCreateTagsEnabled: providerConfigCreateTagsEnabled, providerConfigUserFolder: providerConfigUserFolder, providerConfigFacebookFetchFields: providerConfigFacebookFetchFields, providerConfigFacebookFields: providerConfigFacebookFields, providerConfigRefreshUserdataEnabled: providerConfigRefreshUserdataEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthCloudConfigRoot: (query)  (optional)
     - parameter providerConfigRoot: (query)  (optional)
     - parameter providerConfigCreateTagsEnabled: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)
     - parameter providerConfigFacebookFetchFields: (query)  (optional)
     - parameter providerConfigFacebookFields: (query)  (optional)
     - parameter providerConfigRefreshUserdataEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo> 
     */
    open class func comAdobeCqSocialConnectOauthImplFacebookProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthCloudConfigRoot: String? = nil, providerConfigRoot: String? = nil, providerConfigCreateTagsEnabled: Bool? = nil, providerConfigUserFolder: String? = nil, providerConfigFacebookFetchFields: Bool? = nil, providerConfigFacebookFields: [String]? = nil, providerConfigRefreshUserdataEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.provider.id": oauthProviderId, 
            "oauth.cloud.config.root": oauthCloudConfigRoot, 
            "provider.config.root": providerConfigRoot, 
            "provider.config.create.tags.enabled": providerConfigCreateTagsEnabled, 
            "provider.config.user.folder": providerConfigUserFolder, 
            "provider.config.facebook.fetch.fields": providerConfigFacebookFetchFields, 
            "provider.config.facebook.fields": providerConfigFacebookFields, 
            "provider.config.refresh.userdata.enabled": providerConfigRefreshUserdataEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: [String]? = nil, serviceRanking: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo> 
     */
    open class func comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: [String]? = nil, serviceRanking: Int? = nil) -> RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path, 
            "service.ranking": serviceRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter facebook: (query)  (optional)
     - parameter twitter: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, facebook: [String]? = nil, twitter: [String]? = nil, providerConfigUserFolder: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, facebook: facebook, twitter: twitter, providerConfigUserFolder: providerConfigUserFolder).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter facebook: (query)  (optional)
     - parameter twitter: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo> 
     */
    open class func comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, facebook: [String]? = nil, twitter: [String]? = nil, providerConfigUserFolder: String? = nil) -> RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "facebook": facebook, 
            "twitter": twitter, 
            "provider.config.user.folder": providerConfigUserFolder
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthCloudConfigRoot: (query)  (optional)
     - parameter providerConfigRoot: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)
     - parameter providerConfigTwitterEnableParams: (query)  (optional)
     - parameter providerConfigTwitterParams: (query)  (optional)
     - parameter providerConfigRefreshUserdataEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthCloudConfigRoot: String? = nil, providerConfigRoot: String? = nil, providerConfigUserFolder: String? = nil, providerConfigTwitterEnableParams: Bool? = nil, providerConfigTwitterParams: [String]? = nil, providerConfigRefreshUserdataEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialConnectOauthImplTwitterProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId, oauthCloudConfigRoot: oauthCloudConfigRoot, providerConfigRoot: providerConfigRoot, providerConfigUserFolder: providerConfigUserFolder, providerConfigTwitterEnableParams: providerConfigTwitterEnableParams, providerConfigTwitterParams: providerConfigTwitterParams, providerConfigRefreshUserdataEnabled: providerConfigRefreshUserdataEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthCloudConfigRoot: (query)  (optional)
     - parameter providerConfigRoot: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)
     - parameter providerConfigTwitterEnableParams: (query)  (optional)
     - parameter providerConfigTwitterParams: (query)  (optional)
     - parameter providerConfigRefreshUserdataEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo> 
     */
    open class func comAdobeCqSocialConnectOauthImplTwitterProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthCloudConfigRoot: String? = nil, providerConfigRoot: String? = nil, providerConfigUserFolder: String? = nil, providerConfigTwitterEnableParams: Bool? = nil, providerConfigTwitterParams: [String]? = nil, providerConfigRefreshUserdataEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.provider.id": oauthProviderId, 
            "oauth.cloud.config.root": oauthCloudConfigRoot, 
            "provider.config.root": providerConfigRoot, 
            "provider.config.user.folder": providerConfigUserFolder, 
            "provider.config.twitter.enable.params": providerConfigTwitterEnableParams, 
            "provider.config.twitter.params": providerConfigTwitterParams, 
            "provider.config.refresh.userdata.enabled": providerConfigRefreshUserdataEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialContentFragmentsServicesEnabled: (query)  (optional)
     - parameter cqSocialContentFragmentsServicesWaitTimeSeconds: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialContentFragmentsServicesEnabled: Bool? = nil, cqSocialContentFragmentsServicesWaitTimeSeconds: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSocialContentFragmentsServicesEnabled: cqSocialContentFragmentsServicesEnabled, cqSocialContentFragmentsServicesWaitTimeSeconds: cqSocialContentFragmentsServicesWaitTimeSeconds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialContentFragmentsServicesEnabled: (query)  (optional)
     - parameter cqSocialContentFragmentsServicesWaitTimeSeconds: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo> 
     */
    open class func comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialContentFragmentsServicesEnabled: Bool? = nil, cqSocialContentFragmentsServicesWaitTimeSeconds: Int? = nil) -> RequestBuilder<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.social.content.fragments.services.enabled": cqSocialContentFragmentsServicesEnabled, 
            "cq.social.content.fragments.services.waitTimeSeconds": cqSocialContentFragmentsServicesWaitTimeSeconds?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionId: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)
     - parameter timeLimit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionId: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int? = nil, cacheStartSize: Int? = nil, cacheTtl: Int? = nil, cacheSize: Int? = nil, timeLimit: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, versionId: versionId, cacheOn: cacheOn, concurrencyLevel: concurrencyLevel, cacheStartSize: cacheStartSize, cacheTtl: cacheTtl, cacheSize: cacheSize, timeLimit: timeLimit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionId: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)
     - parameter timeLimit: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo> 
     */
    open class func comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionId: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int? = nil, cacheStartSize: Int? = nil, cacheTtl: Int? = nil, cacheSize: Int? = nil, timeLimit: Int? = nil) -> RequestBuilder<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "version.id": versionId, 
            "cache.on": cacheOn, 
            "concurrency.level": concurrencyLevel?.encodeToJSON(), 
            "cache.start.size": cacheStartSize?.encodeToJSON(), 
            "cache.ttl": cacheTtl?.encodeToJSON(), 
            "cache.size": cacheSize?.encodeToJSON(), 
            "time.limit": timeLimit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrZkTimeout: (query)  (optional)
     - parameter solrCommit: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrZkTimeout: String? = nil, solrCommit: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int? = nil, cacheStartSize: Int? = nil, cacheTtl: Int? = nil, cacheSize: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, solrZkTimeout: solrZkTimeout, solrCommit: solrCommit, cacheOn: cacheOn, concurrencyLevel: concurrencyLevel, cacheStartSize: cacheStartSize, cacheTtl: cacheTtl, cacheSize: cacheSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrZkTimeout: (query)  (optional)
     - parameter solrCommit: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo> 
     */
    open class func comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrZkTimeout: String? = nil, solrCommit: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int? = nil, cacheStartSize: Int? = nil, cacheTtl: Int? = nil, cacheSize: Int? = nil) -> RequestBuilder<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "solr.zk.timeout": solrZkTimeout, 
            "solr.commit": solrCommit, 
            "cache.on": cacheOn, 
            "concurrency.level": concurrencyLevel?.encodeToJSON(), 
            "cache.start.size": cacheStartSize?.encodeToJSON(), 
            "cache.ttl": cacheTtl?.encodeToJSON(), 
            "cache.size": cacheSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrZkTimeout: (query)  (optional)
     - parameter solrCommit: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrZkTimeout: String? = nil, solrCommit: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int? = nil, cacheStartSize: Int? = nil, cacheTtl: Int? = nil, cacheSize: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, solrZkTimeout: solrZkTimeout, solrCommit: solrCommit, cacheOn: cacheOn, concurrencyLevel: concurrencyLevel, cacheStartSize: cacheStartSize, cacheTtl: cacheTtl, cacheSize: cacheSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrZkTimeout: (query)  (optional)
     - parameter solrCommit: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo> 
     */
    open class func comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrZkTimeout: String? = nil, solrCommit: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int? = nil, cacheStartSize: Int? = nil, cacheTtl: Int? = nil, cacheSize: Int? = nil) -> RequestBuilder<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "solr.zk.timeout": solrZkTimeout, 
            "solr.commit": solrCommit, 
            "cache.on": cacheOn, 
            "concurrency.level": concurrencyLevel?.encodeToJSON(), 
            "cache.start.size": cacheStartSize?.encodeToJSON(), 
            "cache.ttl": cacheTtl?.encodeToJSON(), 
            "cache.size": cacheSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isMemberCheck: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isMemberCheck: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isMemberCheck: isMemberCheck).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isMemberCheck: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo> 
     */
    open class func comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isMemberCheck: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "isMemberCheck": isMemberCheck
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isMemberCheck: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isMemberCheck: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isMemberCheck: isMemberCheck).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isMemberCheck: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo> 
     */
    open class func comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isMemberCheck: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "isMemberCheck": isMemberCheck
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo> 
     */
    open class func comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo> 
     */
    open class func comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialEnablementServicesImplAuthorMarkerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo> 
     */
    open class func comAdobeCqSocialEnablementServicesImplAuthorMarkerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil) -> RequestBuilder<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: String? = nil, slingServletExtensions: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletSelectors: slingServletSelectors, slingServletExtensions: slingServletExtensions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo> 
     */
    open class func comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: String? = nil, slingServletExtensions: String? = nil) -> RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.selectors": slingServletSelectors, 
            "sling.servlet.extensions": slingServletExtensions
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo> 
     */
    open class func comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist, 
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo> 
     */
    open class func comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist, 
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extensionOrder: (query)  (optional)
     - parameter flushForumontopic: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialForumDispatcherImplFlushOperations(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extensionOrder: Int? = nil, flushForumontopic: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialForumDispatcherImplFlushOperationsWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, extensionOrder: extensionOrder, flushForumontopic: flushForumontopic).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extensionOrder: (query)  (optional)
     - parameter flushForumontopic: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo> 
     */
    open class func comAdobeCqSocialForumDispatcherImplFlushOperationsWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extensionOrder: Int? = nil, flushForumontopic: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "extension.order": extensionOrder?.encodeToJSON(), 
            "flush.forumontopic": flushForumontopic
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter groupListingPaginationEnable: (query)  (optional)
     - parameter groupListingLazyloadingEnable: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, groupListingPaginationEnable: Bool? = nil, groupListingLazyloadingEnable: Bool? = nil, pageSize: Int? = nil, priority: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, groupListingPaginationEnable: groupListingPaginationEnable, groupListingLazyloadingEnable: groupListingLazyloadingEnable, pageSize: pageSize, priority: priority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter groupListingPaginationEnable: (query)  (optional)
     - parameter groupListingLazyloadingEnable: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter priority: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo> 
     */
    open class func comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, groupListingPaginationEnable: Bool? = nil, groupListingLazyloadingEnable: Bool? = nil, pageSize: Int? = nil, priority: Int? = nil) -> RequestBuilder<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "group.listing.pagination.enable": groupListingPaginationEnable, 
            "group.listing.lazyloading.enable": groupListingLazyloadingEnable, 
            "page.size": pageSize?.encodeToJSON(), 
            "priority": priority?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxWaitTime: (query)  (optional)
     - parameter minWaitBetweenRetries: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialGroupImplGroupServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxWaitTime: Int? = nil, minWaitBetweenRetries: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialGroupImplGroupServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialGroupImplGroupServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxWaitTime: maxWaitTime, minWaitBetweenRetries: minWaitBetweenRetries).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxWaitTime: (query)  (optional)
     - parameter minWaitBetweenRetries: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialGroupImplGroupServiceImplInfo> 
     */
    open class func comAdobeCqSocialGroupImplGroupServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxWaitTime: Int? = nil, minWaitBetweenRetries: Int? = nil) -> RequestBuilder<ComAdobeCqSocialGroupImplGroupServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "maxWaitTime": maxWaitTime?.encodeToJSON(), 
            "minWaitBetweenRetries": minWaitBetweenRetries?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialGroupImplGroupServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterGuavaCacheEnabled: (query)  (optional)
     - parameter parameterGuavaCacheParams: (query)  (optional)
     - parameter parameterGuavaCacheReload: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterGuavaCacheEnabled: Bool? = nil, parameterGuavaCacheParams: String? = nil, parameterGuavaCacheReload: Bool? = nil, serviceRanking: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialHandlebarsGuavaTemplateCacheImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, parameterGuavaCacheEnabled: parameterGuavaCacheEnabled, parameterGuavaCacheParams: parameterGuavaCacheParams, parameterGuavaCacheReload: parameterGuavaCacheReload, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterGuavaCacheEnabled: (query)  (optional)
     - parameter parameterGuavaCacheParams: (query)  (optional)
     - parameter parameterGuavaCacheReload: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo> 
     */
    open class func comAdobeCqSocialHandlebarsGuavaTemplateCacheImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterGuavaCacheEnabled: Bool? = nil, parameterGuavaCacheParams: String? = nil, parameterGuavaCacheReload: Bool? = nil, serviceRanking: Int? = nil) -> RequestBuilder<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "parameter.guava.cache.enabled": parameterGuavaCacheEnabled, 
            "parameter.guava.cache.params": parameterGuavaCacheParams, 
            "parameter.guava.cache.reload": parameterGuavaCacheReload, 
            "service.ranking": serviceRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo> 
     */
    open class func comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist, 
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo> 
     */
    open class func comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist, 
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo> 
     */
    open class func comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo> 
     */
    open class func comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter everyoneLimit: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, everyoneLimit: Int? = nil, priority: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, everyoneLimit: everyoneLimit, priority: priority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter everyoneLimit: (query)  (optional)
     - parameter priority: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo> 
     */
    open class func comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, everyoneLimit: Int? = nil, priority: Int? = nil) -> RequestBuilder<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "everyoneLimit": everyoneLimit?.encodeToJSON(), 
            "priority": priority?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter messageProperties: (query)  (optional)
     - parameter messageBoxSizeLimit: (query)  (optional)
     - parameter messageCountLimit: (query)  (optional)
     - parameter notifyFailure: (query)  (optional)
     - parameter failureMessageFrom: (query)  (optional)
     - parameter failureTemplatePath: (query)  (optional)
     - parameter maxRetries: (query)  (optional)
     - parameter minWaitBetweenRetries: (query)  (optional)
     - parameter countUpdatePoolSize: (query)  (optional)
     - parameter inboxPath: (query)  (optional)
     - parameter sentitemsPath: (query)  (optional)
     - parameter supportAttachments: (query)  (optional)
     - parameter supportGroupMessaging: (query)  (optional)
     - parameter maxTotalRecipients: (query)  (optional)
     - parameter batchSize: (query)  (optional)
     - parameter maxTotalAttachmentSize: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter allowedAttachmentTypes: (query)  (optional)
     - parameter serviceSelector: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, messageProperties: [String]? = nil, messageBoxSizeLimit: Int? = nil, messageCountLimit: Int? = nil, notifyFailure: Bool? = nil, failureMessageFrom: String? = nil, failureTemplatePath: String? = nil, maxRetries: Int? = nil, minWaitBetweenRetries: Int? = nil, countUpdatePoolSize: Int? = nil, inboxPath: String? = nil, sentitemsPath: String? = nil, supportAttachments: Bool? = nil, supportGroupMessaging: Bool? = nil, maxTotalRecipients: Int? = nil, batchSize: Int? = nil, maxTotalAttachmentSize: Int? = nil, attachmentTypeBlacklist: [String]? = nil, allowedAttachmentTypes: [String]? = nil, serviceSelector: String? = nil, fieldWhitelist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, messageProperties: messageProperties, messageBoxSizeLimit: messageBoxSizeLimit, messageCountLimit: messageCountLimit, notifyFailure: notifyFailure, failureMessageFrom: failureMessageFrom, failureTemplatePath: failureTemplatePath, maxRetries: maxRetries, minWaitBetweenRetries: minWaitBetweenRetries, countUpdatePoolSize: countUpdatePoolSize, inboxPath: inboxPath, sentitemsPath: sentitemsPath, supportAttachments: supportAttachments, supportGroupMessaging: supportGroupMessaging, maxTotalRecipients: maxTotalRecipients, batchSize: batchSize, maxTotalAttachmentSize: maxTotalAttachmentSize, attachmentTypeBlacklist: attachmentTypeBlacklist, allowedAttachmentTypes: allowedAttachmentTypes, serviceSelector: serviceSelector, fieldWhitelist: fieldWhitelist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter messageProperties: (query)  (optional)
     - parameter messageBoxSizeLimit: (query)  (optional)
     - parameter messageCountLimit: (query)  (optional)
     - parameter notifyFailure: (query)  (optional)
     - parameter failureMessageFrom: (query)  (optional)
     - parameter failureTemplatePath: (query)  (optional)
     - parameter maxRetries: (query)  (optional)
     - parameter minWaitBetweenRetries: (query)  (optional)
     - parameter countUpdatePoolSize: (query)  (optional)
     - parameter inboxPath: (query)  (optional)
     - parameter sentitemsPath: (query)  (optional)
     - parameter supportAttachments: (query)  (optional)
     - parameter supportGroupMessaging: (query)  (optional)
     - parameter maxTotalRecipients: (query)  (optional)
     - parameter batchSize: (query)  (optional)
     - parameter maxTotalAttachmentSize: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter allowedAttachmentTypes: (query)  (optional)
     - parameter serviceSelector: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo> 
     */
    open class func comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, messageProperties: [String]? = nil, messageBoxSizeLimit: Int? = nil, messageCountLimit: Int? = nil, notifyFailure: Bool? = nil, failureMessageFrom: String? = nil, failureTemplatePath: String? = nil, maxRetries: Int? = nil, minWaitBetweenRetries: Int? = nil, countUpdatePoolSize: Int? = nil, inboxPath: String? = nil, sentitemsPath: String? = nil, supportAttachments: Bool? = nil, supportGroupMessaging: Bool? = nil, maxTotalRecipients: Int? = nil, batchSize: Int? = nil, maxTotalAttachmentSize: Int? = nil, attachmentTypeBlacklist: [String]? = nil, allowedAttachmentTypes: [String]? = nil, serviceSelector: String? = nil, fieldWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "message.properties": messageProperties, 
            "messageBoxSizeLimit": messageBoxSizeLimit?.encodeToJSON(), 
            "messageCountLimit": messageCountLimit?.encodeToJSON(), 
            "notifyFailure": notifyFailure, 
            "failureMessageFrom": failureMessageFrom, 
            "failureTemplatePath": failureTemplatePath, 
            "maxRetries": maxRetries?.encodeToJSON(), 
            "minWaitBetweenRetries": minWaitBetweenRetries?.encodeToJSON(), 
            "countUpdatePoolSize": countUpdatePoolSize?.encodeToJSON(), 
            "inbox.path": inboxPath, 
            "sentitems.path": sentitemsPath, 
            "supportAttachments": supportAttachments, 
            "supportGroupMessaging": supportGroupMessaging, 
            "maxTotalRecipients": maxTotalRecipients?.encodeToJSON(), 
            "batchSize": batchSize?.encodeToJSON(), 
            "maxTotalAttachmentSize": maxTotalAttachmentSize?.encodeToJSON(), 
            "attachmentTypeBlacklist": attachmentTypeBlacklist, 
            "allowedAttachmentTypes": allowedAttachmentTypes, 
            "serviceSelector": serviceSelector, 
            "fieldWhitelist": fieldWhitelist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypeFilters: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypeFilters: [String]? = nil, priority: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, resourceTypeFilters: resourceTypeFilters, priority: priority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypeFilters: (query)  (optional)
     - parameter priority: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo> 
     */
    open class func comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypeFilters: [String]? = nil, priority: Int? = nil) -> RequestBuilder<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "resourceType.filters": resourceTypeFilters, 
            "priority": priority?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialModerationDashboardApiModerationDashboardSocialWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priority: priority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo> 
     */
    open class func comAdobeCqSocialModerationDashboardApiModerationDashboardSocialWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int? = nil) -> RequestBuilder<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priority": priority?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priority: priority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo> 
     */
    open class func comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int? = nil) -> RequestBuilder<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priority": priority?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypeFilters: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypeFilters: [String]? = nil, priority: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, resourceTypeFilters: resourceTypeFilters, priority: priority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypeFilters: (query)  (optional)
     - parameter priority: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo> 
     */
    open class func comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypeFilters: [String]? = nil, priority: Int? = nil) -> RequestBuilder<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "resourceType.filters": resourceTypeFilters, 
            "priority": priority?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialNotificationsImplMentionsRouter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialNotificationsImplMentionsRouterInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialNotificationsImplMentionsRouterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialNotificationsImplMentionsRouterInfo> 
     */
    open class func comAdobeCqSocialNotificationsImplMentionsRouterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil) -> RequestBuilder<ComAdobeCqSocialNotificationsImplMentionsRouterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.topics": eventTopics, 
            "event.filter": eventFilter
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialNotificationsImplMentionsRouterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxUnreadNotificationCount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialNotificationsImplNotificationManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxUnreadNotificationCount: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialNotificationsImplNotificationManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxUnreadNotificationCount: maxUnreadNotificationCount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxUnreadNotificationCount: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo> 
     */
    open class func comAdobeCqSocialNotificationsImplNotificationManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxUnreadNotificationCount: Int? = nil) -> RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "max.unread.notification.count": maxUnreadNotificationCount?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialNotificationsImplNotificationsRouter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialNotificationsImplNotificationsRouterInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialNotificationsImplNotificationsRouterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo> 
     */
    open class func comAdobeCqSocialNotificationsImplNotificationsRouterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil) -> RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.topics": eventTopics, 
            "event.filter": eventFilter
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo> 
     */
    open class func comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist, 
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialReportingAnalyticsPollingImporterInterval: (query)  (optional)
     - parameter cqSocialReportingAnalyticsPollingImporterPageSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialReportingAnalyticsPollingImporterInterval: Int? = nil, cqSocialReportingAnalyticsPollingImporterPageSize: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSocialReportingAnalyticsPollingImporterInterval: cqSocialReportingAnalyticsPollingImporterInterval, cqSocialReportingAnalyticsPollingImporterPageSize: cqSocialReportingAnalyticsPollingImporterPageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialReportingAnalyticsPollingImporterInterval: (query)  (optional)
     - parameter cqSocialReportingAnalyticsPollingImporterPageSize: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo> 
     */
    open class func comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialReportingAnalyticsPollingImporterInterval: Int? = nil, cqSocialReportingAnalyticsPollingImporterPageSize: Int? = nil) -> RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.social.reporting.analytics.polling.importer.interval": cqSocialReportingAnalyticsPollingImporterInterval?.encodeToJSON(), 
            "cq.social.reporting.analytics.polling.importer.pageSize": cqSocialReportingAnalyticsPollingImporterPageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportFetchDelay: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportFetchDelay: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, reportFetchDelay: reportFetchDelay).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportFetchDelay: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo> 
     */
    open class func comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportFetchDelay: Int? = nil) -> RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "report.fetch.delay": reportFetchDelay?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialConsoleAnalyticsSitesMapping: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialConsoleAnalyticsSitesMapping: [String]? = nil, priority: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSocialConsoleAnalyticsSitesMapping: cqSocialConsoleAnalyticsSitesMapping, priority: priority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialConsoleAnalyticsSitesMapping: (query)  (optional)
     - parameter priority: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo> 
     */
    open class func comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialConsoleAnalyticsSitesMapping: [String]? = nil, priority: Int? = nil) -> RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.social.console.analytics.sites.mapping": cqSocialConsoleAnalyticsSitesMapping, 
            "priority": priority?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo> 
     */
    open class func comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist, 
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: String? = nil, slingServletExtensions: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletSelectors: slingServletSelectors, slingServletExtensions: slingServletExtensions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo> 
     */
    open class func comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: String? = nil, slingServletExtensions: String? = nil) -> RequestBuilder<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.selectors": slingServletSelectors, 
            "sling.servlet.extensions": slingServletExtensions
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: [String]? = nil, slingServletExtensions: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletSelectors: slingServletSelectors, slingServletExtensions: slingServletExtensions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo> 
     */
    open class func comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: [String]? = nil, slingServletExtensions: String? = nil) -> RequestBuilder<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.selectors": slingServletSelectors, 
            "sling.servlet.extensions": slingServletExtensions
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialScoringImplScoringEventListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialScoringImplScoringEventListenerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialScoringImplScoringEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialScoringImplScoringEventListenerInfo> 
     */
    open class func comAdobeCqSocialScoringImplScoringEventListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil) -> RequestBuilder<ComAdobeCqSocialScoringImplScoringEventListenerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.topics": eventTopics, 
            "event.filter": eventFilter
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialScoringImplScoringEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableFallback: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableFallback: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enableFallback: enableFallback).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableFallback: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo> 
     */
    open class func comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableFallback: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enableFallback": enableFallback
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter sitePathFilters: (query)  (optional)
     - parameter sitePackageGroup: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialSiteEndpointsImplSiteOperationService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, sitePathFilters: [String]? = nil, sitePackageGroup: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialSiteEndpointsImplSiteOperationServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, sitePathFilters: sitePathFilters, sitePackageGroup: sitePackageGroup).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter sitePathFilters: (query)  (optional)
     - parameter sitePackageGroup: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo> 
     */
    open class func comAdobeCqSocialSiteEndpointsImplSiteOperationServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, sitePathFilters: [String]? = nil, sitePackageGroup: String? = nil) -> RequestBuilder<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fieldWhitelist": fieldWhitelist, 
            "sitePathFilters": sitePathFilters, 
            "sitePackageGroup": sitePackageGroup
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialConsoleAnalyticsComponents: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialConsoleAnalyticsComponents: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSocialConsoleAnalyticsComponents: cqSocialConsoleAnalyticsComponents).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialConsoleAnalyticsComponents: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo> 
     */
    open class func comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialConsoleAnalyticsComponents: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.social.console.analytics.components": cqSocialConsoleAnalyticsComponents
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter componentsUsingTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialSiteImplSiteConfiguratorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, componentsUsingTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialSiteImplSiteConfiguratorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, componentsUsingTags: componentsUsingTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter componentsUsingTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo> 
     */
    open class func comAdobeCqSocialSiteImplSiteConfiguratorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, componentsUsingTags: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "componentsUsingTags": componentsUsingTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter srpType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialSrpImplSocialSolrConnector(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, srpType: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialSrpImplSocialSolrConnectorInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialSrpImplSocialSolrConnectorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, srpType: srpType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter srpType: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo> 
     */
    open class func comAdobeCqSocialSrpImplSocialSolrConnectorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, srpType: String? = nil) -> RequestBuilder<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "srp.type": srpType
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter agentName: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter propertyNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialSyncImplDiffChangesObserver(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, agentName: String? = nil, diffPath: String? = nil, propertyNames: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialSyncImplDiffChangesObserverInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialSyncImplDiffChangesObserverWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, agentName: agentName, diffPath: diffPath, propertyNames: propertyNames).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter agentName: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter propertyNames: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialSyncImplDiffChangesObserverInfo> 
     */
    open class func comAdobeCqSocialSyncImplDiffChangesObserverWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, agentName: String? = nil, diffPath: String? = nil, propertyNames: String? = nil) -> RequestBuilder<ComAdobeCqSocialSyncImplDiffChangesObserverInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled, 
            "agentName": agentName, 
            "diffPath": diffPath, 
            "propertyNames": propertyNames
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialSyncImplDiffChangesObserverInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nodetypes: (query)  (optional)
     - parameter ignorableprops: (query)  (optional)
     - parameter ignorablenodes: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter distfolders: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialSyncImplGroupSyncListenerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nodetypes: [String]? = nil, ignorableprops: [String]? = nil, ignorablenodes: String? = nil, enabled: Bool? = nil, distfolders: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialSyncImplGroupSyncListenerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, nodetypes: nodetypes, ignorableprops: ignorableprops, ignorablenodes: ignorablenodes, enabled: enabled, distfolders: distfolders).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nodetypes: (query)  (optional)
     - parameter ignorableprops: (query)  (optional)
     - parameter ignorablenodes: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter distfolders: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo> 
     */
    open class func comAdobeCqSocialSyncImplGroupSyncListenerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nodetypes: [String]? = nil, ignorableprops: [String]? = nil, ignorablenodes: String? = nil, enabled: Bool? = nil, distfolders: String? = nil) -> RequestBuilder<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "nodetypes": nodetypes, 
            "ignorableprops": ignorableprops, 
            "ignorablenodes": ignorablenodes, 
            "enabled": enabled, 
            "distfolders": distfolders
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter activeRunModes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, activeRunModes: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialSyncImplPublisherSyncServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, activeRunModes: activeRunModes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter activeRunModes: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo> 
     */
    open class func comAdobeCqSocialSyncImplPublisherSyncServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, activeRunModes: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "activeRunModes": activeRunModes
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nodetypes: (query)  (optional)
     - parameter ignorableprops: (query)  (optional)
     - parameter ignorablenodes: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter distfolders: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialSyncImplUserSyncListenerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nodetypes: [String]? = nil, ignorableprops: [String]? = nil, ignorablenodes: [String]? = nil, enabled: Bool? = nil, distfolders: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialSyncImplUserSyncListenerImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialSyncImplUserSyncListenerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, nodetypes: nodetypes, ignorableprops: ignorableprops, ignorablenodes: ignorablenodes, enabled: enabled, distfolders: distfolders).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nodetypes: (query)  (optional)
     - parameter ignorableprops: (query)  (optional)
     - parameter ignorablenodes: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter distfolders: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo> 
     */
    open class func comAdobeCqSocialSyncImplUserSyncListenerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nodetypes: [String]? = nil, ignorableprops: [String]? = nil, ignorablenodes: [String]? = nil, enabled: Bool? = nil, distfolders: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "nodetypes": nodetypes, 
            "ignorableprops": ignorableprops, 
            "ignorablenodes": ignorablenodes, 
            "enabled": enabled, 
            "distfolders": distfolders
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter translateLanguage: (query)  (optional)
     - parameter translateDisplay: (query)  (optional)
     - parameter translateAttribution: (query)  (optional)
     - parameter translateCaching: (query)  (optional)
     - parameter translateSmartRendering: (query)  (optional)
     - parameter translateCachingDuration: (query)  (optional)
     - parameter translateSessionSaveInterval: (query)  (optional)
     - parameter translateSessionSaveBatchLimit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, translateLanguage: String? = nil, translateDisplay: String? = nil, translateAttribution: Bool? = nil, translateCaching: String? = nil, translateSmartRendering: String? = nil, translateCachingDuration: String? = nil, translateSessionSaveInterval: String? = nil, translateSessionSaveBatchLimit: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialTranslationImplTranslationServiceConfigManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, translateLanguage: translateLanguage, translateDisplay: translateDisplay, translateAttribution: translateAttribution, translateCaching: translateCaching, translateSmartRendering: translateSmartRendering, translateCachingDuration: translateCachingDuration, translateSessionSaveInterval: translateSessionSaveInterval, translateSessionSaveBatchLimit: translateSessionSaveBatchLimit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter translateLanguage: (query)  (optional)
     - parameter translateDisplay: (query)  (optional)
     - parameter translateAttribution: (query)  (optional)
     - parameter translateCaching: (query)  (optional)
     - parameter translateSmartRendering: (query)  (optional)
     - parameter translateCachingDuration: (query)  (optional)
     - parameter translateSessionSaveInterval: (query)  (optional)
     - parameter translateSessionSaveBatchLimit: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo> 
     */
    open class func comAdobeCqSocialTranslationImplTranslationServiceConfigManagerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, translateLanguage: String? = nil, translateDisplay: String? = nil, translateAttribution: Bool? = nil, translateCaching: String? = nil, translateSmartRendering: String? = nil, translateCachingDuration: String? = nil, translateSessionSaveInterval: String? = nil, translateSessionSaveBatchLimit: String? = nil) -> RequestBuilder<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "translate.language": translateLanguage, 
            "translate.display": translateDisplay, 
            "translate.attribution": translateAttribution, 
            "translate.caching": translateCaching, 
            "translate.smart.rendering": translateSmartRendering, 
            "translate.caching.duration": translateCachingDuration, 
            "translate.session.save.interval": translateSessionSaveInterval, 
            "translate.session.save.batchLimit": translateSessionSaveBatchLimit
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter translateListenerType: (query)  (optional)
     - parameter translatePropertyList: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialTranslationImplUGCLanguageDetector(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, translateListenerType: [String]? = nil, translatePropertyList: [String]? = nil, poolSize: Int? = nil, maxPoolSize: Int? = nil, queueSize: Int? = nil, keepAliveTime: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialTranslationImplUGCLanguageDetectorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter, translateListenerType: translateListenerType, translatePropertyList: translatePropertyList, poolSize: poolSize, maxPoolSize: maxPoolSize, queueSize: queueSize, keepAliveTime: keepAliveTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter translateListenerType: (query)  (optional)
     - parameter translatePropertyList: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo> 
     */
    open class func comAdobeCqSocialTranslationImplUGCLanguageDetectorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, translateListenerType: [String]? = nil, translatePropertyList: [String]? = nil, poolSize: Int? = nil, maxPoolSize: Int? = nil, queueSize: Int? = nil, keepAliveTime: Int? = nil) -> RequestBuilder<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.topics": eventTopics, 
            "event.filter": eventFilter, 
            "translate.listener.type": translateListenerType, 
            "translate.property.list": translatePropertyList, 
            "poolSize": poolSize?.encodeToJSON(), 
            "maxPoolSize": maxPoolSize?.encodeToJSON(), 
            "queueSize": queueSize?.encodeToJSON(), 
            "keepAliveTime": keepAliveTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threadPoolSize: (query)  (optional)
     - parameter delayTime: (query)  (optional)
     - parameter workerSleepTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threadPoolSize: Int? = nil, delayTime: Int? = nil, workerSleepTime: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, threadPoolSize: threadPoolSize, delayTime: delayTime, workerSleepTime: workerSleepTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threadPoolSize: (query)  (optional)
     - parameter delayTime: (query)  (optional)
     - parameter workerSleepTime: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo> 
     */
    open class func comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threadPoolSize: Int? = nil, delayTime: Int? = nil, workerSleepTime: Int? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "threadPoolSize": threadPoolSize?.encodeToJSON(), 
            "delayTime": delayTime?.encodeToJSON(), 
            "workerSleepTime": workerSleepTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, poolSize: Int? = nil, maxPoolSize: Int? = nil, queueSize: Int? = nil, keepAliveTime: Int? = nil, completion: @escaping ((_ data: ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, poolSize: poolSize, maxPoolSize: maxPoolSize, queueSize: queueSize, keepAliveTime: keepAliveTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo> 
     */
    open class func comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, poolSize: Int? = nil, maxPoolSize: Int? = nil, queueSize: Int? = nil, keepAliveTime: Int? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "poolSize": poolSize?.encodeToJSON(), 
            "maxPoolSize": maxPoolSize?.encodeToJSON(), 
            "queueSize": queueSize?.encodeToJSON(), 
            "keepAliveTime": keepAliveTime?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isPrimaryPublisher: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isPrimaryPublisher: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialUgcbaseImplPublisherConfigurationImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isPrimaryPublisher: isPrimaryPublisher).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isPrimaryPublisher: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo> 
     */
    open class func comAdobeCqSocialUgcbaseImplPublisherConfigurationImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isPrimaryPublisher: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "isPrimaryPublisher": isPrimaryPublisher
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter legacyCloudUGCPathMapping: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, legacyCloudUGCPathMapping: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialUgcbaseImplSocialUtilsImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, legacyCloudUGCPathMapping: legacyCloudUGCPathMapping).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter legacyCloudUGCPathMapping: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo> 
     */
    open class func comAdobeCqSocialUgcbaseImplSocialUtilsImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, legacyCloudUGCPathMapping: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "legacyCloudUGCPathMapping": legacyCloudUGCPathMapping
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter automoderationSequence: (query)  (optional)
     - parameter automoderationOnfailurestop: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, automoderationSequence: [String]? = nil, automoderationOnfailurestop: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialUgcbaseModerationImplAutoModerationImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, automoderationSequence: automoderationSequence, automoderationOnfailurestop: automoderationOnfailurestop).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter automoderationSequence: (query)  (optional)
     - parameter automoderationOnfailurestop: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo> 
     */
    open class func comAdobeCqSocialUgcbaseModerationImplAutoModerationImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, automoderationSequence: [String]? = nil, automoderationOnfailurestop: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "automoderation.sequence": automoderationSequence, 
            "automoderation.onfailurestop": automoderationOnfailurestop
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter watchwordsPositive: (query)  (optional)
     - parameter watchwordsNegative: (query)  (optional)
     - parameter watchwordsPath: (query)  (optional)
     - parameter sentimentPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, watchwordsPositive: [String]? = nil, watchwordsNegative: [String]? = nil, watchwordsPath: String? = nil, sentimentPath: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialUgcbaseModerationImplSentimentProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, watchwordsPositive: watchwordsPositive, watchwordsNegative: watchwordsNegative, watchwordsPath: watchwordsPath, sentimentPath: sentimentPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter watchwordsPositive: (query)  (optional)
     - parameter watchwordsNegative: (query)  (optional)
     - parameter watchwordsPath: (query)  (optional)
     - parameter sentimentPath: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo> 
     */
    open class func comAdobeCqSocialUgcbaseModerationImplSentimentProcessWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, watchwordsPositive: [String]? = nil, watchwordsNegative: [String]? = nil, watchwordsPath: String? = nil, sentimentPath: String? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "watchwords.positive": watchwordsPositive, 
            "watchwords.negative": watchwordsNegative, 
            "watchwords.path": watchwordsPath, 
            "sentiment.path": sentimentPath
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultAttachmentTypeBlacklist: (query)  (optional)
     - parameter baselineAttachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultAttachmentTypeBlacklist: [String]? = nil, baselineAttachmentTypeBlacklist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultAttachmentTypeBlacklist: defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist: baselineAttachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultAttachmentTypeBlacklist: (query)  (optional)
     - parameter baselineAttachmentTypeBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo> 
     */
    open class func comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultAttachmentTypeBlacklist: [String]? = nil, baselineAttachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "default.attachment.type.blacklist": defaultAttachmentTypeBlacklist, 
            "baseline.attachment.type.blacklist": baselineAttachmentTypeBlacklist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterWhitelist: (query)  (optional)
     - parameter parameterWhitelistPrefixes: (query)  (optional)
     - parameter binaryParameterWhitelist: (query)  (optional)
     - parameter modifierWhitelist: (query)  (optional)
     - parameter operationWhitelist: (query)  (optional)
     - parameter operationWhitelistPrefixes: (query)  (optional)
     - parameter typehintWhitelist: (query)  (optional)
     - parameter resourcetypeWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterWhitelist: [String]? = nil, parameterWhitelistPrefixes: [String]? = nil, binaryParameterWhitelist: [String]? = nil, modifierWhitelist: [String]? = nil, operationWhitelist: [String]? = nil, operationWhitelistPrefixes: [String]? = nil, typehintWhitelist: [String]? = nil, resourcetypeWhitelist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, parameterWhitelist: parameterWhitelist, parameterWhitelistPrefixes: parameterWhitelistPrefixes, binaryParameterWhitelist: binaryParameterWhitelist, modifierWhitelist: modifierWhitelist, operationWhitelist: operationWhitelist, operationWhitelistPrefixes: operationWhitelistPrefixes, typehintWhitelist: typehintWhitelist, resourcetypeWhitelist: resourcetypeWhitelist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterWhitelist: (query)  (optional)
     - parameter parameterWhitelistPrefixes: (query)  (optional)
     - parameter binaryParameterWhitelist: (query)  (optional)
     - parameter modifierWhitelist: (query)  (optional)
     - parameter operationWhitelist: (query)  (optional)
     - parameter operationWhitelistPrefixes: (query)  (optional)
     - parameter typehintWhitelist: (query)  (optional)
     - parameter resourcetypeWhitelist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo> 
     */
    open class func comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterWhitelist: [String]? = nil, parameterWhitelistPrefixes: [String]? = nil, binaryParameterWhitelist: [String]? = nil, modifierWhitelist: [String]? = nil, operationWhitelist: [String]? = nil, operationWhitelistPrefixes: [String]? = nil, typehintWhitelist: [String]? = nil, resourcetypeWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "parameter.whitelist": parameterWhitelist, 
            "parameter.whitelist.prefixes": parameterWhitelistPrefixes, 
            "binary.parameter.whitelist": binaryParameterWhitelist, 
            "modifier.whitelist": modifierWhitelist, 
            "operation.whitelist": operationWhitelist, 
            "operation.whitelist.prefixes": operationWhitelistPrefixes, 
            "typehint.whitelist": typehintWhitelist, 
            "resourcetype.whitelist": resourcetypeWhitelist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletExtensions: String? = nil, slingServletPaths: String? = nil, slingServletMethods: String? = nil, completion: @escaping ((_ data: ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletExtensions: slingServletExtensions, slingServletPaths: slingServletPaths, slingServletMethods: slingServletMethods).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo> 
     */
    open class func comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletExtensions: String? = nil, slingServletPaths: String? = nil, slingServletMethods: String? = nil) -> RequestBuilder<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.extensions": slingServletExtensions, 
            "sling.servlet.paths": slingServletPaths, 
            "sling.servlet.methods": slingServletMethods
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter agentConfiguration: (query)  (optional)
     - parameter contextPath: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqSocialUserImplTransportHttpToPublisher(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, agentConfiguration: [String]? = nil, contextPath: String? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqSocialUserImplTransportHttpToPublisherInfo?,_ error: Error?) -> Void)) {
        comAdobeCqSocialUserImplTransportHttpToPublisherWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enable: enable, agentConfiguration: agentConfiguration, contextPath: contextPath, disabledCipherSuites: disabledCipherSuites, enabledCipherSuites: enabledCipherSuites).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter agentConfiguration: (query)  (optional)
     - parameter contextPath: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo> 
     */
    open class func comAdobeCqSocialUserImplTransportHttpToPublisherWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, agentConfiguration: [String]? = nil, contextPath: String? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enable": enable, 
            "agent.configuration": agentConfiguration, 
            "context.path": contextPath, 
            "disabled.cipher.suites": disabledCipherSuites, 
            "enabled.cipher.suites": enabledCipherSuites
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypes: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo?,_ error: Error?) -> Void)) {
        comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, resourceTypes: resourceTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypes: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo> 
     */
    open class func comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypes: [String]? = nil) -> RequestBuilder<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "resource.types": resourceTypes
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deletePathRegexps: (query)  (optional)
     - parameter deleteSql2Query: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deletePathRegexps: [String]? = nil, deleteSql2Query: String? = nil, completion: @escaping ((_ data: ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo?,_ error: Error?) -> Void)) {
        comAdobeCqUpgradesCleanupImplUpgradeContentCleanupWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, deletePathRegexps: deletePathRegexps, deleteSql2Query: deleteSql2Query).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deletePathRegexps: (query)  (optional)
     - parameter deleteSql2Query: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo> 
     */
    open class func comAdobeCqUpgradesCleanupImplUpgradeContentCleanupWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deletePathRegexps: [String]? = nil, deleteSql2Query: String? = nil) -> RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "delete.path.regexps": deletePathRegexps, 
            "delete.sql2.query": deleteSql2Query
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deleteNameRegexps: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deleteNameRegexps: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo?,_ error: Error?) -> Void)) {
        comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, deleteNameRegexps: deleteNameRegexps).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deleteNameRegexps: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo> 
     */
    open class func comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deleteNameRegexps: [String]? = nil) -> RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "delete.name.regexps": deleteNameRegexps
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, threshold: threshold, jobTopicName: jobTopicName, emailEnabled: emailEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo> 
     */
    open class func comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "threshold": threshold?.encodeToJSON(), 
            "jobTopicName": jobTopicName, 
            "emailEnabled": emailEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter jobPurgeThreshold: (query)  (optional)
     - parameter jobPurgeMaxJobs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, jobPurgeThreshold: Int? = nil, jobPurgeMaxJobs: Int? = nil, completion: @escaping ((_ data: ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo?,_ error: Error?) -> Void)) {
        comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, jobPurgeThreshold: jobPurgeThreshold, jobPurgeMaxJobs: jobPurgeMaxJobs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter jobPurgeThreshold: (query)  (optional)
     - parameter jobPurgeMaxJobs: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo> 
     */
    open class func comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, jobPurgeThreshold: Int? = nil, jobPurgeMaxJobs: Int? = nil) -> RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.expression": schedulerExpression, 
            "job.purge.threshold": jobPurgeThreshold?.encodeToJSON(), 
            "job.purge.max.jobs": jobPurgeMaxJobs?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, threshold: threshold, jobTopicName: jobTopicName, emailEnabled: emailEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo> 
     */
    open class func comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "threshold": threshold?.encodeToJSON(), 
            "jobTopicName": jobTopicName, 
            "emailEnabled": emailEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, threshold: threshold, jobTopicName: jobTopicName, emailEnabled: emailEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo> 
     */
    open class func comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "threshold": threshold?.encodeToJSON(), 
            "jobTopicName": jobTopicName, 
            "emailEnabled": emailEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter launchesEventhandlerThreadpoolMaxsize: (query)  (optional)
     - parameter launchesEventhandlerThreadpoolPriority: (query)  (optional)
     - parameter launchesEventhandlerUpdatelastmodification: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqWcmLaunchesImplLaunchesEventHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, launchesEventhandlerThreadpoolMaxsize: Int? = nil, launchesEventhandlerThreadpoolPriority: String? = nil, launchesEventhandlerUpdatelastmodification: Bool? = nil, completion: @escaping ((_ data: ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeCqWcmLaunchesImplLaunchesEventHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, launchesEventhandlerThreadpoolMaxsize: launchesEventhandlerThreadpoolMaxsize, launchesEventhandlerThreadpoolPriority: launchesEventhandlerThreadpoolPriority, launchesEventhandlerUpdatelastmodification: launchesEventhandlerUpdatelastmodification).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter launchesEventhandlerThreadpoolMaxsize: (query)  (optional)
     - parameter launchesEventhandlerThreadpoolPriority: (query)  (optional)
     - parameter launchesEventhandlerUpdatelastmodification: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo> 
     */
    open class func comAdobeCqWcmLaunchesImplLaunchesEventHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, launchesEventhandlerThreadpoolMaxsize: Int? = nil, launchesEventhandlerThreadpoolPriority: String? = nil, launchesEventhandlerUpdatelastmodification: Bool? = nil) -> RequestBuilder<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.filter": eventFilter, 
            "launches.eventhandler.threadpool.maxsize": launchesEventhandlerThreadpoolMaxsize?.encodeToJSON(), 
            "launches.eventhandler.threadpool.priority": launchesEventhandlerThreadpoolPriority, 
            "launches.eventhandler.updatelastmodification": launchesEventhandlerUpdatelastmodification
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmQrcodeServletWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmQrcodeServletWhitelist: [String]? = nil, completion: @escaping ((_ data: ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo?,_ error: Error?) -> Void)) {
        comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmQrcodeServletWhitelist: cqWcmQrcodeServletWhitelist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmQrcodeServletWhitelist: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo> 
     */
    open class func comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmQrcodeServletWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.wcm.qrcode.servlet.whitelist": cqWcmQrcodeServletWhitelist
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter size: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, size: Int? = nil, completion: @escaping ((_ data: ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, size: size).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter size: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo> 
     */
    open class func comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, size: Int? = nil) -> RequestBuilder<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "size": size?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter syncTranslationStateSchedulingFormat: (query)  (optional)
     - parameter schedulingRepeatTranslationSchedulingFormat: (query)  (optional)
     - parameter syncTranslationStateLockTimeoutInMinutes: (query)  (optional)
     - parameter exportFormat: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, syncTranslationStateSchedulingFormat: String? = nil, schedulingRepeatTranslationSchedulingFormat: String? = nil, syncTranslationStateLockTimeoutInMinutes: String? = nil, exportFormat: String? = nil, completion: @escaping ((_ data: ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo?,_ error: Error?) -> Void)) {
        comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, syncTranslationStateSchedulingFormat: syncTranslationStateSchedulingFormat, schedulingRepeatTranslationSchedulingFormat: schedulingRepeatTranslationSchedulingFormat, syncTranslationStateLockTimeoutInMinutes: syncTranslationStateLockTimeoutInMinutes, exportFormat: exportFormat).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter syncTranslationStateSchedulingFormat: (query)  (optional)
     - parameter schedulingRepeatTranslationSchedulingFormat: (query)  (optional)
     - parameter syncTranslationStateLockTimeoutInMinutes: (query)  (optional)
     - parameter exportFormat: (query)  (optional)
     - returns: RequestBuilder<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo> 
     */
    open class func comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, syncTranslationStateSchedulingFormat: String? = nil, schedulingRepeatTranslationSchedulingFormat: String? = nil, syncTranslationStateLockTimeoutInMinutes: String? = nil, exportFormat: String? = nil) -> RequestBuilder<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "syncTranslationState.schedulingFormat": syncTranslationStateSchedulingFormat, 
            "schedulingRepeatTranslation.schedulingFormat": schedulingRepeatTranslationSchedulingFormat, 
            "syncTranslationState.lockTimeoutInMinutes": syncTranslationStateLockTimeoutInMinutes, 
            "export.format": exportFormat
        ])

        let requestBuilder: RequestBuilder<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter portalOutboxes: (query)  (optional)
     - parameter draftDataService: (query)  (optional)
     - parameter draftMetadataService: (query)  (optional)
     - parameter submitDataService: (query)  (optional)
     - parameter submitMetadataService: (query)  (optional)
     - parameter pendingSignDataService: (query)  (optional)
     - parameter pendingSignMetadataService: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, portalOutboxes: [String]? = nil, draftDataService: String? = nil, draftMetadataService: String? = nil, submitDataService: String? = nil, submitMetadataService: String? = nil, pendingSignDataService: String? = nil, pendingSignMetadataService: String? = nil, completion: @escaping ((_ data: ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, portalOutboxes: portalOutboxes, draftDataService: draftDataService, draftMetadataService: draftMetadataService, submitDataService: submitDataService, submitMetadataService: submitMetadataService, pendingSignDataService: pendingSignDataService, pendingSignMetadataService: pendingSignMetadataService).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter portalOutboxes: (query)  (optional)
     - parameter draftDataService: (query)  (optional)
     - parameter draftMetadataService: (query)  (optional)
     - parameter submitDataService: (query)  (optional)
     - parameter submitMetadataService: (query)  (optional)
     - parameter pendingSignDataService: (query)  (optional)
     - parameter pendingSignMetadataService: (query)  (optional)
     - returns: RequestBuilder<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo> 
     */
    open class func comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, portalOutboxes: [String]? = nil, draftDataService: String? = nil, draftMetadataService: String? = nil, submitDataService: String? = nil, submitMetadataService: String? = nil, pendingSignDataService: String? = nil, pendingSignMetadataService: String? = nil) -> RequestBuilder<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "portal.outboxes": portalOutboxes, 
            "draft.data.service": draftDataService, 
            "draft.metadata.service": draftMetadataService, 
            "submit.data.service": submitDataService, 
            "submit.metadata.service": submitMetadataService, 
            "pendingSign.data.service": pendingSignDataService, 
            "pendingSign.metadata.service": pendingSignMetadataService
        ])

        let requestBuilder: RequestBuilder<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formportalInterval: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeFdFpConfigFormsPortalSchedulerService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formportalInterval: String? = nil, completion: @escaping ((_ data: ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeFdFpConfigFormsPortalSchedulerServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, formportalInterval: formportalInterval).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formportalInterval: (query)  (optional)
     - returns: RequestBuilder<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo> 
     */
    open class func comAdobeFdFpConfigFormsPortalSchedulerServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formportalInterval: String? = nil) -> RequestBuilder<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "formportal.interval": formportalInterval
        ])

        let requestBuilder: RequestBuilder<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alloweddataFileLocations: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeFormsCommonServiceImplDefaultDataProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alloweddataFileLocations: [String]? = nil, completion: @escaping ((_ data: ComAdobeFormsCommonServiceImplDefaultDataProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeFormsCommonServiceImplDefaultDataProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, alloweddataFileLocations: alloweddataFileLocations).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alloweddataFileLocations: (query)  (optional)
     - returns: RequestBuilder<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo> 
     */
    open class func comAdobeFormsCommonServiceImplDefaultDataProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alloweddataFileLocations: [String]? = nil) -> RequestBuilder<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "alloweddataFileLocations": alloweddataFileLocations
        ])

        let requestBuilder: RequestBuilder<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tempStorageConfig: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tempStorageConfig: String? = nil, completion: @escaping ((_ data: ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo?,_ error: Error?) -> Void)) {
        comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, tempStorageConfig: tempStorageConfig).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tempStorageConfig: (query)  (optional)
     - returns: RequestBuilder<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo> 
     */
    open class func comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tempStorageConfig: String? = nil) -> RequestBuilder<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo> {
        let path = "/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "tempStorageConfig": tempStorageConfig
        ])

        let requestBuilder: RequestBuilder<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter durationForTemporaryStorage: (query)  (optional)
     - parameter durationForAnonymousStorage: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeFormsCommonServletTempCleanUpTask(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, durationForTemporaryStorage: String? = nil, durationForAnonymousStorage: String? = nil, completion: @escaping ((_ data: ComAdobeFormsCommonServletTempCleanUpTaskInfo?,_ error: Error?) -> Void)) {
        comAdobeFormsCommonServletTempCleanUpTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, durationForTemporaryStorage: durationForTemporaryStorage, durationForAnonymousStorage: durationForAnonymousStorage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter durationForTemporaryStorage: (query)  (optional)
     - parameter durationForAnonymousStorage: (query)  (optional)
     - returns: RequestBuilder<ComAdobeFormsCommonServletTempCleanUpTaskInfo> 
     */
    open class func comAdobeFormsCommonServletTempCleanUpTaskWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, durationForTemporaryStorage: String? = nil, durationForAnonymousStorage: String? = nil) -> RequestBuilder<ComAdobeFormsCommonServletTempCleanUpTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.expression": schedulerExpression, 
            "Duration for Temporary Storage": durationForTemporaryStorage, 
            "Duration for Anonymous Storage": durationForAnonymousStorage
        ])

        let requestBuilder: RequestBuilder<ComAdobeFormsCommonServletTempCleanUpTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryLimit: (query)  (optional)
     - parameter fileTypeExtensionMap: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAcpPlatformPlatformServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryLimit: Int? = nil, fileTypeExtensionMap: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteAcpPlatformPlatformServletInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAcpPlatformPlatformServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queryLimit: queryLimit, fileTypeExtensionMap: fileTypeExtensionMap).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryLimit: (query)  (optional)
     - parameter fileTypeExtensionMap: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAcpPlatformPlatformServletInfo> 
     */
    open class func comAdobeGraniteAcpPlatformPlatformServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryLimit: Int? = nil, fileTypeExtensionMap: [String]? = nil) -> RequestBuilder<ComAdobeGraniteAcpPlatformPlatformServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "query.limit": queryLimit?.encodeToJSON(), 
            "file.type.extension.map": fileTypeExtensionMap
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAcpPlatformPlatformServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aggregateRelationships: (query)  (optional)
     - parameter aggregateDescendVirtual: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteActivitystreamsImplActivityManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aggregateRelationships: [String]? = nil, aggregateDescendVirtual: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteActivitystreamsImplActivityManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, aggregateRelationships: aggregateRelationships, aggregateDescendVirtual: aggregateDescendVirtual).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aggregateRelationships: (query)  (optional)
     - parameter aggregateDescendVirtual: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo> 
     */
    open class func comAdobeGraniteActivitystreamsImplActivityManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aggregateRelationships: [String]? = nil, aggregateDescendVirtual: Bool? = nil) -> RequestBuilder<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "aggregate.relationships": aggregateRelationships, 
            "aggregate.descend.virtual": aggregateDescendVirtual
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAnalyzerBaseSystemStatusServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAnalyzerBaseSystemStatusServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disabled: disabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo> 
     */
    open class func comAdobeGraniteAnalyzerBaseSystemStatusServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "disabled": disabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disabled: disabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo> 
     */
    open class func comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "disabled": disabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqCdnCdnRewriter: (query)  (optional)
     - parameter comAdobeCqCloudConfigComponents: (query)  (optional)
     - parameter comAdobeCqCloudConfigCore: (query)  (optional)
     - parameter comAdobeCqCloudConfigUi: (query)  (optional)
     - parameter comAdobeCqComAdobeCqEditor: (query)  (optional)
     - parameter comAdobeCqComAdobeCqProjectsCore: (query)  (optional)
     - parameter comAdobeCqComAdobeCqProjectsWcmCore: (query)  (optional)
     - parameter comAdobeCqComAdobeCqUiCommons: (query)  (optional)
     - parameter comAdobeCqComAdobeCqWcmStyle: (query)  (optional)
     - parameter comAdobeCqCqActivitymapIntegration: (query)  (optional)
     - parameter comAdobeCqCqContexthubCommons: (query)  (optional)
     - parameter comAdobeCqCqDtm: (query)  (optional)
     - parameter comAdobeCqCqHealthcheck: (query)  (optional)
     - parameter comAdobeCqCqMultisiteTargeting: (query)  (optional)
     - parameter comAdobeCqCqPreUpgradeCleanup: (query)  (optional)
     - parameter comAdobeCqCqProductInfoProvider: (query)  (optional)
     - parameter comAdobeCqCqRestSites: (query)  (optional)
     - parameter comAdobeCqCqSecurityHc: (query)  (optional)
     - parameter comAdobeCqDamCqDamSvgHandler: (query)  (optional)
     - parameter comAdobeCqDamCqScene7Imaging: (query)  (optional)
     - parameter comAdobeCqDtmReactorCore: (query)  (optional)
     - parameter comAdobeCqDtmReactorUi: (query)  (optional)
     - parameter comAdobeCqExpJspelResolver: (query)  (optional)
     - parameter comAdobeCqInboxCqInbox: (query)  (optional)
     - parameter comAdobeCqJsonSchemaParser: (query)  (optional)
     - parameter comAdobeCqMediaCqMediaPublishingDpsFpCore: (query)  (optional)
     - parameter comAdobeCqMobileCqMobileCaas: (query)  (optional)
     - parameter comAdobeCqMobileCqMobileIndexBuilder: (query)  (optional)
     - parameter comAdobeCqMobileCqMobilePhonegapBuild: (query)  (optional)
     - parameter comAdobeCqMyspell: (query)  (optional)
     - parameter comAdobeCqSampleWeRetailCore: (query)  (optional)
     - parameter comAdobeCqScreensComAdobeCqScreensDcc: (query)  (optional)
     - parameter comAdobeCqScreensComAdobeCqScreensMqCore: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialAsProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialBadgingBasicImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialBadgingImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialCalendarImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialContentFragmentsImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialEnablementImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialGraphImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialIdeationImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialJcrProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialMembersImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialMsProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialNotificationsChannelsWeb: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialNotificationsImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialRdbProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScfImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScoringBasicImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScoringImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialServiceusersImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialSrpImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialUgcbaseImpl: (query)  (optional)
     - parameter comAdobeDamCqDamCfmImpl: (query)  (optional)
     - parameter comAdobeFormsFoundationFormsFoundationBase: (query)  (optional)
     - parameter comAdobeGraniteApicontroller: (query)  (optional)
     - parameter comAdobeGraniteAssetCore: (query)  (optional)
     - parameter comAdobeGraniteAuthSso: (query)  (optional)
     - parameter comAdobeGraniteBundlesHcImpl: (query)  (optional)
     - parameter comAdobeGraniteCompatRouter: (query)  (optional)
     - parameter comAdobeGraniteConf: (query)  (optional)
     - parameter comAdobeGraniteConfUiCore: (query)  (optional)
     - parameter comAdobeGraniteCors: (query)  (optional)
     - parameter comAdobeGraniteCrxExplorer: (query)  (optional)
     - parameter comAdobeGraniteCrxdeLite: (query)  (optional)
     - parameter comAdobeGraniteCryptoConfig: (query)  (optional)
     - parameter comAdobeGraniteCryptoExtension: (query)  (optional)
     - parameter comAdobeGraniteCryptoFile: (query)  (optional)
     - parameter comAdobeGraniteCryptoJcr: (query)  (optional)
     - parameter comAdobeGraniteCsrf: (query)  (optional)
     - parameter comAdobeGraniteDistributionCore: (query)  (optional)
     - parameter comAdobeGraniteDropwizardMetrics: (query)  (optional)
     - parameter comAdobeGraniteFragsImpl: (query)  (optional)
     - parameter comAdobeGraniteGibson: (query)  (optional)
     - parameter comAdobeGraniteInfocollector: (query)  (optional)
     - parameter comAdobeGraniteInstallerFactoryPackages: (query)  (optional)
     - parameter comAdobeGraniteJettySsl: (query)  (optional)
     - parameter comAdobeGraniteJobsAsync: (query)  (optional)
     - parameter comAdobeGraniteMaintenanceOak: (query)  (optional)
     - parameter comAdobeGraniteMonitoringCore: (query)  (optional)
     - parameter comAdobeGraniteQueries: (query)  (optional)
     - parameter comAdobeGraniteReplicationHcImpl: (query)  (optional)
     - parameter comAdobeGraniteRepositoryChecker: (query)  (optional)
     - parameter comAdobeGraniteRepositoryHcImpl: (query)  (optional)
     - parameter comAdobeGraniteRestAssets: (query)  (optional)
     - parameter comAdobeGraniteSecurityUi: (query)  (optional)
     - parameter comAdobeGraniteStartup: (query)  (optional)
     - parameter comAdobeGraniteTagsoup: (query)  (optional)
     - parameter comAdobeGraniteTaskmanagementCore: (query)  (optional)
     - parameter comAdobeGraniteTaskmanagementWorkflow: (query)  (optional)
     - parameter comAdobeGraniteUiClientlibsCompilerLess: (query)  (optional)
     - parameter comAdobeGraniteUiClientlibsProcessorGcc: (query)  (optional)
     - parameter comAdobeGraniteWebconsolePlugins: (query)  (optional)
     - parameter comAdobeGraniteWorkflowConsole: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentLinux: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentMacosx: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentWin: (query)  (optional)
     - parameter comDayCommonsOsgiWrapperSimpleJndi: (query)  (optional)
     - parameter comDayCqCqAuthhandler: (query)  (optional)
     - parameter comDayCqCqCompatConfigupdate: (query)  (optional)
     - parameter comDayCqCqLicensebranding: (query)  (optional)
     - parameter comDayCqCqNotifcationImpl: (query)  (optional)
     - parameter comDayCqCqReplicationAudit: (query)  (optional)
     - parameter comDayCqCqSearchExt: (query)  (optional)
     - parameter comDayCqDamCqDamAnnotationPrint: (query)  (optional)
     - parameter comDayCqDamCqDamAssetUsage: (query)  (optional)
     - parameter comDayCqDamCqDamS7dam: (query)  (optional)
     - parameter comDayCqDamCqDamSimilaritysearch: (query)  (optional)
     - parameter comDayCqDamDamWebdavSupport: (query)  (optional)
     - parameter comDayCqPreUpgradeTasks: (query)  (optional)
     - parameter comDayCqReplicationExtensions: (query)  (optional)
     - parameter comDayCqWcmCqMsmCore: (query)  (optional)
     - parameter comDayCqWcmCqWcmTranslation: (query)  (optional)
     - parameter dayCommonsJrawio: (query)  (optional)
     - parameter orgApacheAriesJmxWhiteboard: (query)  (optional)
     - parameter orgApacheFelixHttpSslfilter: (query)  (optional)
     - parameter orgApacheFelixOrgApacheFelixThreaddump: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsDs: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsEvent: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsMemoryusage: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsPackageadmin: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthLdap: (query)  (optional)
     - parameter orgApacheJackrabbitOakSegmentTar: (query)  (optional)
     - parameter orgApacheJackrabbitOakSolrOsgi: (query)  (optional)
     - parameter orgApacheSlingBundleresourceImpl: (query)  (optional)
     - parameter orgApacheSlingCommonsFsclassloader: (query)  (optional)
     - parameter orgApacheSlingCommonsLogWebconsole: (query)  (optional)
     - parameter orgApacheSlingDatasource: (query)  (optional)
     - parameter orgApacheSlingDiscoveryBase: (query)  (optional)
     - parameter orgApacheSlingDiscoveryOak: (query)  (optional)
     - parameter orgApacheSlingDiscoverySupport: (query)  (optional)
     - parameter orgApacheSlingDistributionApi: (query)  (optional)
     - parameter orgApacheSlingDistributionCore: (query)  (optional)
     - parameter orgApacheSlingExtensionsWebconsolesecurityprovider: (query)  (optional)
     - parameter orgApacheSlingHcWebconsole: (query)  (optional)
     - parameter orgApacheSlingInstallerConsole: (query)  (optional)
     - parameter orgApacheSlingInstallerProviderFile: (query)  (optional)
     - parameter orgApacheSlingInstallerProviderJcr: (query)  (optional)
     - parameter orgApacheSlingJcrDavex: (query)  (optional)
     - parameter orgApacheSlingJcrResourcesecurity: (query)  (optional)
     - parameter orgApacheSlingJmxProvider: (query)  (optional)
     - parameter orgApacheSlingLaunchpadInstaller: (query)  (optional)
     - parameter orgApacheSlingModelsImpl: (query)  (optional)
     - parameter orgApacheSlingRepoinitParser: (query)  (optional)
     - parameter orgApacheSlingResourceInventory: (query)  (optional)
     - parameter orgApacheSlingResourceresolver: (query)  (optional)
     - parameter orgApacheSlingScriptingJavascript: (query)  (optional)
     - parameter orgApacheSlingScriptingJst: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyJsProvider: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyModelsProvider: (query)  (optional)
     - parameter orgApacheSlingSecurity: (query)  (optional)
     - parameter orgApacheSlingServletsCompat: (query)  (optional)
     - parameter orgApacheSlingServletsGet: (query)  (optional)
     - parameter orgApacheSlingStartupfilterDisabler: (query)  (optional)
     - parameter orgApacheSlingTracer: (query)  (optional)
     - parameter weRetailClientAppCore: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteApicontrollerFilterResolverHookFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqCdnCdnRewriter: String? = nil, comAdobeCqCloudConfigComponents: String? = nil, comAdobeCqCloudConfigCore: String? = nil, comAdobeCqCloudConfigUi: String? = nil, comAdobeCqComAdobeCqEditor: String? = nil, comAdobeCqComAdobeCqProjectsCore: String? = nil, comAdobeCqComAdobeCqProjectsWcmCore: String? = nil, comAdobeCqComAdobeCqUiCommons: String? = nil, comAdobeCqComAdobeCqWcmStyle: String? = nil, comAdobeCqCqActivitymapIntegration: String? = nil, comAdobeCqCqContexthubCommons: String? = nil, comAdobeCqCqDtm: String? = nil, comAdobeCqCqHealthcheck: String? = nil, comAdobeCqCqMultisiteTargeting: String? = nil, comAdobeCqCqPreUpgradeCleanup: String? = nil, comAdobeCqCqProductInfoProvider: String? = nil, comAdobeCqCqRestSites: String? = nil, comAdobeCqCqSecurityHc: String? = nil, comAdobeCqDamCqDamSvgHandler: String? = nil, comAdobeCqDamCqScene7Imaging: String? = nil, comAdobeCqDtmReactorCore: String? = nil, comAdobeCqDtmReactorUi: String? = nil, comAdobeCqExpJspelResolver: String? = nil, comAdobeCqInboxCqInbox: String? = nil, comAdobeCqJsonSchemaParser: String? = nil, comAdobeCqMediaCqMediaPublishingDpsFpCore: String? = nil, comAdobeCqMobileCqMobileCaas: String? = nil, comAdobeCqMobileCqMobileIndexBuilder: String? = nil, comAdobeCqMobileCqMobilePhonegapBuild: String? = nil, comAdobeCqMyspell: String? = nil, comAdobeCqSampleWeRetailCore: String? = nil, comAdobeCqScreensComAdobeCqScreensDcc: String? = nil, comAdobeCqScreensComAdobeCqScreensMqCore: String? = nil, comAdobeCqSocialCqSocialAsProvider: String? = nil, comAdobeCqSocialCqSocialBadgingBasicImpl: String? = nil, comAdobeCqSocialCqSocialBadgingImpl: String? = nil, comAdobeCqSocialCqSocialCalendarImpl: String? = nil, comAdobeCqSocialCqSocialContentFragmentsImpl: String? = nil, comAdobeCqSocialCqSocialEnablementImpl: String? = nil, comAdobeCqSocialCqSocialGraphImpl: String? = nil, comAdobeCqSocialCqSocialIdeationImpl: String? = nil, comAdobeCqSocialCqSocialJcrProvider: String? = nil, comAdobeCqSocialCqSocialMembersImpl: String? = nil, comAdobeCqSocialCqSocialMsProvider: String? = nil, comAdobeCqSocialCqSocialNotificationsChannelsWeb: String? = nil, comAdobeCqSocialCqSocialNotificationsImpl: String? = nil, comAdobeCqSocialCqSocialRdbProvider: String? = nil, comAdobeCqSocialCqSocialScfImpl: String? = nil, comAdobeCqSocialCqSocialScoringBasicImpl: String? = nil, comAdobeCqSocialCqSocialScoringImpl: String? = nil, comAdobeCqSocialCqSocialServiceusersImpl: String? = nil, comAdobeCqSocialCqSocialSrpImpl: String? = nil, comAdobeCqSocialCqSocialUgcbaseImpl: String? = nil, comAdobeDamCqDamCfmImpl: String? = nil, comAdobeFormsFoundationFormsFoundationBase: String? = nil, comAdobeGraniteApicontroller: String? = nil, comAdobeGraniteAssetCore: String? = nil, comAdobeGraniteAuthSso: String? = nil, comAdobeGraniteBundlesHcImpl: String? = nil, comAdobeGraniteCompatRouter: String? = nil, comAdobeGraniteConf: String? = nil, comAdobeGraniteConfUiCore: String? = nil, comAdobeGraniteCors: String? = nil, comAdobeGraniteCrxExplorer: String? = nil, comAdobeGraniteCrxdeLite: String? = nil, comAdobeGraniteCryptoConfig: String? = nil, comAdobeGraniteCryptoExtension: String? = nil, comAdobeGraniteCryptoFile: String? = nil, comAdobeGraniteCryptoJcr: String? = nil, comAdobeGraniteCsrf: String? = nil, comAdobeGraniteDistributionCore: String? = nil, comAdobeGraniteDropwizardMetrics: String? = nil, comAdobeGraniteFragsImpl: String? = nil, comAdobeGraniteGibson: String? = nil, comAdobeGraniteInfocollector: String? = nil, comAdobeGraniteInstallerFactoryPackages: String? = nil, comAdobeGraniteJettySsl: String? = nil, comAdobeGraniteJobsAsync: String? = nil, comAdobeGraniteMaintenanceOak: String? = nil, comAdobeGraniteMonitoringCore: String? = nil, comAdobeGraniteQueries: String? = nil, comAdobeGraniteReplicationHcImpl: String? = nil, comAdobeGraniteRepositoryChecker: String? = nil, comAdobeGraniteRepositoryHcImpl: String? = nil, comAdobeGraniteRestAssets: String? = nil, comAdobeGraniteSecurityUi: String? = nil, comAdobeGraniteStartup: String? = nil, comAdobeGraniteTagsoup: String? = nil, comAdobeGraniteTaskmanagementCore: String? = nil, comAdobeGraniteTaskmanagementWorkflow: String? = nil, comAdobeGraniteUiClientlibsCompilerLess: String? = nil, comAdobeGraniteUiClientlibsProcessorGcc: String? = nil, comAdobeGraniteWebconsolePlugins: String? = nil, comAdobeGraniteWorkflowConsole: String? = nil, comAdobeXmpWorkerFilesNativeFragmentLinux: String? = nil, comAdobeXmpWorkerFilesNativeFragmentMacosx: String? = nil, comAdobeXmpWorkerFilesNativeFragmentWin: String? = nil, comDayCommonsOsgiWrapperSimpleJndi: String? = nil, comDayCqCqAuthhandler: String? = nil, comDayCqCqCompatConfigupdate: String? = nil, comDayCqCqLicensebranding: String? = nil, comDayCqCqNotifcationImpl: String? = nil, comDayCqCqReplicationAudit: String? = nil, comDayCqCqSearchExt: String? = nil, comDayCqDamCqDamAnnotationPrint: String? = nil, comDayCqDamCqDamAssetUsage: String? = nil, comDayCqDamCqDamS7dam: String? = nil, comDayCqDamCqDamSimilaritysearch: String? = nil, comDayCqDamDamWebdavSupport: String? = nil, comDayCqPreUpgradeTasks: String? = nil, comDayCqReplicationExtensions: String? = nil, comDayCqWcmCqMsmCore: String? = nil, comDayCqWcmCqWcmTranslation: String? = nil, dayCommonsJrawio: String? = nil, orgApacheAriesJmxWhiteboard: String? = nil, orgApacheFelixHttpSslfilter: String? = nil, orgApacheFelixOrgApacheFelixThreaddump: String? = nil, orgApacheFelixWebconsolePluginsDs: String? = nil, orgApacheFelixWebconsolePluginsEvent: String? = nil, orgApacheFelixWebconsolePluginsMemoryusage: String? = nil, orgApacheFelixWebconsolePluginsPackageadmin: String? = nil, orgApacheJackrabbitOakAuthLdap: String? = nil, orgApacheJackrabbitOakSegmentTar: String? = nil, orgApacheJackrabbitOakSolrOsgi: String? = nil, orgApacheSlingBundleresourceImpl: String? = nil, orgApacheSlingCommonsFsclassloader: String? = nil, orgApacheSlingCommonsLogWebconsole: String? = nil, orgApacheSlingDatasource: String? = nil, orgApacheSlingDiscoveryBase: String? = nil, orgApacheSlingDiscoveryOak: String? = nil, orgApacheSlingDiscoverySupport: String? = nil, orgApacheSlingDistributionApi: String? = nil, orgApacheSlingDistributionCore: String? = nil, orgApacheSlingExtensionsWebconsolesecurityprovider: String? = nil, orgApacheSlingHcWebconsole: String? = nil, orgApacheSlingInstallerConsole: String? = nil, orgApacheSlingInstallerProviderFile: String? = nil, orgApacheSlingInstallerProviderJcr: String? = nil, orgApacheSlingJcrDavex: String? = nil, orgApacheSlingJcrResourcesecurity: String? = nil, orgApacheSlingJmxProvider: String? = nil, orgApacheSlingLaunchpadInstaller: String? = nil, orgApacheSlingModelsImpl: String? = nil, orgApacheSlingRepoinitParser: String? = nil, orgApacheSlingResourceInventory: String? = nil, orgApacheSlingResourceresolver: String? = nil, orgApacheSlingScriptingJavascript: String? = nil, orgApacheSlingScriptingJst: String? = nil, orgApacheSlingScriptingSightlyJsProvider: String? = nil, orgApacheSlingScriptingSightlyModelsProvider: String? = nil, orgApacheSlingSecurity: String? = nil, orgApacheSlingServletsCompat: String? = nil, orgApacheSlingServletsGet: String? = nil, orgApacheSlingStartupfilterDisabler: String? = nil, orgApacheSlingTracer: String? = nil, weRetailClientAppCore: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteApicontrollerFilterResolverHookFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeCqCdnCdnRewriter: comAdobeCqCdnCdnRewriter, comAdobeCqCloudConfigComponents: comAdobeCqCloudConfigComponents, comAdobeCqCloudConfigCore: comAdobeCqCloudConfigCore, comAdobeCqCloudConfigUi: comAdobeCqCloudConfigUi, comAdobeCqComAdobeCqEditor: comAdobeCqComAdobeCqEditor, comAdobeCqComAdobeCqProjectsCore: comAdobeCqComAdobeCqProjectsCore, comAdobeCqComAdobeCqProjectsWcmCore: comAdobeCqComAdobeCqProjectsWcmCore, comAdobeCqComAdobeCqUiCommons: comAdobeCqComAdobeCqUiCommons, comAdobeCqComAdobeCqWcmStyle: comAdobeCqComAdobeCqWcmStyle, comAdobeCqCqActivitymapIntegration: comAdobeCqCqActivitymapIntegration, comAdobeCqCqContexthubCommons: comAdobeCqCqContexthubCommons, comAdobeCqCqDtm: comAdobeCqCqDtm, comAdobeCqCqHealthcheck: comAdobeCqCqHealthcheck, comAdobeCqCqMultisiteTargeting: comAdobeCqCqMultisiteTargeting, comAdobeCqCqPreUpgradeCleanup: comAdobeCqCqPreUpgradeCleanup, comAdobeCqCqProductInfoProvider: comAdobeCqCqProductInfoProvider, comAdobeCqCqRestSites: comAdobeCqCqRestSites, comAdobeCqCqSecurityHc: comAdobeCqCqSecurityHc, comAdobeCqDamCqDamSvgHandler: comAdobeCqDamCqDamSvgHandler, comAdobeCqDamCqScene7Imaging: comAdobeCqDamCqScene7Imaging, comAdobeCqDtmReactorCore: comAdobeCqDtmReactorCore, comAdobeCqDtmReactorUi: comAdobeCqDtmReactorUi, comAdobeCqExpJspelResolver: comAdobeCqExpJspelResolver, comAdobeCqInboxCqInbox: comAdobeCqInboxCqInbox, comAdobeCqJsonSchemaParser: comAdobeCqJsonSchemaParser, comAdobeCqMediaCqMediaPublishingDpsFpCore: comAdobeCqMediaCqMediaPublishingDpsFpCore, comAdobeCqMobileCqMobileCaas: comAdobeCqMobileCqMobileCaas, comAdobeCqMobileCqMobileIndexBuilder: comAdobeCqMobileCqMobileIndexBuilder, comAdobeCqMobileCqMobilePhonegapBuild: comAdobeCqMobileCqMobilePhonegapBuild, comAdobeCqMyspell: comAdobeCqMyspell, comAdobeCqSampleWeRetailCore: comAdobeCqSampleWeRetailCore, comAdobeCqScreensComAdobeCqScreensDcc: comAdobeCqScreensComAdobeCqScreensDcc, comAdobeCqScreensComAdobeCqScreensMqCore: comAdobeCqScreensComAdobeCqScreensMqCore, comAdobeCqSocialCqSocialAsProvider: comAdobeCqSocialCqSocialAsProvider, comAdobeCqSocialCqSocialBadgingBasicImpl: comAdobeCqSocialCqSocialBadgingBasicImpl, comAdobeCqSocialCqSocialBadgingImpl: comAdobeCqSocialCqSocialBadgingImpl, comAdobeCqSocialCqSocialCalendarImpl: comAdobeCqSocialCqSocialCalendarImpl, comAdobeCqSocialCqSocialContentFragmentsImpl: comAdobeCqSocialCqSocialContentFragmentsImpl, comAdobeCqSocialCqSocialEnablementImpl: comAdobeCqSocialCqSocialEnablementImpl, comAdobeCqSocialCqSocialGraphImpl: comAdobeCqSocialCqSocialGraphImpl, comAdobeCqSocialCqSocialIdeationImpl: comAdobeCqSocialCqSocialIdeationImpl, comAdobeCqSocialCqSocialJcrProvider: comAdobeCqSocialCqSocialJcrProvider, comAdobeCqSocialCqSocialMembersImpl: comAdobeCqSocialCqSocialMembersImpl, comAdobeCqSocialCqSocialMsProvider: comAdobeCqSocialCqSocialMsProvider, comAdobeCqSocialCqSocialNotificationsChannelsWeb: comAdobeCqSocialCqSocialNotificationsChannelsWeb, comAdobeCqSocialCqSocialNotificationsImpl: comAdobeCqSocialCqSocialNotificationsImpl, comAdobeCqSocialCqSocialRdbProvider: comAdobeCqSocialCqSocialRdbProvider, comAdobeCqSocialCqSocialScfImpl: comAdobeCqSocialCqSocialScfImpl, comAdobeCqSocialCqSocialScoringBasicImpl: comAdobeCqSocialCqSocialScoringBasicImpl, comAdobeCqSocialCqSocialScoringImpl: comAdobeCqSocialCqSocialScoringImpl, comAdobeCqSocialCqSocialServiceusersImpl: comAdobeCqSocialCqSocialServiceusersImpl, comAdobeCqSocialCqSocialSrpImpl: comAdobeCqSocialCqSocialSrpImpl, comAdobeCqSocialCqSocialUgcbaseImpl: comAdobeCqSocialCqSocialUgcbaseImpl, comAdobeDamCqDamCfmImpl: comAdobeDamCqDamCfmImpl, comAdobeFormsFoundationFormsFoundationBase: comAdobeFormsFoundationFormsFoundationBase, comAdobeGraniteApicontroller: comAdobeGraniteApicontroller, comAdobeGraniteAssetCore: comAdobeGraniteAssetCore, comAdobeGraniteAuthSso: comAdobeGraniteAuthSso, comAdobeGraniteBundlesHcImpl: comAdobeGraniteBundlesHcImpl, comAdobeGraniteCompatRouter: comAdobeGraniteCompatRouter, comAdobeGraniteConf: comAdobeGraniteConf, comAdobeGraniteConfUiCore: comAdobeGraniteConfUiCore, comAdobeGraniteCors: comAdobeGraniteCors, comAdobeGraniteCrxExplorer: comAdobeGraniteCrxExplorer, comAdobeGraniteCrxdeLite: comAdobeGraniteCrxdeLite, comAdobeGraniteCryptoConfig: comAdobeGraniteCryptoConfig, comAdobeGraniteCryptoExtension: comAdobeGraniteCryptoExtension, comAdobeGraniteCryptoFile: comAdobeGraniteCryptoFile, comAdobeGraniteCryptoJcr: comAdobeGraniteCryptoJcr, comAdobeGraniteCsrf: comAdobeGraniteCsrf, comAdobeGraniteDistributionCore: comAdobeGraniteDistributionCore, comAdobeGraniteDropwizardMetrics: comAdobeGraniteDropwizardMetrics, comAdobeGraniteFragsImpl: comAdobeGraniteFragsImpl, comAdobeGraniteGibson: comAdobeGraniteGibson, comAdobeGraniteInfocollector: comAdobeGraniteInfocollector, comAdobeGraniteInstallerFactoryPackages: comAdobeGraniteInstallerFactoryPackages, comAdobeGraniteJettySsl: comAdobeGraniteJettySsl, comAdobeGraniteJobsAsync: comAdobeGraniteJobsAsync, comAdobeGraniteMaintenanceOak: comAdobeGraniteMaintenanceOak, comAdobeGraniteMonitoringCore: comAdobeGraniteMonitoringCore, comAdobeGraniteQueries: comAdobeGraniteQueries, comAdobeGraniteReplicationHcImpl: comAdobeGraniteReplicationHcImpl, comAdobeGraniteRepositoryChecker: comAdobeGraniteRepositoryChecker, comAdobeGraniteRepositoryHcImpl: comAdobeGraniteRepositoryHcImpl, comAdobeGraniteRestAssets: comAdobeGraniteRestAssets, comAdobeGraniteSecurityUi: comAdobeGraniteSecurityUi, comAdobeGraniteStartup: comAdobeGraniteStartup, comAdobeGraniteTagsoup: comAdobeGraniteTagsoup, comAdobeGraniteTaskmanagementCore: comAdobeGraniteTaskmanagementCore, comAdobeGraniteTaskmanagementWorkflow: comAdobeGraniteTaskmanagementWorkflow, comAdobeGraniteUiClientlibsCompilerLess: comAdobeGraniteUiClientlibsCompilerLess, comAdobeGraniteUiClientlibsProcessorGcc: comAdobeGraniteUiClientlibsProcessorGcc, comAdobeGraniteWebconsolePlugins: comAdobeGraniteWebconsolePlugins, comAdobeGraniteWorkflowConsole: comAdobeGraniteWorkflowConsole, comAdobeXmpWorkerFilesNativeFragmentLinux: comAdobeXmpWorkerFilesNativeFragmentLinux, comAdobeXmpWorkerFilesNativeFragmentMacosx: comAdobeXmpWorkerFilesNativeFragmentMacosx, comAdobeXmpWorkerFilesNativeFragmentWin: comAdobeXmpWorkerFilesNativeFragmentWin, comDayCommonsOsgiWrapperSimpleJndi: comDayCommonsOsgiWrapperSimpleJndi, comDayCqCqAuthhandler: comDayCqCqAuthhandler, comDayCqCqCompatConfigupdate: comDayCqCqCompatConfigupdate, comDayCqCqLicensebranding: comDayCqCqLicensebranding, comDayCqCqNotifcationImpl: comDayCqCqNotifcationImpl, comDayCqCqReplicationAudit: comDayCqCqReplicationAudit, comDayCqCqSearchExt: comDayCqCqSearchExt, comDayCqDamCqDamAnnotationPrint: comDayCqDamCqDamAnnotationPrint, comDayCqDamCqDamAssetUsage: comDayCqDamCqDamAssetUsage, comDayCqDamCqDamS7dam: comDayCqDamCqDamS7dam, comDayCqDamCqDamSimilaritysearch: comDayCqDamCqDamSimilaritysearch, comDayCqDamDamWebdavSupport: comDayCqDamDamWebdavSupport, comDayCqPreUpgradeTasks: comDayCqPreUpgradeTasks, comDayCqReplicationExtensions: comDayCqReplicationExtensions, comDayCqWcmCqMsmCore: comDayCqWcmCqMsmCore, comDayCqWcmCqWcmTranslation: comDayCqWcmCqWcmTranslation, dayCommonsJrawio: dayCommonsJrawio, orgApacheAriesJmxWhiteboard: orgApacheAriesJmxWhiteboard, orgApacheFelixHttpSslfilter: orgApacheFelixHttpSslfilter, orgApacheFelixOrgApacheFelixThreaddump: orgApacheFelixOrgApacheFelixThreaddump, orgApacheFelixWebconsolePluginsDs: orgApacheFelixWebconsolePluginsDs, orgApacheFelixWebconsolePluginsEvent: orgApacheFelixWebconsolePluginsEvent, orgApacheFelixWebconsolePluginsMemoryusage: orgApacheFelixWebconsolePluginsMemoryusage, orgApacheFelixWebconsolePluginsPackageadmin: orgApacheFelixWebconsolePluginsPackageadmin, orgApacheJackrabbitOakAuthLdap: orgApacheJackrabbitOakAuthLdap, orgApacheJackrabbitOakSegmentTar: orgApacheJackrabbitOakSegmentTar, orgApacheJackrabbitOakSolrOsgi: orgApacheJackrabbitOakSolrOsgi, orgApacheSlingBundleresourceImpl: orgApacheSlingBundleresourceImpl, orgApacheSlingCommonsFsclassloader: orgApacheSlingCommonsFsclassloader, orgApacheSlingCommonsLogWebconsole: orgApacheSlingCommonsLogWebconsole, orgApacheSlingDatasource: orgApacheSlingDatasource, orgApacheSlingDiscoveryBase: orgApacheSlingDiscoveryBase, orgApacheSlingDiscoveryOak: orgApacheSlingDiscoveryOak, orgApacheSlingDiscoverySupport: orgApacheSlingDiscoverySupport, orgApacheSlingDistributionApi: orgApacheSlingDistributionApi, orgApacheSlingDistributionCore: orgApacheSlingDistributionCore, orgApacheSlingExtensionsWebconsolesecurityprovider: orgApacheSlingExtensionsWebconsolesecurityprovider, orgApacheSlingHcWebconsole: orgApacheSlingHcWebconsole, orgApacheSlingInstallerConsole: orgApacheSlingInstallerConsole, orgApacheSlingInstallerProviderFile: orgApacheSlingInstallerProviderFile, orgApacheSlingInstallerProviderJcr: orgApacheSlingInstallerProviderJcr, orgApacheSlingJcrDavex: orgApacheSlingJcrDavex, orgApacheSlingJcrResourcesecurity: orgApacheSlingJcrResourcesecurity, orgApacheSlingJmxProvider: orgApacheSlingJmxProvider, orgApacheSlingLaunchpadInstaller: orgApacheSlingLaunchpadInstaller, orgApacheSlingModelsImpl: orgApacheSlingModelsImpl, orgApacheSlingRepoinitParser: orgApacheSlingRepoinitParser, orgApacheSlingResourceInventory: orgApacheSlingResourceInventory, orgApacheSlingResourceresolver: orgApacheSlingResourceresolver, orgApacheSlingScriptingJavascript: orgApacheSlingScriptingJavascript, orgApacheSlingScriptingJst: orgApacheSlingScriptingJst, orgApacheSlingScriptingSightlyJsProvider: orgApacheSlingScriptingSightlyJsProvider, orgApacheSlingScriptingSightlyModelsProvider: orgApacheSlingScriptingSightlyModelsProvider, orgApacheSlingSecurity: orgApacheSlingSecurity, orgApacheSlingServletsCompat: orgApacheSlingServletsCompat, orgApacheSlingServletsGet: orgApacheSlingServletsGet, orgApacheSlingStartupfilterDisabler: orgApacheSlingStartupfilterDisabler, orgApacheSlingTracer: orgApacheSlingTracer, weRetailClientAppCore: weRetailClientAppCore).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqCdnCdnRewriter: (query)  (optional)
     - parameter comAdobeCqCloudConfigComponents: (query)  (optional)
     - parameter comAdobeCqCloudConfigCore: (query)  (optional)
     - parameter comAdobeCqCloudConfigUi: (query)  (optional)
     - parameter comAdobeCqComAdobeCqEditor: (query)  (optional)
     - parameter comAdobeCqComAdobeCqProjectsCore: (query)  (optional)
     - parameter comAdobeCqComAdobeCqProjectsWcmCore: (query)  (optional)
     - parameter comAdobeCqComAdobeCqUiCommons: (query)  (optional)
     - parameter comAdobeCqComAdobeCqWcmStyle: (query)  (optional)
     - parameter comAdobeCqCqActivitymapIntegration: (query)  (optional)
     - parameter comAdobeCqCqContexthubCommons: (query)  (optional)
     - parameter comAdobeCqCqDtm: (query)  (optional)
     - parameter comAdobeCqCqHealthcheck: (query)  (optional)
     - parameter comAdobeCqCqMultisiteTargeting: (query)  (optional)
     - parameter comAdobeCqCqPreUpgradeCleanup: (query)  (optional)
     - parameter comAdobeCqCqProductInfoProvider: (query)  (optional)
     - parameter comAdobeCqCqRestSites: (query)  (optional)
     - parameter comAdobeCqCqSecurityHc: (query)  (optional)
     - parameter comAdobeCqDamCqDamSvgHandler: (query)  (optional)
     - parameter comAdobeCqDamCqScene7Imaging: (query)  (optional)
     - parameter comAdobeCqDtmReactorCore: (query)  (optional)
     - parameter comAdobeCqDtmReactorUi: (query)  (optional)
     - parameter comAdobeCqExpJspelResolver: (query)  (optional)
     - parameter comAdobeCqInboxCqInbox: (query)  (optional)
     - parameter comAdobeCqJsonSchemaParser: (query)  (optional)
     - parameter comAdobeCqMediaCqMediaPublishingDpsFpCore: (query)  (optional)
     - parameter comAdobeCqMobileCqMobileCaas: (query)  (optional)
     - parameter comAdobeCqMobileCqMobileIndexBuilder: (query)  (optional)
     - parameter comAdobeCqMobileCqMobilePhonegapBuild: (query)  (optional)
     - parameter comAdobeCqMyspell: (query)  (optional)
     - parameter comAdobeCqSampleWeRetailCore: (query)  (optional)
     - parameter comAdobeCqScreensComAdobeCqScreensDcc: (query)  (optional)
     - parameter comAdobeCqScreensComAdobeCqScreensMqCore: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialAsProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialBadgingBasicImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialBadgingImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialCalendarImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialContentFragmentsImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialEnablementImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialGraphImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialIdeationImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialJcrProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialMembersImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialMsProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialNotificationsChannelsWeb: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialNotificationsImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialRdbProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScfImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScoringBasicImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScoringImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialServiceusersImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialSrpImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialUgcbaseImpl: (query)  (optional)
     - parameter comAdobeDamCqDamCfmImpl: (query)  (optional)
     - parameter comAdobeFormsFoundationFormsFoundationBase: (query)  (optional)
     - parameter comAdobeGraniteApicontroller: (query)  (optional)
     - parameter comAdobeGraniteAssetCore: (query)  (optional)
     - parameter comAdobeGraniteAuthSso: (query)  (optional)
     - parameter comAdobeGraniteBundlesHcImpl: (query)  (optional)
     - parameter comAdobeGraniteCompatRouter: (query)  (optional)
     - parameter comAdobeGraniteConf: (query)  (optional)
     - parameter comAdobeGraniteConfUiCore: (query)  (optional)
     - parameter comAdobeGraniteCors: (query)  (optional)
     - parameter comAdobeGraniteCrxExplorer: (query)  (optional)
     - parameter comAdobeGraniteCrxdeLite: (query)  (optional)
     - parameter comAdobeGraniteCryptoConfig: (query)  (optional)
     - parameter comAdobeGraniteCryptoExtension: (query)  (optional)
     - parameter comAdobeGraniteCryptoFile: (query)  (optional)
     - parameter comAdobeGraniteCryptoJcr: (query)  (optional)
     - parameter comAdobeGraniteCsrf: (query)  (optional)
     - parameter comAdobeGraniteDistributionCore: (query)  (optional)
     - parameter comAdobeGraniteDropwizardMetrics: (query)  (optional)
     - parameter comAdobeGraniteFragsImpl: (query)  (optional)
     - parameter comAdobeGraniteGibson: (query)  (optional)
     - parameter comAdobeGraniteInfocollector: (query)  (optional)
     - parameter comAdobeGraniteInstallerFactoryPackages: (query)  (optional)
     - parameter comAdobeGraniteJettySsl: (query)  (optional)
     - parameter comAdobeGraniteJobsAsync: (query)  (optional)
     - parameter comAdobeGraniteMaintenanceOak: (query)  (optional)
     - parameter comAdobeGraniteMonitoringCore: (query)  (optional)
     - parameter comAdobeGraniteQueries: (query)  (optional)
     - parameter comAdobeGraniteReplicationHcImpl: (query)  (optional)
     - parameter comAdobeGraniteRepositoryChecker: (query)  (optional)
     - parameter comAdobeGraniteRepositoryHcImpl: (query)  (optional)
     - parameter comAdobeGraniteRestAssets: (query)  (optional)
     - parameter comAdobeGraniteSecurityUi: (query)  (optional)
     - parameter comAdobeGraniteStartup: (query)  (optional)
     - parameter comAdobeGraniteTagsoup: (query)  (optional)
     - parameter comAdobeGraniteTaskmanagementCore: (query)  (optional)
     - parameter comAdobeGraniteTaskmanagementWorkflow: (query)  (optional)
     - parameter comAdobeGraniteUiClientlibsCompilerLess: (query)  (optional)
     - parameter comAdobeGraniteUiClientlibsProcessorGcc: (query)  (optional)
     - parameter comAdobeGraniteWebconsolePlugins: (query)  (optional)
     - parameter comAdobeGraniteWorkflowConsole: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentLinux: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentMacosx: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentWin: (query)  (optional)
     - parameter comDayCommonsOsgiWrapperSimpleJndi: (query)  (optional)
     - parameter comDayCqCqAuthhandler: (query)  (optional)
     - parameter comDayCqCqCompatConfigupdate: (query)  (optional)
     - parameter comDayCqCqLicensebranding: (query)  (optional)
     - parameter comDayCqCqNotifcationImpl: (query)  (optional)
     - parameter comDayCqCqReplicationAudit: (query)  (optional)
     - parameter comDayCqCqSearchExt: (query)  (optional)
     - parameter comDayCqDamCqDamAnnotationPrint: (query)  (optional)
     - parameter comDayCqDamCqDamAssetUsage: (query)  (optional)
     - parameter comDayCqDamCqDamS7dam: (query)  (optional)
     - parameter comDayCqDamCqDamSimilaritysearch: (query)  (optional)
     - parameter comDayCqDamDamWebdavSupport: (query)  (optional)
     - parameter comDayCqPreUpgradeTasks: (query)  (optional)
     - parameter comDayCqReplicationExtensions: (query)  (optional)
     - parameter comDayCqWcmCqMsmCore: (query)  (optional)
     - parameter comDayCqWcmCqWcmTranslation: (query)  (optional)
     - parameter dayCommonsJrawio: (query)  (optional)
     - parameter orgApacheAriesJmxWhiteboard: (query)  (optional)
     - parameter orgApacheFelixHttpSslfilter: (query)  (optional)
     - parameter orgApacheFelixOrgApacheFelixThreaddump: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsDs: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsEvent: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsMemoryusage: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsPackageadmin: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthLdap: (query)  (optional)
     - parameter orgApacheJackrabbitOakSegmentTar: (query)  (optional)
     - parameter orgApacheJackrabbitOakSolrOsgi: (query)  (optional)
     - parameter orgApacheSlingBundleresourceImpl: (query)  (optional)
     - parameter orgApacheSlingCommonsFsclassloader: (query)  (optional)
     - parameter orgApacheSlingCommonsLogWebconsole: (query)  (optional)
     - parameter orgApacheSlingDatasource: (query)  (optional)
     - parameter orgApacheSlingDiscoveryBase: (query)  (optional)
     - parameter orgApacheSlingDiscoveryOak: (query)  (optional)
     - parameter orgApacheSlingDiscoverySupport: (query)  (optional)
     - parameter orgApacheSlingDistributionApi: (query)  (optional)
     - parameter orgApacheSlingDistributionCore: (query)  (optional)
     - parameter orgApacheSlingExtensionsWebconsolesecurityprovider: (query)  (optional)
     - parameter orgApacheSlingHcWebconsole: (query)  (optional)
     - parameter orgApacheSlingInstallerConsole: (query)  (optional)
     - parameter orgApacheSlingInstallerProviderFile: (query)  (optional)
     - parameter orgApacheSlingInstallerProviderJcr: (query)  (optional)
     - parameter orgApacheSlingJcrDavex: (query)  (optional)
     - parameter orgApacheSlingJcrResourcesecurity: (query)  (optional)
     - parameter orgApacheSlingJmxProvider: (query)  (optional)
     - parameter orgApacheSlingLaunchpadInstaller: (query)  (optional)
     - parameter orgApacheSlingModelsImpl: (query)  (optional)
     - parameter orgApacheSlingRepoinitParser: (query)  (optional)
     - parameter orgApacheSlingResourceInventory: (query)  (optional)
     - parameter orgApacheSlingResourceresolver: (query)  (optional)
     - parameter orgApacheSlingScriptingJavascript: (query)  (optional)
     - parameter orgApacheSlingScriptingJst: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyJsProvider: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyModelsProvider: (query)  (optional)
     - parameter orgApacheSlingSecurity: (query)  (optional)
     - parameter orgApacheSlingServletsCompat: (query)  (optional)
     - parameter orgApacheSlingServletsGet: (query)  (optional)
     - parameter orgApacheSlingStartupfilterDisabler: (query)  (optional)
     - parameter orgApacheSlingTracer: (query)  (optional)
     - parameter weRetailClientAppCore: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo> 
     */
    open class func comAdobeGraniteApicontrollerFilterResolverHookFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqCdnCdnRewriter: String? = nil, comAdobeCqCloudConfigComponents: String? = nil, comAdobeCqCloudConfigCore: String? = nil, comAdobeCqCloudConfigUi: String? = nil, comAdobeCqComAdobeCqEditor: String? = nil, comAdobeCqComAdobeCqProjectsCore: String? = nil, comAdobeCqComAdobeCqProjectsWcmCore: String? = nil, comAdobeCqComAdobeCqUiCommons: String? = nil, comAdobeCqComAdobeCqWcmStyle: String? = nil, comAdobeCqCqActivitymapIntegration: String? = nil, comAdobeCqCqContexthubCommons: String? = nil, comAdobeCqCqDtm: String? = nil, comAdobeCqCqHealthcheck: String? = nil, comAdobeCqCqMultisiteTargeting: String? = nil, comAdobeCqCqPreUpgradeCleanup: String? = nil, comAdobeCqCqProductInfoProvider: String? = nil, comAdobeCqCqRestSites: String? = nil, comAdobeCqCqSecurityHc: String? = nil, comAdobeCqDamCqDamSvgHandler: String? = nil, comAdobeCqDamCqScene7Imaging: String? = nil, comAdobeCqDtmReactorCore: String? = nil, comAdobeCqDtmReactorUi: String? = nil, comAdobeCqExpJspelResolver: String? = nil, comAdobeCqInboxCqInbox: String? = nil, comAdobeCqJsonSchemaParser: String? = nil, comAdobeCqMediaCqMediaPublishingDpsFpCore: String? = nil, comAdobeCqMobileCqMobileCaas: String? = nil, comAdobeCqMobileCqMobileIndexBuilder: String? = nil, comAdobeCqMobileCqMobilePhonegapBuild: String? = nil, comAdobeCqMyspell: String? = nil, comAdobeCqSampleWeRetailCore: String? = nil, comAdobeCqScreensComAdobeCqScreensDcc: String? = nil, comAdobeCqScreensComAdobeCqScreensMqCore: String? = nil, comAdobeCqSocialCqSocialAsProvider: String? = nil, comAdobeCqSocialCqSocialBadgingBasicImpl: String? = nil, comAdobeCqSocialCqSocialBadgingImpl: String? = nil, comAdobeCqSocialCqSocialCalendarImpl: String? = nil, comAdobeCqSocialCqSocialContentFragmentsImpl: String? = nil, comAdobeCqSocialCqSocialEnablementImpl: String? = nil, comAdobeCqSocialCqSocialGraphImpl: String? = nil, comAdobeCqSocialCqSocialIdeationImpl: String? = nil, comAdobeCqSocialCqSocialJcrProvider: String? = nil, comAdobeCqSocialCqSocialMembersImpl: String? = nil, comAdobeCqSocialCqSocialMsProvider: String? = nil, comAdobeCqSocialCqSocialNotificationsChannelsWeb: String? = nil, comAdobeCqSocialCqSocialNotificationsImpl: String? = nil, comAdobeCqSocialCqSocialRdbProvider: String? = nil, comAdobeCqSocialCqSocialScfImpl: String? = nil, comAdobeCqSocialCqSocialScoringBasicImpl: String? = nil, comAdobeCqSocialCqSocialScoringImpl: String? = nil, comAdobeCqSocialCqSocialServiceusersImpl: String? = nil, comAdobeCqSocialCqSocialSrpImpl: String? = nil, comAdobeCqSocialCqSocialUgcbaseImpl: String? = nil, comAdobeDamCqDamCfmImpl: String? = nil, comAdobeFormsFoundationFormsFoundationBase: String? = nil, comAdobeGraniteApicontroller: String? = nil, comAdobeGraniteAssetCore: String? = nil, comAdobeGraniteAuthSso: String? = nil, comAdobeGraniteBundlesHcImpl: String? = nil, comAdobeGraniteCompatRouter: String? = nil, comAdobeGraniteConf: String? = nil, comAdobeGraniteConfUiCore: String? = nil, comAdobeGraniteCors: String? = nil, comAdobeGraniteCrxExplorer: String? = nil, comAdobeGraniteCrxdeLite: String? = nil, comAdobeGraniteCryptoConfig: String? = nil, comAdobeGraniteCryptoExtension: String? = nil, comAdobeGraniteCryptoFile: String? = nil, comAdobeGraniteCryptoJcr: String? = nil, comAdobeGraniteCsrf: String? = nil, comAdobeGraniteDistributionCore: String? = nil, comAdobeGraniteDropwizardMetrics: String? = nil, comAdobeGraniteFragsImpl: String? = nil, comAdobeGraniteGibson: String? = nil, comAdobeGraniteInfocollector: String? = nil, comAdobeGraniteInstallerFactoryPackages: String? = nil, comAdobeGraniteJettySsl: String? = nil, comAdobeGraniteJobsAsync: String? = nil, comAdobeGraniteMaintenanceOak: String? = nil, comAdobeGraniteMonitoringCore: String? = nil, comAdobeGraniteQueries: String? = nil, comAdobeGraniteReplicationHcImpl: String? = nil, comAdobeGraniteRepositoryChecker: String? = nil, comAdobeGraniteRepositoryHcImpl: String? = nil, comAdobeGraniteRestAssets: String? = nil, comAdobeGraniteSecurityUi: String? = nil, comAdobeGraniteStartup: String? = nil, comAdobeGraniteTagsoup: String? = nil, comAdobeGraniteTaskmanagementCore: String? = nil, comAdobeGraniteTaskmanagementWorkflow: String? = nil, comAdobeGraniteUiClientlibsCompilerLess: String? = nil, comAdobeGraniteUiClientlibsProcessorGcc: String? = nil, comAdobeGraniteWebconsolePlugins: String? = nil, comAdobeGraniteWorkflowConsole: String? = nil, comAdobeXmpWorkerFilesNativeFragmentLinux: String? = nil, comAdobeXmpWorkerFilesNativeFragmentMacosx: String? = nil, comAdobeXmpWorkerFilesNativeFragmentWin: String? = nil, comDayCommonsOsgiWrapperSimpleJndi: String? = nil, comDayCqCqAuthhandler: String? = nil, comDayCqCqCompatConfigupdate: String? = nil, comDayCqCqLicensebranding: String? = nil, comDayCqCqNotifcationImpl: String? = nil, comDayCqCqReplicationAudit: String? = nil, comDayCqCqSearchExt: String? = nil, comDayCqDamCqDamAnnotationPrint: String? = nil, comDayCqDamCqDamAssetUsage: String? = nil, comDayCqDamCqDamS7dam: String? = nil, comDayCqDamCqDamSimilaritysearch: String? = nil, comDayCqDamDamWebdavSupport: String? = nil, comDayCqPreUpgradeTasks: String? = nil, comDayCqReplicationExtensions: String? = nil, comDayCqWcmCqMsmCore: String? = nil, comDayCqWcmCqWcmTranslation: String? = nil, dayCommonsJrawio: String? = nil, orgApacheAriesJmxWhiteboard: String? = nil, orgApacheFelixHttpSslfilter: String? = nil, orgApacheFelixOrgApacheFelixThreaddump: String? = nil, orgApacheFelixWebconsolePluginsDs: String? = nil, orgApacheFelixWebconsolePluginsEvent: String? = nil, orgApacheFelixWebconsolePluginsMemoryusage: String? = nil, orgApacheFelixWebconsolePluginsPackageadmin: String? = nil, orgApacheJackrabbitOakAuthLdap: String? = nil, orgApacheJackrabbitOakSegmentTar: String? = nil, orgApacheJackrabbitOakSolrOsgi: String? = nil, orgApacheSlingBundleresourceImpl: String? = nil, orgApacheSlingCommonsFsclassloader: String? = nil, orgApacheSlingCommonsLogWebconsole: String? = nil, orgApacheSlingDatasource: String? = nil, orgApacheSlingDiscoveryBase: String? = nil, orgApacheSlingDiscoveryOak: String? = nil, orgApacheSlingDiscoverySupport: String? = nil, orgApacheSlingDistributionApi: String? = nil, orgApacheSlingDistributionCore: String? = nil, orgApacheSlingExtensionsWebconsolesecurityprovider: String? = nil, orgApacheSlingHcWebconsole: String? = nil, orgApacheSlingInstallerConsole: String? = nil, orgApacheSlingInstallerProviderFile: String? = nil, orgApacheSlingInstallerProviderJcr: String? = nil, orgApacheSlingJcrDavex: String? = nil, orgApacheSlingJcrResourcesecurity: String? = nil, orgApacheSlingJmxProvider: String? = nil, orgApacheSlingLaunchpadInstaller: String? = nil, orgApacheSlingModelsImpl: String? = nil, orgApacheSlingRepoinitParser: String? = nil, orgApacheSlingResourceInventory: String? = nil, orgApacheSlingResourceresolver: String? = nil, orgApacheSlingScriptingJavascript: String? = nil, orgApacheSlingScriptingJst: String? = nil, orgApacheSlingScriptingSightlyJsProvider: String? = nil, orgApacheSlingScriptingSightlyModelsProvider: String? = nil, orgApacheSlingSecurity: String? = nil, orgApacheSlingServletsCompat: String? = nil, orgApacheSlingServletsGet: String? = nil, orgApacheSlingStartupfilterDisabler: String? = nil, orgApacheSlingTracer: String? = nil, weRetailClientAppCore: String? = nil) -> RequestBuilder<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.cq.cdn.cdn-rewriter": comAdobeCqCdnCdnRewriter, 
            "com.adobe.cq.cloud-config.components": comAdobeCqCloudConfigComponents, 
            "com.adobe.cq.cloud-config.core": comAdobeCqCloudConfigCore, 
            "com.adobe.cq.cloud-config.ui": comAdobeCqCloudConfigUi, 
            "com.adobe.cq.com.adobe.cq.editor": comAdobeCqComAdobeCqEditor, 
            "com.adobe.cq.com.adobe.cq.projects.core": comAdobeCqComAdobeCqProjectsCore, 
            "com.adobe.cq.com.adobe.cq.projects.wcm.core": comAdobeCqComAdobeCqProjectsWcmCore, 
            "com.adobe.cq.com.adobe.cq.ui.commons": comAdobeCqComAdobeCqUiCommons, 
            "com.adobe.cq.com.adobe.cq.wcm.style": comAdobeCqComAdobeCqWcmStyle, 
            "com.adobe.cq.cq-activitymap-integration": comAdobeCqCqActivitymapIntegration, 
            "com.adobe.cq.cq-contexthub-commons": comAdobeCqCqContexthubCommons, 
            "com.adobe.cq.cq-dtm": comAdobeCqCqDtm, 
            "com.adobe.cq.cq-healthcheck": comAdobeCqCqHealthcheck, 
            "com.adobe.cq.cq-multisite-targeting": comAdobeCqCqMultisiteTargeting, 
            "com.adobe.cq.cq-pre-upgrade-cleanup": comAdobeCqCqPreUpgradeCleanup, 
            "com.adobe.cq.cq-product-info-provider": comAdobeCqCqProductInfoProvider, 
            "com.adobe.cq.cq-rest-sites": comAdobeCqCqRestSites, 
            "com.adobe.cq.cq-security-hc": comAdobeCqCqSecurityHc, 
            "com.adobe.cq.dam.cq-dam-svg-handler": comAdobeCqDamCqDamSvgHandler, 
            "com.adobe.cq.dam.cq-scene7-imaging": comAdobeCqDamCqScene7Imaging, 
            "com.adobe.cq.dtm-reactor.core": comAdobeCqDtmReactorCore, 
            "com.adobe.cq.dtm-reactor.ui": comAdobeCqDtmReactorUi, 
            "com.adobe.cq.exp-jspel-resolver": comAdobeCqExpJspelResolver, 
            "com.adobe.cq.inbox.cq-inbox": comAdobeCqInboxCqInbox, 
            "com.adobe.cq.json-schema-parser": comAdobeCqJsonSchemaParser, 
            "com.adobe.cq.media.cq-media-publishing-dps-fp-core": comAdobeCqMediaCqMediaPublishingDpsFpCore, 
            "com.adobe.cq.mobile.cq-mobile-caas": comAdobeCqMobileCqMobileCaas, 
            "com.adobe.cq.mobile.cq-mobile-index-builder": comAdobeCqMobileCqMobileIndexBuilder, 
            "com.adobe.cq.mobile.cq-mobile-phonegap-build": comAdobeCqMobileCqMobilePhonegapBuild, 
            "com.adobe.cq.myspell": comAdobeCqMyspell, 
            "com.adobe.cq.sample.we.retail.core": comAdobeCqSampleWeRetailCore, 
            "com.adobe.cq.screens.com.adobe.cq.screens.dcc": comAdobeCqScreensComAdobeCqScreensDcc, 
            "com.adobe.cq.screens.com.adobe.cq.screens.mq.core": comAdobeCqScreensComAdobeCqScreensMqCore, 
            "com.adobe.cq.social.cq-social-as-provider": comAdobeCqSocialCqSocialAsProvider, 
            "com.adobe.cq.social.cq-social-badging-basic-impl": comAdobeCqSocialCqSocialBadgingBasicImpl, 
            "com.adobe.cq.social.cq-social-badging-impl": comAdobeCqSocialCqSocialBadgingImpl, 
            "com.adobe.cq.social.cq-social-calendar-impl": comAdobeCqSocialCqSocialCalendarImpl, 
            "com.adobe.cq.social.cq-social-content-fragments-impl": comAdobeCqSocialCqSocialContentFragmentsImpl, 
            "com.adobe.cq.social.cq-social-enablement-impl": comAdobeCqSocialCqSocialEnablementImpl, 
            "com.adobe.cq.social.cq-social-graph-impl": comAdobeCqSocialCqSocialGraphImpl, 
            "com.adobe.cq.social.cq-social-ideation-impl": comAdobeCqSocialCqSocialIdeationImpl, 
            "com.adobe.cq.social.cq-social-jcr-provider": comAdobeCqSocialCqSocialJcrProvider, 
            "com.adobe.cq.social.cq-social-members-impl": comAdobeCqSocialCqSocialMembersImpl, 
            "com.adobe.cq.social.cq-social-ms-provider": comAdobeCqSocialCqSocialMsProvider, 
            "com.adobe.cq.social.cq-social-notifications-channels-web": comAdobeCqSocialCqSocialNotificationsChannelsWeb, 
            "com.adobe.cq.social.cq-social-notifications-impl": comAdobeCqSocialCqSocialNotificationsImpl, 
            "com.adobe.cq.social.cq-social-rdb-provider": comAdobeCqSocialCqSocialRdbProvider, 
            "com.adobe.cq.social.cq-social-scf-impl": comAdobeCqSocialCqSocialScfImpl, 
            "com.adobe.cq.social.cq-social-scoring-basic-impl": comAdobeCqSocialCqSocialScoringBasicImpl, 
            "com.adobe.cq.social.cq-social-scoring-impl": comAdobeCqSocialCqSocialScoringImpl, 
            "com.adobe.cq.social.cq-social-serviceusers-impl": comAdobeCqSocialCqSocialServiceusersImpl, 
            "com.adobe.cq.social.cq-social-srp-impl": comAdobeCqSocialCqSocialSrpImpl, 
            "com.adobe.cq.social.cq-social-ugcbase-impl": comAdobeCqSocialCqSocialUgcbaseImpl, 
            "com.adobe.dam.cq-dam-cfm-impl": comAdobeDamCqDamCfmImpl, 
            "com.adobe.forms.foundation-forms-foundation-base": comAdobeFormsFoundationFormsFoundationBase, 
            "com.adobe.granite.apicontroller": comAdobeGraniteApicontroller, 
            "com.adobe.granite.asset.core": comAdobeGraniteAssetCore, 
            "com.adobe.granite.auth.sso": comAdobeGraniteAuthSso, 
            "com.adobe.granite.bundles.hc.impl": comAdobeGraniteBundlesHcImpl, 
            "com.adobe.granite.compat-router": comAdobeGraniteCompatRouter, 
            "com.adobe.granite.conf": comAdobeGraniteConf, 
            "com.adobe.granite.conf.ui.core": comAdobeGraniteConfUiCore, 
            "com.adobe.granite.cors": comAdobeGraniteCors, 
            "com.adobe.granite.crx-explorer": comAdobeGraniteCrxExplorer, 
            "com.adobe.granite.crxde-lite": comAdobeGraniteCrxdeLite, 
            "com.adobe.granite.crypto.config": comAdobeGraniteCryptoConfig, 
            "com.adobe.granite.crypto.extension": comAdobeGraniteCryptoExtension, 
            "com.adobe.granite.crypto.file": comAdobeGraniteCryptoFile, 
            "com.adobe.granite.crypto.jcr": comAdobeGraniteCryptoJcr, 
            "com.adobe.granite.csrf": comAdobeGraniteCsrf, 
            "com.adobe.granite.distribution.core": comAdobeGraniteDistributionCore, 
            "com.adobe.granite.dropwizard.metrics": comAdobeGraniteDropwizardMetrics, 
            "com.adobe.granite.frags.impl": comAdobeGraniteFragsImpl, 
            "com.adobe.granite.gibson": comAdobeGraniteGibson, 
            "com.adobe.granite.infocollector": comAdobeGraniteInfocollector, 
            "com.adobe.granite.installer.factory.packages": comAdobeGraniteInstallerFactoryPackages, 
            "com.adobe.granite.jetty.ssl": comAdobeGraniteJettySsl, 
            "com.adobe.granite.jobs.async": comAdobeGraniteJobsAsync, 
            "com.adobe.granite.maintenance.oak": comAdobeGraniteMaintenanceOak, 
            "com.adobe.granite.monitoring.core": comAdobeGraniteMonitoringCore, 
            "com.adobe.granite.queries": comAdobeGraniteQueries, 
            "com.adobe.granite.replication.hc.impl": comAdobeGraniteReplicationHcImpl, 
            "com.adobe.granite.repository.checker": comAdobeGraniteRepositoryChecker, 
            "com.adobe.granite.repository.hc.impl": comAdobeGraniteRepositoryHcImpl, 
            "com.adobe.granite.rest.assets": comAdobeGraniteRestAssets, 
            "com.adobe.granite.security.ui": comAdobeGraniteSecurityUi, 
            "com.adobe.granite.startup": comAdobeGraniteStartup, 
            "com.adobe.granite.tagsoup": comAdobeGraniteTagsoup, 
            "com.adobe.granite.taskmanagement.core": comAdobeGraniteTaskmanagementCore, 
            "com.adobe.granite.taskmanagement.workflow": comAdobeGraniteTaskmanagementWorkflow, 
            "com.adobe.granite.ui.clientlibs.compiler.less": comAdobeGraniteUiClientlibsCompilerLess, 
            "com.adobe.granite.ui.clientlibs.processor.gcc": comAdobeGraniteUiClientlibsProcessorGcc, 
            "com.adobe.granite.webconsole.plugins": comAdobeGraniteWebconsolePlugins, 
            "com.adobe.granite.workflow.console": comAdobeGraniteWorkflowConsole, 
            "com.adobe.xmp.worker.files.native.fragment.linux": comAdobeXmpWorkerFilesNativeFragmentLinux, 
            "com.adobe.xmp.worker.files.native.fragment.macosx": comAdobeXmpWorkerFilesNativeFragmentMacosx, 
            "com.adobe.xmp.worker.files.native.fragment.win": comAdobeXmpWorkerFilesNativeFragmentWin, 
            "com.day.commons.osgi.wrapper.simple-jndi": comDayCommonsOsgiWrapperSimpleJndi, 
            "com.day.cq.cq-authhandler": comDayCqCqAuthhandler, 
            "com.day.cq.cq-compat-configupdate": comDayCqCqCompatConfigupdate, 
            "com.day.cq.cq-licensebranding": comDayCqCqLicensebranding, 
            "com.day.cq.cq-notifcation-impl": comDayCqCqNotifcationImpl, 
            "com.day.cq.cq-replication-audit": comDayCqCqReplicationAudit, 
            "com.day.cq.cq-search-ext": comDayCqCqSearchExt, 
            "com.day.cq.dam.cq-dam-annotation-print": comDayCqDamCqDamAnnotationPrint, 
            "com.day.cq.dam.cq-dam-asset-usage": comDayCqDamCqDamAssetUsage, 
            "com.day.cq.dam.cq-dam-s7dam": comDayCqDamCqDamS7dam, 
            "com.day.cq.dam.cq-dam-similaritysearch": comDayCqDamCqDamSimilaritysearch, 
            "com.day.cq.dam.dam-webdav-support": comDayCqDamDamWebdavSupport, 
            "com.day.cq.pre-upgrade-tasks": comDayCqPreUpgradeTasks, 
            "com.day.cq.replication.extensions": comDayCqReplicationExtensions, 
            "com.day.cq.wcm.cq-msm-core": comDayCqWcmCqMsmCore, 
            "com.day.cq.wcm.cq-wcm-translation": comDayCqWcmCqWcmTranslation, 
            "day-commons-jrawio": dayCommonsJrawio, 
            "org.apache.aries.jmx.whiteboard": orgApacheAriesJmxWhiteboard, 
            "org.apache.felix.http.sslfilter": orgApacheFelixHttpSslfilter, 
            "org.apache.felix.org.apache.felix.threaddump": orgApacheFelixOrgApacheFelixThreaddump, 
            "org.apache.felix.webconsole.plugins.ds": orgApacheFelixWebconsolePluginsDs, 
            "org.apache.felix.webconsole.plugins.event": orgApacheFelixWebconsolePluginsEvent, 
            "org.apache.felix.webconsole.plugins.memoryusage": orgApacheFelixWebconsolePluginsMemoryusage, 
            "org.apache.felix.webconsole.plugins.packageadmin": orgApacheFelixWebconsolePluginsPackageadmin, 
            "org.apache.jackrabbit.oak-auth-ldap": orgApacheJackrabbitOakAuthLdap, 
            "org.apache.jackrabbit.oak-segment-tar": orgApacheJackrabbitOakSegmentTar, 
            "org.apache.jackrabbit.oak-solr-osgi": orgApacheJackrabbitOakSolrOsgi, 
            "org.apache.sling.bundleresource.impl": orgApacheSlingBundleresourceImpl, 
            "org.apache.sling.commons.fsclassloader": orgApacheSlingCommonsFsclassloader, 
            "org.apache.sling.commons.log.webconsole": orgApacheSlingCommonsLogWebconsole, 
            "org.apache.sling.datasource": orgApacheSlingDatasource, 
            "org.apache.sling.discovery.base": orgApacheSlingDiscoveryBase, 
            "org.apache.sling.discovery.oak": orgApacheSlingDiscoveryOak, 
            "org.apache.sling.discovery.support": orgApacheSlingDiscoverySupport, 
            "org.apache.sling.distribution.api": orgApacheSlingDistributionApi, 
            "org.apache.sling.distribution.core": orgApacheSlingDistributionCore, 
            "org.apache.sling.extensions.webconsolesecurityprovider": orgApacheSlingExtensionsWebconsolesecurityprovider, 
            "org.apache.sling.hc.webconsole": orgApacheSlingHcWebconsole, 
            "org.apache.sling.installer.console": orgApacheSlingInstallerConsole, 
            "org.apache.sling.installer.provider.file": orgApacheSlingInstallerProviderFile, 
            "org.apache.sling.installer.provider.jcr": orgApacheSlingInstallerProviderJcr, 
            "org.apache.sling.jcr.davex": orgApacheSlingJcrDavex, 
            "org.apache.sling.jcr.resourcesecurity": orgApacheSlingJcrResourcesecurity, 
            "org.apache.sling.jmx.provider": orgApacheSlingJmxProvider, 
            "org.apache.sling.launchpad.installer": orgApacheSlingLaunchpadInstaller, 
            "org.apache.sling.models.impl": orgApacheSlingModelsImpl, 
            "org.apache.sling.repoinit.parser": orgApacheSlingRepoinitParser, 
            "org.apache.sling.resource.inventory": orgApacheSlingResourceInventory, 
            "org.apache.sling.resourceresolver": orgApacheSlingResourceresolver, 
            "org.apache.sling.scripting.javascript": orgApacheSlingScriptingJavascript, 
            "org.apache.sling.scripting.jst": orgApacheSlingScriptingJst, 
            "org.apache.sling.scripting.sightly.js.provider": orgApacheSlingScriptingSightlyJsProvider, 
            "org.apache.sling.scripting.sightly.models.provider": orgApacheSlingScriptingSightlyModelsProvider, 
            "org.apache.sling.security": orgApacheSlingSecurity, 
            "org.apache.sling.servlets.compat": orgApacheSlingServletsCompat, 
            "org.apache.sling.servlets.get": orgApacheSlingServletsGet, 
            "org.apache.sling.startupfilter.disabler": orgApacheSlingStartupfilterDisabler, 
            "org.apache.sling.tracer": orgApacheSlingTracer, 
            "we.retail.client.app.core": weRetailClientAppCore
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthCertImplClientCertAuthHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthCertImplClientCertAuthHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo> 
     */
    open class func comAdobeGraniteAuthCertImplClientCertAuthHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int? = nil) -> RequestBuilder<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path, 
            "service.ranking": serviceRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configid: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthIms(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configid: String? = nil, scope: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthImsInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthImsWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, configid: configid, scope: scope).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configid: (query)  (optional)
     - parameter scope: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthImsInfo> 
     */
    open class func comAdobeGraniteAuthImsWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configid: String? = nil, scope: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "configid": configid, 
            "scope": scope
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo> 
     */
    open class func comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.provider.id": oauthProviderId
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authImsClientSecret: (query)  (optional)
     - parameter customizerType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authImsClientSecret: String? = nil, customizerType: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, authImsClientSecret: authImsClientSecret, customizerType: customizerType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authImsClientSecret: (query)  (optional)
     - parameter customizerType: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo> 
     */
    open class func comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authImsClientSecret: String? = nil, customizerType: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "auth.ims.client.secret": authImsClientSecret, 
            "customizer.type": customizerType
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo> 
     */
    open class func comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.provider.id": oauthProviderId
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderImsAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderImsTokenUrl: (query)  (optional)
     - parameter oauthProviderImsProfileUrl: (query)  (optional)
     - parameter oauthProviderImsExtendedDetailsUrls: (query)  (optional)
     - parameter oauthProviderImsValidateTokenUrl: (query)  (optional)
     - parameter oauthProviderImsSessionProperty: (query)  (optional)
     - parameter oauthProviderImsServiceTokenClientId: (query)  (optional)
     - parameter oauthProviderImsServiceTokenClientSecret: (query)  (optional)
     - parameter oauthProviderImsServiceToken: (query)  (optional)
     - parameter imsOrgRef: (query)  (optional)
     - parameter imsGroupMapping: (query)  (optional)
     - parameter oauthProviderImsOnlyLicenseGroup: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthImsImplIMSProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderImsAuthorizationUrl: String? = nil, oauthProviderImsTokenUrl: String? = nil, oauthProviderImsProfileUrl: String? = nil, oauthProviderImsExtendedDetailsUrls: [String]? = nil, oauthProviderImsValidateTokenUrl: String? = nil, oauthProviderImsSessionProperty: String? = nil, oauthProviderImsServiceTokenClientId: String? = nil, oauthProviderImsServiceTokenClientSecret: String? = nil, oauthProviderImsServiceToken: String? = nil, imsOrgRef: String? = nil, imsGroupMapping: [String]? = nil, oauthProviderImsOnlyLicenseGroup: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthImsImplIMSProviderImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthImsImplIMSProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId, oauthProviderImsAuthorizationUrl: oauthProviderImsAuthorizationUrl, oauthProviderImsTokenUrl: oauthProviderImsTokenUrl, oauthProviderImsProfileUrl: oauthProviderImsProfileUrl, oauthProviderImsExtendedDetailsUrls: oauthProviderImsExtendedDetailsUrls, oauthProviderImsValidateTokenUrl: oauthProviderImsValidateTokenUrl, oauthProviderImsSessionProperty: oauthProviderImsSessionProperty, oauthProviderImsServiceTokenClientId: oauthProviderImsServiceTokenClientId, oauthProviderImsServiceTokenClientSecret: oauthProviderImsServiceTokenClientSecret, oauthProviderImsServiceToken: oauthProviderImsServiceToken, imsOrgRef: imsOrgRef, imsGroupMapping: imsGroupMapping, oauthProviderImsOnlyLicenseGroup: oauthProviderImsOnlyLicenseGroup).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderImsAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderImsTokenUrl: (query)  (optional)
     - parameter oauthProviderImsProfileUrl: (query)  (optional)
     - parameter oauthProviderImsExtendedDetailsUrls: (query)  (optional)
     - parameter oauthProviderImsValidateTokenUrl: (query)  (optional)
     - parameter oauthProviderImsSessionProperty: (query)  (optional)
     - parameter oauthProviderImsServiceTokenClientId: (query)  (optional)
     - parameter oauthProviderImsServiceTokenClientSecret: (query)  (optional)
     - parameter oauthProviderImsServiceToken: (query)  (optional)
     - parameter imsOrgRef: (query)  (optional)
     - parameter imsGroupMapping: (query)  (optional)
     - parameter oauthProviderImsOnlyLicenseGroup: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthImsImplIMSProviderImplInfo> 
     */
    open class func comAdobeGraniteAuthImsImplIMSProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderImsAuthorizationUrl: String? = nil, oauthProviderImsTokenUrl: String? = nil, oauthProviderImsProfileUrl: String? = nil, oauthProviderImsExtendedDetailsUrls: [String]? = nil, oauthProviderImsValidateTokenUrl: String? = nil, oauthProviderImsSessionProperty: String? = nil, oauthProviderImsServiceTokenClientId: String? = nil, oauthProviderImsServiceTokenClientSecret: String? = nil, oauthProviderImsServiceToken: String? = nil, imsOrgRef: String? = nil, imsGroupMapping: [String]? = nil, oauthProviderImsOnlyLicenseGroup: Bool? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsImplIMSProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.provider.id": oauthProviderId, 
            "oauth.provider.ims.authorization.url": oauthProviderImsAuthorizationUrl, 
            "oauth.provider.ims.token.url": oauthProviderImsTokenUrl, 
            "oauth.provider.ims.profile.url": oauthProviderImsProfileUrl, 
            "oauth.provider.ims.extended.details.urls": oauthProviderImsExtendedDetailsUrls, 
            "oauth.provider.ims.validate.token.url": oauthProviderImsValidateTokenUrl, 
            "oauth.provider.ims.session.property": oauthProviderImsSessionProperty, 
            "oauth.provider.ims.service.token.client.id": oauthProviderImsServiceTokenClientId, 
            "oauth.provider.ims.service.token.client.secret": oauthProviderImsServiceTokenClientSecret, 
            "oauth.provider.ims.service.token": oauthProviderImsServiceToken, 
            "ims.org.ref": imsOrgRef, 
            "ims.group.mapping": imsGroupMapping, 
            "oauth.provider.ims.only.license.group": oauthProviderImsOnlyLicenseGroup
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsImplIMSProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthConfigmanagerImsConfigid: (query)  (optional)
     - parameter imsOwningEntity: (query)  (optional)
     - parameter aemInstanceId: (query)  (optional)
     - parameter imsServiceCode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthImsImplImsConfigProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthConfigmanagerImsConfigid: String? = nil, imsOwningEntity: String? = nil, aemInstanceId: String? = nil, imsServiceCode: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthImsImplImsConfigProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthConfigmanagerImsConfigid: oauthConfigmanagerImsConfigid, imsOwningEntity: imsOwningEntity, aemInstanceId: aemInstanceId, imsServiceCode: imsServiceCode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthConfigmanagerImsConfigid: (query)  (optional)
     - parameter imsOwningEntity: (query)  (optional)
     - parameter aemInstanceId: (query)  (optional)
     - parameter imsServiceCode: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo> 
     */
    open class func comAdobeGraniteAuthImsImplImsConfigProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthConfigmanagerImsConfigid: String? = nil, imsOwningEntity: String? = nil, aemInstanceId: String? = nil, imsServiceCode: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.configmanager.ims.configid": oauthConfigmanagerImsConfigid, 
            "ims.owningEntity": imsOwningEntity, 
            "aem.instanceId": aemInstanceId, 
            "ims.serviceCode": imsServiceCode
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter authTokenProviderTitle: (query)  (optional)
     - parameter authTokenProviderDefaultClaims: (query)  (optional)
     - parameter authTokenProviderEndpoint: (query)  (optional)
     - parameter authAccessTokenRequest: (query)  (optional)
     - parameter authTokenProviderKeypairAlias: (query)  (optional)
     - parameter authTokenProviderConnTimeout: (query)  (optional)
     - parameter authTokenProviderSoTimeout: (query)  (optional)
     - parameter authTokenProviderClientId: (query)  (optional)
     - parameter authTokenProviderScope: (query)  (optional)
     - parameter authTokenProviderReuseAccessToken: (query)  (optional)
     - parameter authTokenProviderRelaxedSsl: (query)  (optional)
     - parameter tokenRequestCustomizerType: (query)  (optional)
     - parameter authTokenValidatorType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthOauthAccesstokenProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, authTokenProviderTitle: String? = nil, authTokenProviderDefaultClaims: [String]? = nil, authTokenProviderEndpoint: String? = nil, authAccessTokenRequest: String? = nil, authTokenProviderKeypairAlias: String? = nil, authTokenProviderConnTimeout: Int? = nil, authTokenProviderSoTimeout: Int? = nil, authTokenProviderClientId: String? = nil, authTokenProviderScope: String? = nil, authTokenProviderReuseAccessToken: Bool? = nil, authTokenProviderRelaxedSsl: Bool? = nil, tokenRequestCustomizerType: String? = nil, authTokenValidatorType: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthOauthAccesstokenProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthOauthAccesstokenProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, authTokenProviderTitle: authTokenProviderTitle, authTokenProviderDefaultClaims: authTokenProviderDefaultClaims, authTokenProviderEndpoint: authTokenProviderEndpoint, authAccessTokenRequest: authAccessTokenRequest, authTokenProviderKeypairAlias: authTokenProviderKeypairAlias, authTokenProviderConnTimeout: authTokenProviderConnTimeout, authTokenProviderSoTimeout: authTokenProviderSoTimeout, authTokenProviderClientId: authTokenProviderClientId, authTokenProviderScope: authTokenProviderScope, authTokenProviderReuseAccessToken: authTokenProviderReuseAccessToken, authTokenProviderRelaxedSsl: authTokenProviderRelaxedSsl, tokenRequestCustomizerType: tokenRequestCustomizerType, authTokenValidatorType: authTokenValidatorType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter authTokenProviderTitle: (query)  (optional)
     - parameter authTokenProviderDefaultClaims: (query)  (optional)
     - parameter authTokenProviderEndpoint: (query)  (optional)
     - parameter authAccessTokenRequest: (query)  (optional)
     - parameter authTokenProviderKeypairAlias: (query)  (optional)
     - parameter authTokenProviderConnTimeout: (query)  (optional)
     - parameter authTokenProviderSoTimeout: (query)  (optional)
     - parameter authTokenProviderClientId: (query)  (optional)
     - parameter authTokenProviderScope: (query)  (optional)
     - parameter authTokenProviderReuseAccessToken: (query)  (optional)
     - parameter authTokenProviderRelaxedSsl: (query)  (optional)
     - parameter tokenRequestCustomizerType: (query)  (optional)
     - parameter authTokenValidatorType: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthOauthAccesstokenProviderInfo> 
     */
    open class func comAdobeGraniteAuthOauthAccesstokenProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, authTokenProviderTitle: String? = nil, authTokenProviderDefaultClaims: [String]? = nil, authTokenProviderEndpoint: String? = nil, authAccessTokenRequest: String? = nil, authTokenProviderKeypairAlias: String? = nil, authTokenProviderConnTimeout: Int? = nil, authTokenProviderSoTimeout: Int? = nil, authTokenProviderClientId: String? = nil, authTokenProviderScope: String? = nil, authTokenProviderReuseAccessToken: Bool? = nil, authTokenProviderRelaxedSsl: Bool? = nil, tokenRequestCustomizerType: String? = nil, authTokenValidatorType: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthAccesstokenProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "auth.token.provider.title": authTokenProviderTitle, 
            "auth.token.provider.default.claims": authTokenProviderDefaultClaims, 
            "auth.token.provider.endpoint": authTokenProviderEndpoint, 
            "auth.access.token.request": authAccessTokenRequest, 
            "auth.token.provider.keypair.alias": authTokenProviderKeypairAlias, 
            "auth.token.provider.conn.timeout": authTokenProviderConnTimeout?.encodeToJSON(), 
            "auth.token.provider.so.timeout": authTokenProviderSoTimeout?.encodeToJSON(), 
            "auth.token.provider.client.id": authTokenProviderClientId, 
            "auth.token.provider.scope": authTokenProviderScope, 
            "auth.token.provider.reuse.access.token": authTokenProviderReuseAccessToken, 
            "auth.token.provider.relaxed.ssl": authTokenProviderRelaxedSsl, 
            "token.request.customizer.type": tokenRequestCustomizerType, 
            "auth.token.validator.type": authTokenValidatorType
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthAccesstokenProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter oauthClientIdsAllowed: (query)  (optional)
     - parameter authBearerSyncIms: (query)  (optional)
     - parameter authTokenRequestParameter: (query)  (optional)
     - parameter oauthBearerConfigid: (query)  (optional)
     - parameter oauthJwtSupport: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, oauthClientIdsAllowed: [String]? = nil, authBearerSyncIms: Bool? = nil, authTokenRequestParameter: String? = nil, oauthBearerConfigid: String? = nil, oauthJwtSupport: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, oauthClientIdsAllowed: oauthClientIdsAllowed, authBearerSyncIms: authBearerSyncIms, authTokenRequestParameter: authTokenRequestParameter, oauthBearerConfigid: oauthBearerConfigid, oauthJwtSupport: oauthJwtSupport).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter oauthClientIdsAllowed: (query)  (optional)
     - parameter authBearerSyncIms: (query)  (optional)
     - parameter authTokenRequestParameter: (query)  (optional)
     - parameter oauthBearerConfigid: (query)  (optional)
     - parameter oauthJwtSupport: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo> 
     */
    open class func comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, oauthClientIdsAllowed: [String]? = nil, authBearerSyncIms: Bool? = nil, authTokenRequestParameter: String? = nil, oauthBearerConfigid: String? = nil, oauthJwtSupport: Bool? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path, 
            "oauth.clientIds.allowed": oauthClientIdsAllowed, 
            "auth.bearer.sync.ims": authBearerSyncIms, 
            "auth.tokenRequestParameter": authTokenRequestParameter, 
            "oauth.bearer.configid": oauthBearerConfigid, 
            "oauth.jwt.support": oauthJwtSupport
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authTokenValidatorType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authTokenValidatorType: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, authTokenValidatorType: authTokenValidatorType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authTokenValidatorType: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo> 
     */
    open class func comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authTokenValidatorType: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "auth.token.validator.type": authTokenValidatorType
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthOauthImplFacebookProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthOauthImplFacebookProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo> 
     */
    open class func comAdobeGraniteAuthOauthImplFacebookProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.provider.id": oauthProviderId
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderGithubAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderGithubTokenUrl: (query)  (optional)
     - parameter oauthProviderGithubProfileUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthOauthImplGithubProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderGithubAuthorizationUrl: String? = nil, oauthProviderGithubTokenUrl: String? = nil, oauthProviderGithubProfileUrl: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthOauthImplGithubProviderImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthOauthImplGithubProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId, oauthProviderGithubAuthorizationUrl: oauthProviderGithubAuthorizationUrl, oauthProviderGithubTokenUrl: oauthProviderGithubTokenUrl, oauthProviderGithubProfileUrl: oauthProviderGithubProfileUrl).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderGithubAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderGithubTokenUrl: (query)  (optional)
     - parameter oauthProviderGithubProfileUrl: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo> 
     */
    open class func comAdobeGraniteAuthOauthImplGithubProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderGithubAuthorizationUrl: String? = nil, oauthProviderGithubTokenUrl: String? = nil, oauthProviderGithubProfileUrl: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.provider.id": oauthProviderId, 
            "oauth.provider.github.authorization.url": oauthProviderGithubAuthorizationUrl, 
            "oauth.provider.github.token.url": oauthProviderGithubTokenUrl, 
            "oauth.provider.github.profile.url": oauthProviderGithubProfileUrl
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderGraniteAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderGraniteTokenUrl: (query)  (optional)
     - parameter oauthProviderGraniteProfileUrl: (query)  (optional)
     - parameter oauthProviderGraniteExtendedDetailsUrls: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthOauthImplGraniteProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderGraniteAuthorizationUrl: String? = nil, oauthProviderGraniteTokenUrl: String? = nil, oauthProviderGraniteProfileUrl: String? = nil, oauthProviderGraniteExtendedDetailsUrls: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthOauthImplGraniteProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthOauthImplGraniteProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId, oauthProviderGraniteAuthorizationUrl: oauthProviderGraniteAuthorizationUrl, oauthProviderGraniteTokenUrl: oauthProviderGraniteTokenUrl, oauthProviderGraniteProfileUrl: oauthProviderGraniteProfileUrl, oauthProviderGraniteExtendedDetailsUrls: oauthProviderGraniteExtendedDetailsUrls).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderGraniteAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderGraniteTokenUrl: (query)  (optional)
     - parameter oauthProviderGraniteProfileUrl: (query)  (optional)
     - parameter oauthProviderGraniteExtendedDetailsUrls: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplGraniteProviderInfo> 
     */
    open class func comAdobeGraniteAuthOauthImplGraniteProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderGraniteAuthorizationUrl: String? = nil, oauthProviderGraniteTokenUrl: String? = nil, oauthProviderGraniteProfileUrl: String? = nil, oauthProviderGraniteExtendedDetailsUrls: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplGraniteProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.provider.id": oauthProviderId, 
            "oauth.provider.granite.authorization.url": oauthProviderGraniteAuthorizationUrl, 
            "oauth.provider.granite.token.url": oauthProviderGraniteTokenUrl, 
            "oauth.provider.granite.profile.url": oauthProviderGraniteProfileUrl, 
            "oauth.provider.granite.extended.details.urls": oauthProviderGraniteExtendedDetailsUrls
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplGraniteProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthCookieLoginTimeout: (query)  (optional)
     - parameter oauthCookieMaxAge: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthCookieLoginTimeout: String? = nil, oauthCookieMaxAge: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthOauthImplHelperProviderConfigManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthCookieLoginTimeout: oauthCookieLoginTimeout, oauthCookieMaxAge: oauthCookieMaxAge).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthCookieLoginTimeout: (query)  (optional)
     - parameter oauthCookieMaxAge: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo> 
     */
    open class func comAdobeGraniteAuthOauthImplHelperProviderConfigManagerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthCookieLoginTimeout: String? = nil, oauthCookieMaxAge: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.cookie.login.timeout": oauthCookieLoginTimeout, 
            "oauth.cookie.max.age": oauthCookieMaxAge
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthCookieLoginTimeout: (query)  (optional)
     - parameter oauthCookieMaxAge: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthCookieLoginTimeout: String? = nil, oauthCookieMaxAge: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthCookieLoginTimeout: oauthCookieLoginTimeout, oauthCookieMaxAge: oauthCookieMaxAge).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthCookieLoginTimeout: (query)  (optional)
     - parameter oauthCookieMaxAge: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo> 
     */
    open class func comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthCookieLoginTimeout: String? = nil, oauthCookieMaxAge: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.cookie.login.timeout": oauthCookieLoginTimeout, 
            "oauth.cookie.max.age": oauthCookieMaxAge
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo> 
     */
    open class func comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthOauthImplTwitterProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthOauthImplTwitterProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo> 
     */
    open class func comAdobeGraniteAuthOauthImplTwitterProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.provider.id": oauthProviderId
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthConfigId: (query)  (optional)
     - parameter oauthClientId: (query)  (optional)
     - parameter oauthClientSecret: (query)  (optional)
     - parameter oauthScope: (query)  (optional)
     - parameter oauthConfigProviderId: (query)  (optional)
     - parameter oauthCreateUsers: (query)  (optional)
     - parameter oauthUseridProperty: (query)  (optional)
     - parameter forceStrictUsernameMatching: (query)  (optional)
     - parameter oauthEncodeUserids: (query)  (optional)
     - parameter oauthHashUserids: (query)  (optional)
     - parameter oauthCallBackUrl: (query)  (optional)
     - parameter oauthAccessTokenPersist: (query)  (optional)
     - parameter oauthAccessTokenPersistCookie: (query)  (optional)
     - parameter oauthCsrfStateProtection: (query)  (optional)
     - parameter oauthRedirectRequestParams: (query)  (optional)
     - parameter oauthConfigSiblingsAllow: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthOauthProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthConfigId: String? = nil, oauthClientId: String? = nil, oauthClientSecret: String? = nil, oauthScope: [String]? = nil, oauthConfigProviderId: String? = nil, oauthCreateUsers: Bool? = nil, oauthUseridProperty: String? = nil, forceStrictUsernameMatching: Bool? = nil, oauthEncodeUserids: Bool? = nil, oauthHashUserids: Bool? = nil, oauthCallBackUrl: String? = nil, oauthAccessTokenPersist: Bool? = nil, oauthAccessTokenPersistCookie: Bool? = nil, oauthCsrfStateProtection: Bool? = nil, oauthRedirectRequestParams: Bool? = nil, oauthConfigSiblingsAllow: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthOauthProviderInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthOauthProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthConfigId: oauthConfigId, oauthClientId: oauthClientId, oauthClientSecret: oauthClientSecret, oauthScope: oauthScope, oauthConfigProviderId: oauthConfigProviderId, oauthCreateUsers: oauthCreateUsers, oauthUseridProperty: oauthUseridProperty, forceStrictUsernameMatching: forceStrictUsernameMatching, oauthEncodeUserids: oauthEncodeUserids, oauthHashUserids: oauthHashUserids, oauthCallBackUrl: oauthCallBackUrl, oauthAccessTokenPersist: oauthAccessTokenPersist, oauthAccessTokenPersistCookie: oauthAccessTokenPersistCookie, oauthCsrfStateProtection: oauthCsrfStateProtection, oauthRedirectRequestParams: oauthRedirectRequestParams, oauthConfigSiblingsAllow: oauthConfigSiblingsAllow).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.provider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthConfigId: (query)  (optional)
     - parameter oauthClientId: (query)  (optional)
     - parameter oauthClientSecret: (query)  (optional)
     - parameter oauthScope: (query)  (optional)
     - parameter oauthConfigProviderId: (query)  (optional)
     - parameter oauthCreateUsers: (query)  (optional)
     - parameter oauthUseridProperty: (query)  (optional)
     - parameter forceStrictUsernameMatching: (query)  (optional)
     - parameter oauthEncodeUserids: (query)  (optional)
     - parameter oauthHashUserids: (query)  (optional)
     - parameter oauthCallBackUrl: (query)  (optional)
     - parameter oauthAccessTokenPersist: (query)  (optional)
     - parameter oauthAccessTokenPersistCookie: (query)  (optional)
     - parameter oauthCsrfStateProtection: (query)  (optional)
     - parameter oauthRedirectRequestParams: (query)  (optional)
     - parameter oauthConfigSiblingsAllow: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthOauthProviderInfo> 
     */
    open class func comAdobeGraniteAuthOauthProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthConfigId: String? = nil, oauthClientId: String? = nil, oauthClientSecret: String? = nil, oauthScope: [String]? = nil, oauthConfigProviderId: String? = nil, oauthCreateUsers: Bool? = nil, oauthUseridProperty: String? = nil, forceStrictUsernameMatching: Bool? = nil, oauthEncodeUserids: Bool? = nil, oauthHashUserids: Bool? = nil, oauthCallBackUrl: String? = nil, oauthAccessTokenPersist: Bool? = nil, oauthAccessTokenPersistCookie: Bool? = nil, oauthCsrfStateProtection: Bool? = nil, oauthRedirectRequestParams: Bool? = nil, oauthConfigSiblingsAllow: Bool? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.provider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.config.id": oauthConfigId, 
            "oauth.client.id": oauthClientId, 
            "oauth.client.secret": oauthClientSecret, 
            "oauth.scope": oauthScope, 
            "oauth.config.provider.id": oauthConfigProviderId, 
            "oauth.create.users": oauthCreateUsers, 
            "oauth.userid.property": oauthUseridProperty, 
            "force.strict.username.matching": forceStrictUsernameMatching, 
            "oauth.encode.userids": oauthEncodeUserids, 
            "oauth.hash.userids": oauthHashUserids, 
            "oauth.callBackUrl": oauthCallBackUrl, 
            "oauth.access.token.persist": oauthAccessTokenPersist, 
            "oauth.access.token.persist.cookie": oauthAccessTokenPersistCookie, 
            "oauth.csrf.state.protection": oauthCsrfStateProtection, 
            "oauth.redirect.request.params": oauthRedirectRequestParams, 
            "oauth.config.siblings.allow": oauthConfigSiblingsAllow
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter supportedPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, supportedPaths: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, supportedPaths: supportedPaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter supportedPaths: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo> 
     */
    open class func comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, supportedPaths: [String]? = nil) -> RequestBuilder<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "supportedPaths": supportedPaths
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter idpUrl: (query)  (optional)
     - parameter idpCertAlias: (query)  (optional)
     - parameter idpHttpRedirect: (query)  (optional)
     - parameter serviceProviderEntityId: (query)  (optional)
     - parameter assertionConsumerServiceURL: (query)  (optional)
     - parameter spPrivateKeyAlias: (query)  (optional)
     - parameter keyStorePassword: (query)  (optional)
     - parameter defaultRedirectUrl: (query)  (optional)
     - parameter userIDAttribute: (query)  (optional)
     - parameter useEncryption: (query)  (optional)
     - parameter createUser: (query)  (optional)
     - parameter userIntermediatePath: (query)  (optional)
     - parameter addGroupMemberships: (query)  (optional)
     - parameter groupMembershipAttribute: (query)  (optional)
     - parameter defaultGroups: (query)  (optional)
     - parameter nameIdFormat: (query)  (optional)
     - parameter synchronizeAttributes: (query)  (optional)
     - parameter handleLogout: (query)  (optional)
     - parameter logoutUrl: (query)  (optional)
     - parameter clockTolerance: (query)  (optional)
     - parameter digestMethod: (query)  (optional)
     - parameter signatureMethod: (query)  (optional)
     - parameter identitySyncType: (query)  (optional)
     - parameter idpIdentifier: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthSamlSamlAuthenticationHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: [String]? = nil, serviceRanking: Int? = nil, idpUrl: String? = nil, idpCertAlias: String? = nil, idpHttpRedirect: Bool? = nil, serviceProviderEntityId: String? = nil, assertionConsumerServiceURL: String? = nil, spPrivateKeyAlias: String? = nil, keyStorePassword: String? = nil, defaultRedirectUrl: String? = nil, userIDAttribute: String? = nil, useEncryption: Bool? = nil, createUser: Bool? = nil, userIntermediatePath: String? = nil, addGroupMemberships: Bool? = nil, groupMembershipAttribute: String? = nil, defaultGroups: [String]? = nil, nameIdFormat: String? = nil, synchronizeAttributes: [String]? = nil, handleLogout: Bool? = nil, logoutUrl: String? = nil, clockTolerance: Int? = nil, digestMethod: String? = nil, signatureMethod: String? = nil, identitySyncType: String? = nil, idpIdentifier: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthSamlSamlAuthenticationHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, serviceRanking: serviceRanking, idpUrl: idpUrl, idpCertAlias: idpCertAlias, idpHttpRedirect: idpHttpRedirect, serviceProviderEntityId: serviceProviderEntityId, assertionConsumerServiceURL: assertionConsumerServiceURL, spPrivateKeyAlias: spPrivateKeyAlias, keyStorePassword: keyStorePassword, defaultRedirectUrl: defaultRedirectUrl, userIDAttribute: userIDAttribute, useEncryption: useEncryption, createUser: createUser, userIntermediatePath: userIntermediatePath, addGroupMemberships: addGroupMemberships, groupMembershipAttribute: groupMembershipAttribute, defaultGroups: defaultGroups, nameIdFormat: nameIdFormat, synchronizeAttributes: synchronizeAttributes, handleLogout: handleLogout, logoutUrl: logoutUrl, clockTolerance: clockTolerance, digestMethod: digestMethod, signatureMethod: signatureMethod, identitySyncType: identitySyncType, idpIdentifier: idpIdentifier).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter idpUrl: (query)  (optional)
     - parameter idpCertAlias: (query)  (optional)
     - parameter idpHttpRedirect: (query)  (optional)
     - parameter serviceProviderEntityId: (query)  (optional)
     - parameter assertionConsumerServiceURL: (query)  (optional)
     - parameter spPrivateKeyAlias: (query)  (optional)
     - parameter keyStorePassword: (query)  (optional)
     - parameter defaultRedirectUrl: (query)  (optional)
     - parameter userIDAttribute: (query)  (optional)
     - parameter useEncryption: (query)  (optional)
     - parameter createUser: (query)  (optional)
     - parameter userIntermediatePath: (query)  (optional)
     - parameter addGroupMemberships: (query)  (optional)
     - parameter groupMembershipAttribute: (query)  (optional)
     - parameter defaultGroups: (query)  (optional)
     - parameter nameIdFormat: (query)  (optional)
     - parameter synchronizeAttributes: (query)  (optional)
     - parameter handleLogout: (query)  (optional)
     - parameter logoutUrl: (query)  (optional)
     - parameter clockTolerance: (query)  (optional)
     - parameter digestMethod: (query)  (optional)
     - parameter signatureMethod: (query)  (optional)
     - parameter identitySyncType: (query)  (optional)
     - parameter idpIdentifier: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo> 
     */
    open class func comAdobeGraniteAuthSamlSamlAuthenticationHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: [String]? = nil, serviceRanking: Int? = nil, idpUrl: String? = nil, idpCertAlias: String? = nil, idpHttpRedirect: Bool? = nil, serviceProviderEntityId: String? = nil, assertionConsumerServiceURL: String? = nil, spPrivateKeyAlias: String? = nil, keyStorePassword: String? = nil, defaultRedirectUrl: String? = nil, userIDAttribute: String? = nil, useEncryption: Bool? = nil, createUser: Bool? = nil, userIntermediatePath: String? = nil, addGroupMemberships: Bool? = nil, groupMembershipAttribute: String? = nil, defaultGroups: [String]? = nil, nameIdFormat: String? = nil, synchronizeAttributes: [String]? = nil, handleLogout: Bool? = nil, logoutUrl: String? = nil, clockTolerance: Int? = nil, digestMethod: String? = nil, signatureMethod: String? = nil, identitySyncType: String? = nil, idpIdentifier: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "idpUrl": idpUrl, 
            "idpCertAlias": idpCertAlias, 
            "idpHttpRedirect": idpHttpRedirect, 
            "serviceProviderEntityId": serviceProviderEntityId, 
            "assertionConsumerServiceURL": assertionConsumerServiceURL, 
            "spPrivateKeyAlias": spPrivateKeyAlias, 
            "keyStorePassword": keyStorePassword, 
            "defaultRedirectUrl": defaultRedirectUrl, 
            "userIDAttribute": userIDAttribute, 
            "useEncryption": useEncryption, 
            "createUser": createUser, 
            "userIntermediatePath": userIntermediatePath, 
            "addGroupMemberships": addGroupMemberships, 
            "groupMembershipAttribute": groupMembershipAttribute, 
            "defaultGroups": defaultGroups, 
            "nameIdFormat": nameIdFormat, 
            "synchronizeAttributes": synchronizeAttributes, 
            "handleLogout": handleLogout, 
            "logoutUrl": logoutUrl, 
            "clockTolerance": clockTolerance?.encodeToJSON(), 
            "digestMethod": digestMethod, 
            "signatureMethod": signatureMethod, 
            "identitySyncType": identitySyncType, 
            "idpIdentifier": idpIdentifier
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter headers: (query)  (optional)
     - parameter cookies: (query)  (optional)
     - parameter parameters: (query)  (optional)
     - parameter usermap: (query)  (optional)
     - parameter format: (query)  (optional)
     - parameter trustedCredentialsAttribute: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, jaasRanking: Int? = nil, headers: [String]? = nil, cookies: [String]? = nil, parameters: [String]? = nil, usermap: [String]? = nil, format: String? = nil, trustedCredentialsAttribute: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, serviceRanking: serviceRanking, jaasControlFlag: jaasControlFlag, jaasRealmName: jaasRealmName, jaasRanking: jaasRanking, headers: headers, cookies: cookies, parameters: parameters, usermap: usermap, format: format, trustedCredentialsAttribute: trustedCredentialsAttribute).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter headers: (query)  (optional)
     - parameter cookies: (query)  (optional)
     - parameter parameters: (query)  (optional)
     - parameter usermap: (query)  (optional)
     - parameter format: (query)  (optional)
     - parameter trustedCredentialsAttribute: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo> 
     */
    open class func comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, jaasRanking: Int? = nil, headers: [String]? = nil, cookies: [String]? = nil, parameters: [String]? = nil, usermap: [String]? = nil, format: String? = nil, trustedCredentialsAttribute: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "jaas.controlFlag": jaasControlFlag, 
            "jaas.realmName": jaasRealmName, 
            "jaas.ranking": jaasRanking?.encodeToJSON(), 
            "headers": headers, 
            "cookies": cookies, 
            "parameters": parameters, 
            "usermap": usermap, 
            "format": format, 
            "trustedCredentialsAttribute": trustedCredentialsAttribute
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter minimumCodeCacheSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, minimumCodeCacheSize: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteBundlesHcImplCodeCacheHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, minimumCodeCacheSize: minimumCodeCacheSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter minimumCodeCacheSize: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo> 
     */
    open class func comAdobeGraniteBundlesHcImplCodeCacheHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, minimumCodeCacheSize: Int? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags, 
            "minimum.code.cache.size": minimumCodeCacheSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo> 
     */
    open class func comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteBundlesHcImplDavExBundleHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo> 
     */
    open class func comAdobeGraniteBundlesHcImplDavExBundleHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter ignoredBundles: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, ignoredBundles: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, ignoredBundles: ignoredBundles).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter ignoredBundles: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo> 
     */
    open class func comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, ignoredBundles: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags, 
            "ignored.bundles": ignoredBundles
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter maxQueuedJobs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteBundlesHcImplJobsHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, maxQueuedJobs: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteBundlesHcImplJobsHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, maxQueuedJobs: maxQueuedJobs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter maxQueuedJobs: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo> 
     */
    open class func comAdobeGraniteBundlesHcImplJobsHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, maxQueuedJobs: Int? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags, 
            "max.queued.jobs": maxQueuedJobs?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo> 
     */
    open class func comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo> 
     */
    open class func comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo> 
     */
    open class func comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo> 
     */
    open class func comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo> 
     */
    open class func comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replicateCommentResourceTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replicateCommentResourceTypes: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, replicateCommentResourceTypes: replicateCommentResourceTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replicateCommentResourceTypes: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo> 
     */
    open class func comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replicateCommentResourceTypes: [String]? = nil) -> RequestBuilder<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "replicate.comment.resourceTypes": replicateCommentResourceTypes
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter compatgroups: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, compatgroups: [String]? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, compatgroups: compatgroups, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter compatgroups: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo> 
     */
    open class func comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, compatgroups: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "compatgroups": compatgroups, 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter _id: (query)  (optional)
     - parameter compatPath: (query)  (optional)
     - parameter newPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteCompatrouterImplRoutingConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, _id: String? = nil, compatPath: String? = nil, newPath: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteCompatrouterImplRoutingConfigInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteCompatrouterImplRoutingConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, _id: _id, compatPath: compatPath, newPath: newPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter _id: (query)  (optional)
     - parameter compatPath: (query)  (optional)
     - parameter newPath: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteCompatrouterImplRoutingConfigInfo> 
     */
    open class func comAdobeGraniteCompatrouterImplRoutingConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, _id: String? = nil, compatPath: String? = nil, newPath: String? = nil) -> RequestBuilder<ComAdobeGraniteCompatrouterImplRoutingConfigInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "id": _id, 
            "compatPath": compatPath, 
            "newPath": newPath
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteCompatrouterImplRoutingConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter group: (query)  (optional)
     - parameter ids: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteCompatrouterImplSwitchMappingConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, group: String? = nil, ids: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteCompatrouterImplSwitchMappingConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, group: group, ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter group: (query)  (optional)
     - parameter ids: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo> 
     */
    open class func comAdobeGraniteCompatrouterImplSwitchMappingConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, group: String? = nil, ids: [String]? = nil) -> RequestBuilder<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "group": group, 
            "ids": ids
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter fallbackPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, fallbackPaths: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, fallbackPaths: fallbackPaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter fallbackPaths: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo> 
     */
    open class func comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, fallbackPaths: [String]? = nil) -> RequestBuilder<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled, 
            "fallbackPaths": fallbackPaths
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteContexthubSilentMode: (query)  (optional)
     - parameter comAdobeGraniteContexthubShowUi: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteContexthubImplContextHubImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteContexthubSilentMode: Bool? = nil, comAdobeGraniteContexthubShowUi: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteContexthubImplContextHubImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteContexthubImplContextHubImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeGraniteContexthubSilentMode: comAdobeGraniteContexthubSilentMode, comAdobeGraniteContexthubShowUi: comAdobeGraniteContexthubShowUi).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteContexthubSilentMode: (query)  (optional)
     - parameter comAdobeGraniteContexthubShowUi: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteContexthubImplContextHubImplInfo> 
     */
    open class func comAdobeGraniteContexthubImplContextHubImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteContexthubSilentMode: Bool? = nil, comAdobeGraniteContexthubShowUi: Bool? = nil) -> RequestBuilder<ComAdobeGraniteContexthubImplContextHubImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.granite.contexthub.silent_mode": comAdobeGraniteContexthubSilentMode, 
            "com.adobe.granite.contexthub.show_ui": comAdobeGraniteContexthubShowUi
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteContexthubImplContextHubImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alloworigin: (query)  (optional)
     - parameter alloworiginregexp: (query)  (optional)
     - parameter allowedpaths: (query)  (optional)
     - parameter exposedheaders: (query)  (optional)
     - parameter maxage: (query)  (optional)
     - parameter supportedheaders: (query)  (optional)
     - parameter supportedmethods: (query)  (optional)
     - parameter supportscredentials: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteCorsImplCORSPolicyImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alloworigin: [String]? = nil, alloworiginregexp: [String]? = nil, allowedpaths: [String]? = nil, exposedheaders: [String]? = nil, maxage: Int? = nil, supportedheaders: [String]? = nil, supportedmethods: [String]? = nil, supportscredentials: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteCorsImplCORSPolicyImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteCorsImplCORSPolicyImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, alloworigin: alloworigin, alloworiginregexp: alloworiginregexp, allowedpaths: allowedpaths, exposedheaders: exposedheaders, maxage: maxage, supportedheaders: supportedheaders, supportedmethods: supportedmethods, supportscredentials: supportscredentials).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alloworigin: (query)  (optional)
     - parameter alloworiginregexp: (query)  (optional)
     - parameter allowedpaths: (query)  (optional)
     - parameter exposedheaders: (query)  (optional)
     - parameter maxage: (query)  (optional)
     - parameter supportedheaders: (query)  (optional)
     - parameter supportedmethods: (query)  (optional)
     - parameter supportscredentials: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteCorsImplCORSPolicyImplInfo> 
     */
    open class func comAdobeGraniteCorsImplCORSPolicyImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alloworigin: [String]? = nil, alloworiginregexp: [String]? = nil, allowedpaths: [String]? = nil, exposedheaders: [String]? = nil, maxage: Int? = nil, supportedheaders: [String]? = nil, supportedmethods: [String]? = nil, supportscredentials: Bool? = nil) -> RequestBuilder<ComAdobeGraniteCorsImplCORSPolicyImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "alloworigin": alloworigin, 
            "alloworiginregexp": alloworiginregexp, 
            "allowedpaths": allowedpaths, 
            "exposedheaders": exposedheaders, 
            "maxage": maxage?.encodeToJSON(), 
            "supportedheaders": supportedheaders, 
            "supportedmethods": supportedmethods, 
            "supportscredentials": supportscredentials
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteCorsImplCORSPolicyImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filterMethods: (query)  (optional)
     - parameter filterEnableSafeUserAgents: (query)  (optional)
     - parameter filterSafeUserAgents: (query)  (optional)
     - parameter filterExcludedPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteCsrfImplCSRFFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filterMethods: [String]? = nil, filterEnableSafeUserAgents: Bool? = nil, filterSafeUserAgents: [String]? = nil, filterExcludedPaths: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteCsrfImplCSRFFilterInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteCsrfImplCSRFFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, filterMethods: filterMethods, filterEnableSafeUserAgents: filterEnableSafeUserAgents, filterSafeUserAgents: filterSafeUserAgents, filterExcludedPaths: filterExcludedPaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filterMethods: (query)  (optional)
     - parameter filterEnableSafeUserAgents: (query)  (optional)
     - parameter filterSafeUserAgents: (query)  (optional)
     - parameter filterExcludedPaths: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteCsrfImplCSRFFilterInfo> 
     */
    open class func comAdobeGraniteCsrfImplCSRFFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filterMethods: [String]? = nil, filterEnableSafeUserAgents: Bool? = nil, filterSafeUserAgents: [String]? = nil, filterExcludedPaths: [String]? = nil) -> RequestBuilder<ComAdobeGraniteCsrfImplCSRFFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "filter.methods": filterMethods, 
            "filter.enable.safe.user.agents": filterEnableSafeUserAgents, 
            "filter.safe.user.agents": filterSafeUserAgents, 
            "filter.excluded.paths": filterExcludedPaths
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteCsrfImplCSRFFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter csrfTokenExpiresIn: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteCsrfImplCSRFServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, csrfTokenExpiresIn: Int? = nil, slingAuthRequirements: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteCsrfImplCSRFServletInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteCsrfImplCSRFServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, csrfTokenExpiresIn: csrfTokenExpiresIn, slingAuthRequirements: slingAuthRequirements).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter csrfTokenExpiresIn: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteCsrfImplCSRFServletInfo> 
     */
    open class func comAdobeGraniteCsrfImplCSRFServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, csrfTokenExpiresIn: Int? = nil, slingAuthRequirements: String? = nil) -> RequestBuilder<ComAdobeGraniteCsrfImplCSRFServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "csrf.token.expires.in": csrfTokenExpiresIn?.encodeToJSON(), 
            "sling.auth.requirements": slingAuthRequirements
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteCsrfImplCSRFServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter encryptedPassword: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, username: String? = nil, encryptedPassword: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, username: username, encryptedPassword: encryptedPassword).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter encryptedPassword: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo> 
     */
    open class func comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, username: String? = nil, encryptedPassword: String? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "username": username, 
            "encryptedPassword": encryptedPassword
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter agentName: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter observedPath: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter propertyNames: (query)  (optional)
     - parameter distributionDelay: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, agentName: String? = nil, diffPath: String? = nil, observedPath: String? = nil, serviceName: String? = nil, propertyNames: String? = nil, distributionDelay: Int? = nil, serviceUserTarget: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, agentName: agentName, diffPath: diffPath, observedPath: observedPath, serviceName: serviceName, propertyNames: propertyNames, distributionDelay: distributionDelay, serviceUserTarget: serviceUserTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter agentName: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter observedPath: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter propertyNames: (query)  (optional)
     - parameter distributionDelay: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo> 
     */
    open class func comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, agentName: String? = nil, diffPath: String? = nil, observedPath: String? = nil, serviceName: String? = nil, propertyNames: String? = nil, distributionDelay: Int? = nil, serviceUserTarget: String? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled, 
            "agentName": agentName, 
            "diffPath": diffPath, 
            "observedPath": observedPath, 
            "serviceName": serviceName, 
            "propertyNames": propertyNames, 
            "distributionDelay": distributionDelay?.encodeToJSON(), 
            "serviceUser.target": serviceUserTarget
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, diffPath: String? = nil, serviceName: String? = nil, serviceUserTarget: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteDistributionCoreImplDiffDiffEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, diffPath: diffPath, serviceName: serviceName, serviceUserTarget: serviceUserTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo> 
     */
    open class func comAdobeGraniteDistributionCoreImplDiffDiffEventListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, diffPath: String? = nil, serviceName: String? = nil, serviceUserTarget: String? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "diffPath": diffPath, 
            "serviceName": serviceName, 
            "serviceUser.target": serviceUserTarget
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerName: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, importerName: importerName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerName: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo> 
     */
    open class func comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerName: [String]? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "importer.name": importerName
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerName: (query)  (optional)
     - parameter forwardRequests: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerName: String? = nil, forwardRequests: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerName: providerName, forwardRequests: forwardRequests).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerName: (query)  (optional)
     - parameter forwardRequests: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo> 
     */
    open class func comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerName: String? = nil, forwardRequests: Bool? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "providerName": providerName, 
            "forward.requests": forwardRequests
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter forwardRequests: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, forwardRequests: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteDistributionCoreImplReplicationDistributionTransWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, forwardRequests: forwardRequests).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter forwardRequests: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo> 
     */
    open class func comAdobeGraniteDistributionCoreImplReplicationDistributionTransWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, forwardRequests: Bool? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "forward.requests": forwardRequests
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter accessTokenProviderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, serviceName: String? = nil, userId: String? = nil, accessTokenProviderTarget: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, serviceName: serviceName, userId: userId, accessTokenProviderTarget: accessTokenProviderTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter accessTokenProviderTarget: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo> 
     */
    open class func comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, serviceName: String? = nil, userId: String? = nil, accessTokenProviderTarget: String? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "serviceName": serviceName, 
            "userId": userId, 
            "accessTokenProvider.target": accessTokenProviderTarget
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter featureName: (query)  (optional)
     - parameter featureDescription: (query)  (optional)
     - parameter httpHeaderName: (query)  (optional)
     - parameter httpHeaderValuepattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteFragsImplCheckHttpHeaderFlag(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, featureName: String? = nil, featureDescription: String? = nil, httpHeaderName: String? = nil, httpHeaderValuepattern: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteFragsImplCheckHttpHeaderFlagWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, featureName: featureName, featureDescription: featureDescription, httpHeaderName: httpHeaderName, httpHeaderValuepattern: httpHeaderValuepattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter featureName: (query)  (optional)
     - parameter featureDescription: (query)  (optional)
     - parameter httpHeaderName: (query)  (optional)
     - parameter httpHeaderValuepattern: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo> 
     */
    open class func comAdobeGraniteFragsImplCheckHttpHeaderFlagWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, featureName: String? = nil, featureDescription: String? = nil, httpHeaderName: String? = nil, httpHeaderValuepattern: String? = nil) -> RequestBuilder<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "feature.name": featureName, 
            "feature.description": featureDescription, 
            "http.header.name": httpHeaderName, 
            "http.header.valuepattern": httpHeaderValuepattern
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter featureName: (query)  (optional)
     - parameter featureDescription: (query)  (optional)
     - parameter activePercentage: (query)  (optional)
     - parameter cookieName: (query)  (optional)
     - parameter cookieMaxAge: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteFragsImplRandomFeature(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, featureName: String? = nil, featureDescription: String? = nil, activePercentage: String? = nil, cookieName: String? = nil, cookieMaxAge: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteFragsImplRandomFeatureInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteFragsImplRandomFeatureWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, featureName: featureName, featureDescription: featureDescription, activePercentage: activePercentage, cookieName: cookieName, cookieMaxAge: cookieMaxAge).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter featureName: (query)  (optional)
     - parameter featureDescription: (query)  (optional)
     - parameter activePercentage: (query)  (optional)
     - parameter cookieName: (query)  (optional)
     - parameter cookieMaxAge: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteFragsImplRandomFeatureInfo> 
     */
    open class func comAdobeGraniteFragsImplRandomFeatureWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, featureName: String? = nil, featureDescription: String? = nil, activePercentage: String? = nil, cookieName: String? = nil, cookieMaxAge: Int? = nil) -> RequestBuilder<ComAdobeGraniteFragsImplRandomFeatureInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "feature.name": featureName, 
            "feature.description": featureDescription, 
            "active.percentage": activePercentage, 
            "cookie.name": cookieName, 
            "cookie.maxAge": cookieMaxAge?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteFragsImplRandomFeatureInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheFileDocumentRoot: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheFileIncludeHost: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteHttpcacheFileFileCacheStore(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteHttpcacheFileDocumentRoot: String? = nil, comAdobeGraniteHttpcacheFileIncludeHost: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteHttpcacheFileFileCacheStoreInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteHttpcacheFileFileCacheStoreWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeGraniteHttpcacheFileDocumentRoot: comAdobeGraniteHttpcacheFileDocumentRoot, comAdobeGraniteHttpcacheFileIncludeHost: comAdobeGraniteHttpcacheFileIncludeHost).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheFileDocumentRoot: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheFileIncludeHost: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo> 
     */
    open class func comAdobeGraniteHttpcacheFileFileCacheStoreWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteHttpcacheFileDocumentRoot: String? = nil, comAdobeGraniteHttpcacheFileIncludeHost: String? = nil) -> RequestBuilder<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.granite.httpcache.file.documentRoot": comAdobeGraniteHttpcacheFileDocumentRoot, 
            "com.adobe.granite.httpcache.file.includeHost": comAdobeGraniteHttpcacheFileIncludeHost
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheUrlPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteHttpcacheImplOuterCacheFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteHttpcacheUrlPaths: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteHttpcacheImplOuterCacheFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeGraniteHttpcacheUrlPaths: comAdobeGraniteHttpcacheUrlPaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheUrlPaths: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo> 
     */
    open class func comAdobeGraniteHttpcacheImplOuterCacheFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteHttpcacheUrlPaths: [String]? = nil) -> RequestBuilder<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.granite.httpcache.url.paths": comAdobeGraniteHttpcacheUrlPaths
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pseudoPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteI18nImplBundlePseudoTranslations(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pseudoPatterns: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteI18nImplBundlePseudoTranslationsWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pseudoPatterns: pseudoPatterns).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pseudoPatterns: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo> 
     */
    open class func comAdobeGraniteI18nImplBundlePseudoTranslationsWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pseudoPatterns: [String]? = nil) -> RequestBuilder<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "pseudo.patterns": pseudoPatterns
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter securityPreferencesName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteI18nImplPreferencesLocaleResolverService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, securityPreferencesName: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteI18nImplPreferencesLocaleResolverServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, securityPreferencesName: securityPreferencesName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter securityPreferencesName: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo> 
     */
    open class func comAdobeGraniteI18nImplPreferencesLocaleResolverServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, securityPreferencesName: String? = nil) -> RequestBuilder<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "security.preferences.name": securityPreferencesName
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteInfocollectorIncludeThreadDumps: (query)  (optional)
     - parameter graniteInfocollectorIncludeHeapDump: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteInfocollectorInfoCollector(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteInfocollectorIncludeThreadDumps: Bool? = nil, graniteInfocollectorIncludeHeapDump: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteInfocollectorInfoCollectorInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteInfocollectorInfoCollectorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, graniteInfocollectorIncludeThreadDumps: graniteInfocollectorIncludeThreadDumps, graniteInfocollectorIncludeHeapDump: graniteInfocollectorIncludeHeapDump).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.infocollector.InfoCollector
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteInfocollectorIncludeThreadDumps: (query)  (optional)
     - parameter graniteInfocollectorIncludeHeapDump: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteInfocollectorInfoCollectorInfo> 
     */
    open class func comAdobeGraniteInfocollectorInfoCollectorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteInfocollectorIncludeThreadDumps: Bool? = nil, graniteInfocollectorIncludeHeapDump: Bool? = nil) -> RequestBuilder<ComAdobeGraniteInfocollectorInfoCollectorInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "granite.infocollector.includeThreadDumps": graniteInfocollectorIncludeThreadDumps, 
            "granite.infocollector.includeHeapDump": graniteInfocollectorIncludeHeapDump
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteInfocollectorInfoCollectorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteJettySslPort: (query)  (optional)
     - parameter comAdobeGraniteJettySslKeystoreUser: (query)  (optional)
     - parameter comAdobeGraniteJettySslKeystorePassword: (query)  (optional)
     - parameter comAdobeGraniteJettySslCiphersuitesExcluded: (query)  (optional)
     - parameter comAdobeGraniteJettySslCiphersuitesIncluded: (query)  (optional)
     - parameter comAdobeGraniteJettySslClientCertificate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteJettySslPort: Int? = nil, comAdobeGraniteJettySslKeystoreUser: String? = nil, comAdobeGraniteJettySslKeystorePassword: String? = nil, comAdobeGraniteJettySslCiphersuitesExcluded: [String]? = nil, comAdobeGraniteJettySslCiphersuitesIncluded: [String]? = nil, comAdobeGraniteJettySslClientCertificate: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeGraniteJettySslPort: comAdobeGraniteJettySslPort, comAdobeGraniteJettySslKeystoreUser: comAdobeGraniteJettySslKeystoreUser, comAdobeGraniteJettySslKeystorePassword: comAdobeGraniteJettySslKeystorePassword, comAdobeGraniteJettySslCiphersuitesExcluded: comAdobeGraniteJettySslCiphersuitesExcluded, comAdobeGraniteJettySslCiphersuitesIncluded: comAdobeGraniteJettySslCiphersuitesIncluded, comAdobeGraniteJettySslClientCertificate: comAdobeGraniteJettySslClientCertificate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteJettySslPort: (query)  (optional)
     - parameter comAdobeGraniteJettySslKeystoreUser: (query)  (optional)
     - parameter comAdobeGraniteJettySslKeystorePassword: (query)  (optional)
     - parameter comAdobeGraniteJettySslCiphersuitesExcluded: (query)  (optional)
     - parameter comAdobeGraniteJettySslCiphersuitesIncluded: (query)  (optional)
     - parameter comAdobeGraniteJettySslClientCertificate: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo> 
     */
    open class func comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteJettySslPort: Int? = nil, comAdobeGraniteJettySslKeystoreUser: String? = nil, comAdobeGraniteJettySslKeystorePassword: String? = nil, comAdobeGraniteJettySslCiphersuitesExcluded: [String]? = nil, comAdobeGraniteJettySslCiphersuitesIncluded: [String]? = nil, comAdobeGraniteJettySslClientCertificate: String? = nil) -> RequestBuilder<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.adobe.granite.jetty.ssl.port": comAdobeGraniteJettySslPort?.encodeToJSON(), 
            "com.adobe.granite.jetty.ssl.keystore.user": comAdobeGraniteJettySslKeystoreUser, 
            "com.adobe.granite.jetty.ssl.keystore.password": comAdobeGraniteJettySslKeystorePassword, 
            "com.adobe.granite.jetty.ssl.ciphersuites.excluded": comAdobeGraniteJettySslCiphersuitesExcluded, 
            "com.adobe.granite.jetty.ssl.ciphersuites.included": comAdobeGraniteJettySslCiphersuitesIncluded, 
            "com.adobe.granite.jetty.ssl.client.certificate": comAdobeGraniteJettySslClientCertificate
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter checkInternval: (query)  (optional)
     - parameter excludeIds: (query)  (optional)
     - parameter encryptPing: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteLicenseImplLicenseCheckFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, checkInternval: Int? = nil, excludeIds: [String]? = nil, encryptPing: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteLicenseImplLicenseCheckFilterInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteLicenseImplLicenseCheckFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, checkInternval: checkInternval, excludeIds: excludeIds, encryptPing: encryptPing).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter checkInternval: (query)  (optional)
     - parameter excludeIds: (query)  (optional)
     - parameter encryptPing: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo> 
     */
    open class func comAdobeGraniteLicenseImplLicenseCheckFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, checkInternval: Int? = nil, excludeIds: [String]? = nil, encryptPing: Bool? = nil) -> RequestBuilder<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "checkInternval": checkInternval?.encodeToJSON(), 
            "excludeIds": excludeIds, 
            "encryptPing": encryptPing
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter messagesQueueSize: (query)  (optional)
     - parameter loggerConfig: (query)  (optional)
     - parameter messagesSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteLoggingImplLogAnalyserImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, messagesQueueSize: Int? = nil, loggerConfig: [String]? = nil, messagesSize: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteLoggingImplLogAnalyserImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteLoggingImplLogAnalyserImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, messagesQueueSize: messagesQueueSize, loggerConfig: loggerConfig, messagesSize: messagesSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter messagesQueueSize: (query)  (optional)
     - parameter loggerConfig: (query)  (optional)
     - parameter messagesSize: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteLoggingImplLogAnalyserImplInfo> 
     */
    open class func comAdobeGraniteLoggingImplLogAnalyserImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, messagesQueueSize: Int? = nil, loggerConfig: [String]? = nil, messagesSize: Int? = nil) -> RequestBuilder<ComAdobeGraniteLoggingImplLogAnalyserImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "messages.queue.size": messagesQueueSize?.encodeToJSON(), 
            "logger.config": loggerConfig, 
            "messages.size": messagesSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteLoggingImplLogAnalyserImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteLoggingImplLogErrorHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteLoggingImplLogErrorHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo> 
     */
    open class func comAdobeGraniteLoggingImplLogErrorHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteMaintenanceMandatory: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteMaintenanceMandatory: Bool? = nil, jobTopics: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, graniteMaintenanceMandatory: graniteMaintenanceMandatory, jobTopics: jobTopics).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteMaintenanceMandatory: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo> 
     */
    open class func comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteMaintenanceMandatory: Bool? = nil, jobTopics: String? = nil) -> RequestBuilder<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "granite.maintenance.mandatory": graniteMaintenanceMandatory, 
            "job.topics": jobTopics
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jobTopics: jobTopics).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo> 
     */
    open class func comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil) -> RequestBuilder<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "job.topics": jobTopics
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fullGcDays: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fullGcDays: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fullGcDays: fullGcDays).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fullGcDays: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo> 
     */
    open class func comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fullGcDays: [String]? = nil) -> RequestBuilder<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "full.gc.days": fullGcDays
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scriptFilename: (query)  (optional)
     - parameter scriptDisplay: (query)  (optional)
     - parameter scriptPath: (query)  (optional)
     - parameter scriptPlatform: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter jmxdomain: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteMonitoringImplScriptConfigImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scriptFilename: String? = nil, scriptDisplay: String? = nil, scriptPath: String? = nil, scriptPlatform: [String]? = nil, interval: Int? = nil, jmxdomain: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteMonitoringImplScriptConfigImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteMonitoringImplScriptConfigImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, scriptFilename: scriptFilename, scriptDisplay: scriptDisplay, scriptPath: scriptPath, scriptPlatform: scriptPlatform, interval: interval, jmxdomain: jmxdomain).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scriptFilename: (query)  (optional)
     - parameter scriptDisplay: (query)  (optional)
     - parameter scriptPath: (query)  (optional)
     - parameter scriptPlatform: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter jmxdomain: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteMonitoringImplScriptConfigImplInfo> 
     */
    open class func comAdobeGraniteMonitoringImplScriptConfigImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scriptFilename: String? = nil, scriptDisplay: String? = nil, scriptPath: String? = nil, scriptPlatform: [String]? = nil, interval: Int? = nil, jmxdomain: String? = nil) -> RequestBuilder<ComAdobeGraniteMonitoringImplScriptConfigImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "script.filename": scriptFilename, 
            "script.display": scriptDisplay, 
            "script.path": scriptPath, 
            "script.platform": scriptPlatform, 
            "interval": interval?.encodeToJSON(), 
            "jmxdomain": jmxdomain
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteMonitoringImplScriptConfigImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter oauthOfflineValidation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, jaasRanking: Int? = nil, oauthOfflineValidation: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, jaasControlFlag: jaasControlFlag, jaasRealmName: jaasRealmName, jaasRanking: jaasRanking, oauthOfflineValidation: oauthOfflineValidation).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter oauthOfflineValidation: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo> 
     */
    open class func comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, jaasRanking: Int? = nil, oauthOfflineValidation: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path, 
            "jaas.controlFlag": jaasControlFlag, 
            "jaas.realmName": jaasRealmName, 
            "jaas.ranking": jaasRanking?.encodeToJSON(), 
            "oauth.offline.validation": oauthOfflineValidation
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOauthServerImplAccessTokenCleanupTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo> 
     */
    open class func comAdobeGraniteOauthServerImplAccessTokenCleanupTaskWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.expression": schedulerExpression
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthClientRevocationActive: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthClientRevocationActive: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthClientRevocationActive: oauthClientRevocationActive).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthClientRevocationActive: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo> 
     */
    open class func comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthClientRevocationActive: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.client.revocation.active": oauthClientRevocationActive
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter oauthRevocationActive: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, oauthRevocationActive: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletPaths: slingServletPaths, oauthRevocationActive: oauthRevocationActive).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter oauthRevocationActive: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo> 
     */
    open class func comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, oauthRevocationActive: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.paths": slingServletPaths, 
            "oauth.revocation.active": oauthRevocationActive
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthIssuer: (query)  (optional)
     - parameter oauthAccessTokenExpiresIn: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthIssuer: String? = nil, oauthAccessTokenExpiresIn: String? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthIssuer: oauthIssuer, oauthAccessTokenExpiresIn: oauthAccessTokenExpiresIn, osgiHttpWhiteboardServletPattern: osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect: osgiHttpWhiteboardContextSelect).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthIssuer: (query)  (optional)
     - parameter oauthAccessTokenExpiresIn: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo> 
     */
    open class func comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthIssuer: String? = nil, oauthAccessTokenExpiresIn: String? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.issuer": oauthIssuer, 
            "oauth.access.token.expires.in": oauthAccessTokenExpiresIn, 
            "osgi.http.whiteboard.servlet.pattern": osgiHttpWhiteboardServletPattern, 
            "osgi.http.whiteboard.context.select": osgiHttpWhiteboardContextSelect
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthTokenRevocationActive: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthTokenRevocationActive: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthTokenRevocationActive: oauthTokenRevocationActive).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthTokenRevocationActive: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo> 
     */
    open class func comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthTokenRevocationActive: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "oauth.token.revocation.active": oauthTokenRevocationActive
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingTransporter: (query)  (optional)
     - parameter offloadingCleanupPayload: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOffloadingImplOffloadingConfigurator(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingTransporter: String? = nil, offloadingCleanupPayload: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOffloadingImplOffloadingConfiguratorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, offloadingTransporter: offloadingTransporter, offloadingCleanupPayload: offloadingCleanupPayload).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingTransporter: (query)  (optional)
     - parameter offloadingCleanupPayload: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo> 
     */
    open class func comAdobeGraniteOffloadingImplOffloadingConfiguratorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingTransporter: String? = nil, offloadingCleanupPayload: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "offloading.transporter": offloadingTransporter, 
            "offloading.cleanup.payload": offloadingCleanupPayload
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingJobclonerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOffloadingImplOffloadingJobCloner(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingJobclonerEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOffloadingImplOffloadingJobClonerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, offloadingJobclonerEnabled: offloadingJobclonerEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingJobclonerEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo> 
     */
    open class func comAdobeGraniteOffloadingImplOffloadingJobClonerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingJobclonerEnabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "offloading.jobcloner.enabled": offloadingJobclonerEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingOffloaderEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOffloadingImplOffloadingJobOffloader(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingOffloaderEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOffloadingImplOffloadingJobOffloaderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, offloadingOffloaderEnabled: offloadingOffloaderEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingOffloaderEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo> 
     */
    open class func comAdobeGraniteOffloadingImplOffloadingJobOffloaderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingOffloaderEnabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "offloading.offloader.enabled": offloadingOffloaderEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingAgentmanagerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingAgentmanagerEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, offloadingAgentmanagerEnabled: offloadingAgentmanagerEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingAgentmanagerEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo> 
     */
    open class func comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingAgentmanagerEnabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "offloading.agentmanager.enabled": offloadingAgentmanagerEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultTransportAgentToWorkerPrefix: (query)  (optional)
     - parameter defaultTransportAgentToMasterPrefix: (query)  (optional)
     - parameter defaultTransportInputPackage: (query)  (optional)
     - parameter defaultTransportOutputPackage: (query)  (optional)
     - parameter defaultTransportReplicationSynchronous: (query)  (optional)
     - parameter defaultTransportContentpackage: (query)  (optional)
     - parameter offloadingTransporterDefaultEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultTransportAgentToWorkerPrefix: String? = nil, defaultTransportAgentToMasterPrefix: String? = nil, defaultTransportInputPackage: String? = nil, defaultTransportOutputPackage: String? = nil, defaultTransportReplicationSynchronous: Bool? = nil, defaultTransportContentpackage: Bool? = nil, offloadingTransporterDefaultEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultTransportAgentToWorkerPrefix: defaultTransportAgentToWorkerPrefix, defaultTransportAgentToMasterPrefix: defaultTransportAgentToMasterPrefix, defaultTransportInputPackage: defaultTransportInputPackage, defaultTransportOutputPackage: defaultTransportOutputPackage, defaultTransportReplicationSynchronous: defaultTransportReplicationSynchronous, defaultTransportContentpackage: defaultTransportContentpackage, offloadingTransporterDefaultEnabled: offloadingTransporterDefaultEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultTransportAgentToWorkerPrefix: (query)  (optional)
     - parameter defaultTransportAgentToMasterPrefix: (query)  (optional)
     - parameter defaultTransportInputPackage: (query)  (optional)
     - parameter defaultTransportOutputPackage: (query)  (optional)
     - parameter defaultTransportReplicationSynchronous: (query)  (optional)
     - parameter defaultTransportContentpackage: (query)  (optional)
     - parameter offloadingTransporterDefaultEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo> 
     */
    open class func comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultTransportAgentToWorkerPrefix: String? = nil, defaultTransportAgentToMasterPrefix: String? = nil, defaultTransportInputPackage: String? = nil, defaultTransportOutputPackage: String? = nil, defaultTransportReplicationSynchronous: Bool? = nil, defaultTransportContentpackage: Bool? = nil, offloadingTransporterDefaultEnabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "default.transport.agent-to-worker.prefix": defaultTransportAgentToWorkerPrefix, 
            "default.transport.agent-to-master.prefix": defaultTransportAgentToMasterPrefix, 
            "default.transport.input.package": defaultTransportInputPackage, 
            "default.transport.output.package": defaultTransportOutputPackage, 
            "default.transport.replication.synchronous": defaultTransportReplicationSynchronous, 
            "default.transport.contentpackage": defaultTransportContentpackage, 
            "offloading.transporter.default.enabled": offloadingTransporterDefaultEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter omnisearchSuggestionRequiretextMin: (query)  (optional)
     - parameter omnisearchSuggestionSpellcheckRequire: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, omnisearchSuggestionRequiretextMin: Int? = nil, omnisearchSuggestionSpellcheckRequire: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, omnisearchSuggestionRequiretextMin: omnisearchSuggestionRequiretextMin, omnisearchSuggestionSpellcheckRequire: omnisearchSuggestionSpellcheckRequire).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter omnisearchSuggestionRequiretextMin: (query)  (optional)
     - parameter omnisearchSuggestionSpellcheckRequire: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo> 
     */
    open class func comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, omnisearchSuggestionRequiretextMin: Int? = nil, omnisearchSuggestionSpellcheckRequire: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "omnisearch.suggestion.requiretext.min": omnisearchSuggestionRequiretextMin?.encodeToJSON(), 
            "omnisearch.suggestion.spellcheck.require": omnisearchSuggestionSpellcheckRequire
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter optoutCookies: (query)  (optional)
     - parameter optoutHeaders: (query)  (optional)
     - parameter optoutWhitelistCookies: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteOptoutImplOptOutServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, optoutCookies: [String]? = nil, optoutHeaders: [String]? = nil, optoutWhitelistCookies: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteOptoutImplOptOutServiceImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteOptoutImplOptOutServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, optoutCookies: optoutCookies, optoutHeaders: optoutHeaders, optoutWhitelistCookies: optoutWhitelistCookies).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter optoutCookies: (query)  (optional)
     - parameter optoutHeaders: (query)  (optional)
     - parameter optoutWhitelistCookies: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteOptoutImplOptOutServiceImplInfo> 
     */
    open class func comAdobeGraniteOptoutImplOptOutServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, optoutCookies: [String]? = nil, optoutHeaders: [String]? = nil, optoutWhitelistCookies: [String]? = nil) -> RequestBuilder<ComAdobeGraniteOptoutImplOptOutServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "optout.cookies": optoutCookies, 
            "optout.headers": optoutHeaders, 
            "optout.whitelist.cookies": optoutWhitelistCookies
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteOptoutImplOptOutServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter indexingCriticalThreshold: (query)  (optional)
     - parameter indexingWarnThreshold: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, indexingCriticalThreshold: Int? = nil, indexingWarnThreshold: Int? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, indexingCriticalThreshold: indexingCriticalThreshold, indexingWarnThreshold: indexingWarnThreshold, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter indexingCriticalThreshold: (query)  (optional)
     - parameter indexingWarnThreshold: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo> 
     */
    open class func comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, indexingCriticalThreshold: Int? = nil, indexingWarnThreshold: Int? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "indexing.critical.threshold": indexingCriticalThreshold?.encodeToJSON(), 
            "indexing.warn.threshold": indexingWarnThreshold?.encodeToJSON(), 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeIndexCriticalThreshold: (query)  (optional)
     - parameter largeIndexWarnThreshold: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeIndexCriticalThreshold: Int? = nil, largeIndexWarnThreshold: Int? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteQueriesImplHcLargeIndexHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, largeIndexCriticalThreshold: largeIndexCriticalThreshold, largeIndexWarnThreshold: largeIndexWarnThreshold, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeIndexCriticalThreshold: (query)  (optional)
     - parameter largeIndexWarnThreshold: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo> 
     */
    open class func comAdobeGraniteQueriesImplHcLargeIndexHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeIndexCriticalThreshold: Int? = nil, largeIndexWarnThreshold: Int? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "large.index.critical.threshold": largeIndexCriticalThreshold?.encodeToJSON(), 
            "large.index.warn.threshold": largeIndexWarnThreshold?.encodeToJSON(), 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo> 
     */
    open class func comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getPeriod: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getPeriod: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, getPeriod: getPeriod).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getPeriod: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo> 
     */
    open class func comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getPeriod: Int? = nil) -> RequestBuilder<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "getPeriod": getPeriod?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo> 
     */
    open class func comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numberOfRetriesAllowed: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numberOfRetriesAllowed: Int? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, numberOfRetriesAllowed: numberOfRetriesAllowed, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numberOfRetriesAllowed: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo> 
     */
    open class func comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numberOfRetriesAllowed: Int? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "number.of.retries.allowed": numberOfRetriesAllowed?.encodeToJSON(), 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo> 
     */
    open class func comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo> 
     */
    open class func comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter excludeSearchPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, excludeSearchPath: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, excludeSearchPath: excludeSearchPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter excludeSearchPath: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo> 
     */
    open class func comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, excludeSearchPath: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags, 
            "exclude.search.path": excludeSearchPath
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo> 
     */
    open class func comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo> 
     */
    open class func comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter accountLogins: (query)  (optional)
     - parameter consoleLogins: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, accountLogins: [String]? = nil, consoleLogins: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, accountLogins: accountLogins, consoleLogins: consoleLogins).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter accountLogins: (query)  (optional)
     - parameter consoleLogins: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo> 
     */
    open class func comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, accountLogins: [String]? = nil, consoleLogins: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags, 
            "account.logins": accountLogins, 
            "console.logins": consoleLogins
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter diskSpaceWarnThreshold: (query)  (optional)
     - parameter diskSpaceErrorThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, diskSpaceWarnThreshold: Int? = nil, diskSpaceErrorThreshold: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, diskSpaceWarnThreshold: diskSpaceWarnThreshold, diskSpaceErrorThreshold: diskSpaceErrorThreshold).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter diskSpaceWarnThreshold: (query)  (optional)
     - parameter diskSpaceErrorThreshold: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo> 
     */
    open class func comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, diskSpaceWarnThreshold: Int? = nil, diskSpaceErrorThreshold: Int? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags, 
            "disk.space.warn.threshold": diskSpaceWarnThreshold?.encodeToJSON(), 
            "disk.space.error.threshold": diskSpaceErrorThreshold?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo> 
     */
    open class func comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter intervalSeconds: (query)  (optional)
     - parameter commitsPerIntervalThreshold: (query)  (optional)
     - parameter maxLocationLength: (query)  (optional)
     - parameter maxDetailsShown: (query)  (optional)
     - parameter minDetailsPercentage: (query)  (optional)
     - parameter threadMatchers: (query)  (optional)
     - parameter maxGreedyDepth: (query)  (optional)
     - parameter greedyStackMatchers: (query)  (optional)
     - parameter stackFilters: (query)  (optional)
     - parameter stackMatchers: (query)  (optional)
     - parameter stackCategorizers: (query)  (optional)
     - parameter stackShorteners: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRepositoryImplCommitStatsConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, intervalSeconds: Int? = nil, commitsPerIntervalThreshold: Int? = nil, maxLocationLength: Int? = nil, maxDetailsShown: Int? = nil, minDetailsPercentage: Int? = nil, threadMatchers: [String]? = nil, maxGreedyDepth: Int? = nil, greedyStackMatchers: String? = nil, stackFilters: [String]? = nil, stackMatchers: [String]? = nil, stackCategorizers: [String]? = nil, stackShorteners: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteRepositoryImplCommitStatsConfigInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRepositoryImplCommitStatsConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, intervalSeconds: intervalSeconds, commitsPerIntervalThreshold: commitsPerIntervalThreshold, maxLocationLength: maxLocationLength, maxDetailsShown: maxDetailsShown, minDetailsPercentage: minDetailsPercentage, threadMatchers: threadMatchers, maxGreedyDepth: maxGreedyDepth, greedyStackMatchers: greedyStackMatchers, stackFilters: stackFilters, stackMatchers: stackMatchers, stackCategorizers: stackCategorizers, stackShorteners: stackShorteners).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter intervalSeconds: (query)  (optional)
     - parameter commitsPerIntervalThreshold: (query)  (optional)
     - parameter maxLocationLength: (query)  (optional)
     - parameter maxDetailsShown: (query)  (optional)
     - parameter minDetailsPercentage: (query)  (optional)
     - parameter threadMatchers: (query)  (optional)
     - parameter maxGreedyDepth: (query)  (optional)
     - parameter greedyStackMatchers: (query)  (optional)
     - parameter stackFilters: (query)  (optional)
     - parameter stackMatchers: (query)  (optional)
     - parameter stackCategorizers: (query)  (optional)
     - parameter stackShorteners: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo> 
     */
    open class func comAdobeGraniteRepositoryImplCommitStatsConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, intervalSeconds: Int? = nil, commitsPerIntervalThreshold: Int? = nil, maxLocationLength: Int? = nil, maxDetailsShown: Int? = nil, minDetailsPercentage: Int? = nil, threadMatchers: [String]? = nil, maxGreedyDepth: Int? = nil, greedyStackMatchers: String? = nil, stackFilters: [String]? = nil, stackMatchers: [String]? = nil, stackCategorizers: [String]? = nil, stackShorteners: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled, 
            "intervalSeconds": intervalSeconds?.encodeToJSON(), 
            "commitsPerIntervalThreshold": commitsPerIntervalThreshold?.encodeToJSON(), 
            "maxLocationLength": maxLocationLength?.encodeToJSON(), 
            "maxDetailsShown": maxDetailsShown?.encodeToJSON(), 
            "minDetailsPercentage": minDetailsPercentage?.encodeToJSON(), 
            "threadMatchers": threadMatchers, 
            "maxGreedyDepth": maxGreedyDepth?.encodeToJSON(), 
            "greedyStackMatchers": greedyStackMatchers, 
            "stackFilters": stackFilters, 
            "stackMatchers": stackMatchers, 
            "stackCategorizers": stackCategorizers, 
            "stackShorteners": stackShorteners
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter serviceusersSimpleSubjectPopulation: (query)  (optional)
     - parameter serviceusersList: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRepositoryServiceUserConfiguration(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, serviceusersSimpleSubjectPopulation: Bool? = nil, serviceusersList: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteRepositoryServiceUserConfigurationInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRepositoryServiceUserConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, serviceusersSimpleSubjectPopulation: serviceusersSimpleSubjectPopulation, serviceusersList: serviceusersList).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter serviceusersSimpleSubjectPopulation: (query)  (optional)
     - parameter serviceusersList: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRepositoryServiceUserConfigurationInfo> 
     */
    open class func comAdobeGraniteRepositoryServiceUserConfigurationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, serviceusersSimpleSubjectPopulation: Bool? = nil, serviceusersList: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryServiceUserConfigurationInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "serviceusers.simpleSubjectPopulation": serviceusersSimpleSubjectPopulation, 
            "serviceusers.list": serviceusersList
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryServiceUserConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo> 
     */
    open class func comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter types: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteResourcestatusImplCompositeStatusType(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, types: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteResourcestatusImplCompositeStatusTypeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, types: types).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter types: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo> 
     */
    open class func comAdobeGraniteResourcestatusImplCompositeStatusTypeWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, types: [String]? = nil) -> RequestBuilder<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "types": types
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoot: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoot: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteResourcestatusImplStatusResourceProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerRoot: providerRoot).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoot: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo> 
     */
    open class func comAdobeGraniteResourcestatusImplStatusResourceProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoot: String? = nil) -> RequestBuilder<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "provider.root": providerRoot
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeAllowEmpty: (query)  (optional)
     - parameter mimeAllowed: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeAllowEmpty: Bool? = nil, mimeAllowed: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRestAssetsImplAssetContentDispositionFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mimeAllowEmpty: mimeAllowEmpty, mimeAllowed: mimeAllowed).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeAllowEmpty: (query)  (optional)
     - parameter mimeAllowed: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo> 
     */
    open class func comAdobeGraniteRestAssetsImplAssetContentDispositionFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeAllowEmpty: Bool? = nil, mimeAllowed: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "mime.allowEmpty": mimeAllowEmpty, 
            "mime.allowed": mimeAllowed
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerRoots: providerRoots).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo> 
     */
    open class func comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil) -> RequestBuilder<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "provider.roots": providerRoots
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultLimit: (query)  (optional)
     - parameter useAbsoluteUri: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteRestImplServletDefaultGETServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultLimit: Int? = nil, useAbsoluteUri: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteRestImplServletDefaultGETServletInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteRestImplServletDefaultGETServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultLimit: defaultLimit, useAbsoluteUri: useAbsoluteUri).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultLimit: (query)  (optional)
     - parameter useAbsoluteUri: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteRestImplServletDefaultGETServletInfo> 
     */
    open class func comAdobeGraniteRestImplServletDefaultGETServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultLimit: Int? = nil, useAbsoluteUri: Bool? = nil) -> RequestBuilder<ComAdobeGraniteRestImplServletDefaultGETServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "default.limit": defaultLimit?.encodeToJSON(), 
            "use.absolute.uri": useAbsoluteUri
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteRestImplServletDefaultGETServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo> 
     */
    open class func comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.tags": hcTags
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)
     - parameter graniteUserpropertiesNodetypes: (query)  (optional)
     - parameter graniteUserpropertiesResourcetypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteSecurityUserUserPropertiesService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil, graniteUserpropertiesNodetypes: [String]? = nil, graniteUserpropertiesResourcetypes: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteSecurityUserUserPropertiesServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteSecurityUserUserPropertiesServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, adapterCondition: adapterCondition, graniteUserpropertiesNodetypes: graniteUserpropertiesNodetypes, graniteUserpropertiesResourcetypes: graniteUserpropertiesResourcetypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)
     - parameter graniteUserpropertiesNodetypes: (query)  (optional)
     - parameter graniteUserpropertiesResourcetypes: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo> 
     */
    open class func comAdobeGraniteSecurityUserUserPropertiesServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil, graniteUserpropertiesNodetypes: [String]? = nil, graniteUserpropertiesResourcetypes: [String]? = nil) -> RequestBuilder<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "adapter.condition": adapterCondition, 
            "granite.userproperties.nodetypes": graniteUserpropertiesNodetypes, 
            "granite.userproperties.resourcetypes": graniteUserpropertiesResourcetypes
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter group2memberRelationshipOutgoing: (query)  (optional)
     - parameter group2memberExcludedOutgoing: (query)  (optional)
     - parameter group2memberRelationshipIncoming: (query)  (optional)
     - parameter group2memberExcludedIncoming: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, group2memberRelationshipOutgoing: String? = nil, group2memberExcludedOutgoing: [String]? = nil, group2memberRelationshipIncoming: String? = nil, group2memberExcludedIncoming: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteSocialgraphImplSocialGraphFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, group2memberRelationshipOutgoing: group2memberRelationshipOutgoing, group2memberExcludedOutgoing: group2memberExcludedOutgoing, group2memberRelationshipIncoming: group2memberRelationshipIncoming, group2memberExcludedIncoming: group2memberExcludedIncoming).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter group2memberRelationshipOutgoing: (query)  (optional)
     - parameter group2memberExcludedOutgoing: (query)  (optional)
     - parameter group2memberRelationshipIncoming: (query)  (optional)
     - parameter group2memberExcludedIncoming: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo> 
     */
    open class func comAdobeGraniteSocialgraphImplSocialGraphFactoryImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, group2memberRelationshipOutgoing: String? = nil, group2memberExcludedOutgoing: [String]? = nil, group2memberRelationshipIncoming: String? = nil, group2memberExcludedIncoming: [String]? = nil) -> RequestBuilder<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "group2member.relationship.outgoing": group2memberRelationshipOutgoing, 
            "group2member.excluded.outgoing": group2memberExcludedOutgoing, 
            "group2member.relationship.incoming": group2memberRelationshipIncoming, 
            "group2member.excluded.incoming": group2memberExcludedIncoming
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, jmxObjectname: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, jmxObjectname: jmxObjectname).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo> 
     */
    open class func comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, jmxObjectname: String? = nil) -> RequestBuilder<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.expression": schedulerExpression, 
            "jmx.objectname": jmxObjectname
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, adapterCondition: adapterCondition).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo> 
     */
    open class func comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil) -> RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "adapter.condition": adapterCondition
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter archivingEnabled: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter archiveSinceDaysCompleted: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, archivingEnabled: Bool? = nil, schedulerExpression: String? = nil, archiveSinceDaysCompleted: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, archivingEnabled: archivingEnabled, schedulerExpression: schedulerExpression, archiveSinceDaysCompleted: archiveSinceDaysCompleted).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter archivingEnabled: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter archiveSinceDaysCompleted: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo> 
     */
    open class func comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, archivingEnabled: Bool? = nil, schedulerExpression: String? = nil, archiveSinceDaysCompleted: Int? = nil) -> RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "archiving.enabled": archivingEnabled, 
            "scheduler.expression": schedulerExpression, 
            "archive.since.days.completed": archiveSinceDaysCompleted?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter purgeCompleted: (query)  (optional)
     - parameter completedAge: (query)  (optional)
     - parameter purgeActive: (query)  (optional)
     - parameter activeAge: (query)  (optional)
     - parameter saveThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, purgeCompleted: Bool? = nil, completedAge: Int? = nil, purgeActive: Bool? = nil, activeAge: Int? = nil, saveThreshold: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, purgeCompleted: purgeCompleted, completedAge: completedAge, purgeActive: purgeActive, activeAge: activeAge, saveThreshold: saveThreshold).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter purgeCompleted: (query)  (optional)
     - parameter completedAge: (query)  (optional)
     - parameter purgeActive: (query)  (optional)
     - parameter activeAge: (query)  (optional)
     - parameter saveThreshold: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo> 
     */
    open class func comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, purgeCompleted: Bool? = nil, completedAge: Int? = nil, purgeActive: Bool? = nil, activeAge: Int? = nil, saveThreshold: Int? = nil) -> RequestBuilder<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "purgeCompleted": purgeCompleted, 
            "completedAge": completedAge?.encodeToJSON(), 
            "purgeActive": purgeActive, 
            "activeAge": activeAge?.encodeToJSON(), 
            "saveThreshold": saveThreshold?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)
     - parameter taskmanagerAdmingroups: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil, taskmanagerAdmingroups: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, adapterCondition: adapterCondition, taskmanagerAdmingroups: taskmanagerAdmingroups).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)
     - parameter taskmanagerAdmingroups: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo> 
     */
    open class func comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil, taskmanagerAdmingroups: [String]? = nil) -> RequestBuilder<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "adapter.condition": adapterCondition, 
            "taskmanager.admingroups": taskmanagerAdmingroups
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerRunOn: (query)  (optional)
     - parameter graniteThreaddumpEnabled: (query)  (optional)
     - parameter graniteThreaddumpDumpsPerFile: (query)  (optional)
     - parameter graniteThreaddumpEnableGzipCompression: (query)  (optional)
     - parameter graniteThreaddumpEnableDirectoriesCompression: (query)  (optional)
     - parameter graniteThreaddumpEnableJStack: (query)  (optional)
     - parameter graniteThreaddumpMaxBackupDays: (query)  (optional)
     - parameter graniteThreaddumpBackupCleanTrigger: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteThreaddumpThreadDumpCollector(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int? = nil, schedulerRunOn: String? = nil, graniteThreaddumpEnabled: Bool? = nil, graniteThreaddumpDumpsPerFile: Int? = nil, graniteThreaddumpEnableGzipCompression: Bool? = nil, graniteThreaddumpEnableDirectoriesCompression: Bool? = nil, graniteThreaddumpEnableJStack: Bool? = nil, graniteThreaddumpMaxBackupDays: Int? = nil, graniteThreaddumpBackupCleanTrigger: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteThreaddumpThreadDumpCollectorInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteThreaddumpThreadDumpCollectorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerPeriod: schedulerPeriod, schedulerRunOn: schedulerRunOn, graniteThreaddumpEnabled: graniteThreaddumpEnabled, graniteThreaddumpDumpsPerFile: graniteThreaddumpDumpsPerFile, graniteThreaddumpEnableGzipCompression: graniteThreaddumpEnableGzipCompression, graniteThreaddumpEnableDirectoriesCompression: graniteThreaddumpEnableDirectoriesCompression, graniteThreaddumpEnableJStack: graniteThreaddumpEnableJStack, graniteThreaddumpMaxBackupDays: graniteThreaddumpMaxBackupDays, graniteThreaddumpBackupCleanTrigger: graniteThreaddumpBackupCleanTrigger).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerRunOn: (query)  (optional)
     - parameter graniteThreaddumpEnabled: (query)  (optional)
     - parameter graniteThreaddumpDumpsPerFile: (query)  (optional)
     - parameter graniteThreaddumpEnableGzipCompression: (query)  (optional)
     - parameter graniteThreaddumpEnableDirectoriesCompression: (query)  (optional)
     - parameter graniteThreaddumpEnableJStack: (query)  (optional)
     - parameter graniteThreaddumpMaxBackupDays: (query)  (optional)
     - parameter graniteThreaddumpBackupCleanTrigger: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo> 
     */
    open class func comAdobeGraniteThreaddumpThreadDumpCollectorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int? = nil, schedulerRunOn: String? = nil, graniteThreaddumpEnabled: Bool? = nil, graniteThreaddumpDumpsPerFile: Int? = nil, graniteThreaddumpEnableGzipCompression: Bool? = nil, graniteThreaddumpEnableDirectoriesCompression: Bool? = nil, graniteThreaddumpEnableJStack: Bool? = nil, graniteThreaddumpMaxBackupDays: Int? = nil, graniteThreaddumpBackupCleanTrigger: String? = nil) -> RequestBuilder<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.period": schedulerPeriod?.encodeToJSON(), 
            "scheduler.runOn": schedulerRunOn, 
            "granite.threaddump.enabled": graniteThreaddumpEnabled, 
            "granite.threaddump.dumpsPerFile": graniteThreaddumpDumpsPerFile?.encodeToJSON(), 
            "granite.threaddump.enableGzipCompression": graniteThreaddumpEnableGzipCompression, 
            "granite.threaddump.enableDirectoriesCompression": graniteThreaddumpEnableDirectoriesCompression, 
            "granite.threaddump.enableJStack": graniteThreaddumpEnableJStack, 
            "granite.threaddump.maxBackupDays": graniteThreaddumpMaxBackupDays?.encodeToJSON(), 
            "granite.threaddump.backupCleanTrigger": graniteThreaddumpBackupCleanTrigger
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter translationFactory: (query)  (optional)
     - parameter defaultConnectorLabel: (query)  (optional)
     - parameter defaultConnectorAttribution: (query)  (optional)
     - parameter defaultConnectorWorkspaceId: (query)  (optional)
     - parameter defaultConnectorSubscriptionKey: (query)  (optional)
     - parameter languageMapLocation: (query)  (optional)
     - parameter categoryMapLocation: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter timeoutCount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, translationFactory: String? = nil, defaultConnectorLabel: String? = nil, defaultConnectorAttribution: String? = nil, defaultConnectorWorkspaceId: String? = nil, defaultConnectorSubscriptionKey: String? = nil, languageMapLocation: String? = nil, categoryMapLocation: String? = nil, retryAttempts: Int? = nil, timeoutCount: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, translationFactory: translationFactory, defaultConnectorLabel: defaultConnectorLabel, defaultConnectorAttribution: defaultConnectorAttribution, defaultConnectorWorkspaceId: defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey: defaultConnectorSubscriptionKey, languageMapLocation: languageMapLocation, categoryMapLocation: categoryMapLocation, retryAttempts: retryAttempts, timeoutCount: timeoutCount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter translationFactory: (query)  (optional)
     - parameter defaultConnectorLabel: (query)  (optional)
     - parameter defaultConnectorAttribution: (query)  (optional)
     - parameter defaultConnectorWorkspaceId: (query)  (optional)
     - parameter defaultConnectorSubscriptionKey: (query)  (optional)
     - parameter languageMapLocation: (query)  (optional)
     - parameter categoryMapLocation: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter timeoutCount: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo> 
     */
    open class func comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, translationFactory: String? = nil, defaultConnectorLabel: String? = nil, defaultConnectorAttribution: String? = nil, defaultConnectorWorkspaceId: String? = nil, defaultConnectorSubscriptionKey: String? = nil, languageMapLocation: String? = nil, categoryMapLocation: String? = nil, retryAttempts: Int? = nil, timeoutCount: Int? = nil) -> RequestBuilder<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "translationFactory": translationFactory, 
            "defaultConnectorLabel": defaultConnectorLabel, 
            "defaultConnectorAttribution": defaultConnectorAttribution, 
            "defaultConnectorWorkspaceId": defaultConnectorWorkspaceId, 
            "defaultConnectorSubscriptionKey": defaultConnectorSubscriptionKey, 
            "languageMapLocation": languageMapLocation, 
            "categoryMapLocation": categoryMapLocation, 
            "retryAttempts": retryAttempts?.encodeToJSON(), 
            "timeoutCount": timeoutCount?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultConnectorName: (query)  (optional)
     - parameter defaultCategory: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultConnectorName: String? = nil, defaultCategory: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteTranslationCoreImplTranslationManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultConnectorName: defaultConnectorName, defaultCategory: defaultCategory).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultConnectorName: (query)  (optional)
     - parameter defaultCategory: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo> 
     */
    open class func comAdobeGraniteTranslationCoreImplTranslationManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultConnectorName: String? = nil, defaultCategory: String? = nil) -> RequestBuilder<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "defaultConnectorName": defaultConnectorName, 
            "defaultCategory": defaultCategory
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmllibmanagerTiming: (query)  (optional)
     - parameter htmllibmanagerDebugInitJs: (query)  (optional)
     - parameter htmllibmanagerMinify: (query)  (optional)
     - parameter htmllibmanagerDebug: (query)  (optional)
     - parameter htmllibmanagerGzip: (query)  (optional)
     - parameter htmllibmanagerMaxDataUriSize: (query)  (optional)
     - parameter htmllibmanagerMaxage: (query)  (optional)
     - parameter htmllibmanagerForceCQUrlInfo: (query)  (optional)
     - parameter htmllibmanagerDefaultthemename: (query)  (optional)
     - parameter htmllibmanagerDefaultuserthemename: (query)  (optional)
     - parameter htmllibmanagerClientmanager: (query)  (optional)
     - parameter htmllibmanagerPathList: (query)  (optional)
     - parameter htmllibmanagerExcludedPathList: (query)  (optional)
     - parameter htmllibmanagerProcessorJs: (query)  (optional)
     - parameter htmllibmanagerProcessorCss: (query)  (optional)
     - parameter htmllibmanagerLongcachePatterns: (query)  (optional)
     - parameter htmllibmanagerLongcacheFormat: (query)  (optional)
     - parameter htmllibmanagerUseFileSystemOutputCache: (query)  (optional)
     - parameter htmllibmanagerFileSystemOutputCacheLocation: (query)  (optional)
     - parameter htmllibmanagerDisableReplacement: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmllibmanagerTiming: Bool? = nil, htmllibmanagerDebugInitJs: String? = nil, htmllibmanagerMinify: Bool? = nil, htmllibmanagerDebug: Bool? = nil, htmllibmanagerGzip: Bool? = nil, htmllibmanagerMaxDataUriSize: Int? = nil, htmllibmanagerMaxage: Int? = nil, htmllibmanagerForceCQUrlInfo: Bool? = nil, htmllibmanagerDefaultthemename: String? = nil, htmllibmanagerDefaultuserthemename: String? = nil, htmllibmanagerClientmanager: String? = nil, htmllibmanagerPathList: [String]? = nil, htmllibmanagerExcludedPathList: [String]? = nil, htmllibmanagerProcessorJs: [String]? = nil, htmllibmanagerProcessorCss: [String]? = nil, htmllibmanagerLongcachePatterns: [String]? = nil, htmllibmanagerLongcacheFormat: String? = nil, htmllibmanagerUseFileSystemOutputCache: Bool? = nil, htmllibmanagerFileSystemOutputCacheLocation: String? = nil, htmllibmanagerDisableReplacement: [String]? = nil, completion: @escaping ((_ data: ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, htmllibmanagerTiming: htmllibmanagerTiming, htmllibmanagerDebugInitJs: htmllibmanagerDebugInitJs, htmllibmanagerMinify: htmllibmanagerMinify, htmllibmanagerDebug: htmllibmanagerDebug, htmllibmanagerGzip: htmllibmanagerGzip, htmllibmanagerMaxDataUriSize: htmllibmanagerMaxDataUriSize, htmllibmanagerMaxage: htmllibmanagerMaxage, htmllibmanagerForceCQUrlInfo: htmllibmanagerForceCQUrlInfo, htmllibmanagerDefaultthemename: htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename: htmllibmanagerDefaultuserthemename, htmllibmanagerClientmanager: htmllibmanagerClientmanager, htmllibmanagerPathList: htmllibmanagerPathList, htmllibmanagerExcludedPathList: htmllibmanagerExcludedPathList, htmllibmanagerProcessorJs: htmllibmanagerProcessorJs, htmllibmanagerProcessorCss: htmllibmanagerProcessorCss, htmllibmanagerLongcachePatterns: htmllibmanagerLongcachePatterns, htmllibmanagerLongcacheFormat: htmllibmanagerLongcacheFormat, htmllibmanagerUseFileSystemOutputCache: htmllibmanagerUseFileSystemOutputCache, htmllibmanagerFileSystemOutputCacheLocation: htmllibmanagerFileSystemOutputCacheLocation, htmllibmanagerDisableReplacement: htmllibmanagerDisableReplacement).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmllibmanagerTiming: (query)  (optional)
     - parameter htmllibmanagerDebugInitJs: (query)  (optional)
     - parameter htmllibmanagerMinify: (query)  (optional)
     - parameter htmllibmanagerDebug: (query)  (optional)
     - parameter htmllibmanagerGzip: (query)  (optional)
     - parameter htmllibmanagerMaxDataUriSize: (query)  (optional)
     - parameter htmllibmanagerMaxage: (query)  (optional)
     - parameter htmllibmanagerForceCQUrlInfo: (query)  (optional)
     - parameter htmllibmanagerDefaultthemename: (query)  (optional)
     - parameter htmllibmanagerDefaultuserthemename: (query)  (optional)
     - parameter htmllibmanagerClientmanager: (query)  (optional)
     - parameter htmllibmanagerPathList: (query)  (optional)
     - parameter htmllibmanagerExcludedPathList: (query)  (optional)
     - parameter htmllibmanagerProcessorJs: (query)  (optional)
     - parameter htmllibmanagerProcessorCss: (query)  (optional)
     - parameter htmllibmanagerLongcachePatterns: (query)  (optional)
     - parameter htmllibmanagerLongcacheFormat: (query)  (optional)
     - parameter htmllibmanagerUseFileSystemOutputCache: (query)  (optional)
     - parameter htmllibmanagerFileSystemOutputCacheLocation: (query)  (optional)
     - parameter htmllibmanagerDisableReplacement: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo> 
     */
    open class func comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmllibmanagerTiming: Bool? = nil, htmllibmanagerDebugInitJs: String? = nil, htmllibmanagerMinify: Bool? = nil, htmllibmanagerDebug: Bool? = nil, htmllibmanagerGzip: Bool? = nil, htmllibmanagerMaxDataUriSize: Int? = nil, htmllibmanagerMaxage: Int? = nil, htmllibmanagerForceCQUrlInfo: Bool? = nil, htmllibmanagerDefaultthemename: String? = nil, htmllibmanagerDefaultuserthemename: String? = nil, htmllibmanagerClientmanager: String? = nil, htmllibmanagerPathList: [String]? = nil, htmllibmanagerExcludedPathList: [String]? = nil, htmllibmanagerProcessorJs: [String]? = nil, htmllibmanagerProcessorCss: [String]? = nil, htmllibmanagerLongcachePatterns: [String]? = nil, htmllibmanagerLongcacheFormat: String? = nil, htmllibmanagerUseFileSystemOutputCache: Bool? = nil, htmllibmanagerFileSystemOutputCacheLocation: String? = nil, htmllibmanagerDisableReplacement: [String]? = nil) -> RequestBuilder<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "htmllibmanager.timing": htmllibmanagerTiming, 
            "htmllibmanager.debug.init.js": htmllibmanagerDebugInitJs, 
            "htmllibmanager.minify": htmllibmanagerMinify, 
            "htmllibmanager.debug": htmllibmanagerDebug, 
            "htmllibmanager.gzip": htmllibmanagerGzip, 
            "htmllibmanager.maxDataUriSize": htmllibmanagerMaxDataUriSize?.encodeToJSON(), 
            "htmllibmanager.maxage": htmllibmanagerMaxage?.encodeToJSON(), 
            "htmllibmanager.forceCQUrlInfo": htmllibmanagerForceCQUrlInfo, 
            "htmllibmanager.defaultthemename": htmllibmanagerDefaultthemename, 
            "htmllibmanager.defaultuserthemename": htmllibmanagerDefaultuserthemename, 
            "htmllibmanager.clientmanager": htmllibmanagerClientmanager, 
            "htmllibmanager.path.list": htmllibmanagerPathList, 
            "htmllibmanager.excluded.path.list": htmllibmanagerExcludedPathList, 
            "htmllibmanager.processor.js": htmllibmanagerProcessorJs, 
            "htmllibmanager.processor.css": htmllibmanagerProcessorCss, 
            "htmllibmanager.longcache.patterns": htmllibmanagerLongcachePatterns, 
            "htmllibmanager.longcache.format": htmllibmanagerLongcacheFormat, 
            "htmllibmanager.useFileSystemOutputCache": htmllibmanagerUseFileSystemOutputCache, 
            "htmllibmanager.fileSystemOutputCacheLocation": htmllibmanagerFileSystemOutputCacheLocation, 
            "htmllibmanager.disable.replacement": htmllibmanagerDisableReplacement
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo> 
     */
    open class func comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteWorkflowWorkflowPublishEventServiceEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteWorkflowWorkflowPublishEventServiceEnabled: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, graniteWorkflowWorkflowPublishEventServiceEnabled: graniteWorkflowWorkflowPublishEventServiceEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteWorkflowWorkflowPublishEventServiceEnabled: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo> 
     */
    open class func comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteWorkflowWorkflowPublishEventServiceEnabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "granite.workflow.WorkflowPublishEventService.enabled": graniteWorkflowWorkflowPublishEventServiceEnabled
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter bucketSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, bucketSize: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, bucketSize: bucketSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter bucketSize: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo> 
     */
    open class func comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, bucketSize: Int? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "bucketSize": bucketSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultTimeout: (query)  (optional)
     - parameter maxTimeout: (query)  (optional)
     - parameter defaultPeriod: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultTimeout: Int? = nil, maxTimeout: Int? = nil, defaultPeriod: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultTimeout: defaultTimeout, maxTimeout: maxTimeout, defaultPeriod: defaultPeriod).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultTimeout: (query)  (optional)
     - parameter maxTimeout: (query)  (optional)
     - parameter defaultPeriod: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo> 
     */
    open class func comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultTimeout: Int? = nil, maxTimeout: Int? = nil, defaultPeriod: Int? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "default.timeout": defaultTimeout?.encodeToJSON(), 
            "max.timeout": maxTimeout?.encodeToJSON(), 
            "default.period": defaultPeriod?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter allowSelfProcessTermination: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteWorkflowCoreJobJobHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: [String]? = nil, allowSelfProcessTermination: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteWorkflowCoreJobJobHandlerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteWorkflowCoreJobJobHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jobTopics: jobTopics, allowSelfProcessTermination: allowSelfProcessTermination).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter allowSelfProcessTermination: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo> 
     */
    open class func comAdobeGraniteWorkflowCoreJobJobHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: [String]? = nil, allowSelfProcessTermination: Bool? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "job.topics": jobTopics, 
            "allow.self.process.termination": allowSelfProcessTermination
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jobTopics: jobTopics).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo> 
     */
    open class func comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "job.topics": jobTopics
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getSystemWorkflowModels: (query)  (optional)
     - parameter getPackageRootPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteWorkflowCorePayloadMapCache(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getSystemWorkflowModels: [String]? = nil, getPackageRootPath: String? = nil, completion: @escaping ((_ data: ComAdobeGraniteWorkflowCorePayloadMapCacheInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteWorkflowCorePayloadMapCacheWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, getSystemWorkflowModels: getSystemWorkflowModels, getPackageRootPath: getPackageRootPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getSystemWorkflowModels: (query)  (optional)
     - parameter getPackageRootPath: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo> 
     */
    open class func comAdobeGraniteWorkflowCorePayloadMapCacheWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getSystemWorkflowModels: [String]? = nil, getPackageRootPath: String? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "getSystemWorkflowModels": getSystemWorkflowModels, 
            "getPackageRootPath": getPackageRootPath
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter payloadMoveWhiteList: (query)  (optional)
     - parameter payloadMoveHandleFromWorkflowProcess: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, payloadMoveWhiteList: [String]? = nil, payloadMoveHandleFromWorkflowProcess: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, payloadMoveWhiteList: payloadMoveWhiteList, payloadMoveHandleFromWorkflowProcess: payloadMoveHandleFromWorkflowProcess).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter payloadMoveWhiteList: (query)  (optional)
     - parameter payloadMoveHandleFromWorkflowProcess: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo> 
     */
    open class func comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, payloadMoveWhiteList: [String]? = nil, payloadMoveHandleFromWorkflowProcess: Bool? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "payload.move.white.list": payloadMoveWhiteList, 
            "payload.move.handle.from.workflow.process": payloadMoveHandleFromWorkflowProcess
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWorkflowConfigWorkflowPackagesRootPath: (query)  (optional)
     - parameter cqWorkflowConfigWorkflowProcessLegacyMode: (query)  (optional)
     - parameter cqWorkflowConfigAllowLocking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteWorkflowCoreWorkflowConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWorkflowConfigWorkflowPackagesRootPath: [String]? = nil, cqWorkflowConfigWorkflowProcessLegacyMode: Bool? = nil, cqWorkflowConfigAllowLocking: Bool? = nil, completion: @escaping ((_ data: ComAdobeGraniteWorkflowCoreWorkflowConfigInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteWorkflowCoreWorkflowConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWorkflowConfigWorkflowPackagesRootPath: cqWorkflowConfigWorkflowPackagesRootPath, cqWorkflowConfigWorkflowProcessLegacyMode: cqWorkflowConfigWorkflowProcessLegacyMode, cqWorkflowConfigAllowLocking: cqWorkflowConfigAllowLocking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWorkflowConfigWorkflowPackagesRootPath: (query)  (optional)
     - parameter cqWorkflowConfigWorkflowProcessLegacyMode: (query)  (optional)
     - parameter cqWorkflowConfigAllowLocking: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo> 
     */
    open class func comAdobeGraniteWorkflowCoreWorkflowConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWorkflowConfigWorkflowPackagesRootPath: [String]? = nil, cqWorkflowConfigWorkflowProcessLegacyMode: Bool? = nil, cqWorkflowConfigAllowLocking: Bool? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.workflow.config.workflow.packages.root.path": cqWorkflowConfigWorkflowPackagesRootPath, 
            "cq.workflow.config.workflow.process.legacy.mode": cqWorkflowConfigWorkflowProcessLegacyMode, 
            "cq.workflow.config.allow.locking": cqWorkflowConfigAllowLocking
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteWorkflowinboxSortPropertyName: (query)  (optional)
     - parameter graniteWorkflowinboxSortOrder: (query)  (optional)
     - parameter cqWorkflowJobRetry: (query)  (optional)
     - parameter cqWorkflowSuperuser: (query)  (optional)
     - parameter graniteWorkflowInboxQuerySize: (query)  (optional)
     - parameter graniteWorkflowAdminUserGroupFilter: (query)  (optional)
     - parameter graniteWorkflowEnforceWorkitemAssigneePermissions: (query)  (optional)
     - parameter graniteWorkflowEnforceWorkflowInitiatorPermissions: (query)  (optional)
     - parameter graniteWorkflowInjectTenantIdInJobTopics: (query)  (optional)
     - parameter graniteWorkflowMaxPurgeSaveThreshold: (query)  (optional)
     - parameter graniteWorkflowMaxPurgeQueryCount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteWorkflowinboxSortPropertyName: String? = nil, graniteWorkflowinboxSortOrder: String? = nil, cqWorkflowJobRetry: Int? = nil, cqWorkflowSuperuser: [String]? = nil, graniteWorkflowInboxQuerySize: Int? = nil, graniteWorkflowAdminUserGroupFilter: Bool? = nil, graniteWorkflowEnforceWorkitemAssigneePermissions: Bool? = nil, graniteWorkflowEnforceWorkflowInitiatorPermissions: Bool? = nil, graniteWorkflowInjectTenantIdInJobTopics: Bool? = nil, graniteWorkflowMaxPurgeSaveThreshold: Int? = nil, graniteWorkflowMaxPurgeQueryCount: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteWorkflowCoreWorkflowSessionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, graniteWorkflowinboxSortPropertyName: graniteWorkflowinboxSortPropertyName, graniteWorkflowinboxSortOrder: graniteWorkflowinboxSortOrder, cqWorkflowJobRetry: cqWorkflowJobRetry, cqWorkflowSuperuser: cqWorkflowSuperuser, graniteWorkflowInboxQuerySize: graniteWorkflowInboxQuerySize, graniteWorkflowAdminUserGroupFilter: graniteWorkflowAdminUserGroupFilter, graniteWorkflowEnforceWorkitemAssigneePermissions: graniteWorkflowEnforceWorkitemAssigneePermissions, graniteWorkflowEnforceWorkflowInitiatorPermissions: graniteWorkflowEnforceWorkflowInitiatorPermissions, graniteWorkflowInjectTenantIdInJobTopics: graniteWorkflowInjectTenantIdInJobTopics, graniteWorkflowMaxPurgeSaveThreshold: graniteWorkflowMaxPurgeSaveThreshold, graniteWorkflowMaxPurgeQueryCount: graniteWorkflowMaxPurgeQueryCount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteWorkflowinboxSortPropertyName: (query)  (optional)
     - parameter graniteWorkflowinboxSortOrder: (query)  (optional)
     - parameter cqWorkflowJobRetry: (query)  (optional)
     - parameter cqWorkflowSuperuser: (query)  (optional)
     - parameter graniteWorkflowInboxQuerySize: (query)  (optional)
     - parameter graniteWorkflowAdminUserGroupFilter: (query)  (optional)
     - parameter graniteWorkflowEnforceWorkitemAssigneePermissions: (query)  (optional)
     - parameter graniteWorkflowEnforceWorkflowInitiatorPermissions: (query)  (optional)
     - parameter graniteWorkflowInjectTenantIdInJobTopics: (query)  (optional)
     - parameter graniteWorkflowMaxPurgeSaveThreshold: (query)  (optional)
     - parameter graniteWorkflowMaxPurgeQueryCount: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo> 
     */
    open class func comAdobeGraniteWorkflowCoreWorkflowSessionFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteWorkflowinboxSortPropertyName: String? = nil, graniteWorkflowinboxSortOrder: String? = nil, cqWorkflowJobRetry: Int? = nil, cqWorkflowSuperuser: [String]? = nil, graniteWorkflowInboxQuerySize: Int? = nil, graniteWorkflowAdminUserGroupFilter: Bool? = nil, graniteWorkflowEnforceWorkitemAssigneePermissions: Bool? = nil, graniteWorkflowEnforceWorkflowInitiatorPermissions: Bool? = nil, graniteWorkflowInjectTenantIdInJobTopics: Bool? = nil, graniteWorkflowMaxPurgeSaveThreshold: Int? = nil, graniteWorkflowMaxPurgeQueryCount: Int? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "granite.workflowinbox.sort.propertyName": graniteWorkflowinboxSortPropertyName, 
            "granite.workflowinbox.sort.order": graniteWorkflowinboxSortOrder, 
            "cq.workflow.job.retry": cqWorkflowJobRetry?.encodeToJSON(), 
            "cq.workflow.superuser": cqWorkflowSuperuser, 
            "granite.workflow.inboxQuerySize": graniteWorkflowInboxQuerySize?.encodeToJSON(), 
            "granite.workflow.adminUserGroupFilter": graniteWorkflowAdminUserGroupFilter, 
            "granite.workflow.enforceWorkitemAssigneePermissions": graniteWorkflowEnforceWorkitemAssigneePermissions, 
            "granite.workflow.enforceWorkflowInitiatorPermissions": graniteWorkflowEnforceWorkflowInitiatorPermissions, 
            "granite.workflow.injectTenantIdInJobTopics": graniteWorkflowInjectTenantIdInJobTopics, 
            "granite.workflow.maxPurgeSaveThreshold": graniteWorkflowMaxPurgeSaveThreshold?.encodeToJSON(), 
            "granite.workflow.maxPurgeQueryCount": graniteWorkflowMaxPurgeQueryCount?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scheduledpurgeName: (query)  (optional)
     - parameter scheduledpurgeWorkflowStatus: (query)  (optional)
     - parameter scheduledpurgeModelIds: (query)  (optional)
     - parameter scheduledpurgeDaysold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeGraniteWorkflowPurgeScheduler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scheduledpurgeName: String? = nil, scheduledpurgeWorkflowStatus: String? = nil, scheduledpurgeModelIds: [String]? = nil, scheduledpurgeDaysold: Int? = nil, completion: @escaping ((_ data: ComAdobeGraniteWorkflowPurgeSchedulerInfo?,_ error: Error?) -> Void)) {
        comAdobeGraniteWorkflowPurgeSchedulerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, scheduledpurgeName: scheduledpurgeName, scheduledpurgeWorkflowStatus: scheduledpurgeWorkflowStatus, scheduledpurgeModelIds: scheduledpurgeModelIds, scheduledpurgeDaysold: scheduledpurgeDaysold).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scheduledpurgeName: (query)  (optional)
     - parameter scheduledpurgeWorkflowStatus: (query)  (optional)
     - parameter scheduledpurgeModelIds: (query)  (optional)
     - parameter scheduledpurgeDaysold: (query)  (optional)
     - returns: RequestBuilder<ComAdobeGraniteWorkflowPurgeSchedulerInfo> 
     */
    open class func comAdobeGraniteWorkflowPurgeSchedulerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scheduledpurgeName: String? = nil, scheduledpurgeWorkflowStatus: String? = nil, scheduledpurgeModelIds: [String]? = nil, scheduledpurgeDaysold: Int? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowPurgeSchedulerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduledpurge.name": scheduledpurgeName, 
            "scheduledpurge.workflowStatus": scheduledpurgeWorkflowStatus, 
            "scheduledpurge.modelIds": scheduledpurgeModelIds, 
            "scheduledpurge.daysold": scheduledpurgeDaysold?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowPurgeSchedulerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxConnections: (query)  (optional)
     - parameter maxRequests: (query)  (optional)
     - parameter requestTimeout: (query)  (optional)
     - parameter requestRetries: (query)  (optional)
     - parameter launchTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeOctopusNcommBootstrap(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxConnections: Int? = nil, maxRequests: Int? = nil, requestTimeout: Int? = nil, requestRetries: Int? = nil, launchTimeout: Int? = nil, completion: @escaping ((_ data: ComAdobeOctopusNcommBootstrapInfo?,_ error: Error?) -> Void)) {
        comAdobeOctopusNcommBootstrapWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxConnections: maxConnections, maxRequests: maxRequests, requestTimeout: requestTimeout, requestRetries: requestRetries, launchTimeout: launchTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.octopus.ncomm.bootstrap
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxConnections: (query)  (optional)
     - parameter maxRequests: (query)  (optional)
     - parameter requestTimeout: (query)  (optional)
     - parameter requestRetries: (query)  (optional)
     - parameter launchTimeout: (query)  (optional)
     - returns: RequestBuilder<ComAdobeOctopusNcommBootstrapInfo> 
     */
    open class func comAdobeOctopusNcommBootstrapWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxConnections: Int? = nil, maxRequests: Int? = nil, requestTimeout: Int? = nil, requestRetries: Int? = nil, launchTimeout: Int? = nil) -> RequestBuilder<ComAdobeOctopusNcommBootstrapInfo> {
        let path = "/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "maxConnections": maxConnections?.encodeToJSON(), 
            "maxRequests": maxRequests?.encodeToJSON(), 
            "requestTimeout": requestTimeout?.encodeToJSON(), 
            "requestRetries": requestRetries?.encodeToJSON(), 
            "launchTimeout": launchTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComAdobeOctopusNcommBootstrapInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter communitiesIntegrationLivefyreSlingEventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, communitiesIntegrationLivefyreSlingEventFilter: String? = nil, completion: @escaping ((_ data: ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo?,_ error: Error?) -> Void)) {
        comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, communitiesIntegrationLivefyreSlingEventFilter: communitiesIntegrationLivefyreSlingEventFilter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter communitiesIntegrationLivefyreSlingEventFilter: (query)  (optional)
     - returns: RequestBuilder<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo> 
     */
    open class func comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, communitiesIntegrationLivefyreSlingEventFilter: String? = nil) -> RequestBuilder<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo> {
        let path = "/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "communities.integration.livefyre.sling.event.filter": communitiesIntegrationLivefyreSlingEventFilter
        ])

        let requestBuilder: RequestBuilder<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxConnections: (query)  (optional)
     - parameter maxRequests: (query)  (optional)
     - parameter requestTimeout: (query)  (optional)
     - parameter logDir: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comAdobeXmpWorkerFilesNcommXMPFilesNComm(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxConnections: String? = nil, maxRequests: String? = nil, requestTimeout: String? = nil, logDir: String? = nil, completion: @escaping ((_ data: ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo?,_ error: Error?) -> Void)) {
        comAdobeXmpWorkerFilesNcommXMPFilesNCommWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxConnections: maxConnections, maxRequests: maxRequests, requestTimeout: requestTimeout, logDir: logDir).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxConnections: (query)  (optional)
     - parameter maxRequests: (query)  (optional)
     - parameter requestTimeout: (query)  (optional)
     - parameter logDir: (query)  (optional)
     - returns: RequestBuilder<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo> 
     */
    open class func comAdobeXmpWorkerFilesNcommXMPFilesNCommWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxConnections: String? = nil, maxRequests: String? = nil, requestTimeout: String? = nil, logDir: String? = nil) -> RequestBuilder<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo> {
        let path = "/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "maxConnections": maxConnections, 
            "maxRequests": maxRequests, 
            "requestTimeout": requestTimeout, 
            "logDir": logDir
        ])

        let requestBuilder: RequestBuilder<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jdbcDriverClass: (query)  (optional)
     - parameter jdbcConnectionUri: (query)  (optional)
     - parameter jdbcUsername: (query)  (optional)
     - parameter jdbcPassword: (query)  (optional)
     - parameter jdbcValidationQuery: (query)  (optional)
     - parameter defaultReadonly: (query)  (optional)
     - parameter defaultAutocommit: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter poolMaxWaitMsec: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCommonsDatasourceJdbcpoolJdbcPoolService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jdbcDriverClass: String? = nil, jdbcConnectionUri: String? = nil, jdbcUsername: String? = nil, jdbcPassword: String? = nil, jdbcValidationQuery: String? = nil, defaultReadonly: Bool? = nil, defaultAutocommit: Bool? = nil, poolSize: Int? = nil, poolMaxWaitMsec: Int? = nil, datasourceName: String? = nil, datasourceSvcProperties: [String]? = nil, completion: @escaping ((_ data: ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo?,_ error: Error?) -> Void)) {
        comDayCommonsDatasourceJdbcpoolJdbcPoolServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jdbcDriverClass: jdbcDriverClass, jdbcConnectionUri: jdbcConnectionUri, jdbcUsername: jdbcUsername, jdbcPassword: jdbcPassword, jdbcValidationQuery: jdbcValidationQuery, defaultReadonly: defaultReadonly, defaultAutocommit: defaultAutocommit, poolSize: poolSize, poolMaxWaitMsec: poolMaxWaitMsec, datasourceName: datasourceName, datasourceSvcProperties: datasourceSvcProperties).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jdbcDriverClass: (query)  (optional)
     - parameter jdbcConnectionUri: (query)  (optional)
     - parameter jdbcUsername: (query)  (optional)
     - parameter jdbcPassword: (query)  (optional)
     - parameter jdbcValidationQuery: (query)  (optional)
     - parameter defaultReadonly: (query)  (optional)
     - parameter defaultAutocommit: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter poolMaxWaitMsec: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcProperties: (query)  (optional)
     - returns: RequestBuilder<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo> 
     */
    open class func comDayCommonsDatasourceJdbcpoolJdbcPoolServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jdbcDriverClass: String? = nil, jdbcConnectionUri: String? = nil, jdbcUsername: String? = nil, jdbcPassword: String? = nil, jdbcValidationQuery: String? = nil, defaultReadonly: Bool? = nil, defaultAutocommit: Bool? = nil, poolSize: Int? = nil, poolMaxWaitMsec: Int? = nil, datasourceName: String? = nil, datasourceSvcProperties: [String]? = nil) -> RequestBuilder<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo> {
        let path = "/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "jdbc.driver.class": jdbcDriverClass, 
            "jdbc.connection.uri": jdbcConnectionUri, 
            "jdbc.username": jdbcUsername, 
            "jdbc.password": jdbcPassword, 
            "jdbc.validation.query": jdbcValidationQuery, 
            "default.readonly": defaultReadonly, 
            "default.autocommit": defaultAutocommit, 
            "pool.size": poolSize?.encodeToJSON(), 
            "pool.max.wait.msec": poolMaxWaitMsec?.encodeToJSON(), 
            "datasource.name": datasourceName, 
            "datasource.svc.properties": datasourceSvcProperties
        ])

        let requestBuilder: RequestBuilder<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter proxyEnabled: (query)  (optional)
     - parameter proxyHost: (query)  (optional)
     - parameter proxyUser: (query)  (optional)
     - parameter proxyPassword: (query)  (optional)
     - parameter proxyNtlmHost: (query)  (optional)
     - parameter proxyNtlmDomain: (query)  (optional)
     - parameter proxyExceptions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCommonsHttpclient(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, proxyEnabled: Bool? = nil, proxyHost: String? = nil, proxyUser: String? = nil, proxyPassword: String? = nil, proxyNtlmHost: String? = nil, proxyNtlmDomain: String? = nil, proxyExceptions: [String]? = nil, completion: @escaping ((_ data: ComDayCommonsHttpclientInfo?,_ error: Error?) -> Void)) {
        comDayCommonsHttpclientWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, proxyEnabled: proxyEnabled, proxyHost: proxyHost, proxyUser: proxyUser, proxyPassword: proxyPassword, proxyNtlmHost: proxyNtlmHost, proxyNtlmDomain: proxyNtlmDomain, proxyExceptions: proxyExceptions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.commons.httpclient
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter proxyEnabled: (query)  (optional)
     - parameter proxyHost: (query)  (optional)
     - parameter proxyUser: (query)  (optional)
     - parameter proxyPassword: (query)  (optional)
     - parameter proxyNtlmHost: (query)  (optional)
     - parameter proxyNtlmDomain: (query)  (optional)
     - parameter proxyExceptions: (query)  (optional)
     - returns: RequestBuilder<ComDayCommonsHttpclientInfo> 
     */
    open class func comDayCommonsHttpclientWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, proxyEnabled: Bool? = nil, proxyHost: String? = nil, proxyUser: String? = nil, proxyPassword: String? = nil, proxyNtlmHost: String? = nil, proxyNtlmDomain: String? = nil, proxyExceptions: [String]? = nil) -> RequestBuilder<ComDayCommonsHttpclientInfo> {
        let path = "/system/console/configMgr/com.day.commons.httpclient"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "proxy.enabled": proxyEnabled, 
            "proxy.host": proxyHost, 
            "proxy.user": proxyUser, 
            "proxy.password": proxyPassword, 
            "proxy.ntlm.host": proxyNtlmHost, 
            "proxy.ntlm.domain": proxyNtlmDomain, 
            "proxy.exceptions": proxyExceptions
        ])

        let requestBuilder: RequestBuilder<ComDayCommonsHttpclientInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqStoreListenerAdditionalStorePaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsImplStorePropertiesChangeListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqStoreListenerAdditionalStorePaths: [String]? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsImplStorePropertiesChangeListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqStoreListenerAdditionalStorePaths: cqStoreListenerAdditionalStorePaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqStoreListenerAdditionalStorePaths: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo> 
     */
    open class func comDayCqAnalyticsImplStorePropertiesChangeListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqStoreListenerAdditionalStorePaths: [String]? = nil) -> RequestBuilder<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.store.listener.additionalStorePaths": cqStoreListenerAdditionalStorePaths
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowedPaths: (query)  (optional)
     - parameter cqAnalyticsSaintExporterPagesize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowedPaths: [String]? = nil, cqAnalyticsSaintExporterPagesize: Int? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, allowedPaths: allowedPaths, cqAnalyticsSaintExporterPagesize: cqAnalyticsSaintExporterPagesize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowedPaths: (query)  (optional)
     - parameter cqAnalyticsSaintExporterPagesize: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo> 
     */
    open class func comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowedPaths: [String]? = nil, cqAnalyticsSaintExporterPagesize: Int? = nil) -> RequestBuilder<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "allowed.paths": allowedPaths, 
            "cq.analytics.saint.exporter.pagesize": cqAnalyticsSaintExporterPagesize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportFetchAttempts: (query)  (optional)
     - parameter reportFetchDelay: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsSitecatalystImplImporterReportImporter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportFetchAttempts: Int? = nil, reportFetchDelay: Int? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsSitecatalystImplImporterReportImporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, reportFetchAttempts: reportFetchAttempts, reportFetchDelay: reportFetchDelay).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportFetchAttempts: (query)  (optional)
     - parameter reportFetchDelay: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo> 
     */
    open class func comDayCqAnalyticsSitecatalystImplImporterReportImporterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportFetchAttempts: Int? = nil, reportFetchDelay: Int? = nil) -> RequestBuilder<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "report.fetch.attempts": reportFetchAttempts?.encodeToJSON(), 
            "report.fetch.delay": reportFetchDelay?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsAdapterfactoryContextstores: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsAdapterfactoryContextstores: [String]? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsAdapterfactoryContextstores: cqAnalyticsAdapterfactoryContextstores).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsAdapterfactoryContextstores: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo> 
     */
    open class func comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsAdapterfactoryContextstores: [String]? = nil) -> RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.analytics.adapterfactory.contextstores": cqAnalyticsAdapterfactoryContextstores
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsSitecatalystServiceDatacenterUrl: (query)  (optional)
     - parameter devhostnamepatterns: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsSitecatalystServiceDatacenterUrl: [String]? = nil, devhostnamepatterns: [String]? = nil, connectionTimeout: Int? = nil, socketTimeout: Int? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsSitecatalystServiceDatacenterUrl: cqAnalyticsSitecatalystServiceDatacenterUrl, devhostnamepatterns: devhostnamepatterns, connectionTimeout: connectionTimeout, socketTimeout: socketTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsSitecatalystServiceDatacenterUrl: (query)  (optional)
     - parameter devhostnamepatterns: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo> 
     */
    open class func comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsSitecatalystServiceDatacenterUrl: [String]? = nil, devhostnamepatterns: [String]? = nil, connectionTimeout: Int? = nil, socketTimeout: Int? = nil) -> RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.analytics.sitecatalyst.service.datacenter.url": cqAnalyticsSitecatalystServiceDatacenterUrl, 
            "devhostnamepatterns": devhostnamepatterns, 
            "connection.timeout": connectionTimeout?.encodeToJSON(), 
            "socket.timeout": socketTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: cqAnalyticsTestandtargetAccountoptionsupdaterEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo> 
     */
    open class func comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: Bool? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.analytics.testandtarget.accountoptionsupdater.enabled": cqAnalyticsTestandtargetAccountoptionsupdaterEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo> 
     */
    open class func comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.analytics.testandtarget.deleteauthoractivitylistener.enabled": cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo> 
     */
    open class func comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled": cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetSegmentimporterEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsTestandtargetImplSegmentImporter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetSegmentimporterEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplSegmentImporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsTestandtargetSegmentimporterEnabled: cqAnalyticsTestandtargetSegmentimporterEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetSegmentimporterEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo> 
     */
    open class func comDayCqAnalyticsTestandtargetImplSegmentImporterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetSegmentimporterEnabled: Bool? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.analytics.testandtarget.segmentimporter.enabled": cqAnalyticsTestandtargetSegmentimporterEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter endpointUri: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, endpointUri: String? = nil, connectionTimeout: Int? = nil, socketTimeout: Int? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplServiceWebServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, endpointUri: endpointUri, connectionTimeout: connectionTimeout, socketTimeout: socketTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter endpointUri: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo> 
     */
    open class func comDayCqAnalyticsTestandtargetImplServiceWebServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, endpointUri: String? = nil, connectionTimeout: Int? = nil, socketTimeout: Int? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "endpointUri": endpointUri, 
            "connectionTimeout": connectionTimeout?.encodeToJSON(), 
            "socketTimeout": socketTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter testandtargetEndpointUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, testandtargetEndpointUrl: String? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplServletsAdminServerServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, testandtargetEndpointUrl: testandtargetEndpointUrl).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter testandtargetEndpointUrl: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo> 
     */
    open class func comDayCqAnalyticsTestandtargetImplServletsAdminServerServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, testandtargetEndpointUrl: String? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "testandtarget.endpoint.url": testandtargetEndpointUrl
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetApiUrl: (query)  (optional)
     - parameter cqAnalyticsTestandtargetTimeout: (query)  (optional)
     - parameter cqAnalyticsTestandtargetSockettimeout: (query)  (optional)
     - parameter cqAnalyticsTestandtargetRecommendationsUrlReplace: (query)  (optional)
     - parameter cqAnalyticsTestandtargetRecommendationsUrlReplacewith: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetApiUrl: String? = nil, cqAnalyticsTestandtargetTimeout: Int? = nil, cqAnalyticsTestandtargetSockettimeout: Int? = nil, cqAnalyticsTestandtargetRecommendationsUrlReplace: String? = nil, cqAnalyticsTestandtargetRecommendationsUrlReplacewith: String? = nil, completion: @escaping ((_ data: ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo?,_ error: Error?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsTestandtargetApiUrl: cqAnalyticsTestandtargetApiUrl, cqAnalyticsTestandtargetTimeout: cqAnalyticsTestandtargetTimeout, cqAnalyticsTestandtargetSockettimeout: cqAnalyticsTestandtargetSockettimeout, cqAnalyticsTestandtargetRecommendationsUrlReplace: cqAnalyticsTestandtargetRecommendationsUrlReplace, cqAnalyticsTestandtargetRecommendationsUrlReplacewith: cqAnalyticsTestandtargetRecommendationsUrlReplacewith).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetApiUrl: (query)  (optional)
     - parameter cqAnalyticsTestandtargetTimeout: (query)  (optional)
     - parameter cqAnalyticsTestandtargetSockettimeout: (query)  (optional)
     - parameter cqAnalyticsTestandtargetRecommendationsUrlReplace: (query)  (optional)
     - parameter cqAnalyticsTestandtargetRecommendationsUrlReplacewith: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo> 
     */
    open class func comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetApiUrl: String? = nil, cqAnalyticsTestandtargetTimeout: Int? = nil, cqAnalyticsTestandtargetSockettimeout: Int? = nil, cqAnalyticsTestandtargetRecommendationsUrlReplace: String? = nil, cqAnalyticsTestandtargetRecommendationsUrlReplacewith: String? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.analytics.testandtarget.api.url": cqAnalyticsTestandtargetApiUrl, 
            "cq.analytics.testandtarget.timeout": cqAnalyticsTestandtargetTimeout?.encodeToJSON(), 
            "cq.analytics.testandtarget.sockettimeout": cqAnalyticsTestandtargetSockettimeout?.encodeToJSON(), 
            "cq.analytics.testandtarget.recommendations.url.replace": cqAnalyticsTestandtargetRecommendationsUrlReplace, 
            "cq.analytics.testandtarget.recommendations.url.replacewith": cqAnalyticsTestandtargetRecommendationsUrlReplacewith
        ])

        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cugExemptedPrincipals: (query)  (optional)
     - parameter cugEnabled: (query)  (optional)
     - parameter cugPrincipalsRegex: (query)  (optional)
     - parameter cugPrincipalsReplacement: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAuthImplCugCugSupportImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cugExemptedPrincipals: [String]? = nil, cugEnabled: Bool? = nil, cugPrincipalsRegex: String? = nil, cugPrincipalsReplacement: String? = nil, completion: @escaping ((_ data: ComDayCqAuthImplCugCugSupportImplInfo?,_ error: Error?) -> Void)) {
        comDayCqAuthImplCugCugSupportImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cugExemptedPrincipals: cugExemptedPrincipals, cugEnabled: cugEnabled, cugPrincipalsRegex: cugPrincipalsRegex, cugPrincipalsReplacement: cugPrincipalsReplacement).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cugExemptedPrincipals: (query)  (optional)
     - parameter cugEnabled: (query)  (optional)
     - parameter cugPrincipalsRegex: (query)  (optional)
     - parameter cugPrincipalsReplacement: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAuthImplCugCugSupportImplInfo> 
     */
    open class func comDayCqAuthImplCugCugSupportImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cugExemptedPrincipals: [String]? = nil, cugEnabled: Bool? = nil, cugPrincipalsRegex: String? = nil, cugPrincipalsReplacement: String? = nil) -> RequestBuilder<ComDayCqAuthImplCugCugSupportImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cug.exempted.principals": cugExemptedPrincipals, 
            "cug.enabled": cugEnabled, 
            "cug.principals.regex": cugPrincipalsRegex, 
            "cug.principals.replacement": cugPrincipalsReplacement
        ])

        let requestBuilder: RequestBuilder<ComDayCqAuthImplCugCugSupportImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter authLoginselectorMappings: (query)  (optional)
     - parameter authLoginselectorChangepwMappings: (query)  (optional)
     - parameter authLoginselectorDefaultloginpage: (query)  (optional)
     - parameter authLoginselectorDefaultchangepwpage: (query)  (optional)
     - parameter authLoginselectorHandle: (query)  (optional)
     - parameter authLoginselectorHandleAllExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqAuthImplLoginSelectorHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int? = nil, authLoginselectorMappings: [String]? = nil, authLoginselectorChangepwMappings: [String]? = nil, authLoginselectorDefaultloginpage: String? = nil, authLoginselectorDefaultchangepwpage: String? = nil, authLoginselectorHandle: [String]? = nil, authLoginselectorHandleAllExtensions: Bool? = nil, completion: @escaping ((_ data: ComDayCqAuthImplLoginSelectorHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqAuthImplLoginSelectorHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, serviceRanking: serviceRanking, authLoginselectorMappings: authLoginselectorMappings, authLoginselectorChangepwMappings: authLoginselectorChangepwMappings, authLoginselectorDefaultloginpage: authLoginselectorDefaultloginpage, authLoginselectorDefaultchangepwpage: authLoginselectorDefaultchangepwpage, authLoginselectorHandle: authLoginselectorHandle, authLoginselectorHandleAllExtensions: authLoginselectorHandleAllExtensions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter authLoginselectorMappings: (query)  (optional)
     - parameter authLoginselectorChangepwMappings: (query)  (optional)
     - parameter authLoginselectorDefaultloginpage: (query)  (optional)
     - parameter authLoginselectorDefaultchangepwpage: (query)  (optional)
     - parameter authLoginselectorHandle: (query)  (optional)
     - parameter authLoginselectorHandleAllExtensions: (query)  (optional)
     - returns: RequestBuilder<ComDayCqAuthImplLoginSelectorHandlerInfo> 
     */
    open class func comDayCqAuthImplLoginSelectorHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int? = nil, authLoginselectorMappings: [String]? = nil, authLoginselectorChangepwMappings: [String]? = nil, authLoginselectorDefaultloginpage: String? = nil, authLoginselectorDefaultchangepwpage: String? = nil, authLoginselectorHandle: [String]? = nil, authLoginselectorHandleAllExtensions: Bool? = nil) -> RequestBuilder<ComDayCqAuthImplLoginSelectorHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "auth.loginselector.mappings": authLoginselectorMappings, 
            "auth.loginselector.changepw.mappings": authLoginselectorChangepwMappings, 
            "auth.loginselector.defaultloginpage": authLoginselectorDefaultloginpage, 
            "auth.loginselector.defaultchangepwpage": authLoginselectorDefaultchangepwpage, 
            "auth.loginselector.handle": authLoginselectorHandle, 
            "auth.loginselector.handle.all.extensions": authLoginselectorHandleAllExtensions
        ])

        let requestBuilder: RequestBuilder<ComDayCqAuthImplLoginSelectorHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter externalizerDomains: (query)  (optional)
     - parameter externalizerHost: (query)  (optional)
     - parameter externalizerContextpath: (query)  (optional)
     - parameter externalizerEncodedpath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqCommonsImplExternalizerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, externalizerDomains: [String]? = nil, externalizerHost: String? = nil, externalizerContextpath: String? = nil, externalizerEncodedpath: Bool? = nil, completion: @escaping ((_ data: ComDayCqCommonsImplExternalizerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqCommonsImplExternalizerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, externalizerDomains: externalizerDomains, externalizerHost: externalizerHost, externalizerContextpath: externalizerContextpath, externalizerEncodedpath: externalizerEncodedpath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter externalizerDomains: (query)  (optional)
     - parameter externalizerHost: (query)  (optional)
     - parameter externalizerContextpath: (query)  (optional)
     - parameter externalizerEncodedpath: (query)  (optional)
     - returns: RequestBuilder<ComDayCqCommonsImplExternalizerImplInfo> 
     */
    open class func comDayCqCommonsImplExternalizerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, externalizerDomains: [String]? = nil, externalizerHost: String? = nil, externalizerContextpath: String? = nil, externalizerEncodedpath: Bool? = nil) -> RequestBuilder<ComDayCqCommonsImplExternalizerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "externalizer.domains": externalizerDomains, 
            "externalizer.host": externalizerHost, 
            "externalizer.contextpath": externalizerContextpath, 
            "externalizer.encodedpath": externalizerEncodedpath
        ])

        let requestBuilder: RequestBuilder<ComDayCqCommonsImplExternalizerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rootmappingTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqCommonsServletsRootMappingServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rootmappingTarget: String? = nil, completion: @escaping ((_ data: ComDayCqCommonsServletsRootMappingServletInfo?,_ error: Error?) -> Void)) {
        comDayCqCommonsServletsRootMappingServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, rootmappingTarget: rootmappingTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rootmappingTarget: (query)  (optional)
     - returns: RequestBuilder<ComDayCqCommonsServletsRootMappingServletInfo> 
     */
    open class func comDayCqCommonsServletsRootMappingServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rootmappingTarget: String? = nil) -> RequestBuilder<ComDayCqCommonsServletsRootMappingServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "rootmapping.target": rootmappingTarget
        ])

        let requestBuilder: RequestBuilder<ComDayCqCommonsServletsRootMappingServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter codeupgradetasks: (query)  (optional)
     - parameter codeupgradetaskfilters: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, codeupgradetasks: [String]? = nil, codeupgradetaskfilters: [String]? = nil, completion: @escaping ((_ data: ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo?,_ error: Error?) -> Void)) {
        comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, codeupgradetasks: codeupgradetasks, codeupgradetaskfilters: codeupgradetaskfilters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter codeupgradetasks: (query)  (optional)
     - parameter codeupgradetaskfilters: (query)  (optional)
     - returns: RequestBuilder<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo> 
     */
    open class func comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, codeupgradetasks: [String]? = nil, codeupgradetaskfilters: [String]? = nil) -> RequestBuilder<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo> {
        let path = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "codeupgradetasks": codeupgradetasks, 
            "codeupgradetaskfilters": codeupgradetaskfilters
        ])

        let requestBuilder: RequestBuilder<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter upgradeTaskIgnoreList: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, upgradeTaskIgnoreList: [String]? = nil, completion: @escaping ((_ data: ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo?,_ error: Error?) -> Void)) {
        comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, upgradeTaskIgnoreList: upgradeTaskIgnoreList).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter upgradeTaskIgnoreList: (query)  (optional)
     - returns: RequestBuilder<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo> 
     */
    open class func comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, upgradeTaskIgnoreList: [String]? = nil) -> RequestBuilder<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo> {
        let path = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "upgradeTaskIgnoreList": upgradeTaskIgnoreList
        ])

        let requestBuilder: RequestBuilder<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter effectiveBundleListPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, effectiveBundleListPath: String? = nil, completion: @escaping ((_ data: ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo?,_ error: Error?) -> Void)) {
        comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, effectiveBundleListPath: effectiveBundleListPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter effectiveBundleListPath: (query)  (optional)
     - returns: RequestBuilder<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo> 
     */
    open class func comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, effectiveBundleListPath: String? = nil) -> RequestBuilder<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo> {
        let path = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "effectiveBundleListPath": effectiveBundleListPath
        ])

        let requestBuilder: RequestBuilder<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contentsyncFallbackAuthorizable: (query)  (optional)
     - parameter contentsyncFallbackUpdateuser: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqContentsyncImplContentSyncManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contentsyncFallbackAuthorizable: String? = nil, contentsyncFallbackUpdateuser: String? = nil, completion: @escaping ((_ data: ComDayCqContentsyncImplContentSyncManagerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqContentsyncImplContentSyncManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, contentsyncFallbackAuthorizable: contentsyncFallbackAuthorizable, contentsyncFallbackUpdateuser: contentsyncFallbackUpdateuser).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contentsyncFallbackAuthorizable: (query)  (optional)
     - parameter contentsyncFallbackUpdateuser: (query)  (optional)
     - returns: RequestBuilder<ComDayCqContentsyncImplContentSyncManagerImplInfo> 
     */
    open class func comDayCqContentsyncImplContentSyncManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contentsyncFallbackAuthorizable: String? = nil, contentsyncFallbackUpdateuser: String? = nil) -> RequestBuilder<ComDayCqContentsyncImplContentSyncManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "contentsync.fallback.authorizable": contentsyncFallbackAuthorizable, 
            "contentsync.fallback.updateuser": contentsyncFallbackUpdateuser
        ])

        let requestBuilder: RequestBuilder<ComDayCqContentsyncImplContentSyncManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)
     - parameter largeCommentThreshold: (query)  (optional)
     - parameter cqDamEnableExtMetaExtraction: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCommonsHandlerStandardImageHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileThreshold: Int? = nil, largeCommentThreshold: Int? = nil, cqDamEnableExtMetaExtraction: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCommonsHandlerStandardImageHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCommonsHandlerStandardImageHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, largeFileThreshold: largeFileThreshold, largeCommentThreshold: largeCommentThreshold, cqDamEnableExtMetaExtraction: cqDamEnableExtMetaExtraction).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)
     - parameter largeCommentThreshold: (query)  (optional)
     - parameter cqDamEnableExtMetaExtraction: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCommonsHandlerStandardImageHandlerInfo> 
     */
    open class func comDayCqDamCommonsHandlerStandardImageHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileThreshold: Int? = nil, largeCommentThreshold: Int? = nil, cqDamEnableExtMetaExtraction: Bool? = nil) -> RequestBuilder<ComDayCqDamCommonsHandlerStandardImageHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "large_file_threshold": largeFileThreshold?.encodeToJSON(), 
            "large_comment_threshold": largeCommentThreshold?.encodeToJSON(), 
            "cq.dam.enable.ext.meta.extraction": cqDamEnableExtMetaExtraction
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCommonsHandlerStandardImageHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmpFilterApplyWhitelist: (query)  (optional)
     - parameter xmpFilterWhitelist: (query)  (optional)
     - parameter xmpFilterApplyBlacklist: (query)  (optional)
     - parameter xmpFilterBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCommonsMetadataXmpFilterBlackWhite(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmpFilterApplyWhitelist: Bool? = nil, xmpFilterWhitelist: [String]? = nil, xmpFilterApplyBlacklist: Bool? = nil, xmpFilterBlacklist: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCommonsMetadataXmpFilterBlackWhiteWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, xmpFilterApplyWhitelist: xmpFilterApplyWhitelist, xmpFilterWhitelist: xmpFilterWhitelist, xmpFilterApplyBlacklist: xmpFilterApplyBlacklist, xmpFilterBlacklist: xmpFilterBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmpFilterApplyWhitelist: (query)  (optional)
     - parameter xmpFilterWhitelist: (query)  (optional)
     - parameter xmpFilterApplyBlacklist: (query)  (optional)
     - parameter xmpFilterBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo> 
     */
    open class func comDayCqDamCommonsMetadataXmpFilterBlackWhiteWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmpFilterApplyWhitelist: Bool? = nil, xmpFilterWhitelist: [String]? = nil, xmpFilterApplyBlacklist: Bool? = nil, xmpFilterBlacklist: [String]? = nil) -> RequestBuilder<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "xmp.filter.apply_whitelist": xmpFilterApplyWhitelist, 
            "xmp.filter.whitelist": xmpFilterWhitelist, 
            "xmp.filter.apply_blacklist": xmpFilterApplyBlacklist, 
            "xmp.filter.blacklist": xmpFilterBlacklist
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileMin: (query)  (optional)
     - parameter cacheApply: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCommonsUtilImplAssetCacheImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileMin: Int? = nil, cacheApply: Bool? = nil, mimeTypes: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamCommonsUtilImplAssetCacheImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCommonsUtilImplAssetCacheImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, largeFileMin: largeFileMin, cacheApply: cacheApply, mimeTypes: mimeTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileMin: (query)  (optional)
     - parameter cacheApply: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCommonsUtilImplAssetCacheImplInfo> 
     */
    open class func comDayCqDamCommonsUtilImplAssetCacheImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileMin: Int? = nil, cacheApply: Bool? = nil, mimeTypes: [String]? = nil) -> RequestBuilder<ComDayCqDamCommonsUtilImplAssetCacheImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "large.file.min": largeFileMin?.encodeToJSON(), 
            "cache.apply": cacheApply, 
            "mime.types": mimeTypes
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCommonsUtilImplAssetCacheImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentHeight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentPaddingHorizontal: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentPaddingVertical: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontSize: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontColor: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontFamily: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontLight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfMarginTextImage: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfMinImageHeight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorApproved: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorRejected: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfAnnotationMarkerWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfAssetMinheight: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamConfigAnnotationPdfDocumentWidth: Int? = nil, cqDamConfigAnnotationPdfDocumentHeight: Int? = nil, cqDamConfigAnnotationPdfDocumentPaddingHorizontal: Int? = nil, cqDamConfigAnnotationPdfDocumentPaddingVertical: Int? = nil, cqDamConfigAnnotationPdfFontSize: Int? = nil, cqDamConfigAnnotationPdfFontColor: String? = nil, cqDamConfigAnnotationPdfFontFamily: String? = nil, cqDamConfigAnnotationPdfFontLight: String? = nil, cqDamConfigAnnotationPdfMarginTextImage: Int? = nil, cqDamConfigAnnotationPdfMinImageHeight: Int? = nil, cqDamConfigAnnotationPdfReviewStatusWidth: Int? = nil, cqDamConfigAnnotationPdfReviewStatusColorApproved: String? = nil, cqDamConfigAnnotationPdfReviewStatusColorRejected: String? = nil, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: String? = nil, cqDamConfigAnnotationPdfAnnotationMarkerWidth: Int? = nil, cqDamConfigAnnotationPdfAssetMinheight: Int? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamConfigAnnotationPdfDocumentWidth: cqDamConfigAnnotationPdfDocumentWidth, cqDamConfigAnnotationPdfDocumentHeight: cqDamConfigAnnotationPdfDocumentHeight, cqDamConfigAnnotationPdfDocumentPaddingHorizontal: cqDamConfigAnnotationPdfDocumentPaddingHorizontal, cqDamConfigAnnotationPdfDocumentPaddingVertical: cqDamConfigAnnotationPdfDocumentPaddingVertical, cqDamConfigAnnotationPdfFontSize: cqDamConfigAnnotationPdfFontSize, cqDamConfigAnnotationPdfFontColor: cqDamConfigAnnotationPdfFontColor, cqDamConfigAnnotationPdfFontFamily: cqDamConfigAnnotationPdfFontFamily, cqDamConfigAnnotationPdfFontLight: cqDamConfigAnnotationPdfFontLight, cqDamConfigAnnotationPdfMarginTextImage: cqDamConfigAnnotationPdfMarginTextImage, cqDamConfigAnnotationPdfMinImageHeight: cqDamConfigAnnotationPdfMinImageHeight, cqDamConfigAnnotationPdfReviewStatusWidth: cqDamConfigAnnotationPdfReviewStatusWidth, cqDamConfigAnnotationPdfReviewStatusColorApproved: cqDamConfigAnnotationPdfReviewStatusColorApproved, cqDamConfigAnnotationPdfReviewStatusColorRejected: cqDamConfigAnnotationPdfReviewStatusColorRejected, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, cqDamConfigAnnotationPdfAnnotationMarkerWidth: cqDamConfigAnnotationPdfAnnotationMarkerWidth, cqDamConfigAnnotationPdfAssetMinheight: cqDamConfigAnnotationPdfAssetMinheight).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentHeight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentPaddingHorizontal: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentPaddingVertical: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontSize: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontColor: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontFamily: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontLight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfMarginTextImage: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfMinImageHeight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorApproved: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorRejected: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfAnnotationMarkerWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfAssetMinheight: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo> 
     */
    open class func comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamConfigAnnotationPdfDocumentWidth: Int? = nil, cqDamConfigAnnotationPdfDocumentHeight: Int? = nil, cqDamConfigAnnotationPdfDocumentPaddingHorizontal: Int? = nil, cqDamConfigAnnotationPdfDocumentPaddingVertical: Int? = nil, cqDamConfigAnnotationPdfFontSize: Int? = nil, cqDamConfigAnnotationPdfFontColor: String? = nil, cqDamConfigAnnotationPdfFontFamily: String? = nil, cqDamConfigAnnotationPdfFontLight: String? = nil, cqDamConfigAnnotationPdfMarginTextImage: Int? = nil, cqDamConfigAnnotationPdfMinImageHeight: Int? = nil, cqDamConfigAnnotationPdfReviewStatusWidth: Int? = nil, cqDamConfigAnnotationPdfReviewStatusColorApproved: String? = nil, cqDamConfigAnnotationPdfReviewStatusColorRejected: String? = nil, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: String? = nil, cqDamConfigAnnotationPdfAnnotationMarkerWidth: Int? = nil, cqDamConfigAnnotationPdfAssetMinheight: Int? = nil) -> RequestBuilder<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.config.annotation.pdf.document.width": cqDamConfigAnnotationPdfDocumentWidth?.encodeToJSON(), 
            "cq.dam.config.annotation.pdf.document.height": cqDamConfigAnnotationPdfDocumentHeight?.encodeToJSON(), 
            "cq.dam.config.annotation.pdf.document.padding.horizontal": cqDamConfigAnnotationPdfDocumentPaddingHorizontal?.encodeToJSON(), 
            "cq.dam.config.annotation.pdf.document.padding.vertical": cqDamConfigAnnotationPdfDocumentPaddingVertical?.encodeToJSON(), 
            "cq.dam.config.annotation.pdf.font.size": cqDamConfigAnnotationPdfFontSize?.encodeToJSON(), 
            "cq.dam.config.annotation.pdf.font.color": cqDamConfigAnnotationPdfFontColor, 
            "cq.dam.config.annotation.pdf.font.family": cqDamConfigAnnotationPdfFontFamily, 
            "cq.dam.config.annotation.pdf.font.light": cqDamConfigAnnotationPdfFontLight, 
            "cq.dam.config.annotation.pdf.marginTextImage": cqDamConfigAnnotationPdfMarginTextImage?.encodeToJSON(), 
            "cq.dam.config.annotation.pdf.minImageHeight": cqDamConfigAnnotationPdfMinImageHeight?.encodeToJSON(), 
            "cq.dam.config.annotation.pdf.reviewStatus.width": cqDamConfigAnnotationPdfReviewStatusWidth?.encodeToJSON(), 
            "cq.dam.config.annotation.pdf.reviewStatus.color.approved": cqDamConfigAnnotationPdfReviewStatusColorApproved, 
            "cq.dam.config.annotation.pdf.reviewStatus.color.rejected": cqDamConfigAnnotationPdfReviewStatusColorRejected, 
            "cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested": cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, 
            "cq.dam.config.annotation.pdf.annotationMarker.width": cqDamConfigAnnotationPdfAnnotationMarkerWidth?.encodeToJSON(), 
            "cq.dam.config.annotation.pdf.asset.minheight": cqDamConfigAnnotationPdfAssetMinheight?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplAssetMoveListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplAssetMoveListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplAssetMoveListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplAssetMoveListenerInfo> 
     */
    open class func comDayCqDamCoreImplAssetMoveListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplAssetMoveListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplAssetMoveListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplAssethomeAssetHomePageConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isEnabled: isEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo> 
     */
    open class func comDayCqDamCoreImplAssethomeAssetHomePageConfigurationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "isEnabled": isEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamAdhocAssetSharePrezipMaxcontentsize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamAdhocAssetSharePrezipMaxcontentsize: Int? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamAdhocAssetSharePrezipMaxcontentsize: cqDamAdhocAssetSharePrezipMaxcontentsize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamAdhocAssetSharePrezipMaxcontentsize: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo> 
     */
    open class func comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamAdhocAssetSharePrezipMaxcontentsize: Int? = nil) -> RequestBuilder<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.adhoc.asset.share.prezip.maxcontentsize": cqDamAdhocAssetSharePrezipMaxcontentsize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamImageCacheMaxMemory: (query)  (optional)
     - parameter cqDamImageCacheMaxAge: (query)  (optional)
     - parameter cqDamImageCacheMaxDimension: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplCacheCQBufferedImageCache(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamImageCacheMaxMemory: Int? = nil, cqDamImageCacheMaxAge: Int? = nil, cqDamImageCacheMaxDimension: String? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplCacheCQBufferedImageCacheWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamImageCacheMaxMemory: cqDamImageCacheMaxMemory, cqDamImageCacheMaxAge: cqDamImageCacheMaxAge, cqDamImageCacheMaxDimension: cqDamImageCacheMaxDimension).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamImageCacheMaxMemory: (query)  (optional)
     - parameter cqDamImageCacheMaxAge: (query)  (optional)
     - parameter cqDamImageCacheMaxDimension: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo> 
     */
    open class func comDayCqDamCoreImplCacheCQBufferedImageCacheWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamImageCacheMaxMemory: Int? = nil, cqDamImageCacheMaxAge: Int? = nil, cqDamImageCacheMaxDimension: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.image.cache.max.memory": cqDamImageCacheMaxMemory?.encodeToJSON(), 
            "cq.dam.image.cache.max.age": cqDamImageCacheMaxAge?.encodeToJSON(), 
            "cq.dam.image.cache.max.dimension": cqDamImageCacheMaxDimension
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter changeeventlistenerObservedPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplDamChangeEventListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, changeeventlistenerObservedPaths: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplDamChangeEventListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplDamChangeEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, changeeventlistenerObservedPaths: changeeventlistenerObservedPaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter changeeventlistenerObservedPaths: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplDamChangeEventListenerInfo> 
     */
    open class func comDayCqDamCoreImplDamChangeEventListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, changeeventlistenerObservedPaths: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplDamChangeEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "changeeventlistener.observed.paths": changeeventlistenerObservedPaths
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplDamChangeEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter maxSavedActivities: (query)  (optional)
     - parameter saveInterval: (query)  (optional)
     - parameter enableActivityPurge: (query)  (optional)
     - parameter eventTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplDamEventPurgeService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, maxSavedActivities: Int? = nil, saveInterval: Int? = nil, enableActivityPurge: Bool? = nil, eventTypes: String? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplDamEventPurgeServiceInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplDamEventPurgeServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, maxSavedActivities: maxSavedActivities, saveInterval: saveInterval, enableActivityPurge: enableActivityPurge, eventTypes: eventTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter maxSavedActivities: (query)  (optional)
     - parameter saveInterval: (query)  (optional)
     - parameter enableActivityPurge: (query)  (optional)
     - parameter eventTypes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplDamEventPurgeServiceInfo> 
     */
    open class func comDayCqDamCoreImplDamEventPurgeServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, maxSavedActivities: Int? = nil, saveInterval: Int? = nil, enableActivityPurge: Bool? = nil, eventTypes: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplDamEventPurgeServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.expression": schedulerExpression, 
            "maxSavedActivities": maxSavedActivities?.encodeToJSON(), 
            "saveInterval": saveInterval?.encodeToJSON(), 
            "enableActivityPurge": enableActivityPurge, 
            "eventTypes": eventTypes
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplDamEventPurgeServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter eventQueueLength: (query)  (optional)
     - parameter eventrecorderEnabled: (query)  (optional)
     - parameter eventrecorderBlacklist: (query)  (optional)
     - parameter eventrecorderEventtypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplDamEventRecorderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, eventQueueLength: Int? = nil, eventrecorderEnabled: Bool? = nil, eventrecorderBlacklist: [String]? = nil, eventrecorderEventtypes: String? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplDamEventRecorderImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplDamEventRecorderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, eventQueueLength: eventQueueLength, eventrecorderEnabled: eventrecorderEnabled, eventrecorderBlacklist: eventrecorderBlacklist, eventrecorderEventtypes: eventrecorderEventtypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter eventQueueLength: (query)  (optional)
     - parameter eventrecorderEnabled: (query)  (optional)
     - parameter eventrecorderBlacklist: (query)  (optional)
     - parameter eventrecorderEventtypes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplDamEventRecorderImplInfo> 
     */
    open class func comDayCqDamCoreImplDamEventRecorderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, eventQueueLength: Int? = nil, eventrecorderEnabled: Bool? = nil, eventrecorderBlacklist: [String]? = nil, eventrecorderEventtypes: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplDamEventRecorderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.filter": eventFilter, 
            "event.queue.length": eventQueueLength?.encodeToJSON(), 
            "eventrecorder.enabled": eventrecorderEnabled, 
            "eventrecorder.blacklist": eventrecorderBlacklist, 
            "eventrecorder.eventtypes": eventrecorderEventtypes
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplDamEventRecorderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplEventDamEventAuditListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplEventDamEventAuditListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplEventDamEventAuditListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplEventDamEventAuditListenerInfo> 
     */
    open class func comDayCqDamCoreImplEventDamEventAuditListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, enabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplEventDamEventAuditListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.filter": eventFilter, 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplEventDamEventAuditListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerIstimebased: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerTimebasedRule: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerPeriodRule: (query)  (optional)
     - parameter sendEmail: (query)  (optional)
     - parameter assetExpiredLimit: (query)  (optional)
     - parameter priorNotificationSeconds: (query)  (optional)
     - parameter cqDamExpiryNotificationUrlProtocol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplExpiryNotificationJobImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamExpiryNotificationSchedulerIstimebased: Bool? = nil, cqDamExpiryNotificationSchedulerTimebasedRule: String? = nil, cqDamExpiryNotificationSchedulerPeriodRule: Int? = nil, sendEmail: Bool? = nil, assetExpiredLimit: Int? = nil, priorNotificationSeconds: Int? = nil, cqDamExpiryNotificationUrlProtocol: String? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplExpiryNotificationJobImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplExpiryNotificationJobImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamExpiryNotificationSchedulerIstimebased: cqDamExpiryNotificationSchedulerIstimebased, cqDamExpiryNotificationSchedulerTimebasedRule: cqDamExpiryNotificationSchedulerTimebasedRule, cqDamExpiryNotificationSchedulerPeriodRule: cqDamExpiryNotificationSchedulerPeriodRule, sendEmail: sendEmail, assetExpiredLimit: assetExpiredLimit, priorNotificationSeconds: priorNotificationSeconds, cqDamExpiryNotificationUrlProtocol: cqDamExpiryNotificationUrlProtocol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerIstimebased: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerTimebasedRule: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerPeriodRule: (query)  (optional)
     - parameter sendEmail: (query)  (optional)
     - parameter assetExpiredLimit: (query)  (optional)
     - parameter priorNotificationSeconds: (query)  (optional)
     - parameter cqDamExpiryNotificationUrlProtocol: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplExpiryNotificationJobImplInfo> 
     */
    open class func comDayCqDamCoreImplExpiryNotificationJobImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamExpiryNotificationSchedulerIstimebased: Bool? = nil, cqDamExpiryNotificationSchedulerTimebasedRule: String? = nil, cqDamExpiryNotificationSchedulerPeriodRule: Int? = nil, sendEmail: Bool? = nil, assetExpiredLimit: Int? = nil, priorNotificationSeconds: Int? = nil, cqDamExpiryNotificationUrlProtocol: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplExpiryNotificationJobImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.expiry.notification.scheduler.istimebased": cqDamExpiryNotificationSchedulerIstimebased, 
            "cq.dam.expiry.notification.scheduler.timebased.rule": cqDamExpiryNotificationSchedulerTimebasedRule, 
            "cq.dam.expiry.notification.scheduler.period.rule": cqDamExpiryNotificationSchedulerPeriodRule?.encodeToJSON(), 
            "send_email": sendEmail, 
            "asset_expired_limit": assetExpiredLimit?.encodeToJSON(), 
            "prior_notification_seconds": priorNotificationSeconds?.encodeToJSON(), 
            "cq.dam.expiry.notification.url.protocol": cqDamExpiryNotificationUrlProtocol
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplExpiryNotificationJobImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isEnabled: isEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo> 
     */
    open class func comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "isEnabled": isEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter skipBufferedcache: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplGfxCommonsGfxRenderer(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, skipBufferedcache: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplGfxCommonsGfxRendererInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplGfxCommonsGfxRendererWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, skipBufferedcache: skipBufferedcache).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter skipBufferedcache: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo> 
     */
    open class func comDayCqDamCoreImplGfxCommonsGfxRendererWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, skipBufferedcache: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "skip.bufferedcache": skipBufferedcache
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimetype: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplHandlerEPSFormatHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimetype: String? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplHandlerEPSFormatHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mimetype: mimetype).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimetype: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo> 
     */
    open class func comDayCqDamCoreImplHandlerEPSFormatHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimetype: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "mimetype": mimetype
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimetype: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplHandlerIndesignFormatHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimetype: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplHandlerIndesignFormatHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mimetype: mimetype).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimetype: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo> 
     */
    open class func comDayCqDamCoreImplHandlerIndesignFormatHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimetype: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "mimetype": mimetype
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamEnableExtMetaExtraction: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)
     - parameter largeCommentThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplHandlerJpegHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamEnableExtMetaExtraction: Bool? = nil, largeFileThreshold: Int? = nil, largeCommentThreshold: Int? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplHandlerJpegHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplHandlerJpegHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamEnableExtMetaExtraction: cqDamEnableExtMetaExtraction, largeFileThreshold: largeFileThreshold, largeCommentThreshold: largeCommentThreshold).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamEnableExtMetaExtraction: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)
     - parameter largeCommentThreshold: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplHandlerJpegHandlerInfo> 
     */
    open class func comDayCqDamCoreImplHandlerJpegHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamEnableExtMetaExtraction: Bool? = nil, largeFileThreshold: Int? = nil, largeCommentThreshold: Int? = nil) -> RequestBuilder<ComDayCqDamCoreImplHandlerJpegHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.enable.ext.meta.extraction": cqDamEnableExtMetaExtraction, 
            "large_file_threshold": largeFileThreshold?.encodeToJSON(), 
            "large_comment_threshold": largeCommentThreshold?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplHandlerJpegHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmphandlerCqFormats: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmphandlerCqFormats: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplHandlerXmpNCommXMPHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, xmphandlerCqFormats: xmphandlerCqFormats).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmphandlerCqFormats: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo> 
     */
    open class func comDayCqDamCoreImplHandlerXmpNCommXMPHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmphandlerCqFormats: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "xmphandler.cq.formats": xmphandlerCqFormats
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter propertyMeasureEnabled: (query)  (optional)
     - parameter propertyName: (query)  (optional)
     - parameter propertyMaxWaitMs: (query)  (optional)
     - parameter propertyMaxRate: (query)  (optional)
     - parameter fulltextMeasureEnabled: (query)  (optional)
     - parameter fulltextName: (query)  (optional)
     - parameter fulltextMaxWaitMs: (query)  (optional)
     - parameter fulltextMaxRate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil, propertyMeasureEnabled: Bool? = nil, propertyName: String? = nil, propertyMaxWaitMs: Int? = nil, propertyMaxRate: Double? = nil, fulltextMeasureEnabled: Bool? = nil, fulltextName: String? = nil, fulltextMaxWaitMs: Int? = nil, fulltextMaxRate: Double? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplJmxAssetIndexUpdateMonitorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jmxObjectname: jmxObjectname, propertyMeasureEnabled: propertyMeasureEnabled, propertyName: propertyName, propertyMaxWaitMs: propertyMaxWaitMs, propertyMaxRate: propertyMaxRate, fulltextMeasureEnabled: fulltextMeasureEnabled, fulltextName: fulltextName, fulltextMaxWaitMs: fulltextMaxWaitMs, fulltextMaxRate: fulltextMaxRate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter propertyMeasureEnabled: (query)  (optional)
     - parameter propertyName: (query)  (optional)
     - parameter propertyMaxWaitMs: (query)  (optional)
     - parameter propertyMaxRate: (query)  (optional)
     - parameter fulltextMeasureEnabled: (query)  (optional)
     - parameter fulltextName: (query)  (optional)
     - parameter fulltextMaxWaitMs: (query)  (optional)
     - parameter fulltextMaxRate: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo> 
     */
    open class func comDayCqDamCoreImplJmxAssetIndexUpdateMonitorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil, propertyMeasureEnabled: Bool? = nil, propertyName: String? = nil, propertyMaxWaitMs: Int? = nil, propertyMaxRate: Double? = nil, fulltextMeasureEnabled: Bool? = nil, fulltextName: String? = nil, fulltextMaxWaitMs: Int? = nil, fulltextMaxRate: Double? = nil) -> RequestBuilder<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "jmx.objectname": jmxObjectname, 
            "property.measure.enabled": propertyMeasureEnabled, 
            "property.name": propertyName, 
            "property.max.wait.ms": propertyMaxWaitMs?.encodeToJSON(), 
            "property.max.rate": propertyMaxRate, 
            "fulltext.measure.enabled": fulltextMeasureEnabled, 
            "fulltext.name": fulltextName, 
            "fulltext.max.wait.ms": fulltextMaxWaitMs?.encodeToJSON(), 
            "fulltext.max.rate": fulltextMaxRate
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplJmxAssetMigrationMBeanImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jmxObjectname: jmxObjectname).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo> 
     */
    open class func comDayCqDamCoreImplJmxAssetMigrationMBeanImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "jmx.objectname": jmxObjectname
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter active: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil, active: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplJmxAssetUpdateMonitorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jmxObjectname: jmxObjectname, active: active).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter active: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo> 
     */
    open class func comDayCqDamCoreImplJmxAssetUpdateMonitorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil, active: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "jmx.objectname": jmxObjectname, 
            "active": active
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter operation: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, operation: String? = nil, emailEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, operation: operation, emailEnabled: emailEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter operation: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo> 
     */
    open class func comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, operation: String? = nil, emailEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "operation": operation, 
            "emailEnabled": emailEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter operation: (query)  (optional)
     - parameter operationIcon: (query)  (optional)
     - parameter topicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, operation: String? = nil, operationIcon: String? = nil, topicName: String? = nil, emailEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, operation: operation, operationIcon: operationIcon, topicName: topicName, emailEnabled: emailEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter operation: (query)  (optional)
     - parameter operationIcon: (query)  (optional)
     - parameter topicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo> 
     */
    open class func comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, operation: String? = nil, operationIcon: String? = nil, topicName: String? = nil, emailEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "operation": operation, 
            "operationIcon": operationIcon, 
            "topicName": topicName, 
            "emailEnabled": emailEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter cqDamEnableAnonymous: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplLightboxLightboxServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, slingServletMethods: [String]? = nil, cqDamEnableAnonymous: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplLightboxLightboxServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplLightboxLightboxServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletPaths: slingServletPaths, slingServletMethods: slingServletMethods, cqDamEnableAnonymous: cqDamEnableAnonymous).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter cqDamEnableAnonymous: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplLightboxLightboxServletInfo> 
     */
    open class func comDayCqDamCoreImplLightboxLightboxServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, slingServletMethods: [String]? = nil, cqDamEnableAnonymous: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplLightboxLightboxServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.paths": slingServletPaths, 
            "sling.servlet.methods": slingServletMethods, 
            "cq.dam.enable.anonymous": cqDamEnableAnonymous
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplLightboxLightboxServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter granitedata: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, granitedata: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplMetadataEditorSelectComponentHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, granitedata: granitedata).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter granitedata: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo> 
     */
    open class func comDayCqDamCoreImplMetadataEditorSelectComponentHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, granitedata: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "granite:data": granitedata
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamAllowAllMime: (query)  (optional)
     - parameter cqDamAllowedAssetMimes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamAllowAllMime: Bool? = nil, cqDamAllowedAssetMimes: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamAllowAllMime: cqDamAllowAllMime, cqDamAllowedAssetMimes: cqDamAllowedAssetMimes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamAllowAllMime: (query)  (optional)
     - parameter cqDamAllowedAssetMimes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo> 
     */
    open class func comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamAllowAllMime: Bool? = nil, cqDamAllowedAssetMimes: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.allow.all.mime": cqDamAllowAllMime, 
            "cq.dam.allowed.asset.mimes": cqDamAllowedAssetMimes
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamDetectAssetMimeFromContent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamDetectAssetMimeFromContent: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamDetectAssetMimeFromContent: cqDamDetectAssetMimeFromContent).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamDetectAssetMimeFromContent: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo> 
     */
    open class func comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamDetectAssetMimeFromContent: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.detect.asset.mime.from.content": cqDamDetectAssetMimeFromContent
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerIstimebased: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerTimebasedRule: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerPeriodRule: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationRecipient: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplMissingMetadataNotificationJob(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamMissingmetadataNotificationSchedulerIstimebased: Bool? = nil, cqDamMissingmetadataNotificationSchedulerTimebasedRule: String? = nil, cqDamMissingmetadataNotificationSchedulerPeriodRule: Int? = nil, cqDamMissingmetadataNotificationRecipient: String? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplMissingMetadataNotificationJobInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplMissingMetadataNotificationJobWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamMissingmetadataNotificationSchedulerIstimebased: cqDamMissingmetadataNotificationSchedulerIstimebased, cqDamMissingmetadataNotificationSchedulerTimebasedRule: cqDamMissingmetadataNotificationSchedulerTimebasedRule, cqDamMissingmetadataNotificationSchedulerPeriodRule: cqDamMissingmetadataNotificationSchedulerPeriodRule, cqDamMissingmetadataNotificationRecipient: cqDamMissingmetadataNotificationRecipient).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerIstimebased: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerTimebasedRule: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerPeriodRule: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationRecipient: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo> 
     */
    open class func comDayCqDamCoreImplMissingMetadataNotificationJobWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamMissingmetadataNotificationSchedulerIstimebased: Bool? = nil, cqDamMissingmetadataNotificationSchedulerTimebasedRule: String? = nil, cqDamMissingmetadataNotificationSchedulerPeriodRule: Int? = nil, cqDamMissingmetadataNotificationRecipient: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.missingmetadata.notification.scheduler.istimebased": cqDamMissingmetadataNotificationSchedulerIstimebased, 
            "cq.dam.missingmetadata.notification.scheduler.timebased.rule": cqDamMissingmetadataNotificationSchedulerTimebasedRule, 
            "cq.dam.missingmetadata.notification.scheduler.period.rule": cqDamMissingmetadataNotificationSchedulerPeriodRule?.encodeToJSON(), 
            "cq.dam.missingmetadata.notification.recipient": cqDamMissingmetadataNotificationRecipient
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter notifyOnComplete: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, notifyOnComplete: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, notifyOnComplete: notifyOnComplete).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter notifyOnComplete: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo> 
     */
    open class func comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, notifyOnComplete: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "process.label": processLabel, 
            "Notify on Complete": notifyOnComplete
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)
     - parameter maxExtract: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplProcessTextExtractionProcess(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeTypes: [String]? = nil, maxExtract: Int? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplProcessTextExtractionProcessInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplProcessTextExtractionProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mimeTypes: mimeTypes, maxExtract: maxExtract).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)
     - parameter maxExtract: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplProcessTextExtractionProcessInfo> 
     */
    open class func comDayCqDamCoreImplProcessTextExtractionProcessWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeTypes: [String]? = nil, maxExtract: Int? = nil) -> RequestBuilder<ComDayCqDamCoreImplProcessTextExtractionProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "mimeTypes": mimeTypes, 
            "maxExtract": maxExtract?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplProcessTextExtractionProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmpPropagate: (query)  (optional)
     - parameter xmpExcludes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplRenditionMakerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmpPropagate: Bool? = nil, xmpExcludes: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplRenditionMakerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplRenditionMakerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, xmpPropagate: xmpPropagate, xmpExcludes: xmpExcludes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmpPropagate: (query)  (optional)
     - parameter xmpExcludes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplRenditionMakerImplInfo> 
     */
    open class func comDayCqDamCoreImplRenditionMakerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmpPropagate: Bool? = nil, xmpExcludes: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplRenditionMakerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "xmp.propagate": xmpPropagate, 
            "xmp.excludes": xmpExcludes
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplRenditionMakerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryBatchSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplReportsReportExportService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryBatchSize: Int? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplReportsReportExportServiceInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplReportsReportExportServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queryBatchSize: queryBatchSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryBatchSize: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplReportsReportExportServiceInfo> 
     */
    open class func comDayCqDamCoreImplReportsReportExportServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryBatchSize: Int? = nil) -> RequestBuilder<ComDayCqDamCoreImplReportsReportExportServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "queryBatchSize": queryBatchSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplReportsReportExportServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter maxSavedReports: (query)  (optional)
     - parameter timeDuration: (query)  (optional)
     - parameter enableReportPurge: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplReportsReportPurgeService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, maxSavedReports: Int? = nil, timeDuration: Int? = nil, enableReportPurge: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplReportsReportPurgeServiceInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplReportsReportPurgeServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, maxSavedReports: maxSavedReports, timeDuration: timeDuration, enableReportPurge: enableReportPurge).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter maxSavedReports: (query)  (optional)
     - parameter timeDuration: (query)  (optional)
     - parameter enableReportPurge: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplReportsReportPurgeServiceInfo> 
     */
    open class func comDayCqDamCoreImplReportsReportPurgeServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, maxSavedReports: Int? = nil, timeDuration: Int? = nil, enableReportPurge: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplReportsReportPurgeServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.expression": schedulerExpression, 
            "maxSavedReports": maxSavedReports?.encodeToJSON(), 
            "timeDuration": timeDuration?.encodeToJSON(), 
            "enableReportPurge": enableReportPurge
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplReportsReportPurgeServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletAssetDownloadServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletAssetDownloadServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletAssetDownloadServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletAssetDownloadServletInfo> 
     */
    open class func comDayCqDamCoreImplServletAssetDownloadServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletAssetDownloadServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletAssetDownloadServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchStatusMaxassets: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletAssetStatusServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchStatusMaxassets: Int? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletAssetStatusServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletAssetStatusServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamBatchStatusMaxassets: cqDamBatchStatusMaxassets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchStatusMaxassets: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletAssetStatusServletInfo> 
     */
    open class func comDayCqDamCoreImplServletAssetStatusServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchStatusMaxassets: Int? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletAssetStatusServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.batch.status.maxassets": cqDamBatchStatusMaxassets?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletAssetStatusServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchIndesignMaxassets: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletAssetXMPSearchServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchIndesignMaxassets: Int? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletAssetXMPSearchServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletAssetXMPSearchServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamBatchIndesignMaxassets: cqDamBatchIndesignMaxassets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchIndesignMaxassets: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo> 
     */
    open class func comDayCqDamCoreImplServletAssetXMPSearchServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchIndesignMaxassets: Int? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.batch.indesign.maxassets": cqDamBatchIndesignMaxassets?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchMetadataAssetDefault: (query)  (optional)
     - parameter cqDamBatchMetadataCollectionDefault: (query)  (optional)
     - parameter cqDamBatchMetadataMaxresources: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletBatchMetadataServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchMetadataAssetDefault: [String]? = nil, cqDamBatchMetadataCollectionDefault: [String]? = nil, cqDamBatchMetadataMaxresources: Int? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletBatchMetadataServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletBatchMetadataServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamBatchMetadataAssetDefault: cqDamBatchMetadataAssetDefault, cqDamBatchMetadataCollectionDefault: cqDamBatchMetadataCollectionDefault, cqDamBatchMetadataMaxresources: cqDamBatchMetadataMaxresources).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchMetadataAssetDefault: (query)  (optional)
     - parameter cqDamBatchMetadataCollectionDefault: (query)  (optional)
     - parameter cqDamBatchMetadataMaxresources: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletBatchMetadataServletInfo> 
     */
    open class func comDayCqDamCoreImplServletBatchMetadataServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchMetadataAssetDefault: [String]? = nil, cqDamBatchMetadataCollectionDefault: [String]? = nil, cqDamBatchMetadataMaxresources: Int? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletBatchMetadataServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.batch.metadata.asset.default": cqDamBatchMetadataAssetDefault, 
            "cq.dam.batch.metadata.collection.default": cqDamBatchMetadataCollectionDefault, 
            "cq.dam.batch.metadata.maxresources": cqDamBatchMetadataMaxresources?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletBatchMetadataServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter cqDamDrmEnable: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletBinaryProviderServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: [String]? = nil, slingServletMethods: [String]? = nil, cqDamDrmEnable: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletBinaryProviderServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletBinaryProviderServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletResourceTypes: slingServletResourceTypes, slingServletMethods: slingServletMethods, cqDamDrmEnable: cqDamDrmEnable).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter cqDamDrmEnable: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletBinaryProviderServletInfo> 
     */
    open class func comDayCqDamCoreImplServletBinaryProviderServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: [String]? = nil, slingServletMethods: [String]? = nil, cqDamDrmEnable: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletBinaryProviderServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.resourceTypes": slingServletResourceTypes, 
            "sling.servlet.methods": slingServletMethods, 
            "cq.dam.drm.enable": cqDamDrmEnable
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletBinaryProviderServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchCollectionProperties: (query)  (optional)
     - parameter cqDamBatchCollectionMaxcollections: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletCollectionServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchCollectionProperties: [String]? = nil, cqDamBatchCollectionMaxcollections: Int? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletCollectionServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletCollectionServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamBatchCollectionProperties: cqDamBatchCollectionProperties, cqDamBatchCollectionMaxcollections: cqDamBatchCollectionMaxcollections).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchCollectionProperties: (query)  (optional)
     - parameter cqDamBatchCollectionMaxcollections: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletCollectionServletInfo> 
     */
    open class func comDayCqDamCoreImplServletCollectionServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchCollectionProperties: [String]? = nil, cqDamBatchCollectionMaxcollections: Int? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletCollectionServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.batch.collection.properties": cqDamBatchCollectionProperties, 
            "cq.dam.batch.collection.maxcollections": cqDamBatchCollectionMaxcollections?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletCollectionServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchCollectionsProperties: (query)  (optional)
     - parameter cqDamBatchCollectionsLimit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletCollectionsServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchCollectionsProperties: [String]? = nil, cqDamBatchCollectionsLimit: Int? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletCollectionsServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletCollectionsServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamBatchCollectionsProperties: cqDamBatchCollectionsProperties, cqDamBatchCollectionsLimit: cqDamBatchCollectionsLimit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchCollectionsProperties: (query)  (optional)
     - parameter cqDamBatchCollectionsLimit: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletCollectionsServletInfo> 
     */
    open class func comDayCqDamCoreImplServletCollectionsServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchCollectionsProperties: [String]? = nil, cqDamBatchCollectionsLimit: Int? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletCollectionsServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.batch.collections.properties": cqDamBatchCollectionsProperties, 
            "cq.dam.batch.collections.limit": cqDamBatchCollectionsLimit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletCollectionsServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter moreInfo: (query)  (optional)
     - parameter mntoverlaydamguicontentassetsmoreinfoHtmlpath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletCompanionServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, moreInfo: String? = nil, mntoverlaydamguicontentassetsmoreinfoHtmlpath: String? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletCompanionServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletCompanionServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, moreInfo: moreInfo, mntoverlaydamguicontentassetsmoreinfoHtmlpath: mntoverlaydamguicontentassetsmoreinfoHtmlpath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter moreInfo: (query)  (optional)
     - parameter mntoverlaydamguicontentassetsmoreinfoHtmlpath: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletCompanionServletInfo> 
     */
    open class func comDayCqDamCoreImplServletCompanionServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, moreInfo: String? = nil, mntoverlaydamguicontentassetsmoreinfoHtmlpath: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletCompanionServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "More Info": moreInfo, 
            "/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}": mntoverlaydamguicontentassetsmoreinfoHtmlpath
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletCompanionServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter detectDuplicate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletCreateAssetServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, detectDuplicate: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletCreateAssetServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletCreateAssetServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, detectDuplicate: detectDuplicate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter detectDuplicate: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletCreateAssetServletInfo> 
     */
    open class func comDayCqDamCoreImplServletCreateAssetServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, detectDuplicate: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletCreateAssetServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "detect_duplicate": detectDuplicate
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletCreateAssetServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqMimeTypeBlacklist: (query)  (optional)
     - parameter cqDamEmptyMime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletDamContentDispositionFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqMimeTypeBlacklist: [String]? = nil, cqDamEmptyMime: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletDamContentDispositionFilterInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletDamContentDispositionFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqMimeTypeBlacklist: cqMimeTypeBlacklist, cqDamEmptyMime: cqDamEmptyMime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqMimeTypeBlacklist: (query)  (optional)
     - parameter cqDamEmptyMime: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo> 
     */
    open class func comDayCqDamCoreImplServletDamContentDispositionFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqMimeTypeBlacklist: [String]? = nil, cqDamEmptyMime: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.mime.type.blacklist": cqMimeTypeBlacklist, 
            "cq.dam.empty.mime": cqDamEmptyMime
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamCoreGuidlookupfilterEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletGuidLookupFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamCoreGuidlookupfilterEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletGuidLookupFilterInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletGuidLookupFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamCoreGuidlookupfilterEnabled: cqDamCoreGuidlookupfilterEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamCoreGuidlookupfilterEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletGuidLookupFilterInfo> 
     */
    open class func comDayCqDamCoreImplServletGuidLookupFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamCoreGuidlookupfilterEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletGuidLookupFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.core.guidlookupfilter.enabled": cqDamCoreGuidlookupfilterEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletGuidLookupFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamSyncWorkflowId: (query)  (optional)
     - parameter cqDamSyncFolderTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletHealthCheckServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamSyncWorkflowId: String? = nil, cqDamSyncFolderTypes: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletHealthCheckServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletHealthCheckServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamSyncWorkflowId: cqDamSyncWorkflowId, cqDamSyncFolderTypes: cqDamSyncFolderTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamSyncWorkflowId: (query)  (optional)
     - parameter cqDamSyncFolderTypes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletHealthCheckServletInfo> 
     */
    open class func comDayCqDamCoreImplServletHealthCheckServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamSyncWorkflowId: String? = nil, cqDamSyncFolderTypes: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletHealthCheckServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.sync.workflow.id": cqDamSyncWorkflowId, 
            "cq.dam.sync.folder.types": cqDamSyncFolderTypes
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletHealthCheckServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletMetadataGetServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: String? = nil, slingServletMethods: String? = nil, slingServletExtensions: String? = nil, slingServletSelectors: String? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletMetadataGetServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletMetadataGetServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletResourceTypes: slingServletResourceTypes, slingServletMethods: slingServletMethods, slingServletExtensions: slingServletExtensions, slingServletSelectors: slingServletSelectors).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletMetadataGetServletInfo> 
     */
    open class func comDayCqDamCoreImplServletMetadataGetServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: String? = nil, slingServletMethods: String? = nil, slingServletExtensions: String? = nil, slingServletSelectors: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletMetadataGetServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.resourceTypes": slingServletResourceTypes, 
            "sling.servlet.methods": slingServletMethods, 
            "sling.servlet.extensions": slingServletExtensions, 
            "sling.servlet.selectors": slingServletSelectors
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletMetadataGetServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamDrmEnable: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamDrmEnable: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletMultipleLicenseAcceptServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamDrmEnable: cqDamDrmEnable).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamDrmEnable: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo> 
     */
    open class func comDayCqDamCoreImplServletMultipleLicenseAcceptServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamDrmEnable: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.drm.enable": cqDamDrmEnable
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter downloadConfig: (query)  (optional)
     - parameter viewSelector: (query)  (optional)
     - parameter sendEmail: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplServletResourceCollectionServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: [String]? = nil, slingServletMethods: String? = nil, slingServletSelectors: String? = nil, downloadConfig: String? = nil, viewSelector: String? = nil, sendEmail: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplServletResourceCollectionServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplServletResourceCollectionServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletResourceTypes: slingServletResourceTypes, slingServletMethods: slingServletMethods, slingServletSelectors: slingServletSelectors, downloadConfig: downloadConfig, viewSelector: viewSelector, sendEmail: sendEmail).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter downloadConfig: (query)  (optional)
     - parameter viewSelector: (query)  (optional)
     - parameter sendEmail: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplServletResourceCollectionServletInfo> 
     */
    open class func comDayCqDamCoreImplServletResourceCollectionServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: [String]? = nil, slingServletMethods: String? = nil, slingServletSelectors: String? = nil, downloadConfig: String? = nil, viewSelector: String? = nil, sendEmail: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletResourceCollectionServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.resourceTypes": slingServletResourceTypes, 
            "sling.servlet.methods": slingServletMethods, 
            "sling.servlet.selectors": slingServletSelectors, 
            "download.config": downloadConfig, 
            "view.selector": viewSelector, 
            "send_email": sendEmail
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletResourceCollectionServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter createPreviewEnabled: (query)  (optional)
     - parameter updatePreviewEnabled: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter folderPreviewRenditionRegex: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, createPreviewEnabled: Bool? = nil, updatePreviewEnabled: Bool? = nil, queueSize: Int? = nil, folderPreviewRenditionRegex: String? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, createPreviewEnabled: createPreviewEnabled, updatePreviewEnabled: updatePreviewEnabled, queueSize: queueSize, folderPreviewRenditionRegex: folderPreviewRenditionRegex).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter createPreviewEnabled: (query)  (optional)
     - parameter updatePreviewEnabled: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter folderPreviewRenditionRegex: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo> 
     */
    open class func comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, createPreviewEnabled: Bool? = nil, updatePreviewEnabled: Bool? = nil, queueSize: Int? = nil, folderPreviewRenditionRegex: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "createPreviewEnabled": createPreviewEnabled, 
            "updatePreviewEnabled": updatePreviewEnabled, 
            "queueSize": queueSize?.encodeToJSON(), 
            "folderPreviewRenditionRegex": folderPreviewRenditionRegex
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamConfigUnzipMaxuncompressedsize: (query)  (optional)
     - parameter cqDamConfigUnzipEncoding: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreImplUnzipUnzipConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamConfigUnzipMaxuncompressedsize: Int? = nil, cqDamConfigUnzipEncoding: String? = nil, completion: @escaping ((_ data: ComDayCqDamCoreImplUnzipUnzipConfigInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreImplUnzipUnzipConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamConfigUnzipMaxuncompressedsize: cqDamConfigUnzipMaxuncompressedsize, cqDamConfigUnzipEncoding: cqDamConfigUnzipEncoding).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamConfigUnzipMaxuncompressedsize: (query)  (optional)
     - parameter cqDamConfigUnzipEncoding: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreImplUnzipUnzipConfigInfo> 
     */
    open class func comDayCqDamCoreImplUnzipUnzipConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamConfigUnzipMaxuncompressedsize: Int? = nil, cqDamConfigUnzipEncoding: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplUnzipUnzipConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.config.unzip.maxuncompressedsize": cqDamConfigUnzipMaxuncompressedsize?.encodeToJSON(), 
            "cq.dam.config.unzip.encoding": cqDamConfigUnzipEncoding
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplUnzipUnzipConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreProcessExifToolExtractMetadataProcess(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreProcessExifToolExtractMetadataProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, cqDamEnableSha1: cqDamEnableSha1).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo> 
     */
    open class func comDayCqDamCoreProcessExifToolExtractMetadataProcessWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "process.label": processLabel, 
            "cq.dam.enable.sha1": cqDamEnableSha1
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreProcessExtractMetadataProcess(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamCoreProcessExtractMetadataProcessInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreProcessExtractMetadataProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, cqDamEnableSha1: cqDamEnableSha1).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreProcessExtractMetadataProcessInfo> 
     */
    open class func comDayCqDamCoreProcessExtractMetadataProcessWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreProcessExtractMetadataProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "process.label": processLabel, 
            "cq.dam.enable.sha1": cqDamEnableSha1
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreProcessExtractMetadataProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)
     - parameter cqDamMetadataXssprotectedProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamCoreProcessMetadataProcessorProcess(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil, cqDamMetadataXssprotectedProperties: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamCoreProcessMetadataProcessorProcessInfo?,_ error: Error?) -> Void)) {
        comDayCqDamCoreProcessMetadataProcessorProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, cqDamEnableSha1: cqDamEnableSha1, cqDamMetadataXssprotectedProperties: cqDamMetadataXssprotectedProperties).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)
     - parameter cqDamMetadataXssprotectedProperties: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamCoreProcessMetadataProcessorProcessInfo> 
     */
    open class func comDayCqDamCoreProcessMetadataProcessorProcessWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil, cqDamMetadataXssprotectedProperties: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreProcessMetadataProcessorProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "process.label": processLabel, 
            "cq.dam.enable.sha1": cqDamEnableSha1, 
            "cq.dam.metadata.xssprotected.properties": cqDamMetadataXssprotectedProperties
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamCoreProcessMetadataProcessorProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter executableSearchpath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamHandlerFfmpegLocatorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, executableSearchpath: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamHandlerFfmpegLocatorImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamHandlerFfmpegLocatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, executableSearchpath: executableSearchpath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter executableSearchpath: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamHandlerFfmpegLocatorImplInfo> 
     */
    open class func comDayCqDamHandlerFfmpegLocatorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, executableSearchpath: [String]? = nil) -> RequestBuilder<ComDayCqDamHandlerFfmpegLocatorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "executable.searchpath": executableSearchpath
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamHandlerFfmpegLocatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter fontmgrSystemFontDir: (query)  (optional)
     - parameter fontmgrAdobeFontDir: (query)  (optional)
     - parameter fontmgrCustomerFontDir: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, fontmgrSystemFontDir: [String]? = nil, fontmgrAdobeFontDir: String? = nil, fontmgrCustomerFontDir: String? = nil, completion: @escaping ((_ data: ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, fontmgrSystemFontDir: fontmgrSystemFontDir, fontmgrAdobeFontDir: fontmgrAdobeFontDir, fontmgrCustomerFontDir: fontmgrCustomerFontDir).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter fontmgrSystemFontDir: (query)  (optional)
     - parameter fontmgrAdobeFontDir: (query)  (optional)
     - parameter fontmgrCustomerFontDir: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo> 
     */
    open class func comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, fontmgrSystemFontDir: [String]? = nil, fontmgrAdobeFontDir: String? = nil, fontmgrCustomerFontDir: String? = nil) -> RequestBuilder<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.filter": eventFilter, 
            "fontmgr.system.font.dir": fontmgrSystemFontDir, 
            "fontmgr.adobe.font.dir": fontmgrAdobeFontDir, 
            "fontmgr.customer.font.dir": fontmgrCustomerFontDir
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rasterAnnotation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamHandlerStandardPdfPdfHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rasterAnnotation: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamHandlerStandardPdfPdfHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamHandlerStandardPdfPdfHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, rasterAnnotation: rasterAnnotation).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rasterAnnotation: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamHandlerStandardPdfPdfHandlerInfo> 
     */
    open class func comDayCqDamHandlerStandardPdfPdfHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rasterAnnotation: Bool? = nil) -> RequestBuilder<ComDayCqDamHandlerStandardPdfPdfHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "raster.annotation": rasterAnnotation
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamHandlerStandardPdfPdfHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rasterAnnotation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamHandlerStandardPsPostScriptHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rasterAnnotation: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamHandlerStandardPsPostScriptHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamHandlerStandardPsPostScriptHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, rasterAnnotation: rasterAnnotation).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rasterAnnotation: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo> 
     */
    open class func comDayCqDamHandlerStandardPsPostScriptHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rasterAnnotation: Bool? = nil) -> RequestBuilder<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "raster.annotation": rasterAnnotation
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamHandlerStandardPsdPsdHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileThreshold: Int? = nil, completion: @escaping ((_ data: ComDayCqDamHandlerStandardPsdPsdHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamHandlerStandardPsdPsdHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, largeFileThreshold: largeFileThreshold).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamHandlerStandardPsdPsdHandlerInfo> 
     */
    open class func comDayCqDamHandlerStandardPsdPsdHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileThreshold: Int? = nil) -> RequestBuilder<ComDayCqDamHandlerStandardPsdPsdHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "large_file_threshold": largeFileThreshold?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamHandlerStandardPsdPsdHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableMultisession: (query)  (optional)
     - parameter idsCcEnable: (query)  (optional)
     - parameter enableRetry: (query)  (optional)
     - parameter enableRetryScripterror: (query)  (optional)
     - parameter externalizerDomainCqhost: (query)  (optional)
     - parameter externalizerDomainHttp: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamIdsImplIDSJobProcessor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableMultisession: Bool? = nil, idsCcEnable: Bool? = nil, enableRetry: Bool? = nil, enableRetryScripterror: Bool? = nil, externalizerDomainCqhost: String? = nil, externalizerDomainHttp: String? = nil, completion: @escaping ((_ data: ComDayCqDamIdsImplIDSJobProcessorInfo?,_ error: Error?) -> Void)) {
        comDayCqDamIdsImplIDSJobProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enableMultisession: enableMultisession, idsCcEnable: idsCcEnable, enableRetry: enableRetry, enableRetryScripterror: enableRetryScripterror, externalizerDomainCqhost: externalizerDomainCqhost, externalizerDomainHttp: externalizerDomainHttp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableMultisession: (query)  (optional)
     - parameter idsCcEnable: (query)  (optional)
     - parameter enableRetry: (query)  (optional)
     - parameter enableRetryScripterror: (query)  (optional)
     - parameter externalizerDomainCqhost: (query)  (optional)
     - parameter externalizerDomainHttp: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamIdsImplIDSJobProcessorInfo> 
     */
    open class func comDayCqDamIdsImplIDSJobProcessorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableMultisession: Bool? = nil, idsCcEnable: Bool? = nil, enableRetry: Bool? = nil, enableRetryScripterror: Bool? = nil, externalizerDomainCqhost: String? = nil, externalizerDomainHttp: String? = nil) -> RequestBuilder<ComDayCqDamIdsImplIDSJobProcessorInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enable.multisession": enableMultisession, 
            "ids.cc.enable": idsCcEnable, 
            "enable.retry": enableRetry, 
            "enable.retry.scripterror": enableRetryScripterror, 
            "externalizer.domain.cqhost": externalizerDomainCqhost, 
            "externalizer.domain.http": externalizerDomainHttp
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamIdsImplIDSJobProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxErrorsToBlacklist: (query)  (optional)
     - parameter retryIntervalToWhitelist: (query)  (optional)
     - parameter connectTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter connectionUseMax: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamIdsImplIDSPoolManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxErrorsToBlacklist: Int? = nil, retryIntervalToWhitelist: Int? = nil, connectTimeout: Int? = nil, socketTimeout: Int? = nil, processLabel: String? = nil, connectionUseMax: Int? = nil, completion: @escaping ((_ data: ComDayCqDamIdsImplIDSPoolManagerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamIdsImplIDSPoolManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxErrorsToBlacklist: maxErrorsToBlacklist, retryIntervalToWhitelist: retryIntervalToWhitelist, connectTimeout: connectTimeout, socketTimeout: socketTimeout, processLabel: processLabel, connectionUseMax: connectionUseMax).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxErrorsToBlacklist: (query)  (optional)
     - parameter retryIntervalToWhitelist: (query)  (optional)
     - parameter connectTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter connectionUseMax: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamIdsImplIDSPoolManagerImplInfo> 
     */
    open class func comDayCqDamIdsImplIDSPoolManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxErrorsToBlacklist: Int? = nil, retryIntervalToWhitelist: Int? = nil, connectTimeout: Int? = nil, socketTimeout: Int? = nil, processLabel: String? = nil, connectionUseMax: Int? = nil) -> RequestBuilder<ComDayCqDamIdsImplIDSPoolManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "max.errors.to.blacklist": maxErrorsToBlacklist?.encodeToJSON(), 
            "retry.interval.to.whitelist": retryIntervalToWhitelist?.encodeToJSON(), 
            "connect.timeout": connectTimeout?.encodeToJSON(), 
            "socket.timeout": socketTimeout?.encodeToJSON(), 
            "process.label": processLabel, 
            "connection.use.max": connectionUseMax?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamIdsImplIDSPoolManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter extractPages: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamInddImplHandlerIndesignXMPHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, extractPages: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamInddImplHandlerIndesignXMPHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, extractPages: extractPages).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter extractPages: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo> 
     */
    open class func comDayCqDamInddImplHandlerIndesignXMPHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, extractPages: Bool? = nil) -> RequestBuilder<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "process.label": processLabel, 
            "extract.pages": extractPages
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter snippetcreationMaxcollections: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamInddImplServletSnippetCreationServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, snippetcreationMaxcollections: Int? = nil, completion: @escaping ((_ data: ComDayCqDamInddImplServletSnippetCreationServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamInddImplServletSnippetCreationServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, snippetcreationMaxcollections: snippetcreationMaxcollections).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter snippetcreationMaxcollections: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamInddImplServletSnippetCreationServletInfo> 
     */
    open class func comDayCqDamInddImplServletSnippetCreationServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, snippetcreationMaxcollections: Int? = nil) -> RequestBuilder<ComDayCqDamInddImplServletSnippetCreationServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "snippetcreation.maxcollections": snippetcreationMaxcollections?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamInddImplServletSnippetCreationServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamInddPagesRegex: (query)  (optional)
     - parameter idsJobDecoupled: (query)  (optional)
     - parameter idsJobWorkflowModel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamInddProcessINDDMediaExtractProcess(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamInddPagesRegex: String? = nil, idsJobDecoupled: Bool? = nil, idsJobWorkflowModel: String? = nil, completion: @escaping ((_ data: ComDayCqDamInddProcessINDDMediaExtractProcessInfo?,_ error: Error?) -> Void)) {
        comDayCqDamInddProcessINDDMediaExtractProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, cqDamInddPagesRegex: cqDamInddPagesRegex, idsJobDecoupled: idsJobDecoupled, idsJobWorkflowModel: idsJobWorkflowModel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamInddPagesRegex: (query)  (optional)
     - parameter idsJobDecoupled: (query)  (optional)
     - parameter idsJobWorkflowModel: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamInddProcessINDDMediaExtractProcessInfo> 
     */
    open class func comDayCqDamInddProcessINDDMediaExtractProcessWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamInddPagesRegex: String? = nil, idsJobDecoupled: Bool? = nil, idsJobWorkflowModel: String? = nil) -> RequestBuilder<ComDayCqDamInddProcessINDDMediaExtractProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "process.label": processLabel, 
            "cq.dam.indd.pages.regex": cqDamInddPagesRegex, 
            "ids.job.decoupled": idsJobDecoupled, 
            "ids.job.workflow.model": idsJobWorkflowModel
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamInddProcessINDDMediaExtractProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter batchCommitSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, batchCommitSize: Int? = nil, completion: @escaping ((_ data: ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, batchCommitSize: batchCommitSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter batchCommitSize: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo> 
     */
    open class func comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, batchCommitSize: Int? = nil) -> RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "batch.commit.size": batchCommitSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, completion: @escaping ((_ data: ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo?,_ error: Error?) -> Void)) {
        comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo> 
     */
    open class func comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil) -> RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.expression": schedulerExpression
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deleteZipFile: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deleteZipFile: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo?,_ error: Error?) -> Void)) {
        comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, deleteZipFile: deleteZipFile).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deleteZipFile: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo> 
     */
    open class func comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deleteZipFile: Bool? = nil) -> RequestBuilder<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "delete.zip.file": deleteZipFile
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damDynamicmediaconfigeventlistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damDynamicmediaconfigeventlistenerEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo?,_ error: Error?) -> Void)) {
        comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamS7damDynamicmediaconfigeventlistenerEnabled: cqDamS7damDynamicmediaconfigeventlistenerEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damDynamicmediaconfigeventlistenerEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo> 
     */
    open class func comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damDynamicmediaconfigeventlistenerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled": cqDamS7damDynamicmediaconfigeventlistenerEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, schedulerConcurrent: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, schedulerConcurrent: schedulerConcurrent).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo> 
     */
    open class func comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, schedulerConcurrent: Bool? = nil) -> RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.expression": schedulerExpression, 
            "scheduler.concurrent": schedulerConcurrent
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingPostOperation: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamS7damCommonPostServletsSetCreateHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingPostOperation: String? = nil, slingServletMethods: String? = nil, completion: @escaping ((_ data: ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamS7damCommonPostServletsSetCreateHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingPostOperation: slingPostOperation, slingServletMethods: slingServletMethods).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingPostOperation: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo> 
     */
    open class func comDayCqDamS7damCommonPostServletsSetCreateHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingPostOperation: String? = nil, slingServletMethods: String? = nil) -> RequestBuilder<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.post.operation": slingPostOperation, 
            "sling.servlet.methods": slingServletMethods
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingPostOperation: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamS7damCommonPostServletsSetModifyHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingPostOperation: String? = nil, slingServletMethods: String? = nil, completion: @escaping ((_ data: ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamS7damCommonPostServletsSetModifyHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingPostOperation: slingPostOperation, slingServletMethods: slingServletMethods).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingPostOperation: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo> 
     */
    open class func comDayCqDamS7damCommonPostServletsSetModifyHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingPostOperation: String? = nil, slingServletMethods: String? = nil) -> RequestBuilder<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.post.operation": slingPostOperation, 
            "sling.servlet.methods": slingServletMethods
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, completion: @escaping ((_ data: ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo?,_ error: Error?) -> Void)) {
        comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo> 
     */
    open class func comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil) -> RequestBuilder<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "process.label": processLabel
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damDamchangeeventlistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamS7damCommonS7damDamChangeEventListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damDamchangeeventlistenerEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamS7damCommonS7damDamChangeEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamS7damDamchangeeventlistenerEnabled: cqDamS7damDamchangeeventlistenerEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damDamchangeeventlistenerEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo> 
     */
    open class func comDayCqDamS7damCommonS7damDamChangeEventListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damDamchangeeventlistenerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.s7dam.damchangeeventlistener.enabled": cqDamS7damDamchangeeventlistenerEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamS7damCommonServletsS7damProductInfoServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, slingServletMethods: String? = nil, completion: @escaping ((_ data: ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamS7damCommonServletsS7damProductInfoServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletPaths: slingServletPaths, slingServletMethods: slingServletMethods).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo> 
     */
    open class func comDayCqDamS7damCommonServletsS7damProductInfoServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, slingServletMethods: String? = nil) -> RequestBuilder<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.paths": slingServletPaths, 
            "sling.servlet.methods": slingServletMethods
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: Int? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: Int? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: Int? = nil, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: Int? = nil, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: Int? = nil, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: Int? = nil, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: Int? = nil, completion: @escaping ((_ data: ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: cqDamS7damVideoproxyclientserviceUploadprogressIntervalName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo> 
     */
    open class func comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: Int? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: Int? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: Int? = nil, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: Int? = nil, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: Int? = nil, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: Int? = nil, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: Int? = nil) -> RequestBuilder<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name": cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName?.encodeToJSON(), 
            "cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name": cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName?.encodeToJSON(), 
            "cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name": cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName?.encodeToJSON(), 
            "cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name": cqDamS7damVideoproxyclientserviceHttpReadtimeoutName?.encodeToJSON(), 
            "cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name": cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName?.encodeToJSON(), 
            "cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name": cqDamS7damVideoproxyclientserviceHttpMaxretrycountName?.encodeToJSON(), 
            "cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name": cqDamS7damVideoproxyclientserviceUploadprogressIntervalName?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7ApiclientRecordsperpageNofilterName: (query)  (optional)
     - parameter cqDamScene7ApiclientRecordsperpageWithfilterName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamScene7ImplScene7APIClientImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7ApiclientRecordsperpageNofilterName: Int? = nil, cqDamScene7ApiclientRecordsperpageWithfilterName: Int? = nil, completion: @escaping ((_ data: ComDayCqDamScene7ImplScene7APIClientImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamScene7ImplScene7APIClientImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamScene7ApiclientRecordsperpageNofilterName: cqDamScene7ApiclientRecordsperpageNofilterName, cqDamScene7ApiclientRecordsperpageWithfilterName: cqDamScene7ApiclientRecordsperpageWithfilterName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7ApiclientRecordsperpageNofilterName: (query)  (optional)
     - parameter cqDamScene7ApiclientRecordsperpageWithfilterName: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7APIClientImplInfo> 
     */
    open class func comDayCqDamScene7ImplScene7APIClientImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7ApiclientRecordsperpageNofilterName: Int? = nil, cqDamScene7ApiclientRecordsperpageWithfilterName: Int? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7APIClientImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.scene7.apiclient.recordsperpage.nofilter.name": cqDamScene7ApiclientRecordsperpageNofilterName?.encodeToJSON(), 
            "cq.dam.scene7.apiclient.recordsperpage.withfilter.name": cqDamScene7ApiclientRecordsperpageWithfilterName?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7APIClientImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7AssetmimetypeserviceMapping: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7AssetmimetypeserviceMapping: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamScene7AssetmimetypeserviceMapping: cqDamScene7AssetmimetypeserviceMapping).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7AssetmimetypeserviceMapping: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo> 
     */
    open class func comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7AssetmimetypeserviceMapping: [String]? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.scene7.assetmimetypeservice.mapping": cqDamScene7AssetmimetypeserviceMapping
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7ConfigurationeventlistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamScene7ImplScene7ConfigurationEventListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7ConfigurationeventlistenerEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamScene7ImplScene7ConfigurationEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamScene7ConfigurationeventlistenerEnabled: cqDamScene7ConfigurationeventlistenerEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7ConfigurationeventlistenerEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo> 
     */
    open class func comDayCqDamScene7ImplScene7ConfigurationEventListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7ConfigurationeventlistenerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.scene7.configurationeventlistener.enabled": cqDamScene7ConfigurationeventlistenerEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7DamchangeeventlistenerEnabled: (query)  (optional)
     - parameter cqDamScene7DamchangeeventlistenerObservedPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamScene7ImplScene7DamChangeEventListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7DamchangeeventlistenerEnabled: Bool? = nil, cqDamScene7DamchangeeventlistenerObservedPaths: [String]? = nil, completion: @escaping ((_ data: ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamScene7ImplScene7DamChangeEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamScene7DamchangeeventlistenerEnabled: cqDamScene7DamchangeeventlistenerEnabled, cqDamScene7DamchangeeventlistenerObservedPaths: cqDamScene7DamchangeeventlistenerObservedPaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7DamchangeeventlistenerEnabled: (query)  (optional)
     - parameter cqDamScene7DamchangeeventlistenerObservedPaths: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo> 
     */
    open class func comDayCqDamScene7ImplScene7DamChangeEventListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7DamchangeeventlistenerEnabled: Bool? = nil, cqDamScene7DamchangeeventlistenerObservedPaths: [String]? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.scene7.damchangeeventlistener.enabled": cqDamScene7DamchangeeventlistenerEnabled, 
            "cq.dam.scene7.damchangeeventlistener.observed.paths": cqDamScene7DamchangeeventlistenerObservedPaths
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scene7FlashTemplatesRti: (query)  (optional)
     - parameter scene7FlashTemplatesRsi: (query)  (optional)
     - parameter scene7FlashTemplatesRb: (query)  (optional)
     - parameter scene7FlashTemplatesRurl: (query)  (optional)
     - parameter scene7FlashTemplateUrlFormatParameter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scene7FlashTemplatesRti: String? = nil, scene7FlashTemplatesRsi: String? = nil, scene7FlashTemplatesRb: String? = nil, scene7FlashTemplatesRurl: String? = nil, scene7FlashTemplateUrlFormatParameter: String? = nil, completion: @escaping ((_ data: ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamScene7ImplScene7FlashTemplatesServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, scene7FlashTemplatesRti: scene7FlashTemplatesRti, scene7FlashTemplatesRsi: scene7FlashTemplatesRsi, scene7FlashTemplatesRb: scene7FlashTemplatesRb, scene7FlashTemplatesRurl: scene7FlashTemplatesRurl, scene7FlashTemplateUrlFormatParameter: scene7FlashTemplateUrlFormatParameter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scene7FlashTemplatesRti: (query)  (optional)
     - parameter scene7FlashTemplatesRsi: (query)  (optional)
     - parameter scene7FlashTemplatesRb: (query)  (optional)
     - parameter scene7FlashTemplatesRurl: (query)  (optional)
     - parameter scene7FlashTemplateUrlFormatParameter: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo> 
     */
    open class func comDayCqDamScene7ImplScene7FlashTemplatesServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scene7FlashTemplatesRti: String? = nil, scene7FlashTemplatesRsi: String? = nil, scene7FlashTemplatesRb: String? = nil, scene7FlashTemplatesRurl: String? = nil, scene7FlashTemplateUrlFormatParameter: String? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scene7FlashTemplates.rti": scene7FlashTemplatesRti, 
            "scene7FlashTemplates.rsi": scene7FlashTemplatesRsi, 
            "scene7FlashTemplates.rb": scene7FlashTemplatesRb, 
            "scene7FlashTemplates.rurl": scene7FlashTemplatesRurl, 
            "scene7FlashTemplate.urlFormatParameter": scene7FlashTemplateUrlFormatParameter
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7UploadserviceActivejobtimeoutLabel: (query)  (optional)
     - parameter cqDamScene7UploadserviceConnectionmaxperrouteLabel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamScene7ImplScene7UploadServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7UploadserviceActivejobtimeoutLabel: Int? = nil, cqDamScene7UploadserviceConnectionmaxperrouteLabel: Int? = nil, completion: @escaping ((_ data: ComDayCqDamScene7ImplScene7UploadServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqDamScene7ImplScene7UploadServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamScene7UploadserviceActivejobtimeoutLabel: cqDamScene7UploadserviceActivejobtimeoutLabel, cqDamScene7UploadserviceConnectionmaxperrouteLabel: cqDamScene7UploadserviceConnectionmaxperrouteLabel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7UploadserviceActivejobtimeoutLabel: (query)  (optional)
     - parameter cqDamScene7UploadserviceConnectionmaxperrouteLabel: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7UploadServiceImplInfo> 
     */
    open class func comDayCqDamScene7ImplScene7UploadServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7UploadserviceActivejobtimeoutLabel: Int? = nil, cqDamScene7UploadserviceConnectionmaxperrouteLabel: Int? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7UploadServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.dam.scene7.uploadservice.activejobtimeout.label": cqDamScene7UploadserviceActivejobtimeoutLabel?.encodeToJSON(), 
            "cq.dam.scene7.uploadservice.connectionmaxperroute.label": cqDamScene7UploadserviceConnectionmaxperrouteLabel?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7UploadServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getCacheExpirationUnit: (query)  (optional)
     - parameter getCacheExpirationValue: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getCacheExpirationUnit: String? = nil, getCacheExpirationValue: Int? = nil, completion: @escaping ((_ data: ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo?,_ error: Error?) -> Void)) {
        comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, getCacheExpirationUnit: getCacheExpirationUnit, getCacheExpirationValue: getCacheExpirationValue).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getCacheExpirationUnit: (query)  (optional)
     - parameter getCacheExpirationValue: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo> 
     */
    open class func comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getCacheExpirationUnit: String? = nil, getCacheExpirationValue: Int? = nil) -> RequestBuilder<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "getCacheExpirationUnit": getCacheExpirationUnit, 
            "getCacheExpirationValue": getCacheExpirationValue?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter locale: (query)  (optional)
     - parameter imsConfig: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamStockIntegrationImplConfigurationStockConfiguration(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, locale: String? = nil, imsConfig: String? = nil, completion: @escaping ((_ data: ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo?,_ error: Error?) -> Void)) {
        comDayCqDamStockIntegrationImplConfigurationStockConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, locale: locale, imsConfig: imsConfig).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter locale: (query)  (optional)
     - parameter imsConfig: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo> 
     */
    open class func comDayCqDamStockIntegrationImplConfigurationStockConfigurationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, locale: String? = nil, imsConfig: String? = nil) -> RequestBuilder<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "locale": locale, 
            "imsConfig": imsConfig
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqDamVideoImplServletVideoTestServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqDamVideoImplServletVideoTestServletInfo?,_ error: Error?) -> Void)) {
        comDayCqDamVideoImplServletVideoTestServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqDamVideoImplServletVideoTestServletInfo> 
     */
    open class func comDayCqDamVideoImplServletVideoTestServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<ComDayCqDamVideoImplServletVideoTestServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqDamVideoImplServletVideoTestServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxWidth: (query)  (optional)
     - parameter maxHeight: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqExtwidgetServletsImageSpriteServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, completion: @escaping ((_ data: ComDayCqExtwidgetServletsImageSpriteServletInfo?,_ error: Error?) -> Void)) {
        comDayCqExtwidgetServletsImageSpriteServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxWidth: maxWidth, maxHeight: maxHeight).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxWidth: (query)  (optional)
     - parameter maxHeight: (query)  (optional)
     - returns: RequestBuilder<ComDayCqExtwidgetServletsImageSpriteServletInfo> 
     */
    open class func comDayCqExtwidgetServletsImageSpriteServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil) -> RequestBuilder<ComDayCqExtwidgetServletsImageSpriteServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "maxWidth": maxWidth?.encodeToJSON(), 
            "maxHeight": maxHeight?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqExtwidgetServletsImageSpriteServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fontpath: (query)  (optional)
     - parameter oversamplingFactor: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqImageInternalFontFontHelper(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fontpath: [String]? = nil, oversamplingFactor: Int? = nil, completion: @escaping ((_ data: ComDayCqImageInternalFontFontHelperInfo?,_ error: Error?) -> Void)) {
        comDayCqImageInternalFontFontHelperWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fontpath: fontpath, oversamplingFactor: oversamplingFactor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.image.internal.font.FontHelper
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fontpath: (query)  (optional)
     - parameter oversamplingFactor: (query)  (optional)
     - returns: RequestBuilder<ComDayCqImageInternalFontFontHelperInfo> 
     */
    open class func comDayCqImageInternalFontFontHelperWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fontpath: [String]? = nil, oversamplingFactor: Int? = nil) -> RequestBuilder<ComDayCqImageInternalFontFontHelperInfo> {
        let path = "/system/console/configMgr/com.day.cq.image.internal.font.FontHelper"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "fontpath": fontpath, 
            "oversamplingFactor": oversamplingFactor?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqImageInternalFontFontHelperInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter clusterLevelEnable: (query)  (optional)
     - parameter clusterMasterLevel: (query)  (optional)
     - parameter clusterSlaveLevel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqJcrclustersupportClusterStartLevelController(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, clusterLevelEnable: Bool? = nil, clusterMasterLevel: Int? = nil, clusterSlaveLevel: Int? = nil, completion: @escaping ((_ data: ComDayCqJcrclustersupportClusterStartLevelControllerInfo?,_ error: Error?) -> Void)) {
        comDayCqJcrclustersupportClusterStartLevelControllerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, clusterLevelEnable: clusterLevelEnable, clusterMasterLevel: clusterMasterLevel, clusterSlaveLevel: clusterSlaveLevel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter clusterLevelEnable: (query)  (optional)
     - parameter clusterMasterLevel: (query)  (optional)
     - parameter clusterSlaveLevel: (query)  (optional)
     - returns: RequestBuilder<ComDayCqJcrclustersupportClusterStartLevelControllerInfo> 
     */
    open class func comDayCqJcrclustersupportClusterStartLevelControllerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, clusterLevelEnable: Bool? = nil, clusterMasterLevel: Int? = nil, clusterSlaveLevel: Int? = nil) -> RequestBuilder<ComDayCqJcrclustersupportClusterStartLevelControllerInfo> {
        let path = "/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cluster.level.enable": clusterLevelEnable, 
            "cluster.master.level": clusterMasterLevel?.encodeToJSON(), 
            "cluster.slave.level": clusterSlaveLevel?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqJcrclustersupportClusterStartLevelControllerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter smtpHost: (query)  (optional)
     - parameter smtpPort: (query)  (optional)
     - parameter smtpUser: (query)  (optional)
     - parameter smtpPassword: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter smtpSsl: (query)  (optional)
     - parameter smtpStarttls: (query)  (optional)
     - parameter debugEmail: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMailerDefaultMailService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, smtpHost: String? = nil, smtpPort: Int? = nil, smtpUser: String? = nil, smtpPassword: String? = nil, fromAddress: String? = nil, smtpSsl: Bool? = nil, smtpStarttls: Bool? = nil, debugEmail: Bool? = nil, completion: @escaping ((_ data: ComDayCqMailerDefaultMailServiceInfo?,_ error: Error?) -> Void)) {
        comDayCqMailerDefaultMailServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, smtpHost: smtpHost, smtpPort: smtpPort, smtpUser: smtpUser, smtpPassword: smtpPassword, fromAddress: fromAddress, smtpSsl: smtpSsl, smtpStarttls: smtpStarttls, debugEmail: debugEmail).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mailer.DefaultMailService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter smtpHost: (query)  (optional)
     - parameter smtpPort: (query)  (optional)
     - parameter smtpUser: (query)  (optional)
     - parameter smtpPassword: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter smtpSsl: (query)  (optional)
     - parameter smtpStarttls: (query)  (optional)
     - parameter debugEmail: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMailerDefaultMailServiceInfo> 
     */
    open class func comDayCqMailerDefaultMailServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, smtpHost: String? = nil, smtpPort: Int? = nil, smtpUser: String? = nil, smtpPassword: String? = nil, fromAddress: String? = nil, smtpSsl: Bool? = nil, smtpStarttls: Bool? = nil, debugEmail: Bool? = nil) -> RequestBuilder<ComDayCqMailerDefaultMailServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.mailer.DefaultMailService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "smtp.host": smtpHost, 
            "smtp.port": smtpPort?.encodeToJSON(), 
            "smtp.user": smtpUser, 
            "smtp.password": smtpPassword, 
            "from.address": fromAddress, 
            "smtp.ssl": smtpSsl, 
            "smtp.starttls": smtpStarttls, 
            "debug.email": debugEmail
        ])

        let requestBuilder: RequestBuilder<ComDayCqMailerDefaultMailServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRecipientCount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMailerImplCqMailingService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRecipientCount: String? = nil, completion: @escaping ((_ data: ComDayCqMailerImplCqMailingServiceInfo?,_ error: Error?) -> Void)) {
        comDayCqMailerImplCqMailingServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxRecipientCount: maxRecipientCount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mailer.impl.CqMailingService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRecipientCount: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMailerImplCqMailingServiceInfo> 
     */
    open class func comDayCqMailerImplCqMailingServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRecipientCount: String? = nil) -> RequestBuilder<ComDayCqMailerImplCqMailingServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "max.recipient.count": maxRecipientCount
        ])

        let requestBuilder: RequestBuilder<ComDayCqMailerImplCqMailingServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mailerEmailCharset: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMailerImplEmailCqEmailTemplateFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mailerEmailCharset: String? = nil, completion: @escaping ((_ data: ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqMailerImplEmailCqEmailTemplateFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mailerEmailCharset: mailerEmailCharset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mailerEmailCharset: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo> 
     */
    open class func comDayCqMailerImplEmailCqEmailTemplateFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mailerEmailCharset: String? = nil) -> RequestBuilder<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "mailer.email.charset": mailerEmailCharset
        ])

        let requestBuilder: RequestBuilder<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mailerEmailEmbed: (query)  (optional)
     - parameter mailerEmailCharset: (query)  (optional)
     - parameter mailerEmailRetrieverUserID: (query)  (optional)
     - parameter mailerEmailRetrieverUserPWD: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMailerImplEmailCqRetrieverTemplateFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mailerEmailEmbed: Bool? = nil, mailerEmailCharset: String? = nil, mailerEmailRetrieverUserID: String? = nil, mailerEmailRetrieverUserPWD: String? = nil, completion: @escaping ((_ data: ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqMailerImplEmailCqRetrieverTemplateFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mailerEmailEmbed: mailerEmailEmbed, mailerEmailCharset: mailerEmailCharset, mailerEmailRetrieverUserID: mailerEmailRetrieverUserID, mailerEmailRetrieverUserPWD: mailerEmailRetrieverUserPWD).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mailerEmailEmbed: (query)  (optional)
     - parameter mailerEmailCharset: (query)  (optional)
     - parameter mailerEmailRetrieverUserID: (query)  (optional)
     - parameter mailerEmailRetrieverUserPWD: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo> 
     */
    open class func comDayCqMailerImplEmailCqRetrieverTemplateFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mailerEmailEmbed: Bool? = nil, mailerEmailCharset: String? = nil, mailerEmailRetrieverUserID: String? = nil, mailerEmailRetrieverUserPWD: String? = nil) -> RequestBuilder<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "mailer.email.embed": mailerEmailEmbed, 
            "mailer.email.charset": mailerEmailCharset, 
            "mailer.email.retrieverUserID": mailerEmailRetrieverUserID, 
            "mailer.email.retrieverUserPWD": mailerEmailRetrieverUserPWD
        ])

        let requestBuilder: RequestBuilder<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aemMcmCampaignFormConstraints: (query)  (optional)
     - parameter aemMcmCampaignPublicUrl: (query)  (optional)
     - parameter aemMcmCampaignRelaxedSSL: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMcmCampaignImplIntegrationConfigImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aemMcmCampaignFormConstraints: [String]? = nil, aemMcmCampaignPublicUrl: String? = nil, aemMcmCampaignRelaxedSSL: Bool? = nil, completion: @escaping ((_ data: ComDayCqMcmCampaignImplIntegrationConfigImplInfo?,_ error: Error?) -> Void)) {
        comDayCqMcmCampaignImplIntegrationConfigImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, aemMcmCampaignFormConstraints: aemMcmCampaignFormConstraints, aemMcmCampaignPublicUrl: aemMcmCampaignPublicUrl, aemMcmCampaignRelaxedSSL: aemMcmCampaignRelaxedSSL).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aemMcmCampaignFormConstraints: (query)  (optional)
     - parameter aemMcmCampaignPublicUrl: (query)  (optional)
     - parameter aemMcmCampaignRelaxedSSL: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMcmCampaignImplIntegrationConfigImplInfo> 
     */
    open class func comDayCqMcmCampaignImplIntegrationConfigImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aemMcmCampaignFormConstraints: [String]? = nil, aemMcmCampaignPublicUrl: String? = nil, aemMcmCampaignRelaxedSSL: Bool? = nil) -> RequestBuilder<ComDayCqMcmCampaignImplIntegrationConfigImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "aem.mcm.campaign.formConstraints": aemMcmCampaignFormConstraints, 
            "aem.mcm.campaign.publicUrl": aemMcmCampaignPublicUrl, 
            "aem.mcm.campaign.relaxedSSL": aemMcmCampaignRelaxedSSL
        ])

        let requestBuilder: RequestBuilder<ComDayCqMcmCampaignImplIntegrationConfigImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo> 
     */
    open class func comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter senderHost: (query)  (optional)
     - parameter maxBounceCount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fromAddress: String? = nil, senderHost: String? = nil, maxBounceCount: String? = nil, completion: @escaping ((_ data: ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqMcmCoreNewsletterNewsletterEmailServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fromAddress: fromAddress, senderHost: senderHost, maxBounceCount: maxBounceCount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter senderHost: (query)  (optional)
     - parameter maxBounceCount: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo> 
     */
    open class func comDayCqMcmCoreNewsletterNewsletterEmailServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fromAddress: String? = nil, senderHost: String? = nil, maxBounceCount: String? = nil) -> RequestBuilder<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "from.address": fromAddress, 
            "sender.host": senderHost, 
            "max.bounce.count": maxBounceCount
        ])

        let requestBuilder: RequestBuilder<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter experienceIndirection: (query)  (optional)
     - parameter touchpointIndirection: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMcmImplMCMConfiguration(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, experienceIndirection: [String]? = nil, touchpointIndirection: [String]? = nil, completion: @escaping ((_ data: ComDayCqMcmImplMCMConfigurationInfo?,_ error: Error?) -> Void)) {
        comDayCqMcmImplMCMConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, experienceIndirection: experienceIndirection, touchpointIndirection: touchpointIndirection).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter experienceIndirection: (query)  (optional)
     - parameter touchpointIndirection: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMcmImplMCMConfigurationInfo> 
     */
    open class func comDayCqMcmImplMCMConfigurationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, experienceIndirection: [String]? = nil, touchpointIndirection: [String]? = nil) -> RequestBuilder<ComDayCqMcmImplMCMConfigurationInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "experience.indirection": experienceIndirection, 
            "touchpoint.indirection": touchpointIndirection
        ])

        let requestBuilder: RequestBuilder<ComDayCqMcmImplMCMConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: @escaping ((_ data: ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo?,_ error: Error?) -> Void)) {
        comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo> 
     */
    open class func comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern, 
            "component.resourceType": componentResourceType
        ])

        let requestBuilder: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: @escaping ((_ data: ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo?,_ error: Error?) -> Void)) {
        comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo> 
     */
    open class func comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern, 
            "component.resourceType": componentResourceType
        ])

        let requestBuilder: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo?,_ error: Error?) -> Void)) {
        comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo> 
     */
    open class func comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo?,_ error: Error?) -> Void)) {
        comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo> 
     */
    open class func comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: @escaping ((_ data: ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo?,_ error: Error?) -> Void)) {
        comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - returns: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo> 
     */
    open class func comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern, 
            "component.resourceType": componentResourceType
        ])

        let requestBuilder: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqNotificationImplNotificationServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, completion: @escaping ((_ data: ComDayCqNotificationImplNotificationServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqNotificationImplNotificationServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - returns: RequestBuilder<ComDayCqNotificationImplNotificationServiceImplInfo> 
     */
    open class func comDayCqNotificationImplNotificationServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil) -> RequestBuilder<ComDayCqNotificationImplNotificationServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.filter": eventFilter
        ])

        let requestBuilder: RequestBuilder<ComDayCqNotificationImplNotificationServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter forcelocation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, forcelocation: Bool? = nil, completion: @escaping ((_ data: ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo?,_ error: Error?) -> Void)) {
        comDayCqPersonalizationImplServletsTargetingConfigurationServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, forcelocation: forcelocation).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter forcelocation: (query)  (optional)
     - returns: RequestBuilder<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo> 
     */
    open class func comDayCqPersonalizationImplServletsTargetingConfigurationServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, forcelocation: Bool? = nil) -> RequestBuilder<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "forcelocation": forcelocation
        ])

        let requestBuilder: RequestBuilder<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter _id: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter reference: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter source: (query)  (optional)
     - parameter target: (query)  (optional)
     - parameter login: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqPollingImporterImplManagedPollConfigImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, _id: String? = nil, enabled: Bool? = nil, reference: Bool? = nil, interval: Int? = nil, expression: String? = nil, source: String? = nil, target: String? = nil, login: String? = nil, password: String? = nil, completion: @escaping ((_ data: ComDayCqPollingImporterImplManagedPollConfigImplInfo?,_ error: Error?) -> Void)) {
        comDayCqPollingImporterImplManagedPollConfigImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, _id: _id, enabled: enabled, reference: reference, interval: interval, expression: expression, source: source, target: target, login: login, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter _id: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter reference: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter source: (query)  (optional)
     - parameter target: (query)  (optional)
     - parameter login: (query)  (optional)
     - parameter password: (query)  (optional)
     - returns: RequestBuilder<ComDayCqPollingImporterImplManagedPollConfigImplInfo> 
     */
    open class func comDayCqPollingImporterImplManagedPollConfigImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, _id: String? = nil, enabled: Bool? = nil, reference: Bool? = nil, interval: Int? = nil, expression: String? = nil, source: String? = nil, target: String? = nil, login: String? = nil, password: String? = nil) -> RequestBuilder<ComDayCqPollingImporterImplManagedPollConfigImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "id": _id, 
            "enabled": enabled, 
            "reference": reference, 
            "interval": interval?.encodeToJSON(), 
            "expression": expression, 
            "source": source, 
            "target": target, 
            "login": login, 
            "password": password
        ])

        let requestBuilder: RequestBuilder<ComDayCqPollingImporterImplManagedPollConfigImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerUser: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqPollingImporterImplManagedPollingImporterImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerUser: String? = nil, completion: @escaping ((_ data: ComDayCqPollingImporterImplManagedPollingImporterImplInfo?,_ error: Error?) -> Void)) {
        comDayCqPollingImporterImplManagedPollingImporterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, importerUser: importerUser).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerUser: (query)  (optional)
     - returns: RequestBuilder<ComDayCqPollingImporterImplManagedPollingImporterImplInfo> 
     */
    open class func comDayCqPollingImporterImplManagedPollingImporterImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerUser: String? = nil) -> RequestBuilder<ComDayCqPollingImporterImplManagedPollingImporterImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "importer.user": importerUser
        ])

        let requestBuilder: RequestBuilder<ComDayCqPollingImporterImplManagedPollingImporterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerMinInterval: (query)  (optional)
     - parameter importerUser: (query)  (optional)
     - parameter excludePaths: (query)  (optional)
     - parameter includePaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqPollingImporterImplPollingImporterImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerMinInterval: Int? = nil, importerUser: String? = nil, excludePaths: [String]? = nil, includePaths: [String]? = nil, completion: @escaping ((_ data: ComDayCqPollingImporterImplPollingImporterImplInfo?,_ error: Error?) -> Void)) {
        comDayCqPollingImporterImplPollingImporterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, importerMinInterval: importerMinInterval, importerUser: importerUser, excludePaths: excludePaths, includePaths: includePaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerMinInterval: (query)  (optional)
     - parameter importerUser: (query)  (optional)
     - parameter excludePaths: (query)  (optional)
     - parameter includePaths: (query)  (optional)
     - returns: RequestBuilder<ComDayCqPollingImporterImplPollingImporterImplInfo> 
     */
    open class func comDayCqPollingImporterImplPollingImporterImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerMinInterval: Int? = nil, importerUser: String? = nil, excludePaths: [String]? = nil, includePaths: [String]? = nil) -> RequestBuilder<ComDayCqPollingImporterImplPollingImporterImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "importer.min.interval": importerMinInterval?.encodeToJSON(), 
            "importer.user": importerUser, 
            "exclude.paths": excludePaths, 
            "include.paths": includePaths
        ])

        let requestBuilder: RequestBuilder<ComDayCqPollingImporterImplPollingImporterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReplicationAuditReplicationEventListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, completion: @escaping ((_ data: ComDayCqReplicationAuditReplicationEventListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqReplicationAuditReplicationEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReplicationAuditReplicationEventListenerInfo> 
     */
    open class func comDayCqReplicationAuditReplicationEventListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil) -> RequestBuilder<ComDayCqReplicationAuditReplicationEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqReplicationAuditReplicationEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter host: (query)  (optional)
     - parameter port: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReplicationContentStaticContentBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, host: String? = nil, port: Int? = nil, completion: @escaping ((_ data: ComDayCqReplicationContentStaticContentBuilderInfo?,_ error: Error?) -> Void)) {
        comDayCqReplicationContentStaticContentBuilderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, host: host, port: port).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter host: (query)  (optional)
     - parameter port: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReplicationContentStaticContentBuilderInfo> 
     */
    open class func comDayCqReplicationContentStaticContentBuilderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, host: String? = nil, port: Int? = nil) -> RequestBuilder<ComDayCqReplicationContentStaticContentBuilderInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "host": host, 
            "port": port?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqReplicationContentStaticContentBuilderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)
     - parameter agentProviderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReplicationImplAgentManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil, serviceUserTarget: String? = nil, agentProviderTarget: String? = nil, completion: @escaping ((_ data: ComDayCqReplicationImplAgentManagerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqReplicationImplAgentManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jobTopics: jobTopics, serviceUserTarget: serviceUserTarget, agentProviderTarget: agentProviderTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)
     - parameter agentProviderTarget: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReplicationImplAgentManagerImplInfo> 
     */
    open class func comDayCqReplicationImplAgentManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil, serviceUserTarget: String? = nil, agentProviderTarget: String? = nil) -> RequestBuilder<ComDayCqReplicationImplAgentManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "job.topics": jobTopics, 
            "serviceUser.target": serviceUserTarget, 
            "agentProvider.target": agentProviderTarget
        ])

        let requestBuilder: RequestBuilder<ComDayCqReplicationImplAgentManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter binaryThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, binaryThreshold: Int? = nil, completion: @escaping ((_ data: ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo?,_ error: Error?) -> Void)) {
        comDayCqReplicationImplContentDurboBinaryLessContentBuilderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, binaryThreshold: binaryThreshold).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter binaryThreshold: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo> 
     */
    open class func comDayCqReplicationImplContentDurboBinaryLessContentBuilderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, binaryThreshold: Int? = nil) -> RequestBuilder<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "binary.threshold": binaryThreshold?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter preserveHierarchyNodes: (query)  (optional)
     - parameter ignoreVersioning: (query)  (optional)
     - parameter importAcl: (query)  (optional)
     - parameter saveThreshold: (query)  (optional)
     - parameter preserveUserPaths: (query)  (optional)
     - parameter preserveUuid: (query)  (optional)
     - parameter preserveUuidNodetypes: (query)  (optional)
     - parameter preserveUuidSubtrees: (query)  (optional)
     - parameter autoCommit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReplicationImplContentDurboDurboImportConfigurationProv(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, preserveHierarchyNodes: Bool? = nil, ignoreVersioning: Bool? = nil, importAcl: Bool? = nil, saveThreshold: Int? = nil, preserveUserPaths: Bool? = nil, preserveUuid: Bool? = nil, preserveUuidNodetypes: [String]? = nil, preserveUuidSubtrees: [String]? = nil, autoCommit: Bool? = nil, completion: @escaping ((_ data: ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo?,_ error: Error?) -> Void)) {
        comDayCqReplicationImplContentDurboDurboImportConfigurationProvWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, preserveHierarchyNodes: preserveHierarchyNodes, ignoreVersioning: ignoreVersioning, importAcl: importAcl, saveThreshold: saveThreshold, preserveUserPaths: preserveUserPaths, preserveUuid: preserveUuid, preserveUuidNodetypes: preserveUuidNodetypes, preserveUuidSubtrees: preserveUuidSubtrees, autoCommit: autoCommit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter preserveHierarchyNodes: (query)  (optional)
     - parameter ignoreVersioning: (query)  (optional)
     - parameter importAcl: (query)  (optional)
     - parameter saveThreshold: (query)  (optional)
     - parameter preserveUserPaths: (query)  (optional)
     - parameter preserveUuid: (query)  (optional)
     - parameter preserveUuidNodetypes: (query)  (optional)
     - parameter preserveUuidSubtrees: (query)  (optional)
     - parameter autoCommit: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo> 
     */
    open class func comDayCqReplicationImplContentDurboDurboImportConfigurationProvWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, preserveHierarchyNodes: Bool? = nil, ignoreVersioning: Bool? = nil, importAcl: Bool? = nil, saveThreshold: Int? = nil, preserveUserPaths: Bool? = nil, preserveUuid: Bool? = nil, preserveUuidNodetypes: [String]? = nil, preserveUuidSubtrees: [String]? = nil, autoCommit: Bool? = nil) -> RequestBuilder<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "preserve.hierarchy.nodes": preserveHierarchyNodes, 
            "ignore.versioning": ignoreVersioning, 
            "import.acl": importAcl, 
            "save.threshold": saveThreshold?.encodeToJSON(), 
            "preserve.user.paths": preserveUserPaths, 
            "preserve.uuid": preserveUuid, 
            "preserve.uuid.nodetypes": preserveUuidNodetypes, 
            "preserve.uuid.subtrees": preserveUuidSubtrees, 
            "auto.commit": autoCommit
        ])

        let requestBuilder: RequestBuilder<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replicationContentUseFileStorage: (query)  (optional)
     - parameter replicationContentMaxCommitAttempts: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReplicationImplReplicationContentFactoryProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replicationContentUseFileStorage: Bool? = nil, replicationContentMaxCommitAttempts: Int? = nil, completion: @escaping ((_ data: ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo?,_ error: Error?) -> Void)) {
        comDayCqReplicationImplReplicationContentFactoryProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, replicationContentUseFileStorage: replicationContentUseFileStorage, replicationContentMaxCommitAttempts: replicationContentMaxCommitAttempts).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replicationContentUseFileStorage: (query)  (optional)
     - parameter replicationContentMaxCommitAttempts: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo> 
     */
    open class func comDayCqReplicationImplReplicationContentFactoryProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replicationContentUseFileStorage: Bool? = nil, replicationContentMaxCommitAttempts: Int? = nil) -> RequestBuilder<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "replication.content.useFileStorage": replicationContentUseFileStorage, 
            "replication.content.maxCommitAttempts": replicationContentMaxCommitAttempts?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter receiverTmpfileThreshold: (query)  (optional)
     - parameter receiverPackagesUseInstall: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReplicationImplReplicationReceiverImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, receiverTmpfileThreshold: Int? = nil, receiverPackagesUseInstall: Bool? = nil, completion: @escaping ((_ data: ComDayCqReplicationImplReplicationReceiverImplInfo?,_ error: Error?) -> Void)) {
        comDayCqReplicationImplReplicationReceiverImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, receiverTmpfileThreshold: receiverTmpfileThreshold, receiverPackagesUseInstall: receiverPackagesUseInstall).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter receiverTmpfileThreshold: (query)  (optional)
     - parameter receiverPackagesUseInstall: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReplicationImplReplicationReceiverImplInfo> 
     */
    open class func comDayCqReplicationImplReplicationReceiverImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, receiverTmpfileThreshold: Int? = nil, receiverPackagesUseInstall: Bool? = nil) -> RequestBuilder<ComDayCqReplicationImplReplicationReceiverImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "receiver.tmpfile.threshold": receiverTmpfileThreshold?.encodeToJSON(), 
            "receiver.packages.use.install": receiverPackagesUseInstall
        ])

        let requestBuilder: RequestBuilder<ComDayCqReplicationImplReplicationReceiverImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter distributeEvents: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReplicationImplReplicatorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, distributeEvents: Bool? = nil, completion: @escaping ((_ data: ComDayCqReplicationImplReplicatorImplInfo?,_ error: Error?) -> Void)) {
        comDayCqReplicationImplReplicatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, distributeEvents: distributeEvents).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter distributeEvents: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReplicationImplReplicatorImplInfo> 
     */
    open class func comDayCqReplicationImplReplicatorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, distributeEvents: Bool? = nil) -> RequestBuilder<ComDayCqReplicationImplReplicatorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "distribute_events": distributeEvents
        ])

        let requestBuilder: RequestBuilder<ComDayCqReplicationImplReplicatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReplicationImplReverseReplicator(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int? = nil, completion: @escaping ((_ data: ComDayCqReplicationImplReverseReplicatorInfo?,_ error: Error?) -> Void)) {
        comDayCqReplicationImplReverseReplicatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerPeriod: schedulerPeriod).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReplicationImplReverseReplicatorInfo> 
     */
    open class func comDayCqReplicationImplReverseReplicatorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int? = nil) -> RequestBuilder<ComDayCqReplicationImplReverseReplicatorInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.period": schedulerPeriod?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqReplicationImplReverseReplicatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReplicationImplTransportBinaryLessTransportHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil, completion: @escaping ((_ data: ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqReplicationImplTransportBinaryLessTransportHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disabledCipherSuites: disabledCipherSuites, enabledCipherSuites: enabledCipherSuites).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo> 
     */
    open class func comDayCqReplicationImplTransportBinaryLessTransportHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil) -> RequestBuilder<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "disabled.cipher.suites": disabledCipherSuites, 
            "enabled.cipher.suites": enabledCipherSuites
        ])

        let requestBuilder: RequestBuilder<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReplicationImplTransportHttp(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil, completion: @escaping ((_ data: ComDayCqReplicationImplTransportHttpInfo?,_ error: Error?) -> Void)) {
        comDayCqReplicationImplTransportHttpWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disabledCipherSuites: disabledCipherSuites, enabledCipherSuites: enabledCipherSuites).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.transport.Http
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReplicationImplTransportHttpInfo> 
     */
    open class func comDayCqReplicationImplTransportHttpWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil) -> RequestBuilder<ComDayCqReplicationImplTransportHttpInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.transport.Http"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "disabled.cipher.suites": disabledCipherSuites, 
            "enabled.cipher.suites": enabledCipherSuites
        ])

        let requestBuilder: RequestBuilder<ComDayCqReplicationImplTransportHttpInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repcacheEnable: (query)  (optional)
     - parameter repcacheTtl: (query)  (optional)
     - parameter repcacheMax: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReportingImplCacheCacheImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repcacheEnable: Bool? = nil, repcacheTtl: Int? = nil, repcacheMax: Int? = nil, completion: @escaping ((_ data: ComDayCqReportingImplCacheCacheImplInfo?,_ error: Error?) -> Void)) {
        comDayCqReportingImplCacheCacheImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, repcacheEnable: repcacheEnable, repcacheTtl: repcacheTtl, repcacheMax: repcacheMax).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repcacheEnable: (query)  (optional)
     - parameter repcacheTtl: (query)  (optional)
     - parameter repcacheMax: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReportingImplCacheCacheImplInfo> 
     */
    open class func comDayCqReportingImplCacheCacheImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repcacheEnable: Bool? = nil, repcacheTtl: Int? = nil, repcacheMax: Int? = nil) -> RequestBuilder<ComDayCqReportingImplCacheCacheImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "repcache.enable": repcacheEnable, 
            "repcache.ttl": repcacheTtl?.encodeToJSON(), 
            "repcache.max": repcacheMax?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqReportingImplCacheCacheImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repconfTimezone: (query)  (optional)
     - parameter repconfLocale: (query)  (optional)
     - parameter repconfSnapshots: (query)  (optional)
     - parameter repconfRepdir: (query)  (optional)
     - parameter repconfHourofday: (query)  (optional)
     - parameter repconfMinofhour: (query)  (optional)
     - parameter repconfMaxrows: (query)  (optional)
     - parameter repconfFakedata: (query)  (optional)
     - parameter repconfSnapshotuser: (query)  (optional)
     - parameter repconfEnforcesnapshotuser: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReportingImplConfigServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repconfTimezone: String? = nil, repconfLocale: String? = nil, repconfSnapshots: String? = nil, repconfRepdir: String? = nil, repconfHourofday: Int? = nil, repconfMinofhour: Int? = nil, repconfMaxrows: Int? = nil, repconfFakedata: Bool? = nil, repconfSnapshotuser: String? = nil, repconfEnforcesnapshotuser: Bool? = nil, completion: @escaping ((_ data: ComDayCqReportingImplConfigServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqReportingImplConfigServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, repconfTimezone: repconfTimezone, repconfLocale: repconfLocale, repconfSnapshots: repconfSnapshots, repconfRepdir: repconfRepdir, repconfHourofday: repconfHourofday, repconfMinofhour: repconfMinofhour, repconfMaxrows: repconfMaxrows, repconfFakedata: repconfFakedata, repconfSnapshotuser: repconfSnapshotuser, repconfEnforcesnapshotuser: repconfEnforcesnapshotuser).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repconfTimezone: (query)  (optional)
     - parameter repconfLocale: (query)  (optional)
     - parameter repconfSnapshots: (query)  (optional)
     - parameter repconfRepdir: (query)  (optional)
     - parameter repconfHourofday: (query)  (optional)
     - parameter repconfMinofhour: (query)  (optional)
     - parameter repconfMaxrows: (query)  (optional)
     - parameter repconfFakedata: (query)  (optional)
     - parameter repconfSnapshotuser: (query)  (optional)
     - parameter repconfEnforcesnapshotuser: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReportingImplConfigServiceImplInfo> 
     */
    open class func comDayCqReportingImplConfigServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repconfTimezone: String? = nil, repconfLocale: String? = nil, repconfSnapshots: String? = nil, repconfRepdir: String? = nil, repconfHourofday: Int? = nil, repconfMinofhour: Int? = nil, repconfMaxrows: Int? = nil, repconfFakedata: Bool? = nil, repconfSnapshotuser: String? = nil, repconfEnforcesnapshotuser: Bool? = nil) -> RequestBuilder<ComDayCqReportingImplConfigServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "repconf.timezone": repconfTimezone, 
            "repconf.locale": repconfLocale, 
            "repconf.snapshots": repconfSnapshots, 
            "repconf.repdir": repconfRepdir, 
            "repconf.hourofday": repconfHourofday?.encodeToJSON(), 
            "repconf.minofhour": repconfMinofhour?.encodeToJSON(), 
            "repconf.maxrows": repconfMaxrows?.encodeToJSON(), 
            "repconf.fakedata": repconfFakedata, 
            "repconf.snapshotuser": repconfSnapshotuser, 
            "repconf.enforcesnapshotuser": repconfEnforcesnapshotuser
        ])

        let requestBuilder: RequestBuilder<ComDayCqReportingImplConfigServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogOutput: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqReportingImplRLogAnalyzer(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogOutput: String? = nil, completion: @escaping ((_ data: ComDayCqReportingImplRLogAnalyzerInfo?,_ error: Error?) -> Void)) {
        comDayCqReportingImplRLogAnalyzerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, requestLogOutput: requestLogOutput).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogOutput: (query)  (optional)
     - returns: RequestBuilder<ComDayCqReportingImplRLogAnalyzerInfo> 
     */
    open class func comDayCqReportingImplRLogAnalyzerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogOutput: String? = nil) -> RequestBuilder<ComDayCqReportingImplRLogAnalyzerInfo> {
        let path = "/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "request.log.output": requestLogOutput
        ])

        let requestBuilder: RequestBuilder<ComDayCqReportingImplRLogAnalyzerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter serviceBadLinkToleranceInterval: (query)  (optional)
     - parameter serviceCheckOverridePatterns: (query)  (optional)
     - parameter serviceCacheBrokenInternalLinks: (query)  (optional)
     - parameter serviceSpecialLinkPrefix: (query)  (optional)
     - parameter serviceSpecialLinkPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int? = nil, schedulerConcurrent: Bool? = nil, serviceBadLinkToleranceInterval: Int? = nil, serviceCheckOverridePatterns: [String]? = nil, serviceCacheBrokenInternalLinks: Bool? = nil, serviceSpecialLinkPrefix: [String]? = nil, serviceSpecialLinkPatterns: [String]? = nil, completion: @escaping ((_ data: ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqRewriterLinkcheckerImplLinkCheckerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerPeriod: schedulerPeriod, schedulerConcurrent: schedulerConcurrent, serviceBadLinkToleranceInterval: serviceBadLinkToleranceInterval, serviceCheckOverridePatterns: serviceCheckOverridePatterns, serviceCacheBrokenInternalLinks: serviceCacheBrokenInternalLinks, serviceSpecialLinkPrefix: serviceSpecialLinkPrefix, serviceSpecialLinkPatterns: serviceSpecialLinkPatterns).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter serviceBadLinkToleranceInterval: (query)  (optional)
     - parameter serviceCheckOverridePatterns: (query)  (optional)
     - parameter serviceCacheBrokenInternalLinks: (query)  (optional)
     - parameter serviceSpecialLinkPrefix: (query)  (optional)
     - parameter serviceSpecialLinkPatterns: (query)  (optional)
     - returns: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo> 
     */
    open class func comDayCqRewriterLinkcheckerImplLinkCheckerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int? = nil, schedulerConcurrent: Bool? = nil, serviceBadLinkToleranceInterval: Int? = nil, serviceCheckOverridePatterns: [String]? = nil, serviceCacheBrokenInternalLinks: Bool? = nil, serviceSpecialLinkPrefix: [String]? = nil, serviceSpecialLinkPatterns: [String]? = nil) -> RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.period": schedulerPeriod?.encodeToJSON(), 
            "scheduler.concurrent": schedulerConcurrent, 
            "service.bad_link_tolerance_interval": serviceBadLinkToleranceInterval?.encodeToJSON(), 
            "service.check_override_patterns": serviceCheckOverridePatterns, 
            "service.cache_broken_internal_links": serviceCacheBrokenInternalLinks, 
            "service.special_link_prefix": serviceSpecialLinkPrefix, 
            "service.special_link_patterns": serviceSpecialLinkPatterns
        ])

        let requestBuilder: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter goodLinkTestInterval: (query)  (optional)
     - parameter badLinkTestInterval: (query)  (optional)
     - parameter linkUnusedInterval: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqRewriterLinkcheckerImplLinkCheckerTask(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int? = nil, schedulerConcurrent: Bool? = nil, goodLinkTestInterval: Int? = nil, badLinkTestInterval: Int? = nil, linkUnusedInterval: Int? = nil, connectionTimeout: Int? = nil, completion: @escaping ((_ data: ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo?,_ error: Error?) -> Void)) {
        comDayCqRewriterLinkcheckerImplLinkCheckerTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerPeriod: schedulerPeriod, schedulerConcurrent: schedulerConcurrent, goodLinkTestInterval: goodLinkTestInterval, badLinkTestInterval: badLinkTestInterval, linkUnusedInterval: linkUnusedInterval, connectionTimeout: connectionTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter goodLinkTestInterval: (query)  (optional)
     - parameter badLinkTestInterval: (query)  (optional)
     - parameter linkUnusedInterval: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - returns: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo> 
     */
    open class func comDayCqRewriterLinkcheckerImplLinkCheckerTaskWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int? = nil, schedulerConcurrent: Bool? = nil, goodLinkTestInterval: Int? = nil, badLinkTestInterval: Int? = nil, linkUnusedInterval: Int? = nil, connectionTimeout: Int? = nil) -> RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo> {
        let path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.period": schedulerPeriod?.encodeToJSON(), 
            "scheduler.concurrent": schedulerConcurrent, 
            "good_link_test_interval": goodLinkTestInterval?.encodeToJSON(), 
            "bad_link_test_interval": badLinkTestInterval?.encodeToJSON(), 
            "link_unused_interval": linkUnusedInterval?.encodeToJSON(), 
            "connection.timeout": connectionTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter linkcheckertransformerDisableRewriting: (query)  (optional)
     - parameter linkcheckertransformerDisableChecking: (query)  (optional)
     - parameter linkcheckertransformerMapCacheSize: (query)  (optional)
     - parameter linkcheckertransformerStrictExtensionCheck: (query)  (optional)
     - parameter linkcheckertransformerStripHtmltExtension: (query)  (optional)
     - parameter linkcheckertransformerRewriteElements: (query)  (optional)
     - parameter linkcheckertransformerStripExtensionPathBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, linkcheckertransformerDisableRewriting: Bool? = nil, linkcheckertransformerDisableChecking: Bool? = nil, linkcheckertransformerMapCacheSize: Int? = nil, linkcheckertransformerStrictExtensionCheck: Bool? = nil, linkcheckertransformerStripHtmltExtension: Bool? = nil, linkcheckertransformerRewriteElements: [String]? = nil, linkcheckertransformerStripExtensionPathBlacklist: [String]? = nil, completion: @escaping ((_ data: ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, linkcheckertransformerDisableRewriting: linkcheckertransformerDisableRewriting, linkcheckertransformerDisableChecking: linkcheckertransformerDisableChecking, linkcheckertransformerMapCacheSize: linkcheckertransformerMapCacheSize, linkcheckertransformerStrictExtensionCheck: linkcheckertransformerStrictExtensionCheck, linkcheckertransformerStripHtmltExtension: linkcheckertransformerStripHtmltExtension, linkcheckertransformerRewriteElements: linkcheckertransformerRewriteElements, linkcheckertransformerStripExtensionPathBlacklist: linkcheckertransformerStripExtensionPathBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter linkcheckertransformerDisableRewriting: (query)  (optional)
     - parameter linkcheckertransformerDisableChecking: (query)  (optional)
     - parameter linkcheckertransformerMapCacheSize: (query)  (optional)
     - parameter linkcheckertransformerStrictExtensionCheck: (query)  (optional)
     - parameter linkcheckertransformerStripHtmltExtension: (query)  (optional)
     - parameter linkcheckertransformerRewriteElements: (query)  (optional)
     - parameter linkcheckertransformerStripExtensionPathBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo> 
     */
    open class func comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, linkcheckertransformerDisableRewriting: Bool? = nil, linkcheckertransformerDisableChecking: Bool? = nil, linkcheckertransformerMapCacheSize: Int? = nil, linkcheckertransformerStrictExtensionCheck: Bool? = nil, linkcheckertransformerStripHtmltExtension: Bool? = nil, linkcheckertransformerRewriteElements: [String]? = nil, linkcheckertransformerStripExtensionPathBlacklist: [String]? = nil) -> RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "linkcheckertransformer.disableRewriting": linkcheckertransformerDisableRewriting, 
            "linkcheckertransformer.disableChecking": linkcheckertransformerDisableChecking, 
            "linkcheckertransformer.mapCacheSize": linkcheckertransformerMapCacheSize?.encodeToJSON(), 
            "linkcheckertransformer.strictExtensionCheck": linkcheckertransformerStrictExtensionCheck, 
            "linkcheckertransformer.stripHtmltExtension": linkcheckertransformerStripHtmltExtension, 
            "linkcheckertransformer.rewriteElements": linkcheckertransformerRewriteElements, 
            "linkcheckertransformer.stripExtensionPathBlacklist": linkcheckertransformerStripExtensionPathBlacklist
        ])

        let requestBuilder: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceMaxLinksPerHost: (query)  (optional)
     - parameter serviceSaveExternalLinkReferences: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceMaxLinksPerHost: Int? = nil, serviceSaveExternalLinkReferences: Bool? = nil, completion: @escaping ((_ data: ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo?,_ error: Error?) -> Void)) {
        comDayCqRewriterLinkcheckerImplLinkInfoStorageImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceMaxLinksPerHost: serviceMaxLinksPerHost, serviceSaveExternalLinkReferences: serviceSaveExternalLinkReferences).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceMaxLinksPerHost: (query)  (optional)
     - parameter serviceSaveExternalLinkReferences: (query)  (optional)
     - returns: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo> 
     */
    open class func comDayCqRewriterLinkcheckerImplLinkInfoStorageImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceMaxLinksPerHost: Int? = nil, serviceSaveExternalLinkReferences: Bool? = nil) -> RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.max_links_per_host": serviceMaxLinksPerHost?.encodeToJSON(), 
            "service.save_external_link_references": serviceSaveExternalLinkReferences
        ])

        let requestBuilder: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmlparserProcessTags: (query)  (optional)
     - parameter htmlparserPreserveCamelCase: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqRewriterProcessorImplHtmlParserFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmlparserProcessTags: [String]? = nil, htmlparserPreserveCamelCase: Bool? = nil, completion: @escaping ((_ data: ComDayCqRewriterProcessorImplHtmlParserFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqRewriterProcessorImplHtmlParserFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, htmlparserProcessTags: htmlparserProcessTags, htmlparserPreserveCamelCase: htmlparserPreserveCamelCase).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmlparserProcessTags: (query)  (optional)
     - parameter htmlparserPreserveCamelCase: (query)  (optional)
     - returns: RequestBuilder<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo> 
     */
    open class func comDayCqRewriterProcessorImplHtmlParserFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmlparserProcessTags: [String]? = nil, htmlparserPreserveCamelCase: Bool? = nil) -> RequestBuilder<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "htmlparser.processTags": htmlparserProcessTags, 
            "htmlparser.preserveCamelCase": htmlparserPreserveCamelCase
        ])

        let requestBuilder: RequestBuilder<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter excerptProperties: (query)  (optional)
     - parameter cacheMaxEntries: (query)  (optional)
     - parameter cacheEntryLifetime: (query)  (optional)
     - parameter xpathUnion: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqSearchImplBuilderQueryBuilderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, excerptProperties: [String]? = nil, cacheMaxEntries: Int? = nil, cacheEntryLifetime: Int? = nil, xpathUnion: Bool? = nil, completion: @escaping ((_ data: ComDayCqSearchImplBuilderQueryBuilderImplInfo?,_ error: Error?) -> Void)) {
        comDayCqSearchImplBuilderQueryBuilderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, excerptProperties: excerptProperties, cacheMaxEntries: cacheMaxEntries, cacheEntryLifetime: cacheEntryLifetime, xpathUnion: xpathUnion).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter excerptProperties: (query)  (optional)
     - parameter cacheMaxEntries: (query)  (optional)
     - parameter cacheEntryLifetime: (query)  (optional)
     - parameter xpathUnion: (query)  (optional)
     - returns: RequestBuilder<ComDayCqSearchImplBuilderQueryBuilderImplInfo> 
     */
    open class func comDayCqSearchImplBuilderQueryBuilderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, excerptProperties: [String]? = nil, cacheMaxEntries: Int? = nil, cacheEntryLifetime: Int? = nil, xpathUnion: Bool? = nil) -> RequestBuilder<ComDayCqSearchImplBuilderQueryBuilderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "excerpt.properties": excerptProperties, 
            "cache.max.entries": cacheMaxEntries?.encodeToJSON(), 
            "cache.entry.lifetime": cacheEntryLifetime?.encodeToJSON(), 
            "xpath.union": xpathUnion
        ])

        let requestBuilder: RequestBuilder<ComDayCqSearchImplBuilderQueryBuilderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pathBuilderTarget: (query)  (optional)
     - parameter suggestBasepath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pathBuilderTarget: String? = nil, suggestBasepath: String? = nil, completion: @escaping ((_ data: ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqSearchSuggestImplSuggestionIndexManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pathBuilderTarget: pathBuilderTarget, suggestBasepath: suggestBasepath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pathBuilderTarget: (query)  (optional)
     - parameter suggestBasepath: (query)  (optional)
     - returns: RequestBuilder<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo> 
     */
    open class func comDayCqSearchSuggestImplSuggestionIndexManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pathBuilderTarget: String? = nil, suggestBasepath: String? = nil) -> RequestBuilder<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "pathBuilder.target": pathBuilderTarget, 
            "suggest.basepath": suggestBasepath
        ])

        let requestBuilder: RequestBuilder<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSearchpromoteConfighandlerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSearchpromoteConfighandlerEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSearchpromoteConfighandlerEnabled: cqSearchpromoteConfighandlerEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSearchpromoteConfighandlerEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo> 
     */
    open class func comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSearchpromoteConfighandlerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.searchpromote.confighandler.enabled": cqSearchpromoteConfighandlerEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSearchpromoteConfigurationServerUri: (query)  (optional)
     - parameter cqSearchpromoteConfigurationEnvironment: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqSearchpromoteImplSearchPromoteServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSearchpromoteConfigurationServerUri: String? = nil, cqSearchpromoteConfigurationEnvironment: String? = nil, connectionTimeout: Int? = nil, socketTimeout: Int? = nil, completion: @escaping ((_ data: ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqSearchpromoteImplSearchPromoteServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSearchpromoteConfigurationServerUri: cqSearchpromoteConfigurationServerUri, cqSearchpromoteConfigurationEnvironment: cqSearchpromoteConfigurationEnvironment, connectionTimeout: connectionTimeout, socketTimeout: socketTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSearchpromoteConfigurationServerUri: (query)  (optional)
     - parameter cqSearchpromoteConfigurationEnvironment: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - returns: RequestBuilder<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo> 
     */
    open class func comDayCqSearchpromoteImplSearchPromoteServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSearchpromoteConfigurationServerUri: String? = nil, cqSearchpromoteConfigurationEnvironment: String? = nil, connectionTimeout: Int? = nil, socketTimeout: Int? = nil) -> RequestBuilder<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.searchpromote.configuration.server.uri": cqSearchpromoteConfigurationServerUri, 
            "cq.searchpromote.configuration.environment": cqSearchpromoteConfigurationEnvironment, 
            "connection.timeout": connectionTimeout?.encodeToJSON(), 
            "socket.timeout": socketTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAclsetupRules: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqSecurityACLSetup(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAclsetupRules: [String]? = nil, completion: @escaping ((_ data: ComDayCqSecurityACLSetupInfo?,_ error: Error?) -> Void)) {
        comDayCqSecurityACLSetupWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAclsetupRules: cqAclsetupRules).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.security.ACLSetup
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAclsetupRules: (query)  (optional)
     - returns: RequestBuilder<ComDayCqSecurityACLSetupInfo> 
     */
    open class func comDayCqSecurityACLSetupWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAclsetupRules: [String]? = nil) -> RequestBuilder<ComDayCqSecurityACLSetupInfo> {
        let path = "/system/console/configMgr/com.day.cq.security.ACLSetup"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.aclsetup.rules": cqAclsetupRules
        ])

        let requestBuilder: RequestBuilder<ComDayCqSecurityACLSetupInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter workspace: (query)  (optional)
     - parameter keywordsPath: (query)  (optional)
     - parameter asyncEntries: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqStatisticsImplStatisticsServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int? = nil, schedulerConcurrent: Bool? = nil, path: String? = nil, workspace: String? = nil, keywordsPath: String? = nil, asyncEntries: Bool? = nil, completion: @escaping ((_ data: ComDayCqStatisticsImplStatisticsServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqStatisticsImplStatisticsServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerPeriod: schedulerPeriod, schedulerConcurrent: schedulerConcurrent, path: path, workspace: workspace, keywordsPath: keywordsPath, asyncEntries: asyncEntries).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter workspace: (query)  (optional)
     - parameter keywordsPath: (query)  (optional)
     - parameter asyncEntries: (query)  (optional)
     - returns: RequestBuilder<ComDayCqStatisticsImplStatisticsServiceImplInfo> 
     */
    open class func comDayCqStatisticsImplStatisticsServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int? = nil, schedulerConcurrent: Bool? = nil, path: String? = nil, workspace: String? = nil, keywordsPath: String? = nil, asyncEntries: Bool? = nil) -> RequestBuilder<ComDayCqStatisticsImplStatisticsServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.period": schedulerPeriod?.encodeToJSON(), 
            "scheduler.concurrent": schedulerConcurrent, 
            "path": path, 
            "workspace": workspace, 
            "keywordsPath": keywordsPath, 
            "asyncEntries": asyncEntries
        ])

        let requestBuilder: RequestBuilder<ComDayCqStatisticsImplStatisticsServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter validationEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqTaggingImplJcrTagManagerFactoryImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, validationEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqTaggingImplJcrTagManagerFactoryImplInfo?,_ error: Error?) -> Void)) {
        comDayCqTaggingImplJcrTagManagerFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, validationEnabled: validationEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter validationEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo> 
     */
    open class func comDayCqTaggingImplJcrTagManagerFactoryImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, validationEnabled: Bool? = nil) -> RequestBuilder<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "validation.enabled": validationEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ignorePath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqTaggingImplSearchTagPredicateEvaluator(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ignorePath: Bool? = nil, completion: @escaping ((_ data: ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo?,_ error: Error?) -> Void)) {
        comDayCqTaggingImplSearchTagPredicateEvaluatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, ignorePath: ignorePath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ignorePath: (query)  (optional)
     - returns: RequestBuilder<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo> 
     */
    open class func comDayCqTaggingImplSearchTagPredicateEvaluatorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ignorePath: Bool? = nil) -> RequestBuilder<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo> {
        let path = "/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "ignore_path": ignorePath
        ])

        let requestBuilder: RequestBuilder<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqTaggingImplTagGarbageCollector(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, completion: @escaping ((_ data: ComDayCqTaggingImplTagGarbageCollectorInfo?,_ error: Error?) -> Void)) {
        comDayCqTaggingImplTagGarbageCollectorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - returns: RequestBuilder<ComDayCqTaggingImplTagGarbageCollectorInfo> 
     */
    open class func comDayCqTaggingImplTagGarbageCollectorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil) -> RequestBuilder<ComDayCqTaggingImplTagGarbageCollectorInfo> {
        let path = "/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.expression": schedulerExpression
        ])

        let requestBuilder: RequestBuilder<ComDayCqTaggingImplTagGarbageCollectorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqPagesupdatehandlerImageresourcetypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqPagesupdatehandlerImageresourcetypes: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqPagesupdatehandlerImageresourcetypes: cqPagesupdatehandlerImageresourcetypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqPagesupdatehandlerImageresourcetypes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo> 
     */
    open class func comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqPagesupdatehandlerImageresourcetypes: [String]? = nil) -> RequestBuilder<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.pagesupdatehandler.imageresourcetypes": cqPagesupdatehandlerImageresourcetypes
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingLinks: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingClientlibs: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingImages: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerAttributePattern: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerClientlibraryPattern: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerClientlibraryReplace: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqContentsyncPathrewritertransformerMappingLinks: [String]? = nil, cqContentsyncPathrewritertransformerMappingClientlibs: [String]? = nil, cqContentsyncPathrewritertransformerMappingImages: [String]? = nil, cqContentsyncPathrewritertransformerAttributePattern: String? = nil, cqContentsyncPathrewritertransformerClientlibraryPattern: String? = nil, cqContentsyncPathrewritertransformerClientlibraryReplace: String? = nil, completion: @escaping ((_ data: ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqContentsyncPathrewritertransformerMappingLinks: cqContentsyncPathrewritertransformerMappingLinks, cqContentsyncPathrewritertransformerMappingClientlibs: cqContentsyncPathrewritertransformerMappingClientlibs, cqContentsyncPathrewritertransformerMappingImages: cqContentsyncPathrewritertransformerMappingImages, cqContentsyncPathrewritertransformerAttributePattern: cqContentsyncPathrewritertransformerAttributePattern, cqContentsyncPathrewritertransformerClientlibraryPattern: cqContentsyncPathrewritertransformerClientlibraryPattern, cqContentsyncPathrewritertransformerClientlibraryReplace: cqContentsyncPathrewritertransformerClientlibraryReplace).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingLinks: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingClientlibs: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingImages: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerAttributePattern: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerClientlibraryPattern: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerClientlibraryReplace: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo> 
     */
    open class func comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqContentsyncPathrewritertransformerMappingLinks: [String]? = nil, cqContentsyncPathrewritertransformerMappingClientlibs: [String]? = nil, cqContentsyncPathrewritertransformerMappingImages: [String]? = nil, cqContentsyncPathrewritertransformerAttributePattern: String? = nil, cqContentsyncPathrewritertransformerClientlibraryPattern: String? = nil, cqContentsyncPathrewritertransformerClientlibraryReplace: String? = nil) -> RequestBuilder<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.contentsync.pathrewritertransformer.mapping.links": cqContentsyncPathrewritertransformerMappingLinks, 
            "cq.contentsync.pathrewritertransformer.mapping.clientlibs": cqContentsyncPathrewritertransformerMappingClientlibs, 
            "cq.contentsync.pathrewritertransformer.mapping.images": cqContentsyncPathrewritertransformerMappingImages, 
            "cq.contentsync.pathrewritertransformer.attribute.pattern": cqContentsyncPathrewritertransformerAttributePattern, 
            "cq.contentsync.pathrewritertransformer.clientlibrary.pattern": cqContentsyncPathrewritertransformerClientlibraryPattern, 
            "cq.contentsync.pathrewritertransformer.clientlibrary.replace": cqContentsyncPathrewritertransformerClientlibraryReplace
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authoringUIModeServiceDefault: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authoringUIModeServiceDefault: String? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplAuthoringUIModeServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, authoringUIModeServiceDefault: authoringUIModeServiceDefault).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authoringUIModeServiceDefault: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo> 
     */
    open class func comDayCqWcmCoreImplAuthoringUIModeServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authoringUIModeServiceDefault: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "authoringUIModeService.default": authoringUIModeServiceDefault
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmcommandservletDeleteWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplCommandsWCMCommandServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmcommandservletDeleteWhitelist: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplCommandsWCMCommandServletInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplCommandsWCMCommandServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, wcmcommandservletDeleteWhitelist: wcmcommandservletDeleteWhitelist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmcommandservletDeleteWhitelist: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo> 
     */
    open class func comDayCqWcmCoreImplCommandsWCMCommandServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmcommandservletDeleteWhitelist: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "wcmcommandservlet.delete_whitelist": wcmcommandservletDeleteWhitelist
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dimDefaultMode: (query)  (optional)
     - parameter dimAppcacheEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dimDefaultMode: String? = nil, dimAppcacheEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, dimDefaultMode: dimDefaultMode, dimAppcacheEnabled: dimAppcacheEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dimDefaultMode: (query)  (optional)
     - parameter dimAppcacheEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo> 
     */
    open class func comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dimDefaultMode: String? = nil, dimAppcacheEnabled: Bool? = nil) -> RequestBuilder<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "dim.default.mode": dimDefaultMode, 
            "dim.appcache.enabled": dimAppcacheEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configured: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplEventPageEventAuditListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configured: String? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplEventPageEventAuditListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplEventPageEventAuditListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, configured: configured).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configured: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo> 
     */
    open class func comDayCqWcmCoreImplEventPageEventAuditListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configured: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "configured": configured
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplEventPagePostProcessor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplEventPagePostProcessorInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplEventPagePostProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, paths: paths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplEventPagePostProcessorInfo> 
     */
    open class func comDayCqWcmCoreImplEventPagePostProcessorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplEventPagePostProcessorInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "paths": paths
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplEventPagePostProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)
     - parameter excludedPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplEventRepositoryChangeEventListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: [String]? = nil, excludedPaths: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplEventRepositoryChangeEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, paths: paths, excludedPaths: excludedPaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)
     - parameter excludedPaths: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo> 
     */
    open class func comDayCqWcmCoreImplEventRepositoryChangeEventListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: [String]? = nil, excludedPaths: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "paths": paths, 
            "excludedPaths": excludedPaths
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplEventTemplatePostProcessor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: String? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplEventTemplatePostProcessorInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplEventTemplatePostProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, paths: paths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo> 
     */
    open class func comDayCqWcmCoreImplEventTemplatePostProcessorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "paths": paths
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter langmgrListPath: (query)  (optional)
     - parameter langmgrCountryDefault: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplLanguageManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, langmgrListPath: String? = nil, langmgrCountryDefault: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplLanguageManagerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplLanguageManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, langmgrListPath: langmgrListPath, langmgrCountryDefault: langmgrCountryDefault).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter langmgrListPath: (query)  (optional)
     - parameter langmgrCountryDefault: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplLanguageManagerImplInfo> 
     */
    open class func comDayCqWcmCoreImplLanguageManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, langmgrListPath: String? = nil, langmgrCountryDefault: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplLanguageManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "langmgr.list.path": langmgrListPath, 
            "langmgr.country.default": langmgrCountryDefault
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplLanguageManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter linkExpiredPrefix: (query)  (optional)
     - parameter linkExpiredRemove: (query)  (optional)
     - parameter linkExpiredSuffix: (query)  (optional)
     - parameter linkInvalidPrefix: (query)  (optional)
     - parameter linkInvalidRemove: (query)  (optional)
     - parameter linkInvalidSuffix: (query)  (optional)
     - parameter linkPredatedPrefix: (query)  (optional)
     - parameter linkPredatedRemove: (query)  (optional)
     - parameter linkPredatedSuffix: (query)  (optional)
     - parameter linkWcmmodes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, linkExpiredPrefix: String? = nil, linkExpiredRemove: Bool? = nil, linkExpiredSuffix: String? = nil, linkInvalidPrefix: String? = nil, linkInvalidRemove: Bool? = nil, linkInvalidSuffix: String? = nil, linkPredatedPrefix: String? = nil, linkPredatedRemove: Bool? = nil, linkPredatedSuffix: String? = nil, linkWcmmodes: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, linkExpiredPrefix: linkExpiredPrefix, linkExpiredRemove: linkExpiredRemove, linkExpiredSuffix: linkExpiredSuffix, linkInvalidPrefix: linkInvalidPrefix, linkInvalidRemove: linkInvalidRemove, linkInvalidSuffix: linkInvalidSuffix, linkPredatedPrefix: linkPredatedPrefix, linkPredatedRemove: linkPredatedRemove, linkPredatedSuffix: linkPredatedSuffix, linkWcmmodes: linkWcmmodes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter linkExpiredPrefix: (query)  (optional)
     - parameter linkExpiredRemove: (query)  (optional)
     - parameter linkExpiredSuffix: (query)  (optional)
     - parameter linkInvalidPrefix: (query)  (optional)
     - parameter linkInvalidRemove: (query)  (optional)
     - parameter linkInvalidSuffix: (query)  (optional)
     - parameter linkPredatedPrefix: (query)  (optional)
     - parameter linkPredatedRemove: (query)  (optional)
     - parameter linkPredatedSuffix: (query)  (optional)
     - parameter linkWcmmodes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo> 
     */
    open class func comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, linkExpiredPrefix: String? = nil, linkExpiredRemove: Bool? = nil, linkExpiredSuffix: String? = nil, linkInvalidPrefix: String? = nil, linkInvalidRemove: Bool? = nil, linkInvalidSuffix: String? = nil, linkPredatedPrefix: String? = nil, linkPredatedRemove: Bool? = nil, linkPredatedSuffix: String? = nil, linkWcmmodes: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "link.expired.prefix": linkExpiredPrefix, 
            "link.expired.remove": linkExpiredRemove, 
            "link.expired.suffix": linkExpiredSuffix, 
            "link.invalid.prefix": linkInvalidPrefix, 
            "link.invalid.remove": linkInvalidRemove, 
            "link.invalid.suffix": linkInvalidSuffix, 
            "link.predated.prefix": linkPredatedPrefix, 
            "link.predated.remove": linkPredatedRemove, 
            "link.predated.suffix": linkPredatedSuffix, 
            "link.wcmmodes": linkWcmmodes
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pageInfoProviderPropertyRegexDefault: (query)  (optional)
     - parameter pageInfoProviderPropertyName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pageInfoProviderPropertyRegexDefault: String? = nil, pageInfoProviderPropertyName: String? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplPagePageInfoAggregatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pageInfoProviderPropertyRegexDefault: pageInfoProviderPropertyRegexDefault, pageInfoProviderPropertyName: pageInfoProviderPropertyName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pageInfoProviderPropertyRegexDefault: (query)  (optional)
     - parameter pageInfoProviderPropertyName: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo> 
     */
    open class func comDayCqWcmCoreImplPagePageInfoAggregatorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pageInfoProviderPropertyRegexDefault: String? = nil, pageInfoProviderPropertyName: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "page.info.provider.property.regex.default": pageInfoProviderPropertyRegexDefault, 
            "page.info.provider.property.name": pageInfoProviderPropertyName
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter illegalCharMapping: (query)  (optional)
     - parameter pageSubTreeActivationCheck: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplPagePageManagerFactoryImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, illegalCharMapping: String? = nil, pageSubTreeActivationCheck: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplPagePageManagerFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, illegalCharMapping: illegalCharMapping, pageSubTreeActivationCheck: pageSubTreeActivationCheck).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter illegalCharMapping: (query)  (optional)
     - parameter pageSubTreeActivationCheck: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo> 
     */
    open class func comDayCqWcmCoreImplPagePageManagerFactoryImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, illegalCharMapping: String? = nil, pageSubTreeActivationCheck: Bool? = nil) -> RequestBuilder<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "illegalCharMapping": illegalCharMapping, 
            "pageSubTreeActivationCheck": pageSubTreeActivationCheck
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contentReferenceConfigResourceTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contentReferenceConfigResourceTypes: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplReferencesContentContentReferenceConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, contentReferenceConfigResourceTypes: contentReferenceConfigResourceTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contentReferenceConfigResourceTypes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo> 
     */
    open class func comDayCqWcmCoreImplReferencesContentContentReferenceConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contentReferenceConfigResourceTypes: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "contentReferenceConfig.resourceTypes": contentReferenceConfigResourceTypes
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damShowexpired: (query)  (optional)
     - parameter damShowhidden: (query)  (optional)
     - parameter tagTitleSearch: (query)  (optional)
     - parameter guessTotal: (query)  (optional)
     - parameter damExpiryProperty: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damShowexpired: Bool? = nil, damShowhidden: Bool? = nil, tagTitleSearch: Bool? = nil, guessTotal: String? = nil, damExpiryProperty: String? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, damShowexpired: damShowexpired, damShowhidden: damShowhidden, tagTitleSearch: tagTitleSearch, guessTotal: guessTotal, damExpiryProperty: damExpiryProperty).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damShowexpired: (query)  (optional)
     - parameter damShowhidden: (query)  (optional)
     - parameter tagTitleSearch: (query)  (optional)
     - parameter guessTotal: (query)  (optional)
     - parameter damExpiryProperty: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo> 
     */
    open class func comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damShowexpired: Bool? = nil, damShowhidden: Bool? = nil, tagTitleSearch: Bool? = nil, guessTotal: String? = nil, damExpiryProperty: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "dam.showexpired": damShowexpired, 
            "dam.showhidden": damShowhidden, 
            "tagTitleSearch": tagTitleSearch, 
            "guessTotal": guessTotal, 
            "dam.expiryProperty": damExpiryProperty
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter itemResourceTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, itemResourceTypes: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, itemResourceTypes: itemResourceTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter itemResourceTypes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo> 
     */
    open class func comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, itemResourceTypes: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "item.resource.types": itemResourceTypes
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter guessTotal: (query)  (optional)
     - parameter tagTitleSearch: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, guessTotal: String? = nil, tagTitleSearch: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplServletsContentfinderPageViewHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, guessTotal: guessTotal, tagTitleSearch: tagTitleSearch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter guessTotal: (query)  (optional)
     - parameter tagTitleSearch: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo> 
     */
    open class func comDayCqWcmCoreImplServletsContentfinderPageViewHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, guessTotal: String? = nil, tagTitleSearch: Bool? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "guessTotal": guessTotal, 
            "tagTitleSearch": tagTitleSearch
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplServletsFindReplaceServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scope: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplServletsFindReplaceServletInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplServletsFindReplaceServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, scope: scope).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scope: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsFindReplaceServletInfo> 
     */
    open class func comDayCqWcmCoreImplServletsFindReplaceServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scope: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsFindReplaceServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scope": scope
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsFindReplaceServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter referencesearchservletMaxReferencesPerPage: (query)  (optional)
     - parameter referencesearchservletMaxPages: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplServletsReferenceSearchServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, referencesearchservletMaxReferencesPerPage: Int? = nil, referencesearchservletMaxPages: Int? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplServletsReferenceSearchServletInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplServletsReferenceSearchServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, referencesearchservletMaxReferencesPerPage: referencesearchservletMaxReferencesPerPage, referencesearchservletMaxPages: referencesearchservletMaxPages).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter referencesearchservletMaxReferencesPerPage: (query)  (optional)
     - parameter referencesearchservletMaxPages: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo> 
     */
    open class func comDayCqWcmCoreImplServletsReferenceSearchServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, referencesearchservletMaxReferencesPerPage: Int? = nil, referencesearchservletMaxPages: Int? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "referencesearchservlet.maxReferencesPerPage": referencesearchservletMaxReferencesPerPage?.encodeToJSON(), 
            "referencesearchservlet.maxPages": referencesearchservletMaxPages?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter workspace: (query)  (optional)
     - parameter dimensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplServletsThumbnailServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, workspace: String? = nil, dimensions: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplServletsThumbnailServletInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplServletsThumbnailServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, workspace: workspace, dimensions: dimensions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter workspace: (query)  (optional)
     - parameter dimensions: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsThumbnailServletInfo> 
     */
    open class func comDayCqWcmCoreImplServletsThumbnailServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, workspace: String? = nil, dimensions: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsThumbnailServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "workspace": workspace, 
            "dimensions": dimensions
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsThumbnailServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nonValidChars: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nonValidChars: String? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplUtilsDefaultPageNameValidatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, nonValidChars: nonValidChars).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nonValidChars: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo> 
     */
    open class func comDayCqWcmCoreImplUtilsDefaultPageNameValidatorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nonValidChars: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "nonValidChars": nonValidChars
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultExternalizerDomain: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultExternalizerDomain: String? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplVariantsPageVariantsProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultExternalizerDomain: defaultExternalizerDomain).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultExternalizerDomain: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo> 
     */
    open class func comDayCqWcmCoreImplVariantsPageVariantsProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultExternalizerDomain: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "default.externalizer.domain": defaultExternalizerDomain
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionmanagerCreateVersionOnActivation: (query)  (optional)
     - parameter versionmanagerPurgingEnabled: (query)  (optional)
     - parameter versionmanagerPurgePaths: (query)  (optional)
     - parameter versionmanagerIvPaths: (query)  (optional)
     - parameter versionmanagerMaxAgeDays: (query)  (optional)
     - parameter versionmanagerMaxNumberVersions: (query)  (optional)
     - parameter versionmanagerMinNumberVersions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplVersionManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionmanagerCreateVersionOnActivation: Bool? = nil, versionmanagerPurgingEnabled: Bool? = nil, versionmanagerPurgePaths: [String]? = nil, versionmanagerIvPaths: [String]? = nil, versionmanagerMaxAgeDays: Int? = nil, versionmanagerMaxNumberVersions: Int? = nil, versionmanagerMinNumberVersions: Int? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplVersionManagerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplVersionManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, versionmanagerCreateVersionOnActivation: versionmanagerCreateVersionOnActivation, versionmanagerPurgingEnabled: versionmanagerPurgingEnabled, versionmanagerPurgePaths: versionmanagerPurgePaths, versionmanagerIvPaths: versionmanagerIvPaths, versionmanagerMaxAgeDays: versionmanagerMaxAgeDays, versionmanagerMaxNumberVersions: versionmanagerMaxNumberVersions, versionmanagerMinNumberVersions: versionmanagerMinNumberVersions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionmanagerCreateVersionOnActivation: (query)  (optional)
     - parameter versionmanagerPurgingEnabled: (query)  (optional)
     - parameter versionmanagerPurgePaths: (query)  (optional)
     - parameter versionmanagerIvPaths: (query)  (optional)
     - parameter versionmanagerMaxAgeDays: (query)  (optional)
     - parameter versionmanagerMaxNumberVersions: (query)  (optional)
     - parameter versionmanagerMinNumberVersions: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplVersionManagerImplInfo> 
     */
    open class func comDayCqWcmCoreImplVersionManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionmanagerCreateVersionOnActivation: Bool? = nil, versionmanagerPurgingEnabled: Bool? = nil, versionmanagerPurgePaths: [String]? = nil, versionmanagerIvPaths: [String]? = nil, versionmanagerMaxAgeDays: Int? = nil, versionmanagerMaxNumberVersions: Int? = nil, versionmanagerMinNumberVersions: Int? = nil) -> RequestBuilder<ComDayCqWcmCoreImplVersionManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "versionmanager.createVersionOnActivation": versionmanagerCreateVersionOnActivation, 
            "versionmanager.purgingEnabled": versionmanagerPurgingEnabled, 
            "versionmanager.purgePaths": versionmanagerPurgePaths, 
            "versionmanager.ivPaths": versionmanagerIvPaths, 
            "versionmanager.maxAgeDays": versionmanagerMaxAgeDays?.encodeToJSON(), 
            "versionmanager.maxNumberVersions": versionmanagerMaxNumberVersions?.encodeToJSON(), 
            "versionmanager.minNumberVersions": versionmanagerMinNumberVersions?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplVersionManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionpurgePaths: (query)  (optional)
     - parameter versionpurgeRecursive: (query)  (optional)
     - parameter versionpurgeMaxVersions: (query)  (optional)
     - parameter versionpurgeMinVersions: (query)  (optional)
     - parameter versionpurgeMaxAgeDays: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplVersionPurgeTask(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionpurgePaths: [String]? = nil, versionpurgeRecursive: Bool? = nil, versionpurgeMaxVersions: Int? = nil, versionpurgeMinVersions: Int? = nil, versionpurgeMaxAgeDays: Int? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplVersionPurgeTaskInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplVersionPurgeTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, versionpurgePaths: versionpurgePaths, versionpurgeRecursive: versionpurgeRecursive, versionpurgeMaxVersions: versionpurgeMaxVersions, versionpurgeMinVersions: versionpurgeMinVersions, versionpurgeMaxAgeDays: versionpurgeMaxAgeDays).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionpurgePaths: (query)  (optional)
     - parameter versionpurgeRecursive: (query)  (optional)
     - parameter versionpurgeMaxVersions: (query)  (optional)
     - parameter versionpurgeMinVersions: (query)  (optional)
     - parameter versionpurgeMaxAgeDays: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplVersionPurgeTaskInfo> 
     */
    open class func comDayCqWcmCoreImplVersionPurgeTaskWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionpurgePaths: [String]? = nil, versionpurgeRecursive: Bool? = nil, versionpurgeMaxVersions: Int? = nil, versionpurgeMinVersions: Int? = nil, versionpurgeMaxAgeDays: Int? = nil) -> RequestBuilder<ComDayCqWcmCoreImplVersionPurgeTaskInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "versionpurge.paths": versionpurgePaths, 
            "versionpurge.recursive": versionpurgeRecursive, 
            "versionpurge.maxVersions": versionpurgeMaxVersions?.encodeToJSON(), 
            "versionpurge.minVersions": versionpurgeMinVersions?.encodeToJSON(), 
            "versionpurge.maxAgeDays": versionpurgeMaxAgeDays?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplVersionPurgeTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmdbgfilterEnabled: (query)  (optional)
     - parameter wcmdbgfilterJspDebug: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplWCMDebugFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmdbgfilterEnabled: Bool? = nil, wcmdbgfilterJspDebug: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplWCMDebugFilterInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplWCMDebugFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, wcmdbgfilterEnabled: wcmdbgfilterEnabled, wcmdbgfilterJspDebug: wcmdbgfilterJspDebug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmdbgfilterEnabled: (query)  (optional)
     - parameter wcmdbgfilterJspDebug: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplWCMDebugFilterInfo> 
     */
    open class func comDayCqWcmCoreImplWCMDebugFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmdbgfilterEnabled: Bool? = nil, wcmdbgfilterJspDebug: Bool? = nil) -> RequestBuilder<ComDayCqWcmCoreImplWCMDebugFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "wcmdbgfilter.enabled": wcmdbgfilterEnabled, 
            "wcmdbgfilter.jspDebug": wcmdbgfilterJspDebug
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplWCMDebugFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmdevmodefilterEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplWCMDeveloperModeFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmdevmodefilterEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplWCMDeveloperModeFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, wcmdevmodefilterEnabled: wcmdevmodefilterEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmdevmodefilterEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo> 
     */
    open class func comDayCqWcmCoreImplWCMDeveloperModeFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmdevmodefilterEnabled: Bool? = nil) -> RequestBuilder<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "wcmdevmodefilter.enabled": wcmdevmodefilterEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filterOrder: (query)  (optional)
     - parameter filterScope: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreImplWarpTimeWarpFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filterOrder: String? = nil, filterScope: String? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreImplWarpTimeWarpFilterInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreImplWarpTimeWarpFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, filterOrder: filterOrder, filterScope: filterScope).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filterOrder: (query)  (optional)
     - parameter filterScope: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo> 
     */
    open class func comDayCqWcmCoreImplWarpTimeWarpFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filterOrder: String? = nil, filterScope: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "filter.order": filterOrder, 
            "filter.scope": filterScope
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mvtstatisticsTrackingurl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreMvtMVTStatisticsImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mvtstatisticsTrackingurl: String? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreMvtMVTStatisticsImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreMvtMVTStatisticsImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mvtstatisticsTrackingurl: mvtstatisticsTrackingurl).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mvtstatisticsTrackingurl: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreMvtMVTStatisticsImplInfo> 
     */
    open class func comDayCqWcmCoreMvtMVTStatisticsImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mvtstatisticsTrackingurl: String? = nil) -> RequestBuilder<ComDayCqWcmCoreMvtMVTStatisticsImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "mvtstatistics.trackingurl": mvtstatisticsTrackingurl
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreMvtMVTStatisticsImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pageviewstatisticsTrackingurl: (query)  (optional)
     - parameter pageviewstatisticsTrackingscriptEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreStatsPageViewStatisticsImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pageviewstatisticsTrackingurl: String? = nil, pageviewstatisticsTrackingscriptEnabled: String? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreStatsPageViewStatisticsImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreStatsPageViewStatisticsImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pageviewstatisticsTrackingurl: pageviewstatisticsTrackingurl, pageviewstatisticsTrackingscriptEnabled: pageviewstatisticsTrackingscriptEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pageviewstatisticsTrackingurl: (query)  (optional)
     - parameter pageviewstatisticsTrackingscriptEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo> 
     */
    open class func comDayCqWcmCoreStatsPageViewStatisticsImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pageviewstatisticsTrackingurl: String? = nil, pageviewstatisticsTrackingscriptEnabled: String? = nil) -> RequestBuilder<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "pageviewstatistics.trackingurl": pageviewstatisticsTrackingurl, 
            "pageviewstatistics.trackingscript.enabled": pageviewstatisticsTrackingscriptEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmfilterMode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmCoreWCMRequestFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmfilterMode: String? = nil, completion: @escaping ((_ data: ComDayCqWcmCoreWCMRequestFilterInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmCoreWCMRequestFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, wcmfilterMode: wcmfilterMode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmfilterMode: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmCoreWCMRequestFilterInfo> 
     */
    open class func comDayCqWcmCoreWCMRequestFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmfilterMode: String? = nil) -> RequestBuilder<ComDayCqWcmCoreWCMRequestFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "wcmfilter.mode": wcmfilterMode
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmCoreWCMRequestFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extractFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterDesignPackageImporter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extractFilter: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterDesignPackageImporterInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterDesignPackageImporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, extractFilter: extractFilter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extractFilter: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterDesignPackageImporterInfo> 
     */
    open class func comDayCqWcmDesignimporterDesignPackageImporterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extractFilter: [String]? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterDesignPackageImporterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "extract.filter": extractFilter
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterDesignPackageImporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filepattern: (query)  (optional)
     - parameter buildPageNodes: (query)  (optional)
     - parameter buildClientLibs: (query)  (optional)
     - parameter buildCanvasComponent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterImplCanvasBuilderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filepattern: String? = nil, buildPageNodes: Bool? = nil, buildClientLibs: Bool? = nil, buildCanvasComponent: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterImplCanvasBuilderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, filepattern: filepattern, buildPageNodes: buildPageNodes, buildClientLibs: buildClientLibs, buildCanvasComponent: buildCanvasComponent).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filepattern: (query)  (optional)
     - parameter buildPageNodes: (query)  (optional)
     - parameter buildClientLibs: (query)  (optional)
     - parameter buildCanvasComponent: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo> 
     */
    open class func comDayCqWcmDesignimporterImplCanvasBuilderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filepattern: String? = nil, buildPageNodes: Bool? = nil, buildClientLibs: Bool? = nil, buildCanvasComponent: Bool? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "filepattern": filepattern, 
            "build.page.nodes": buildPageNodes, 
            "build.client.libs": buildClientLibs, 
            "build.canvas.component": buildCanvasComponent
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter minThreadPoolSize: (query)  (optional)
     - parameter maxThreadPoolSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, minThreadPoolSize: Int? = nil, maxThreadPoolSize: Int? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, minThreadPoolSize: minThreadPoolSize, maxThreadPoolSize: maxThreadPoolSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter minThreadPoolSize: (query)  (optional)
     - parameter maxThreadPoolSize: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo> 
     */
    open class func comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, minThreadPoolSize: Int? = nil, maxThreadPoolSize: Int? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "minThreadPoolSize": minThreadPoolSize?.encodeToJSON(), 
            "maxThreadPoolSize": maxThreadPoolSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter searchPattern: (query)  (optional)
     - parameter replacePattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, searchPattern: String? = nil, replacePattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterImplEntryPreprocessorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, searchPattern: searchPattern, replacePattern: replacePattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter searchPattern: (query)  (optional)
     - parameter replacePattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo> 
     */
    open class func comDayCqWcmDesignimporterImplEntryPreprocessorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, searchPattern: String? = nil, replacePattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "search.pattern": searchPattern, 
            "replace.pattern": replacePattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filepattern: (query)  (optional)
     - parameter deviceGroups: (query)  (optional)
     - parameter buildPageNodes: (query)  (optional)
     - parameter buildClientLibs: (query)  (optional)
     - parameter buildCanvasComponent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filepattern: String? = nil, deviceGroups: [String]? = nil, buildPageNodes: Bool? = nil, buildClientLibs: Bool? = nil, buildCanvasComponent: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterImplMobileCanvasBuilderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, filepattern: filepattern, deviceGroups: deviceGroups, buildPageNodes: buildPageNodes, buildClientLibs: buildClientLibs, buildCanvasComponent: buildCanvasComponent).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filepattern: (query)  (optional)
     - parameter deviceGroups: (query)  (optional)
     - parameter buildPageNodes: (query)  (optional)
     - parameter buildClientLibs: (query)  (optional)
     - parameter buildCanvasComponent: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo> 
     */
    open class func comDayCqWcmDesignimporterImplMobileCanvasBuilderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filepattern: String? = nil, deviceGroups: [String]? = nil, buildPageNodes: Bool? = nil, buildClientLibs: Bool? = nil, buildCanvasComponent: Bool? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "filepattern": filepattern, 
            "device.groups": deviceGroups, 
            "build.page.nodes": buildPageNodes, 
            "build.client.libs": buildClientLibs, 
            "build.canvas.component": buildCanvasComponent
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern, 
            "component.resourceType": componentResourceType
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern, 
            "component.resourceType": componentResourceType
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern, 
            "component.resourceType": componentResourceType
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern, 
            "component.resourceType": componentResourceType
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil, completion: @escaping ((_ data: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo> 
     */
    open class func comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "tagpattern": tagpattern
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter formsFormchooserservletAdvansesearchRequire: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmFoundationFormsImplFormChooserServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceName: String? = nil, slingServletResourceTypes: String? = nil, slingServletSelectors: String? = nil, slingServletMethods: [String]? = nil, formsFormchooserservletAdvansesearchRequire: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmFoundationFormsImplFormChooserServletInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmFoundationFormsImplFormChooserServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceName: serviceName, slingServletResourceTypes: slingServletResourceTypes, slingServletSelectors: slingServletSelectors, slingServletMethods: slingServletMethods, formsFormchooserservletAdvansesearchRequire: formsFormchooserservletAdvansesearchRequire).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter formsFormchooserservletAdvansesearchRequire: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmFoundationFormsImplFormChooserServletInfo> 
     */
    open class func comDayCqWcmFoundationFormsImplFormChooserServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceName: String? = nil, slingServletResourceTypes: String? = nil, slingServletSelectors: String? = nil, slingServletMethods: [String]? = nil, formsFormchooserservletAdvansesearchRequire: Bool? = nil) -> RequestBuilder<ComDayCqWcmFoundationFormsImplFormChooserServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.name": serviceName, 
            "sling.servlet.resourceTypes": slingServletResourceTypes, 
            "sling.servlet.selectors": slingServletSelectors, 
            "sling.servlet.methods": slingServletMethods, 
            "forms.formchooserservlet.advansesearch.require": formsFormchooserservletAdvansesearchRequire
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationFormsImplFormChooserServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formsFormparagraphpostprocessorEnabled: (query)  (optional)
     - parameter formsFormparagraphpostprocessorFormresourcetypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formsFormparagraphpostprocessorEnabled: Bool? = nil, formsFormparagraphpostprocessorFormresourcetypes: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmFoundationFormsImplFormParagraphPostProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, formsFormparagraphpostprocessorEnabled: formsFormparagraphpostprocessorEnabled, formsFormparagraphpostprocessorFormresourcetypes: formsFormparagraphpostprocessorFormresourcetypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formsFormparagraphpostprocessorEnabled: (query)  (optional)
     - parameter formsFormparagraphpostprocessorFormresourcetypes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo> 
     */
    open class func comDayCqWcmFoundationFormsImplFormParagraphPostProcessorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formsFormparagraphpostprocessorEnabled: Bool? = nil, formsFormparagraphpostprocessorFormresourcetypes: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "forms.formparagraphpostprocessor.enabled": formsFormparagraphpostprocessorEnabled, 
            "forms.formparagraphpostprocessor.formresourcetypes": formsFormparagraphpostprocessorFormresourcetypes
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nameWhitelist: (query)  (optional)
     - parameter allowExpressions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmFoundationFormsImplFormsHandlingServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nameWhitelist: String? = nil, allowExpressions: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmFoundationFormsImplFormsHandlingServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, nameWhitelist: nameWhitelist, allowExpressions: allowExpressions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nameWhitelist: (query)  (optional)
     - parameter allowExpressions: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo> 
     */
    open class func comDayCqWcmFoundationFormsImplFormsHandlingServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nameWhitelist: String? = nil, allowExpressions: Bool? = nil) -> RequestBuilder<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name.whitelist": nameWhitelist, 
            "allow.expressions": allowExpressions
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter resourceWhitelist: (query)  (optional)
     - parameter resourceBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmFoundationFormsImplMailServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: String? = nil, slingServletSelectors: String? = nil, resourceWhitelist: [String]? = nil, resourceBlacklist: String? = nil, completion: @escaping ((_ data: ComDayCqWcmFoundationFormsImplMailServletInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmFoundationFormsImplMailServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletResourceTypes: slingServletResourceTypes, slingServletSelectors: slingServletSelectors, resourceWhitelist: resourceWhitelist, resourceBlacklist: resourceBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter resourceWhitelist: (query)  (optional)
     - parameter resourceBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmFoundationFormsImplMailServletInfo> 
     */
    open class func comDayCqWcmFoundationFormsImplMailServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: String? = nil, slingServletSelectors: String? = nil, resourceWhitelist: [String]? = nil, resourceBlacklist: String? = nil) -> RequestBuilder<ComDayCqWcmFoundationFormsImplMailServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.resourceTypes": slingServletResourceTypes, 
            "sling.servlet.selectors": slingServletSelectors, 
            "resource.whitelist": resourceWhitelist, 
            "resource.blacklist": resourceBlacklist
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationFormsImplMailServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adaptSupportedWidths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adaptSupportedWidths: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmFoundationImplAdaptiveImageComponentServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, adaptSupportedWidths: adaptSupportedWidths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adaptSupportedWidths: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo> 
     */
    open class func comDayCqWcmFoundationImplAdaptiveImageComponentServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adaptSupportedWidths: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "adapt.supported.widths": adaptSupportedWidths
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter authHttpNologin: (query)  (optional)
     - parameter authHttpRealm: (query)  (optional)
     - parameter authDefaultLoginpage: (query)  (optional)
     - parameter authCredForm: (query)  (optional)
     - parameter authCredUtf8: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmFoundationImplHTTPAuthHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, authHttpNologin: Bool? = nil, authHttpRealm: String? = nil, authDefaultLoginpage: String? = nil, authCredForm: [String]? = nil, authCredUtf8: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmFoundationImplHTTPAuthHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmFoundationImplHTTPAuthHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, authHttpNologin: authHttpNologin, authHttpRealm: authHttpRealm, authDefaultLoginpage: authDefaultLoginpage, authCredForm: authCredForm, authCredUtf8: authCredUtf8).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter authHttpNologin: (query)  (optional)
     - parameter authHttpRealm: (query)  (optional)
     - parameter authDefaultLoginpage: (query)  (optional)
     - parameter authCredForm: (query)  (optional)
     - parameter authCredUtf8: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo> 
     */
    open class func comDayCqWcmFoundationImplHTTPAuthHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, authHttpNologin: Bool? = nil, authHttpRealm: String? = nil, authDefaultLoginpage: String? = nil, authCredForm: [String]? = nil, authCredUtf8: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path, 
            "auth.http.nologin": authHttpNologin, 
            "auth.http.realm": authHttpRealm, 
            "auth.default.loginpage": authDefaultLoginpage, 
            "auth.cred.form": authCredForm, 
            "auth.cred.utf8": authCredUtf8
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmFoundationImplPageImpressionsTracker(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingAuthRequirements: String? = nil, completion: @escaping ((_ data: ComDayCqWcmFoundationImplPageImpressionsTrackerInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmFoundationImplPageImpressionsTrackerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingAuthRequirements: slingAuthRequirements).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo> 
     */
    open class func comDayCqWcmFoundationImplPageImpressionsTrackerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingAuthRequirements: String? = nil) -> RequestBuilder<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.auth.requirements": slingAuthRequirements
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter excludedResourceTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmFoundationImplPageRedirectServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, excludedResourceTypes: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmFoundationImplPageRedirectServletInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmFoundationImplPageRedirectServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, excludedResourceTypes: excludedResourceTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter excludedResourceTypes: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmFoundationImplPageRedirectServletInfo> 
     */
    open class func comDayCqWcmFoundationImplPageRedirectServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, excludedResourceTypes: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationImplPageRedirectServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "excluded.resource.types": excludedResourceTypes
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationImplPageRedirectServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultAttachmentTypeBlacklist: (query)  (optional)
     - parameter baselineAttachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultAttachmentTypeBlacklist: [String]? = nil, baselineAttachmentTypeBlacklist: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultAttachmentTypeBlacklist: defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist: baselineAttachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultAttachmentTypeBlacklist: (query)  (optional)
     - parameter baselineAttachmentTypeBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo> 
     */
    open class func comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultAttachmentTypeBlacklist: [String]? = nil, baselineAttachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "default.attachment.type.blacklist": defaultAttachmentTypeBlacklist, 
            "baseline.attachment.type.blacklist": baselineAttachmentTypeBlacklist
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterWhitelist: (query)  (optional)
     - parameter parameterWhitelistPrefixes: (query)  (optional)
     - parameter binaryParameterWhitelist: (query)  (optional)
     - parameter modifierWhitelist: (query)  (optional)
     - parameter operationWhitelist: (query)  (optional)
     - parameter operationWhitelistPrefixes: (query)  (optional)
     - parameter typehintWhitelist: (query)  (optional)
     - parameter resourcetypeWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterWhitelist: [String]? = nil, parameterWhitelistPrefixes: [String]? = nil, binaryParameterWhitelist: [String]? = nil, modifierWhitelist: [String]? = nil, operationWhitelist: [String]? = nil, operationWhitelistPrefixes: [String]? = nil, typehintWhitelist: [String]? = nil, resourcetypeWhitelist: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, parameterWhitelist: parameterWhitelist, parameterWhitelistPrefixes: parameterWhitelistPrefixes, binaryParameterWhitelist: binaryParameterWhitelist, modifierWhitelist: modifierWhitelist, operationWhitelist: operationWhitelist, operationWhitelistPrefixes: operationWhitelistPrefixes, typehintWhitelist: typehintWhitelist, resourcetypeWhitelist: resourcetypeWhitelist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterWhitelist: (query)  (optional)
     - parameter parameterWhitelistPrefixes: (query)  (optional)
     - parameter binaryParameterWhitelist: (query)  (optional)
     - parameter modifierWhitelist: (query)  (optional)
     - parameter operationWhitelist: (query)  (optional)
     - parameter operationWhitelistPrefixes: (query)  (optional)
     - parameter typehintWhitelist: (query)  (optional)
     - parameter resourcetypeWhitelist: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo> 
     */
    open class func comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterWhitelist: [String]? = nil, parameterWhitelistPrefixes: [String]? = nil, binaryParameterWhitelist: [String]? = nil, modifierWhitelist: [String]? = nil, operationWhitelist: [String]? = nil, operationWhitelistPrefixes: [String]? = nil, typehintWhitelist: [String]? = nil, resourcetypeWhitelist: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "parameter.whitelist": parameterWhitelist, 
            "parameter.whitelist.prefixes": parameterWhitelistPrefixes, 
            "binary.parameter.whitelist": binaryParameterWhitelist, 
            "modifier.whitelist": modifierWhitelist, 
            "operation.whitelist": operationWhitelist, 
            "operation.whitelist.prefixes": operationWhitelistPrefixes, 
            "typehint.whitelist": typehintWhitelist, 
            "resourcetype.whitelist": resourcetypeWhitelist
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deviceInfoTransformerEnabled: (query)  (optional)
     - parameter deviceInfoTransformerCssStyle: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deviceInfoTransformerEnabled: Bool? = nil, deviceInfoTransformerCssStyle: String? = nil, completion: @escaping ((_ data: ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, deviceInfoTransformerEnabled: deviceInfoTransformerEnabled, deviceInfoTransformerCssStyle: deviceInfoTransformerCssStyle).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deviceInfoTransformerEnabled: (query)  (optional)
     - parameter deviceInfoTransformerCssStyle: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo> 
     */
    open class func comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deviceInfoTransformerEnabled: Bool? = nil, deviceInfoTransformerCssStyle: String? = nil) -> RequestBuilder<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "device.info.transformer.enabled": deviceInfoTransformerEnabled, 
            "device.info.transformer.css.style": deviceInfoTransformerCssStyle
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter redirectEnabled: (query)  (optional)
     - parameter redirectStatsEnabled: (query)  (optional)
     - parameter redirectExtensions: (query)  (optional)
     - parameter redirectPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMobileCoreImplRedirectRedirectFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, redirectEnabled: Bool? = nil, redirectStatsEnabled: Bool? = nil, redirectExtensions: [String]? = nil, redirectPaths: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMobileCoreImplRedirectRedirectFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, redirectEnabled: redirectEnabled, redirectStatsEnabled: redirectStatsEnabled, redirectExtensions: redirectExtensions, redirectPaths: redirectPaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter redirectEnabled: (query)  (optional)
     - parameter redirectStatsEnabled: (query)  (optional)
     - parameter redirectExtensions: (query)  (optional)
     - parameter redirectPaths: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo> 
     */
    open class func comDayCqWcmMobileCoreImplRedirectRedirectFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, redirectEnabled: Bool? = nil, redirectStatsEnabled: Bool? = nil, redirectExtensions: [String]? = nil, redirectPaths: [String]? = nil) -> RequestBuilder<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "redirect.enabled": redirectEnabled, 
            "redirect.stats.enabled": redirectStatsEnabled, 
            "redirect.extensions": redirectExtensions, 
            "redirect.paths": redirectPaths
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter contentcopyactionOrderStyle: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMsmImplActionsContentCopyActionFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, contentcopyactionOrderStyle: String? = nil, completion: @escaping ((_ data: ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMsmImplActionsContentCopyActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops, contentcopyactionOrderStyle: contentcopyactionOrderStyle).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter contentcopyactionOrderStyle: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo> 
     */
    open class func comDayCqWcmMsmImplActionsContentCopyActionFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, contentcopyactionOrderStyle: String? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes, 
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems, 
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops, 
            "contentcopyaction.order.style": contentcopyactionOrderStyle
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMsmImplActionsContentDeleteActionFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMsmImplActionsContentDeleteActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo> 
     */
    open class func comDayCqWcmMsmImplActionsContentDeleteActionFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes, 
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems, 
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmActionIgnoredMixin: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMsmImplActionsContentUpdateActionFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmActionIgnoredMixin: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMsmImplActionsContentUpdateActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops, cqWcmMsmActionIgnoredMixin: cqWcmMsmActionIgnoredMixin).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmActionIgnoredMixin: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo> 
     */
    open class func comDayCqWcmMsmImplActionsContentUpdateActionFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmActionIgnoredMixin: [String]? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes, 
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems, 
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops, 
            "cq.wcm.msm.action.ignoredMixin": cqWcmMsmActionIgnoredMixin
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMsmImplActionsOrderChildrenActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo> 
     */
    open class func comDayCqWcmMsmImplActionsOrderChildrenActionFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes, 
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems, 
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmImplActionsPagemovePropReferenceUpdate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMsmImplActionsPageMoveActionFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmImplActionsPagemovePropReferenceUpdate: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMsmImplActionsPageMoveActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops, cqWcmMsmImplActionsPagemovePropReferenceUpdate: cqWcmMsmImplActionsPagemovePropReferenceUpdate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmImplActionsPagemovePropReferenceUpdate: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo> 
     */
    open class func comDayCqWcmMsmImplActionsPageMoveActionFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmImplActionsPagemovePropReferenceUpdate: Bool? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes, 
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems, 
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops, 
            "cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate": cqWcmMsmImplActionsPagemovePropReferenceUpdate
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmImplActionReferencesupdatePropUpdateNested: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmImplActionReferencesupdatePropUpdateNested: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops, cqWcmMsmImplActionReferencesupdatePropUpdateNested: cqWcmMsmImplActionReferencesupdatePropUpdateNested).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmImplActionReferencesupdatePropUpdateNested: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo> 
     */
    open class func comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmImplActionReferencesupdatePropUpdateNested: Bool? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes, 
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems, 
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops, 
            "cq.wcm.msm.impl.action.referencesupdate.prop_updateNested": cqWcmMsmImplActionReferencesupdatePropUpdateNested
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMsmImplActionsVersionCopyActionFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMsmImplActionsVersionCopyActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo> 
     */
    open class func comDayCqWcmMsmImplActionsVersionCopyActionFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes, 
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems, 
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter liverelationshipmgrRelationsconfigDefault: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMsmImplLiveRelationshipManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, liverelationshipmgrRelationsconfigDefault: String? = nil, completion: @escaping ((_ data: ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMsmImplLiveRelationshipManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, liverelationshipmgrRelationsconfigDefault: liverelationshipmgrRelationsconfigDefault).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter liverelationshipmgrRelationsconfigDefault: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo> 
     */
    open class func comDayCqWcmMsmImplLiveRelationshipManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, liverelationshipmgrRelationsconfigDefault: String? = nil) -> RequestBuilder<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "liverelationshipmgr.relationsconfig.default": liverelationshipmgrRelationsconfigDefault
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter rolloutmgrExcludedpropsDefault: (query)  (optional)
     - parameter rolloutmgrExcludedparagraphpropsDefault: (query)  (optional)
     - parameter rolloutmgrExcludednodetypesDefault: (query)  (optional)
     - parameter rolloutmgrThreadpoolMaxsize: (query)  (optional)
     - parameter rolloutmgrThreadpoolMaxshutdowntime: (query)  (optional)
     - parameter rolloutmgrThreadpoolPriority: (query)  (optional)
     - parameter rolloutmgrCommitSize: (query)  (optional)
     - parameter rolloutmgrConflicthandlingEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMsmImplRolloutManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, rolloutmgrExcludedpropsDefault: [String]? = nil, rolloutmgrExcludedparagraphpropsDefault: [String]? = nil, rolloutmgrExcludednodetypesDefault: [String]? = nil, rolloutmgrThreadpoolMaxsize: Int? = nil, rolloutmgrThreadpoolMaxshutdowntime: Int? = nil, rolloutmgrThreadpoolPriority: String? = nil, rolloutmgrCommitSize: Int? = nil, rolloutmgrConflicthandlingEnabled: Bool? = nil, completion: @escaping ((_ data: ComDayCqWcmMsmImplRolloutManagerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMsmImplRolloutManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, rolloutmgrExcludedpropsDefault: rolloutmgrExcludedpropsDefault, rolloutmgrExcludedparagraphpropsDefault: rolloutmgrExcludedparagraphpropsDefault, rolloutmgrExcludednodetypesDefault: rolloutmgrExcludednodetypesDefault, rolloutmgrThreadpoolMaxsize: rolloutmgrThreadpoolMaxsize, rolloutmgrThreadpoolMaxshutdowntime: rolloutmgrThreadpoolMaxshutdowntime, rolloutmgrThreadpoolPriority: rolloutmgrThreadpoolPriority, rolloutmgrCommitSize: rolloutmgrCommitSize, rolloutmgrConflicthandlingEnabled: rolloutmgrConflicthandlingEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter rolloutmgrExcludedpropsDefault: (query)  (optional)
     - parameter rolloutmgrExcludedparagraphpropsDefault: (query)  (optional)
     - parameter rolloutmgrExcludednodetypesDefault: (query)  (optional)
     - parameter rolloutmgrThreadpoolMaxsize: (query)  (optional)
     - parameter rolloutmgrThreadpoolMaxshutdowntime: (query)  (optional)
     - parameter rolloutmgrThreadpoolPriority: (query)  (optional)
     - parameter rolloutmgrCommitSize: (query)  (optional)
     - parameter rolloutmgrConflicthandlingEnabled: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMsmImplRolloutManagerImplInfo> 
     */
    open class func comDayCqWcmMsmImplRolloutManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, rolloutmgrExcludedpropsDefault: [String]? = nil, rolloutmgrExcludedparagraphpropsDefault: [String]? = nil, rolloutmgrExcludednodetypesDefault: [String]? = nil, rolloutmgrThreadpoolMaxsize: Int? = nil, rolloutmgrThreadpoolMaxshutdowntime: Int? = nil, rolloutmgrThreadpoolPriority: String? = nil, rolloutmgrCommitSize: Int? = nil, rolloutmgrConflicthandlingEnabled: Bool? = nil) -> RequestBuilder<ComDayCqWcmMsmImplRolloutManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.filter": eventFilter, 
            "rolloutmgr.excludedprops.default": rolloutmgrExcludedpropsDefault, 
            "rolloutmgr.excludedparagraphprops.default": rolloutmgrExcludedparagraphpropsDefault, 
            "rolloutmgr.excludednodetypes.default": rolloutmgrExcludednodetypesDefault, 
            "rolloutmgr.threadpool.maxsize": rolloutmgrThreadpoolMaxsize?.encodeToJSON(), 
            "rolloutmgr.threadpool.maxshutdowntime": rolloutmgrThreadpoolMaxshutdowntime?.encodeToJSON(), 
            "rolloutmgr.threadpool.priority": rolloutmgrThreadpoolPriority, 
            "rolloutmgr.commit.size": rolloutmgrCommitSize?.encodeToJSON(), 
            "rolloutmgr.conflicthandling.enabled": rolloutmgrConflicthandlingEnabled
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplRolloutManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogservletDefaultEventsCount: (query)  (optional)
     - parameter auditlogservletDefaultPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmMsmImplServletsAuditLogServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogservletDefaultEventsCount: Int? = nil, auditlogservletDefaultPath: String? = nil, completion: @escaping ((_ data: ComDayCqWcmMsmImplServletsAuditLogServletInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmMsmImplServletsAuditLogServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, auditlogservletDefaultEventsCount: auditlogservletDefaultEventsCount, auditlogservletDefaultPath: auditlogservletDefaultPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogservletDefaultEventsCount: (query)  (optional)
     - parameter auditlogservletDefaultPath: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmMsmImplServletsAuditLogServletInfo> 
     */
    open class func comDayCqWcmMsmImplServletsAuditLogServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogservletDefaultEventsCount: Int? = nil, auditlogservletDefaultPath: String? = nil) -> RequestBuilder<ComDayCqWcmMsmImplServletsAuditLogServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "auditlogservlet.default.events.count": auditlogservletDefaultEventsCount?.encodeToJSON(), 
            "auditlogservlet.default.path": auditlogservletDefaultPath
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplServletsAuditLogServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter emailFrom: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmNotificationEmailImplEmailChannel(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, emailFrom: String? = nil, completion: @escaping ((_ data: ComDayCqWcmNotificationEmailImplEmailChannelInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmNotificationEmailImplEmailChannelWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, emailFrom: emailFrom).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter emailFrom: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmNotificationEmailImplEmailChannelInfo> 
     */
    open class func comDayCqWcmNotificationEmailImplEmailChannelWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, emailFrom: String? = nil) -> RequestBuilder<ComDayCqWcmNotificationEmailImplEmailChannelInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "email.from": emailFrom
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmNotificationEmailImplEmailChannelInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmNotificationImplNotificationManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmNotificationImplNotificationManagerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmNotificationImplNotificationManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmNotificationImplNotificationManagerImplInfo> 
     */
    open class func comDayCqWcmNotificationImplNotificationManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: [String]? = nil) -> RequestBuilder<ComDayCqWcmNotificationImplNotificationManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.topics": eventTopics
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmNotificationImplNotificationManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comDayCqWcmScriptingBvpScriptEngines: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmScriptingImplBVPManager(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comDayCqWcmScriptingBvpScriptEngines: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmScriptingImplBVPManagerInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmScriptingImplBVPManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comDayCqWcmScriptingBvpScriptEngines: comDayCqWcmScriptingBvpScriptEngines).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comDayCqWcmScriptingBvpScriptEngines: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmScriptingImplBVPManagerInfo> 
     */
    open class func comDayCqWcmScriptingImplBVPManagerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comDayCqWcmScriptingBvpScriptEngines: [String]? = nil) -> RequestBuilder<ComDayCqWcmScriptingImplBVPManagerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "com.day.cq.wcm.scripting.bvp.script.engines": comDayCqWcmScriptingBvpScriptEngines
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmScriptingImplBVPManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmUndoEnabled: (query)  (optional)
     - parameter cqWcmUndoPath: (query)  (optional)
     - parameter cqWcmUndoValidity: (query)  (optional)
     - parameter cqWcmUndoSteps: (query)  (optional)
     - parameter cqWcmUndoPersistence: (query)  (optional)
     - parameter cqWcmUndoPersistenceMode: (query)  (optional)
     - parameter cqWcmUndoMarkermode: (query)  (optional)
     - parameter cqWcmUndoWhitelist: (query)  (optional)
     - parameter cqWcmUndoBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmUndoUndoConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmUndoEnabled: Bool? = nil, cqWcmUndoPath: String? = nil, cqWcmUndoValidity: Int? = nil, cqWcmUndoSteps: Int? = nil, cqWcmUndoPersistence: String? = nil, cqWcmUndoPersistenceMode: Bool? = nil, cqWcmUndoMarkermode: String? = nil, cqWcmUndoWhitelist: [String]? = nil, cqWcmUndoBlacklist: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmUndoUndoConfigInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmUndoUndoConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmUndoEnabled: cqWcmUndoEnabled, cqWcmUndoPath: cqWcmUndoPath, cqWcmUndoValidity: cqWcmUndoValidity, cqWcmUndoSteps: cqWcmUndoSteps, cqWcmUndoPersistence: cqWcmUndoPersistence, cqWcmUndoPersistenceMode: cqWcmUndoPersistenceMode, cqWcmUndoMarkermode: cqWcmUndoMarkermode, cqWcmUndoWhitelist: cqWcmUndoWhitelist, cqWcmUndoBlacklist: cqWcmUndoBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.undo.UndoConfig
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmUndoEnabled: (query)  (optional)
     - parameter cqWcmUndoPath: (query)  (optional)
     - parameter cqWcmUndoValidity: (query)  (optional)
     - parameter cqWcmUndoSteps: (query)  (optional)
     - parameter cqWcmUndoPersistence: (query)  (optional)
     - parameter cqWcmUndoPersistenceMode: (query)  (optional)
     - parameter cqWcmUndoMarkermode: (query)  (optional)
     - parameter cqWcmUndoWhitelist: (query)  (optional)
     - parameter cqWcmUndoBlacklist: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmUndoUndoConfigInfo> 
     */
    open class func comDayCqWcmUndoUndoConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmUndoEnabled: Bool? = nil, cqWcmUndoPath: String? = nil, cqWcmUndoValidity: Int? = nil, cqWcmUndoSteps: Int? = nil, cqWcmUndoPersistence: String? = nil, cqWcmUndoPersistenceMode: Bool? = nil, cqWcmUndoMarkermode: String? = nil, cqWcmUndoWhitelist: [String]? = nil, cqWcmUndoBlacklist: [String]? = nil) -> RequestBuilder<ComDayCqWcmUndoUndoConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cq.wcm.undo.enabled": cqWcmUndoEnabled, 
            "cq.wcm.undo.path": cqWcmUndoPath, 
            "cq.wcm.undo.validity": cqWcmUndoValidity?.encodeToJSON(), 
            "cq.wcm.undo.steps": cqWcmUndoSteps?.encodeToJSON(), 
            "cq.wcm.undo.persistence": cqWcmUndoPersistence, 
            "cq.wcm.undo.persistence.mode": cqWcmUndoPersistenceMode, 
            "cq.wcm.undo.markermode": cqWcmUndoMarkermode, 
            "cq.wcm.undo.whitelist": cqWcmUndoWhitelist, 
            "cq.wcm.undo.blacklist": cqWcmUndoBlacklist
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmUndoUndoConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter flushAgents: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmWebservicesupportImplReplicationEventListener(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, flushAgents: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmWebservicesupportImplReplicationEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, flushAgents: flushAgents).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter flushAgents: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo> 
     */
    open class func comDayCqWcmWebservicesupportImplReplicationEventListenerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, flushAgents: [String]? = nil) -> RequestBuilder<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "Flush agents": flushAgents
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter minThreadPoolSize: (query)  (optional)
     - parameter maxThreadPoolSize: (query)  (optional)
     - parameter cqWcmWorkflowTerminateOnActivate: (query)  (optional)
     - parameter cqWcmWorklfowTerminateExclusionList: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, minThreadPoolSize: Int? = nil, maxThreadPoolSize: Int? = nil, cqWcmWorkflowTerminateOnActivate: Bool? = nil, cqWcmWorklfowTerminateExclusionList: [String]? = nil, completion: @escaping ((_ data: ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmWorkflowImplWcmWorkflowServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, minThreadPoolSize: minThreadPoolSize, maxThreadPoolSize: maxThreadPoolSize, cqWcmWorkflowTerminateOnActivate: cqWcmWorkflowTerminateOnActivate, cqWcmWorklfowTerminateExclusionList: cqWcmWorklfowTerminateExclusionList).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter minThreadPoolSize: (query)  (optional)
     - parameter maxThreadPoolSize: (query)  (optional)
     - parameter cqWcmWorkflowTerminateOnActivate: (query)  (optional)
     - parameter cqWcmWorklfowTerminateExclusionList: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo> 
     */
    open class func comDayCqWcmWorkflowImplWcmWorkflowServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, minThreadPoolSize: Int? = nil, maxThreadPoolSize: Int? = nil, cqWcmWorkflowTerminateOnActivate: Bool? = nil, cqWcmWorklfowTerminateExclusionList: [String]? = nil) -> RequestBuilder<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "event.filter": eventFilter, 
            "minThreadPoolSize": minThreadPoolSize?.encodeToJSON(), 
            "maxThreadPoolSize": maxThreadPoolSize?.encodeToJSON(), 
            "cq.wcm.workflow.terminate.on.activate": cqWcmWorkflowTerminateOnActivate, 
            "cq.wcm.worklfow.terminate.exclusion.list": cqWcmWorklfowTerminateExclusionList
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter workflowpackageinfoproviderFilter: (query)  (optional)
     - parameter workflowpackageinfoproviderFilterRootpath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, workflowpackageinfoproviderFilter: [String]? = nil, workflowpackageinfoproviderFilterRootpath: String? = nil, completion: @escaping ((_ data: ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo?,_ error: Error?) -> Void)) {
        comDayCqWcmWorkflowImplWorkflowPackageInfoProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, workflowpackageinfoproviderFilter: workflowpackageinfoproviderFilter, workflowpackageinfoproviderFilterRootpath: workflowpackageinfoproviderFilterRootpath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter workflowpackageinfoproviderFilter: (query)  (optional)
     - parameter workflowpackageinfoproviderFilterRootpath: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo> 
     */
    open class func comDayCqWcmWorkflowImplWorkflowPackageInfoProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, workflowpackageinfoproviderFilter: [String]? = nil, workflowpackageinfoproviderFilterRootpath: String? = nil) -> RequestBuilder<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "workflowpackageinfoprovider.filter": workflowpackageinfoproviderFilter, 
            "workflowpackageinfoprovider.filter.rootpath": workflowpackageinfoproviderFilterRootpath
        ])

        let requestBuilder: RequestBuilder<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmllibmanagerClientmanager: (query)  (optional)
     - parameter htmllibmanagerDebug: (query)  (optional)
     - parameter htmllibmanagerDebugConsole: (query)  (optional)
     - parameter htmllibmanagerDebugInitJs: (query)  (optional)
     - parameter htmllibmanagerDefaultthemename: (query)  (optional)
     - parameter htmllibmanagerDefaultuserthemename: (query)  (optional)
     - parameter htmllibmanagerFirebuglitePath: (query)  (optional)
     - parameter htmllibmanagerForceCQUrlInfo: (query)  (optional)
     - parameter htmllibmanagerGzip: (query)  (optional)
     - parameter htmllibmanagerMaxage: (query)  (optional)
     - parameter htmllibmanagerMaxDataUriSize: (query)  (optional)
     - parameter htmllibmanagerMinify: (query)  (optional)
     - parameter htmllibmanagerPathList: (query)  (optional)
     - parameter htmllibmanagerTiming: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWidgetImplHtmlLibraryManagerImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmllibmanagerClientmanager: String? = nil, htmllibmanagerDebug: Bool? = nil, htmllibmanagerDebugConsole: Bool? = nil, htmllibmanagerDebugInitJs: String? = nil, htmllibmanagerDefaultthemename: String? = nil, htmllibmanagerDefaultuserthemename: String? = nil, htmllibmanagerFirebuglitePath: String? = nil, htmllibmanagerForceCQUrlInfo: Bool? = nil, htmllibmanagerGzip: Bool? = nil, htmllibmanagerMaxage: Int? = nil, htmllibmanagerMaxDataUriSize: Int? = nil, htmllibmanagerMinify: Bool? = nil, htmllibmanagerPathList: [String]? = nil, htmllibmanagerTiming: Bool? = nil, completion: @escaping ((_ data: ComDayCqWidgetImplHtmlLibraryManagerImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWidgetImplHtmlLibraryManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, htmllibmanagerClientmanager: htmllibmanagerClientmanager, htmllibmanagerDebug: htmllibmanagerDebug, htmllibmanagerDebugConsole: htmllibmanagerDebugConsole, htmllibmanagerDebugInitJs: htmllibmanagerDebugInitJs, htmllibmanagerDefaultthemename: htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename: htmllibmanagerDefaultuserthemename, htmllibmanagerFirebuglitePath: htmllibmanagerFirebuglitePath, htmllibmanagerForceCQUrlInfo: htmllibmanagerForceCQUrlInfo, htmllibmanagerGzip: htmllibmanagerGzip, htmllibmanagerMaxage: htmllibmanagerMaxage, htmllibmanagerMaxDataUriSize: htmllibmanagerMaxDataUriSize, htmllibmanagerMinify: htmllibmanagerMinify, htmllibmanagerPathList: htmllibmanagerPathList, htmllibmanagerTiming: htmllibmanagerTiming).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmllibmanagerClientmanager: (query)  (optional)
     - parameter htmllibmanagerDebug: (query)  (optional)
     - parameter htmllibmanagerDebugConsole: (query)  (optional)
     - parameter htmllibmanagerDebugInitJs: (query)  (optional)
     - parameter htmllibmanagerDefaultthemename: (query)  (optional)
     - parameter htmllibmanagerDefaultuserthemename: (query)  (optional)
     - parameter htmllibmanagerFirebuglitePath: (query)  (optional)
     - parameter htmllibmanagerForceCQUrlInfo: (query)  (optional)
     - parameter htmllibmanagerGzip: (query)  (optional)
     - parameter htmllibmanagerMaxage: (query)  (optional)
     - parameter htmllibmanagerMaxDataUriSize: (query)  (optional)
     - parameter htmllibmanagerMinify: (query)  (optional)
     - parameter htmllibmanagerPathList: (query)  (optional)
     - parameter htmllibmanagerTiming: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWidgetImplHtmlLibraryManagerImplInfo> 
     */
    open class func comDayCqWidgetImplHtmlLibraryManagerImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmllibmanagerClientmanager: String? = nil, htmllibmanagerDebug: Bool? = nil, htmllibmanagerDebugConsole: Bool? = nil, htmllibmanagerDebugInitJs: String? = nil, htmllibmanagerDefaultthemename: String? = nil, htmllibmanagerDefaultuserthemename: String? = nil, htmllibmanagerFirebuglitePath: String? = nil, htmllibmanagerForceCQUrlInfo: Bool? = nil, htmllibmanagerGzip: Bool? = nil, htmllibmanagerMaxage: Int? = nil, htmllibmanagerMaxDataUriSize: Int? = nil, htmllibmanagerMinify: Bool? = nil, htmllibmanagerPathList: [String]? = nil, htmllibmanagerTiming: Bool? = nil) -> RequestBuilder<ComDayCqWidgetImplHtmlLibraryManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "htmllibmanager.clientmanager": htmllibmanagerClientmanager, 
            "htmllibmanager.debug": htmllibmanagerDebug, 
            "htmllibmanager.debug.console": htmllibmanagerDebugConsole, 
            "htmllibmanager.debug.init.js": htmllibmanagerDebugInitJs, 
            "htmllibmanager.defaultthemename": htmllibmanagerDefaultthemename, 
            "htmllibmanager.defaultuserthemename": htmllibmanagerDefaultuserthemename, 
            "htmllibmanager.firebuglite.path": htmllibmanagerFirebuglitePath, 
            "htmllibmanager.forceCQUrlInfo": htmllibmanagerForceCQUrlInfo, 
            "htmllibmanager.gzip": htmllibmanagerGzip, 
            "htmllibmanager.maxage": htmllibmanagerMaxage?.encodeToJSON(), 
            "htmllibmanager.maxDataUriSize": htmllibmanagerMaxDataUriSize?.encodeToJSON(), 
            "htmllibmanager.minify": htmllibmanagerMinify, 
            "htmllibmanager.path.list": htmllibmanagerPathList, 
            "htmllibmanager.timing": htmllibmanagerTiming
        ])

        let requestBuilder: RequestBuilder<ComDayCqWidgetImplHtmlLibraryManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extendableWidgets: (query)  (optional)
     - parameter widgetextensionproviderDebug: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWidgetImplWidgetExtensionProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extendableWidgets: [String]? = nil, widgetextensionproviderDebug: Bool? = nil, completion: @escaping ((_ data: ComDayCqWidgetImplWidgetExtensionProviderImplInfo?,_ error: Error?) -> Void)) {
        comDayCqWidgetImplWidgetExtensionProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, extendableWidgets: extendableWidgets, widgetextensionproviderDebug: widgetextensionproviderDebug).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extendableWidgets: (query)  (optional)
     - parameter widgetextensionproviderDebug: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWidgetImplWidgetExtensionProviderImplInfo> 
     */
    open class func comDayCqWidgetImplWidgetExtensionProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extendableWidgets: [String]? = nil, widgetextensionproviderDebug: Bool? = nil) -> RequestBuilder<ComDayCqWidgetImplWidgetExtensionProviderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "extendable.widgets": extendableWidgets, 
            "widgetextensionprovider.debug": widgetextensionproviderDebug
        ])

        let requestBuilder: RequestBuilder<ComDayCqWidgetImplWidgetExtensionProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter hostPrefix: (query)  (optional)
     - parameter notifyOnabort: (query)  (optional)
     - parameter notifyOncomplete: (query)  (optional)
     - parameter notifyOncontainercomplete: (query)  (optional)
     - parameter notifyUseronly: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWorkflowImplEmailEMailNotificationService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fromAddress: String? = nil, hostPrefix: String? = nil, notifyOnabort: Bool? = nil, notifyOncomplete: Bool? = nil, notifyOncontainercomplete: Bool? = nil, notifyUseronly: Bool? = nil, completion: @escaping ((_ data: ComDayCqWorkflowImplEmailEMailNotificationServiceInfo?,_ error: Error?) -> Void)) {
        comDayCqWorkflowImplEmailEMailNotificationServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fromAddress: fromAddress, hostPrefix: hostPrefix, notifyOnabort: notifyOnabort, notifyOncomplete: notifyOncomplete, notifyOncontainercomplete: notifyOncontainercomplete, notifyUseronly: notifyUseronly).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter hostPrefix: (query)  (optional)
     - parameter notifyOnabort: (query)  (optional)
     - parameter notifyOncomplete: (query)  (optional)
     - parameter notifyOncontainercomplete: (query)  (optional)
     - parameter notifyUseronly: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo> 
     */
    open class func comDayCqWorkflowImplEmailEMailNotificationServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fromAddress: String? = nil, hostPrefix: String? = nil, notifyOnabort: Bool? = nil, notifyOncomplete: Bool? = nil, notifyOncontainercomplete: Bool? = nil, notifyUseronly: Bool? = nil) -> RequestBuilder<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "from.address": fromAddress, 
            "host.prefix": hostPrefix, 
            "notify.onabort": notifyOnabort, 
            "notify.oncomplete": notifyOncomplete, 
            "notify.oncontainercomplete": notifyOncontainercomplete, 
            "notify.useronly": notifyUseronly
        ])

        let requestBuilder: RequestBuilder<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter notifyOnupdate: (query)  (optional)
     - parameter notifyOncomplete: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCqWorkflowImplEmailTaskEMailNotificationService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, notifyOnupdate: Bool? = nil, notifyOncomplete: Bool? = nil, completion: @escaping ((_ data: ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo?,_ error: Error?) -> Void)) {
        comDayCqWorkflowImplEmailTaskEMailNotificationServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, notifyOnupdate: notifyOnupdate, notifyOncomplete: notifyOncomplete).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter notifyOnupdate: (query)  (optional)
     - parameter notifyOncomplete: (query)  (optional)
     - returns: RequestBuilder<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo> 
     */
    open class func comDayCqWorkflowImplEmailTaskEMailNotificationServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, notifyOnupdate: Bool? = nil, notifyOncomplete: Bool? = nil) -> RequestBuilder<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "notify.onupdate": notifyOnupdate, 
            "notify.oncomplete": notifyOncomplete
        ])

        let requestBuilder: RequestBuilder<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter tokenRequiredAttr: (query)  (optional)
     - parameter tokenAlternateUrl: (query)  (optional)
     - parameter tokenEncapsulated: (query)  (optional)
     - parameter skipTokenRefresh: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, tokenRequiredAttr: String? = nil, tokenAlternateUrl: String? = nil, tokenEncapsulated: Bool? = nil, skipTokenRefresh: [String]? = nil, completion: @escaping ((_ data: ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo?,_ error: Error?) -> Void)) {
        comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, tokenRequiredAttr: tokenRequiredAttr, tokenAlternateUrl: tokenAlternateUrl, tokenEncapsulated: tokenEncapsulated, skipTokenRefresh: skipTokenRefresh).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter tokenRequiredAttr: (query)  (optional)
     - parameter tokenAlternateUrl: (query)  (optional)
     - parameter tokenEncapsulated: (query)  (optional)
     - parameter skipTokenRefresh: (query)  (optional)
     - returns: RequestBuilder<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo> 
     */
    open class func comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, tokenRequiredAttr: String? = nil, tokenAlternateUrl: String? = nil, tokenEncapsulated: Bool? = nil, skipTokenRefresh: [String]? = nil) -> RequestBuilder<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo> {
        let path = "/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path, 
            "token.required.attr": tokenRequiredAttr, 
            "token.alternate.url": tokenAlternateUrl, 
            "token.encapsulated": tokenEncapsulated, 
            "skip.token.refresh": skipTokenRefresh
        ])

        let requestBuilder: RequestBuilder<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableTokenCleanupTask: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter batchSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func comDayCrxSecurityTokenImplTokenCleanupTask(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableTokenCleanupTask: Bool? = nil, schedulerExpression: String? = nil, batchSize: Int? = nil, completion: @escaping ((_ data: ComDayCrxSecurityTokenImplTokenCleanupTaskInfo?,_ error: Error?) -> Void)) {
        comDayCrxSecurityTokenImplTokenCleanupTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enableTokenCleanupTask: enableTokenCleanupTask, schedulerExpression: schedulerExpression, batchSize: batchSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableTokenCleanupTask: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter batchSize: (query)  (optional)
     - returns: RequestBuilder<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo> 
     */
    open class func comDayCrxSecurityTokenImplTokenCleanupTaskWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableTokenCleanupTask: Bool? = nil, schedulerExpression: String? = nil, batchSize: Int? = nil) -> RequestBuilder<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo> {
        let path = "/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enable.token.cleanup.task": enableTokenCleanupTask, 
            "scheduler.expression": schedulerExpression, 
            "batch.size": batchSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter supportedLocales: (query)  (optional)
     - parameter localizableProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func guideLocalizationService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, supportedLocales: [String]? = nil, localizableProperties: [String]? = nil, completion: @escaping ((_ data: GuideLocalizationServiceInfo?,_ error: Error?) -> Void)) {
        guideLocalizationServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, supportedLocales: supportedLocales, localizableProperties: localizableProperties).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/Guide Localization Service
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter supportedLocales: (query)  (optional)
     - parameter localizableProperties: (query)  (optional)
     - returns: RequestBuilder<GuideLocalizationServiceInfo> 
     */
    open class func guideLocalizationServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, supportedLocales: [String]? = nil, localizableProperties: [String]? = nil) -> RequestBuilder<GuideLocalizationServiceInfo> {
        let path = "/system/console/configMgr/Guide Localization Service"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "supportedLocales": supportedLocales, 
            "Localizable Properties": localizableProperties
        ])

        let requestBuilder: RequestBuilder<GuideLocalizationServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func messagingUserComponentFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int? = nil, completion: @escaping ((_ data: MessagingUserComponentFactoryInfo?,_ error: Error?) -> Void)) {
        messagingUserComponentFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priority: priority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/MessagingUserComponentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - returns: RequestBuilder<MessagingUserComponentFactoryInfo> 
     */
    open class func messagingUserComponentFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int? = nil) -> RequestBuilder<MessagingUserComponentFactoryInfo> {
        let path = "/system/console/configMgr/MessagingUserComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "priority": priority?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<MessagingUserComponentFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter attributeChangeNotificationEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheAriesJmxFrameworkStateConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, attributeChangeNotificationEnabled: Bool? = nil, completion: @escaping ((_ data: OrgApacheAriesJmxFrameworkStateConfigInfo?,_ error: Error?) -> Void)) {
        orgApacheAriesJmxFrameworkStateConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, attributeChangeNotificationEnabled: attributeChangeNotificationEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.aries.jmx.framework.StateConfig
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter attributeChangeNotificationEnabled: (query)  (optional)
     - returns: RequestBuilder<OrgApacheAriesJmxFrameworkStateConfigInfo> 
     */
    open class func orgApacheAriesJmxFrameworkStateConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, attributeChangeNotificationEnabled: Bool? = nil) -> RequestBuilder<OrgApacheAriesJmxFrameworkStateConfigInfo> {
        let path = "/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "attributeChangeNotificationEnabled": attributeChangeNotificationEnabled
        ])

        let requestBuilder: RequestBuilder<OrgApacheAriesJmxFrameworkStateConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheFelixEventadminThreadPoolSize: (query)  (optional)
     - parameter orgApacheFelixEventadminAsyncToSyncThreadRatio: (query)  (optional)
     - parameter orgApacheFelixEventadminTimeout: (query)  (optional)
     - parameter orgApacheFelixEventadminRequireTopic: (query)  (optional)
     - parameter orgApacheFelixEventadminIgnoreTimeout: (query)  (optional)
     - parameter orgApacheFelixEventadminIgnoreTopic: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixEventadminImplEventAdmin(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheFelixEventadminThreadPoolSize: Int? = nil, orgApacheFelixEventadminAsyncToSyncThreadRatio: Double? = nil, orgApacheFelixEventadminTimeout: Int? = nil, orgApacheFelixEventadminRequireTopic: Bool? = nil, orgApacheFelixEventadminIgnoreTimeout: [String]? = nil, orgApacheFelixEventadminIgnoreTopic: [String]? = nil, completion: @escaping ((_ data: OrgApacheFelixEventadminImplEventAdminInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixEventadminImplEventAdminWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheFelixEventadminThreadPoolSize: orgApacheFelixEventadminThreadPoolSize, orgApacheFelixEventadminAsyncToSyncThreadRatio: orgApacheFelixEventadminAsyncToSyncThreadRatio, orgApacheFelixEventadminTimeout: orgApacheFelixEventadminTimeout, orgApacheFelixEventadminRequireTopic: orgApacheFelixEventadminRequireTopic, orgApacheFelixEventadminIgnoreTimeout: orgApacheFelixEventadminIgnoreTimeout, orgApacheFelixEventadminIgnoreTopic: orgApacheFelixEventadminIgnoreTopic).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheFelixEventadminThreadPoolSize: (query)  (optional)
     - parameter orgApacheFelixEventadminAsyncToSyncThreadRatio: (query)  (optional)
     - parameter orgApacheFelixEventadminTimeout: (query)  (optional)
     - parameter orgApacheFelixEventadminRequireTopic: (query)  (optional)
     - parameter orgApacheFelixEventadminIgnoreTimeout: (query)  (optional)
     - parameter orgApacheFelixEventadminIgnoreTopic: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixEventadminImplEventAdminInfo> 
     */
    open class func orgApacheFelixEventadminImplEventAdminWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheFelixEventadminThreadPoolSize: Int? = nil, orgApacheFelixEventadminAsyncToSyncThreadRatio: Double? = nil, orgApacheFelixEventadminTimeout: Int? = nil, orgApacheFelixEventadminRequireTopic: Bool? = nil, orgApacheFelixEventadminIgnoreTimeout: [String]? = nil, orgApacheFelixEventadminIgnoreTopic: [String]? = nil) -> RequestBuilder<OrgApacheFelixEventadminImplEventAdminInfo> {
        let path = "/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.felix.eventadmin.ThreadPoolSize": orgApacheFelixEventadminThreadPoolSize?.encodeToJSON(), 
            "org.apache.felix.eventadmin.AsyncToSyncThreadRatio": orgApacheFelixEventadminAsyncToSyncThreadRatio, 
            "org.apache.felix.eventadmin.Timeout": orgApacheFelixEventadminTimeout?.encodeToJSON(), 
            "org.apache.felix.eventadmin.RequireTopic": orgApacheFelixEventadminRequireTopic, 
            "org.apache.felix.eventadmin.IgnoreTimeout": orgApacheFelixEventadminIgnoreTimeout, 
            "org.apache.felix.eventadmin.IgnoreTopic": orgApacheFelixEventadminIgnoreTopic
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixEventadminImplEventAdminInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheFelixHttpHost: (query)  (optional)
     - parameter orgApacheFelixHttpEnable: (query)  (optional)
     - parameter orgOsgiServiceHttpPort: (query)  (optional)
     - parameter orgApacheFelixHttpTimeout: (query)  (optional)
     - parameter orgApacheFelixHttpsEnable: (query)  (optional)
     - parameter orgOsgiServiceHttpPortSecure: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystore: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKeyPassword: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststore: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsClientcertificate: (query)  (optional)
     - parameter orgApacheFelixHttpContextPath: (query)  (optional)
     - parameter orgApacheFelixHttpMbeans: (query)  (optional)
     - parameter orgApacheFelixHttpSessionTimeout: (query)  (optional)
     - parameter orgApacheFelixHttpJettyThreadpoolMax: (query)  (optional)
     - parameter orgApacheFelixHttpJettyAcceptors: (query)  (optional)
     - parameter orgApacheFelixHttpJettySelectors: (query)  (optional)
     - parameter orgApacheFelixHttpJettyHeaderBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyRequestBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyResponseBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyMaxFormSize: (query)  (optional)
     - parameter orgApacheFelixHttpPathExclusions: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyCiphersuitesExcluded: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyCiphersuitesIncluded: (query)  (optional)
     - parameter orgApacheFelixHttpJettySendServerHeader: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyProtocolsIncluded: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyProtocolsExcluded: (query)  (optional)
     - parameter orgApacheFelixProxyLoadBalancerConnectionEnable: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyRenegotiateAllowed: (query)  (optional)
     - parameter orgApacheFelixHttpsJettySessionCookieHttpOnly: (query)  (optional)
     - parameter orgApacheFelixHttpsJettySessionCookieSecure: (query)  (optional)
     - parameter orgEclipseJettyServletSessionIdPathParameterName: (query)  (optional)
     - parameter orgEclipseJettyServletCheckingRemoteSessionIdEncoding: (query)  (optional)
     - parameter orgEclipseJettyServletSessionCookie: (query)  (optional)
     - parameter orgEclipseJettyServletSessionDomain: (query)  (optional)
     - parameter orgEclipseJettyServletSessionPath: (query)  (optional)
     - parameter orgEclipseJettyServletMaxAge: (query)  (optional)
     - parameter orgApacheFelixHttpName: (query)  (optional)
     - parameter orgApacheFelixJettyGziphandlerEnable: (query)  (optional)
     - parameter orgApacheFelixJettyGzipMinGzipSize: (query)  (optional)
     - parameter orgApacheFelixJettyGzipCompressionLevel: (query)  (optional)
     - parameter orgApacheFelixJettyGzipInflateBufferSize: (query)  (optional)
     - parameter orgApacheFelixJettyGzipSyncFlush: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedUserAgents: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedMethods: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedMethods: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedPaths: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedPaths: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedMimeTypes: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedMimeTypes: (query)  (optional)
     - parameter orgApacheFelixHttpSessionInvalidate: (query)  (optional)
     - parameter orgApacheFelixHttpSessionUniqueid: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixHttp(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheFelixHttpHost: String? = nil, orgApacheFelixHttpEnable: Bool? = nil, orgOsgiServiceHttpPort: Int? = nil, orgApacheFelixHttpTimeout: Int? = nil, orgApacheFelixHttpsEnable: Bool? = nil, orgOsgiServiceHttpPortSecure: Int? = nil, orgApacheFelixHttpsKeystore: String? = nil, orgApacheFelixHttpsKeystorePassword: String? = nil, orgApacheFelixHttpsKeystoreKeyPassword: String? = nil, orgApacheFelixHttpsTruststore: String? = nil, orgApacheFelixHttpsTruststorePassword: String? = nil, orgApacheFelixHttpsClientcertificate: String? = nil, orgApacheFelixHttpContextPath: String? = nil, orgApacheFelixHttpMbeans: Bool? = nil, orgApacheFelixHttpSessionTimeout: Int? = nil, orgApacheFelixHttpJettyThreadpoolMax: Int? = nil, orgApacheFelixHttpJettyAcceptors: Int? = nil, orgApacheFelixHttpJettySelectors: Int? = nil, orgApacheFelixHttpJettyHeaderBufferSize: Int? = nil, orgApacheFelixHttpJettyRequestBufferSize: Int? = nil, orgApacheFelixHttpJettyResponseBufferSize: Int? = nil, orgApacheFelixHttpJettyMaxFormSize: Int? = nil, orgApacheFelixHttpPathExclusions: [String]? = nil, orgApacheFelixHttpsJettyCiphersuitesExcluded: [String]? = nil, orgApacheFelixHttpsJettyCiphersuitesIncluded: [String]? = nil, orgApacheFelixHttpJettySendServerHeader: Bool? = nil, orgApacheFelixHttpsJettyProtocolsIncluded: [String]? = nil, orgApacheFelixHttpsJettyProtocolsExcluded: [String]? = nil, orgApacheFelixProxyLoadBalancerConnectionEnable: Bool? = nil, orgApacheFelixHttpsJettyRenegotiateAllowed: Bool? = nil, orgApacheFelixHttpsJettySessionCookieHttpOnly: Bool? = nil, orgApacheFelixHttpsJettySessionCookieSecure: Bool? = nil, orgEclipseJettyServletSessionIdPathParameterName: String? = nil, orgEclipseJettyServletCheckingRemoteSessionIdEncoding: Bool? = nil, orgEclipseJettyServletSessionCookie: String? = nil, orgEclipseJettyServletSessionDomain: String? = nil, orgEclipseJettyServletSessionPath: String? = nil, orgEclipseJettyServletMaxAge: Int? = nil, orgApacheFelixHttpName: String? = nil, orgApacheFelixJettyGziphandlerEnable: Bool? = nil, orgApacheFelixJettyGzipMinGzipSize: Int? = nil, orgApacheFelixJettyGzipCompressionLevel: Int? = nil, orgApacheFelixJettyGzipInflateBufferSize: Int? = nil, orgApacheFelixJettyGzipSyncFlush: Bool? = nil, orgApacheFelixJettyGzipExcludedUserAgents: [String]? = nil, orgApacheFelixJettyGzipIncludedMethods: [String]? = nil, orgApacheFelixJettyGzipExcludedMethods: [String]? = nil, orgApacheFelixJettyGzipIncludedPaths: [String]? = nil, orgApacheFelixJettyGzipExcludedPaths: [String]? = nil, orgApacheFelixJettyGzipIncludedMimeTypes: [String]? = nil, orgApacheFelixJettyGzipExcludedMimeTypes: [String]? = nil, orgApacheFelixHttpSessionInvalidate: Bool? = nil, orgApacheFelixHttpSessionUniqueid: Bool? = nil, completion: @escaping ((_ data: OrgApacheFelixHttpInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixHttpWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheFelixHttpHost: orgApacheFelixHttpHost, orgApacheFelixHttpEnable: orgApacheFelixHttpEnable, orgOsgiServiceHttpPort: orgOsgiServiceHttpPort, orgApacheFelixHttpTimeout: orgApacheFelixHttpTimeout, orgApacheFelixHttpsEnable: orgApacheFelixHttpsEnable, orgOsgiServiceHttpPortSecure: orgOsgiServiceHttpPortSecure, orgApacheFelixHttpsKeystore: orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystorePassword: orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystoreKeyPassword: orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsTruststore: orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststorePassword: orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsClientcertificate: orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpContextPath: orgApacheFelixHttpContextPath, orgApacheFelixHttpMbeans: orgApacheFelixHttpMbeans, orgApacheFelixHttpSessionTimeout: orgApacheFelixHttpSessionTimeout, orgApacheFelixHttpJettyThreadpoolMax: orgApacheFelixHttpJettyThreadpoolMax, orgApacheFelixHttpJettyAcceptors: orgApacheFelixHttpJettyAcceptors, orgApacheFelixHttpJettySelectors: orgApacheFelixHttpJettySelectors, orgApacheFelixHttpJettyHeaderBufferSize: orgApacheFelixHttpJettyHeaderBufferSize, orgApacheFelixHttpJettyRequestBufferSize: orgApacheFelixHttpJettyRequestBufferSize, orgApacheFelixHttpJettyResponseBufferSize: orgApacheFelixHttpJettyResponseBufferSize, orgApacheFelixHttpJettyMaxFormSize: orgApacheFelixHttpJettyMaxFormSize, orgApacheFelixHttpPathExclusions: orgApacheFelixHttpPathExclusions, orgApacheFelixHttpsJettyCiphersuitesExcluded: orgApacheFelixHttpsJettyCiphersuitesExcluded, orgApacheFelixHttpsJettyCiphersuitesIncluded: orgApacheFelixHttpsJettyCiphersuitesIncluded, orgApacheFelixHttpJettySendServerHeader: orgApacheFelixHttpJettySendServerHeader, orgApacheFelixHttpsJettyProtocolsIncluded: orgApacheFelixHttpsJettyProtocolsIncluded, orgApacheFelixHttpsJettyProtocolsExcluded: orgApacheFelixHttpsJettyProtocolsExcluded, orgApacheFelixProxyLoadBalancerConnectionEnable: orgApacheFelixProxyLoadBalancerConnectionEnable, orgApacheFelixHttpsJettyRenegotiateAllowed: orgApacheFelixHttpsJettyRenegotiateAllowed, orgApacheFelixHttpsJettySessionCookieHttpOnly: orgApacheFelixHttpsJettySessionCookieHttpOnly, orgApacheFelixHttpsJettySessionCookieSecure: orgApacheFelixHttpsJettySessionCookieSecure, orgEclipseJettyServletSessionIdPathParameterName: orgEclipseJettyServletSessionIdPathParameterName, orgEclipseJettyServletCheckingRemoteSessionIdEncoding: orgEclipseJettyServletCheckingRemoteSessionIdEncoding, orgEclipseJettyServletSessionCookie: orgEclipseJettyServletSessionCookie, orgEclipseJettyServletSessionDomain: orgEclipseJettyServletSessionDomain, orgEclipseJettyServletSessionPath: orgEclipseJettyServletSessionPath, orgEclipseJettyServletMaxAge: orgEclipseJettyServletMaxAge, orgApacheFelixHttpName: orgApacheFelixHttpName, orgApacheFelixJettyGziphandlerEnable: orgApacheFelixJettyGziphandlerEnable, orgApacheFelixJettyGzipMinGzipSize: orgApacheFelixJettyGzipMinGzipSize, orgApacheFelixJettyGzipCompressionLevel: orgApacheFelixJettyGzipCompressionLevel, orgApacheFelixJettyGzipInflateBufferSize: orgApacheFelixJettyGzipInflateBufferSize, orgApacheFelixJettyGzipSyncFlush: orgApacheFelixJettyGzipSyncFlush, orgApacheFelixJettyGzipExcludedUserAgents: orgApacheFelixJettyGzipExcludedUserAgents, orgApacheFelixJettyGzipIncludedMethods: orgApacheFelixJettyGzipIncludedMethods, orgApacheFelixJettyGzipExcludedMethods: orgApacheFelixJettyGzipExcludedMethods, orgApacheFelixJettyGzipIncludedPaths: orgApacheFelixJettyGzipIncludedPaths, orgApacheFelixJettyGzipExcludedPaths: orgApacheFelixJettyGzipExcludedPaths, orgApacheFelixJettyGzipIncludedMimeTypes: orgApacheFelixJettyGzipIncludedMimeTypes, orgApacheFelixJettyGzipExcludedMimeTypes: orgApacheFelixJettyGzipExcludedMimeTypes, orgApacheFelixHttpSessionInvalidate: orgApacheFelixHttpSessionInvalidate, orgApacheFelixHttpSessionUniqueid: orgApacheFelixHttpSessionUniqueid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.http
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheFelixHttpHost: (query)  (optional)
     - parameter orgApacheFelixHttpEnable: (query)  (optional)
     - parameter orgOsgiServiceHttpPort: (query)  (optional)
     - parameter orgApacheFelixHttpTimeout: (query)  (optional)
     - parameter orgApacheFelixHttpsEnable: (query)  (optional)
     - parameter orgOsgiServiceHttpPortSecure: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystore: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKeyPassword: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststore: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsClientcertificate: (query)  (optional)
     - parameter orgApacheFelixHttpContextPath: (query)  (optional)
     - parameter orgApacheFelixHttpMbeans: (query)  (optional)
     - parameter orgApacheFelixHttpSessionTimeout: (query)  (optional)
     - parameter orgApacheFelixHttpJettyThreadpoolMax: (query)  (optional)
     - parameter orgApacheFelixHttpJettyAcceptors: (query)  (optional)
     - parameter orgApacheFelixHttpJettySelectors: (query)  (optional)
     - parameter orgApacheFelixHttpJettyHeaderBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyRequestBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyResponseBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyMaxFormSize: (query)  (optional)
     - parameter orgApacheFelixHttpPathExclusions: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyCiphersuitesExcluded: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyCiphersuitesIncluded: (query)  (optional)
     - parameter orgApacheFelixHttpJettySendServerHeader: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyProtocolsIncluded: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyProtocolsExcluded: (query)  (optional)
     - parameter orgApacheFelixProxyLoadBalancerConnectionEnable: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyRenegotiateAllowed: (query)  (optional)
     - parameter orgApacheFelixHttpsJettySessionCookieHttpOnly: (query)  (optional)
     - parameter orgApacheFelixHttpsJettySessionCookieSecure: (query)  (optional)
     - parameter orgEclipseJettyServletSessionIdPathParameterName: (query)  (optional)
     - parameter orgEclipseJettyServletCheckingRemoteSessionIdEncoding: (query)  (optional)
     - parameter orgEclipseJettyServletSessionCookie: (query)  (optional)
     - parameter orgEclipseJettyServletSessionDomain: (query)  (optional)
     - parameter orgEclipseJettyServletSessionPath: (query)  (optional)
     - parameter orgEclipseJettyServletMaxAge: (query)  (optional)
     - parameter orgApacheFelixHttpName: (query)  (optional)
     - parameter orgApacheFelixJettyGziphandlerEnable: (query)  (optional)
     - parameter orgApacheFelixJettyGzipMinGzipSize: (query)  (optional)
     - parameter orgApacheFelixJettyGzipCompressionLevel: (query)  (optional)
     - parameter orgApacheFelixJettyGzipInflateBufferSize: (query)  (optional)
     - parameter orgApacheFelixJettyGzipSyncFlush: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedUserAgents: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedMethods: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedMethods: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedPaths: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedPaths: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedMimeTypes: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedMimeTypes: (query)  (optional)
     - parameter orgApacheFelixHttpSessionInvalidate: (query)  (optional)
     - parameter orgApacheFelixHttpSessionUniqueid: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixHttpInfo> 
     */
    open class func orgApacheFelixHttpWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheFelixHttpHost: String? = nil, orgApacheFelixHttpEnable: Bool? = nil, orgOsgiServiceHttpPort: Int? = nil, orgApacheFelixHttpTimeout: Int? = nil, orgApacheFelixHttpsEnable: Bool? = nil, orgOsgiServiceHttpPortSecure: Int? = nil, orgApacheFelixHttpsKeystore: String? = nil, orgApacheFelixHttpsKeystorePassword: String? = nil, orgApacheFelixHttpsKeystoreKeyPassword: String? = nil, orgApacheFelixHttpsTruststore: String? = nil, orgApacheFelixHttpsTruststorePassword: String? = nil, orgApacheFelixHttpsClientcertificate: String? = nil, orgApacheFelixHttpContextPath: String? = nil, orgApacheFelixHttpMbeans: Bool? = nil, orgApacheFelixHttpSessionTimeout: Int? = nil, orgApacheFelixHttpJettyThreadpoolMax: Int? = nil, orgApacheFelixHttpJettyAcceptors: Int? = nil, orgApacheFelixHttpJettySelectors: Int? = nil, orgApacheFelixHttpJettyHeaderBufferSize: Int? = nil, orgApacheFelixHttpJettyRequestBufferSize: Int? = nil, orgApacheFelixHttpJettyResponseBufferSize: Int? = nil, orgApacheFelixHttpJettyMaxFormSize: Int? = nil, orgApacheFelixHttpPathExclusions: [String]? = nil, orgApacheFelixHttpsJettyCiphersuitesExcluded: [String]? = nil, orgApacheFelixHttpsJettyCiphersuitesIncluded: [String]? = nil, orgApacheFelixHttpJettySendServerHeader: Bool? = nil, orgApacheFelixHttpsJettyProtocolsIncluded: [String]? = nil, orgApacheFelixHttpsJettyProtocolsExcluded: [String]? = nil, orgApacheFelixProxyLoadBalancerConnectionEnable: Bool? = nil, orgApacheFelixHttpsJettyRenegotiateAllowed: Bool? = nil, orgApacheFelixHttpsJettySessionCookieHttpOnly: Bool? = nil, orgApacheFelixHttpsJettySessionCookieSecure: Bool? = nil, orgEclipseJettyServletSessionIdPathParameterName: String? = nil, orgEclipseJettyServletCheckingRemoteSessionIdEncoding: Bool? = nil, orgEclipseJettyServletSessionCookie: String? = nil, orgEclipseJettyServletSessionDomain: String? = nil, orgEclipseJettyServletSessionPath: String? = nil, orgEclipseJettyServletMaxAge: Int? = nil, orgApacheFelixHttpName: String? = nil, orgApacheFelixJettyGziphandlerEnable: Bool? = nil, orgApacheFelixJettyGzipMinGzipSize: Int? = nil, orgApacheFelixJettyGzipCompressionLevel: Int? = nil, orgApacheFelixJettyGzipInflateBufferSize: Int? = nil, orgApacheFelixJettyGzipSyncFlush: Bool? = nil, orgApacheFelixJettyGzipExcludedUserAgents: [String]? = nil, orgApacheFelixJettyGzipIncludedMethods: [String]? = nil, orgApacheFelixJettyGzipExcludedMethods: [String]? = nil, orgApacheFelixJettyGzipIncludedPaths: [String]? = nil, orgApacheFelixJettyGzipExcludedPaths: [String]? = nil, orgApacheFelixJettyGzipIncludedMimeTypes: [String]? = nil, orgApacheFelixJettyGzipExcludedMimeTypes: [String]? = nil, orgApacheFelixHttpSessionInvalidate: Bool? = nil, orgApacheFelixHttpSessionUniqueid: Bool? = nil) -> RequestBuilder<OrgApacheFelixHttpInfo> {
        let path = "/system/console/configMgr/org.apache.felix.http"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.felix.http.host": orgApacheFelixHttpHost, 
            "org.apache.felix.http.enable": orgApacheFelixHttpEnable, 
            "org.osgi.service.http.port": orgOsgiServiceHttpPort?.encodeToJSON(), 
            "org.apache.felix.http.timeout": orgApacheFelixHttpTimeout?.encodeToJSON(), 
            "org.apache.felix.https.enable": orgApacheFelixHttpsEnable, 
            "org.osgi.service.http.port.secure": orgOsgiServiceHttpPortSecure?.encodeToJSON(), 
            "org.apache.felix.https.keystore": orgApacheFelixHttpsKeystore, 
            "org.apache.felix.https.keystore.password": orgApacheFelixHttpsKeystorePassword, 
            "org.apache.felix.https.keystore.key.password": orgApacheFelixHttpsKeystoreKeyPassword, 
            "org.apache.felix.https.truststore": orgApacheFelixHttpsTruststore, 
            "org.apache.felix.https.truststore.password": orgApacheFelixHttpsTruststorePassword, 
            "org.apache.felix.https.clientcertificate": orgApacheFelixHttpsClientcertificate, 
            "org.apache.felix.http.context_path": orgApacheFelixHttpContextPath, 
            "org.apache.felix.http.mbeans": orgApacheFelixHttpMbeans, 
            "org.apache.felix.http.session.timeout": orgApacheFelixHttpSessionTimeout?.encodeToJSON(), 
            "org.apache.felix.http.jetty.threadpool.max": orgApacheFelixHttpJettyThreadpoolMax?.encodeToJSON(), 
            "org.apache.felix.http.jetty.acceptors": orgApacheFelixHttpJettyAcceptors?.encodeToJSON(), 
            "org.apache.felix.http.jetty.selectors": orgApacheFelixHttpJettySelectors?.encodeToJSON(), 
            "org.apache.felix.http.jetty.headerBufferSize": orgApacheFelixHttpJettyHeaderBufferSize?.encodeToJSON(), 
            "org.apache.felix.http.jetty.requestBufferSize": orgApacheFelixHttpJettyRequestBufferSize?.encodeToJSON(), 
            "org.apache.felix.http.jetty.responseBufferSize": orgApacheFelixHttpJettyResponseBufferSize?.encodeToJSON(), 
            "org.apache.felix.http.jetty.maxFormSize": orgApacheFelixHttpJettyMaxFormSize?.encodeToJSON(), 
            "org.apache.felix.http.path_exclusions": orgApacheFelixHttpPathExclusions, 
            "org.apache.felix.https.jetty.ciphersuites.excluded": orgApacheFelixHttpsJettyCiphersuitesExcluded, 
            "org.apache.felix.https.jetty.ciphersuites.included": orgApacheFelixHttpsJettyCiphersuitesIncluded, 
            "org.apache.felix.http.jetty.sendServerHeader": orgApacheFelixHttpJettySendServerHeader, 
            "org.apache.felix.https.jetty.protocols.included": orgApacheFelixHttpsJettyProtocolsIncluded, 
            "org.apache.felix.https.jetty.protocols.excluded": orgApacheFelixHttpsJettyProtocolsExcluded, 
            "org.apache.felix.proxy.load.balancer.connection.enable": orgApacheFelixProxyLoadBalancerConnectionEnable, 
            "org.apache.felix.https.jetty.renegotiateAllowed": orgApacheFelixHttpsJettyRenegotiateAllowed, 
            "org.apache.felix.https.jetty.session.cookie.httpOnly": orgApacheFelixHttpsJettySessionCookieHttpOnly, 
            "org.apache.felix.https.jetty.session.cookie.secure": orgApacheFelixHttpsJettySessionCookieSecure, 
            "org.eclipse.jetty.servlet.SessionIdPathParameterName": orgEclipseJettyServletSessionIdPathParameterName, 
            "org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding": orgEclipseJettyServletCheckingRemoteSessionIdEncoding, 
            "org.eclipse.jetty.servlet.SessionCookie": orgEclipseJettyServletSessionCookie, 
            "org.eclipse.jetty.servlet.SessionDomain": orgEclipseJettyServletSessionDomain, 
            "org.eclipse.jetty.servlet.SessionPath": orgEclipseJettyServletSessionPath, 
            "org.eclipse.jetty.servlet.MaxAge": orgEclipseJettyServletMaxAge?.encodeToJSON(), 
            "org.apache.felix.http.name": orgApacheFelixHttpName, 
            "org.apache.felix.jetty.gziphandler.enable": orgApacheFelixJettyGziphandlerEnable, 
            "org.apache.felix.jetty.gzip.minGzipSize": orgApacheFelixJettyGzipMinGzipSize?.encodeToJSON(), 
            "org.apache.felix.jetty.gzip.compressionLevel": orgApacheFelixJettyGzipCompressionLevel?.encodeToJSON(), 
            "org.apache.felix.jetty.gzip.inflateBufferSize": orgApacheFelixJettyGzipInflateBufferSize?.encodeToJSON(), 
            "org.apache.felix.jetty.gzip.syncFlush": orgApacheFelixJettyGzipSyncFlush, 
            "org.apache.felix.jetty.gzip.excludedUserAgents": orgApacheFelixJettyGzipExcludedUserAgents, 
            "org.apache.felix.jetty.gzip.includedMethods": orgApacheFelixJettyGzipIncludedMethods, 
            "org.apache.felix.jetty.gzip.excludedMethods": orgApacheFelixJettyGzipExcludedMethods, 
            "org.apache.felix.jetty.gzip.includedPaths": orgApacheFelixJettyGzipIncludedPaths, 
            "org.apache.felix.jetty.gzip.excludedPaths": orgApacheFelixJettyGzipExcludedPaths, 
            "org.apache.felix.jetty.gzip.includedMimeTypes": orgApacheFelixJettyGzipIncludedMimeTypes, 
            "org.apache.felix.jetty.gzip.excludedMimeTypes": orgApacheFelixJettyGzipExcludedMimeTypes, 
            "org.apache.felix.http.session.invalidate": orgApacheFelixHttpSessionInvalidate, 
            "org.apache.felix.http.session.uniqueid": orgApacheFelixHttpSessionUniqueid
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixHttpInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter sslForwardHeader: (query)  (optional)
     - parameter sslForwardValue: (query)  (optional)
     - parameter sslForwardCertHeader: (query)  (optional)
     - parameter rewriteAbsoluteUrls: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixHttpSslfilterSslFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, sslForwardHeader: String? = nil, sslForwardValue: String? = nil, sslForwardCertHeader: String? = nil, rewriteAbsoluteUrls: Bool? = nil, completion: @escaping ((_ data: OrgApacheFelixHttpSslfilterSslFilterInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixHttpSslfilterSslFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, sslForwardHeader: sslForwardHeader, sslForwardValue: sslForwardValue, sslForwardCertHeader: sslForwardCertHeader, rewriteAbsoluteUrls: rewriteAbsoluteUrls).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter sslForwardHeader: (query)  (optional)
     - parameter sslForwardValue: (query)  (optional)
     - parameter sslForwardCertHeader: (query)  (optional)
     - parameter rewriteAbsoluteUrls: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixHttpSslfilterSslFilterInfo> 
     */
    open class func orgApacheFelixHttpSslfilterSslFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, sslForwardHeader: String? = nil, sslForwardValue: String? = nil, sslForwardCertHeader: String? = nil, rewriteAbsoluteUrls: Bool? = nil) -> RequestBuilder<OrgApacheFelixHttpSslfilterSslFilterInfo> {
        let path = "/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "ssl-forward.header": sslForwardHeader, 
            "ssl-forward.value": sslForwardValue, 
            "ssl-forward-cert.header": sslForwardCertHeader, 
            "rewrite.absolute.urls": rewriteAbsoluteUrls
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixHttpSslfilterSslFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasClassname: (query)  (optional)
     - parameter jaasOptions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixJaasConfigurationFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasControlFlag: String? = nil, jaasRanking: Int? = nil, jaasRealmName: String? = nil, jaasClassname: String? = nil, jaasOptions: [String]? = nil, completion: @escaping ((_ data: OrgApacheFelixJaasConfigurationFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixJaasConfigurationFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jaasControlFlag: jaasControlFlag, jaasRanking: jaasRanking, jaasRealmName: jaasRealmName, jaasClassname: jaasClassname, jaasOptions: jaasOptions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.jaas.Configuration.factory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasClassname: (query)  (optional)
     - parameter jaasOptions: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixJaasConfigurationFactoryInfo> 
     */
    open class func orgApacheFelixJaasConfigurationFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasControlFlag: String? = nil, jaasRanking: Int? = nil, jaasRealmName: String? = nil, jaasClassname: String? = nil, jaasOptions: [String]? = nil) -> RequestBuilder<OrgApacheFelixJaasConfigurationFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.felix.jaas.Configuration.factory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "jaas.controlFlag": jaasControlFlag, 
            "jaas.ranking": jaasRanking?.encodeToJSON(), 
            "jaas.realmName": jaasRealmName, 
            "jaas.classname": jaasClassname, 
            "jaas.options": jaasOptions
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixJaasConfigurationFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasDefaultRealmName: (query)  (optional)
     - parameter jaasConfigProviderName: (query)  (optional)
     - parameter jaasGlobalConfigPolicy: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixJaasConfigurationSpi(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasDefaultRealmName: String? = nil, jaasConfigProviderName: String? = nil, jaasGlobalConfigPolicy: String? = nil, completion: @escaping ((_ data: OrgApacheFelixJaasConfigurationSpiInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixJaasConfigurationSpiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jaasDefaultRealmName: jaasDefaultRealmName, jaasConfigProviderName: jaasConfigProviderName, jaasGlobalConfigPolicy: jaasGlobalConfigPolicy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasDefaultRealmName: (query)  (optional)
     - parameter jaasConfigProviderName: (query)  (optional)
     - parameter jaasGlobalConfigPolicy: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixJaasConfigurationSpiInfo> 
     */
    open class func orgApacheFelixJaasConfigurationSpiWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasDefaultRealmName: String? = nil, jaasConfigProviderName: String? = nil, jaasGlobalConfigPolicy: String? = nil) -> RequestBuilder<OrgApacheFelixJaasConfigurationSpiInfo> {
        let path = "/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "jaas.defaultRealmName": jaasDefaultRealmName, 
            "jaas.configProviderName": jaasConfigProviderName, 
            "jaas.globalConfigPolicy": jaasGlobalConfigPolicy
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixJaasConfigurationSpiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dsLoglevel: (query)  (optional)
     - parameter dsFactoryEnabled: (query)  (optional)
     - parameter dsDelayedKeepInstances: (query)  (optional)
     - parameter dsLockTimeoutMilliseconds: (query)  (optional)
     - parameter dsStopTimeoutMilliseconds: (query)  (optional)
     - parameter dsGlobalExtender: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixScrScrService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dsLoglevel: Int? = nil, dsFactoryEnabled: Bool? = nil, dsDelayedKeepInstances: Bool? = nil, dsLockTimeoutMilliseconds: Int? = nil, dsStopTimeoutMilliseconds: Int? = nil, dsGlobalExtender: Bool? = nil, completion: @escaping ((_ data: OrgApacheFelixScrScrServiceInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixScrScrServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, dsLoglevel: dsLoglevel, dsFactoryEnabled: dsFactoryEnabled, dsDelayedKeepInstances: dsDelayedKeepInstances, dsLockTimeoutMilliseconds: dsLockTimeoutMilliseconds, dsStopTimeoutMilliseconds: dsStopTimeoutMilliseconds, dsGlobalExtender: dsGlobalExtender).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.scr.ScrService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dsLoglevel: (query)  (optional)
     - parameter dsFactoryEnabled: (query)  (optional)
     - parameter dsDelayedKeepInstances: (query)  (optional)
     - parameter dsLockTimeoutMilliseconds: (query)  (optional)
     - parameter dsStopTimeoutMilliseconds: (query)  (optional)
     - parameter dsGlobalExtender: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixScrScrServiceInfo> 
     */
    open class func orgApacheFelixScrScrServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dsLoglevel: Int? = nil, dsFactoryEnabled: Bool? = nil, dsDelayedKeepInstances: Bool? = nil, dsLockTimeoutMilliseconds: Int? = nil, dsStopTimeoutMilliseconds: Int? = nil, dsGlobalExtender: Bool? = nil) -> RequestBuilder<OrgApacheFelixScrScrServiceInfo> {
        let path = "/system/console/configMgr/org.apache.felix.scr.ScrService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "ds.loglevel": dsLoglevel?.encodeToJSON(), 
            "ds.factory.enabled": dsFactoryEnabled, 
            "ds.delayed.keepInstances": dsDelayedKeepInstances, 
            "ds.lock.timeout.milliseconds": dsLockTimeoutMilliseconds?.encodeToJSON(), 
            "ds.stop.timeout.milliseconds": dsStopTimeoutMilliseconds?.encodeToJSON(), 
            "ds.global.extender": dsGlobalExtender
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixScrScrServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter componentsList: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixSystemreadyImplComponentsCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, componentsList: [String]? = nil, type: String? = nil, completion: @escaping ((_ data: OrgApacheFelixSystemreadyImplComponentsCheckInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixSystemreadyImplComponentsCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, componentsList: componentsList, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter componentsList: (query)  (optional)
     - parameter type: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixSystemreadyImplComponentsCheckInfo> 
     */
    open class func orgApacheFelixSystemreadyImplComponentsCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, componentsList: [String]? = nil, type: String? = nil) -> RequestBuilder<OrgApacheFelixSystemreadyImplComponentsCheckInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "components.list": componentsList, 
            "type": type
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadyImplComponentsCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter targetStartLevel: (query)  (optional)
     - parameter targetStartLevelPropName: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixSystemreadyImplFrameworkStartCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timeout: Int? = nil, targetStartLevel: Int? = nil, targetStartLevelPropName: String? = nil, type: String? = nil, completion: @escaping ((_ data: OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixSystemreadyImplFrameworkStartCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, timeout: timeout, targetStartLevel: targetStartLevel, targetStartLevelPropName: targetStartLevelPropName, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter targetStartLevel: (query)  (optional)
     - parameter targetStartLevelPropName: (query)  (optional)
     - parameter type: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo> 
     */
    open class func orgApacheFelixSystemreadyImplFrameworkStartCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timeout: Int? = nil, targetStartLevel: Int? = nil, targetStartLevelPropName: String? = nil, type: String? = nil) -> RequestBuilder<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "timeout": timeout?.encodeToJSON(), 
            "target.start.level": targetStartLevel?.encodeToJSON(), 
            "target.start.level.prop.name": targetStartLevelPropName, 
            "type": type
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servicesList: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixSystemreadyImplServicesCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servicesList: [String]? = nil, type: String? = nil, completion: @escaping ((_ data: OrgApacheFelixSystemreadyImplServicesCheckInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixSystemreadyImplServicesCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, servicesList: servicesList, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servicesList: (query)  (optional)
     - parameter type: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixSystemreadyImplServicesCheckInfo> 
     */
    open class func orgApacheFelixSystemreadyImplServicesCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servicesList: [String]? = nil, type: String? = nil) -> RequestBuilder<OrgApacheFelixSystemreadyImplServicesCheckInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "services.list": servicesList, 
            "type": type
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadyImplServicesCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixSystemreadyImplServletSystemAliveServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil, completion: @escaping ((_ data: OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixSystemreadyImplServletSystemAliveServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, osgiHttpWhiteboardServletPattern: osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect: osgiHttpWhiteboardContextSelect).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo> 
     */
    open class func orgApacheFelixSystemreadyImplServletSystemAliveServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil) -> RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "osgi.http.whiteboard.servlet.pattern": osgiHttpWhiteboardServletPattern, 
            "osgi.http.whiteboard.context.select": osgiHttpWhiteboardContextSelect
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixSystemreadyImplServletSystemReadyServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil, completion: @escaping ((_ data: OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixSystemreadyImplServletSystemReadyServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, osgiHttpWhiteboardServletPattern: osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect: osgiHttpWhiteboardContextSelect).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo> 
     */
    open class func orgApacheFelixSystemreadyImplServletSystemReadyServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil) -> RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "osgi.http.whiteboard.servlet.pattern": osgiHttpWhiteboardServletPattern, 
            "osgi.http.whiteboard.context.select": osgiHttpWhiteboardContextSelect
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pollInterval: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixSystemreadySystemReadyMonitor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pollInterval: Int? = nil, completion: @escaping ((_ data: OrgApacheFelixSystemreadySystemReadyMonitorInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixSystemreadySystemReadyMonitorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pollInterval: pollInterval).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pollInterval: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixSystemreadySystemReadyMonitorInfo> 
     */
    open class func orgApacheFelixSystemreadySystemReadyMonitorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pollInterval: Int? = nil) -> RequestBuilder<OrgApacheFelixSystemreadySystemReadyMonitorInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "poll.interval": pollInterval?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadySystemReadyMonitorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter managerRoot: (query)  (optional)
     - parameter httpServiceFilter: (query)  (optional)
     - parameter defaultRender: (query)  (optional)
     - parameter realm: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter category: (query)  (optional)
     - parameter locale: (query)  (optional)
     - parameter loglevel: (query)  (optional)
     - parameter plugins: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixWebconsoleInternalServletOsgiManager(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, managerRoot: String? = nil, httpServiceFilter: String? = nil, defaultRender: String? = nil, realm: String? = nil, username: String? = nil, password: String? = nil, category: String? = nil, locale: String? = nil, loglevel: Int? = nil, plugins: String? = nil, completion: @escaping ((_ data: OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixWebconsoleInternalServletOsgiManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, managerRoot: managerRoot, httpServiceFilter: httpServiceFilter, defaultRender: defaultRender, realm: realm, username: username, password: password, category: category, locale: locale, loglevel: loglevel, plugins: plugins).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter managerRoot: (query)  (optional)
     - parameter httpServiceFilter: (query)  (optional)
     - parameter defaultRender: (query)  (optional)
     - parameter realm: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter category: (query)  (optional)
     - parameter locale: (query)  (optional)
     - parameter loglevel: (query)  (optional)
     - parameter plugins: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo> 
     */
    open class func orgApacheFelixWebconsoleInternalServletOsgiManagerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, managerRoot: String? = nil, httpServiceFilter: String? = nil, defaultRender: String? = nil, realm: String? = nil, username: String? = nil, password: String? = nil, category: String? = nil, locale: String? = nil, loglevel: Int? = nil, plugins: String? = nil) -> RequestBuilder<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo> {
        let path = "/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "manager.root": managerRoot, 
            "http.service.filter": httpServiceFilter, 
            "default.render": defaultRender, 
            "realm": realm, 
            "username": username, 
            "password": password, 
            "category": category, 
            "locale": locale, 
            "loglevel": loglevel?.encodeToJSON(), 
            "plugins": plugins
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxSize: Int? = nil, completion: @escaping ((_ data: OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixWebconsolePluginsEventInternalPluginServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxSize: maxSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxSize: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo> 
     */
    open class func orgApacheFelixWebconsolePluginsEventInternalPluginServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxSize: Int? = nil) -> RequestBuilder<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo> {
        let path = "/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "max.size": maxSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter felixMemoryusageDumpThreshold: (query)  (optional)
     - parameter felixMemoryusageDumpInterval: (query)  (optional)
     - parameter felixMemoryusageDumpLocation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, felixMemoryusageDumpThreshold: Int? = nil, felixMemoryusageDumpInterval: Int? = nil, felixMemoryusageDumpLocation: String? = nil, completion: @escaping ((_ data: OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo?,_ error: Error?) -> Void)) {
        orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, felixMemoryusageDumpThreshold: felixMemoryusageDumpThreshold, felixMemoryusageDumpInterval: felixMemoryusageDumpInterval, felixMemoryusageDumpLocation: felixMemoryusageDumpLocation).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter felixMemoryusageDumpThreshold: (query)  (optional)
     - parameter felixMemoryusageDumpInterval: (query)  (optional)
     - parameter felixMemoryusageDumpLocation: (query)  (optional)
     - returns: RequestBuilder<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo> 
     */
    open class func orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, felixMemoryusageDumpThreshold: Int? = nil, felixMemoryusageDumpInterval: Int? = nil, felixMemoryusageDumpLocation: String? = nil) -> RequestBuilder<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo> {
        let path = "/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "felix.memoryusage.dump.threshold": felixMemoryusageDumpThreshold?.encodeToJSON(), 
            "felix.memoryusage.dump.interval": felixMemoryusageDumpInterval?.encodeToJSON(), 
            "felix.memoryusage.dump.location": felixMemoryusageDumpLocation
        ])

        let requestBuilder: RequestBuilder<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter proxyEnabled: (query)  (optional)
     - parameter proxyHost: (query)  (optional)
     - parameter proxyPort: (query)  (optional)
     - parameter proxyUser: (query)  (optional)
     - parameter proxyPassword: (query)  (optional)
     - parameter proxyExceptions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheHttpProxyconfigurator(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, proxyEnabled: Bool? = nil, proxyHost: String? = nil, proxyPort: Int? = nil, proxyUser: String? = nil, proxyPassword: String? = nil, proxyExceptions: [String]? = nil, completion: @escaping ((_ data: OrgApacheHttpProxyconfiguratorInfo?,_ error: Error?) -> Void)) {
        orgApacheHttpProxyconfiguratorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, proxyEnabled: proxyEnabled, proxyHost: proxyHost, proxyPort: proxyPort, proxyUser: proxyUser, proxyPassword: proxyPassword, proxyExceptions: proxyExceptions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.http.proxyconfigurator
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter proxyEnabled: (query)  (optional)
     - parameter proxyHost: (query)  (optional)
     - parameter proxyPort: (query)  (optional)
     - parameter proxyUser: (query)  (optional)
     - parameter proxyPassword: (query)  (optional)
     - parameter proxyExceptions: (query)  (optional)
     - returns: RequestBuilder<OrgApacheHttpProxyconfiguratorInfo> 
     */
    open class func orgApacheHttpProxyconfiguratorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, proxyEnabled: Bool? = nil, proxyHost: String? = nil, proxyPort: Int? = nil, proxyUser: String? = nil, proxyPassword: String? = nil, proxyExceptions: [String]? = nil) -> RequestBuilder<OrgApacheHttpProxyconfiguratorInfo> {
        let path = "/system/console/configMgr/org.apache.http.proxyconfigurator"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "proxy.enabled": proxyEnabled, 
            "proxy.host": proxyHost, 
            "proxy.port": proxyPort?.encodeToJSON(), 
            "proxy.user": proxyUser, 
            "proxy.password": proxyPassword, 
            "proxy.exceptions": proxyExceptions
        ])

        let requestBuilder: RequestBuilder<OrgApacheHttpProxyconfiguratorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dir: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dir: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, dir: dir).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dir: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dir: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "dir": dir
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mongouri: (query)  (optional)
     - parameter db: (query)  (optional)
     - parameter socketKeepAlive: (query)  (optional)
     - parameter cache: (query)  (optional)
     - parameter nodeCachePercentage: (query)  (optional)
     - parameter prevDocCachePercentage: (query)  (optional)
     - parameter childrenCachePercentage: (query)  (optional)
     - parameter diffCachePercentage: (query)  (optional)
     - parameter cacheSegmentCount: (query)  (optional)
     - parameter cacheStackMoveDistance: (query)  (optional)
     - parameter blobCacheSize: (query)  (optional)
     - parameter persistentCache: (query)  (optional)
     - parameter journalCache: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter journalGCInterval: (query)  (optional)
     - parameter journalGCMaxAge: (query)  (optional)
     - parameter prefetchExternalChanges: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter versionGcMaxAgeInSecs: (query)  (optional)
     - parameter versionGCExpression: (query)  (optional)
     - parameter versionGCTimeLimitInSecs: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter maxReplicationLagInSecs: (query)  (optional)
     - parameter documentStoreType: (query)  (optional)
     - parameter bundlingDisabled: (query)  (optional)
     - parameter updateLimit: (query)  (optional)
     - parameter persistentCacheIncludes: (query)  (optional)
     - parameter leaseCheckMode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mongouri: String? = nil, db: String? = nil, socketKeepAlive: Bool? = nil, cache: Int? = nil, nodeCachePercentage: Int? = nil, prevDocCachePercentage: Int? = nil, childrenCachePercentage: Int? = nil, diffCachePercentage: Int? = nil, cacheSegmentCount: Int? = nil, cacheStackMoveDistance: Int? = nil, blobCacheSize: Int? = nil, persistentCache: String? = nil, journalCache: String? = nil, customBlobStore: Bool? = nil, journalGCInterval: Int? = nil, journalGCMaxAge: Int? = nil, prefetchExternalChanges: Bool? = nil, role: String? = nil, versionGcMaxAgeInSecs: Int? = nil, versionGCExpression: String? = nil, versionGCTimeLimitInSecs: Int? = nil, blobGcMaxAgeInSecs: Int? = nil, blobTrackSnapshotIntervalInSecs: Int? = nil, repositoryHome: String? = nil, maxReplicationLagInSecs: Int? = nil, documentStoreType: String? = nil, bundlingDisabled: Bool? = nil, updateLimit: Int? = nil, persistentCacheIncludes: [String]? = nil, leaseCheckMode: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mongouri: mongouri, db: db, socketKeepAlive: socketKeepAlive, cache: cache, nodeCachePercentage: nodeCachePercentage, prevDocCachePercentage: prevDocCachePercentage, childrenCachePercentage: childrenCachePercentage, diffCachePercentage: diffCachePercentage, cacheSegmentCount: cacheSegmentCount, cacheStackMoveDistance: cacheStackMoveDistance, blobCacheSize: blobCacheSize, persistentCache: persistentCache, journalCache: journalCache, customBlobStore: customBlobStore, journalGCInterval: journalGCInterval, journalGCMaxAge: journalGCMaxAge, prefetchExternalChanges: prefetchExternalChanges, role: role, versionGcMaxAgeInSecs: versionGcMaxAgeInSecs, versionGCExpression: versionGCExpression, versionGCTimeLimitInSecs: versionGCTimeLimitInSecs, blobGcMaxAgeInSecs: blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs: blobTrackSnapshotIntervalInSecs, repositoryHome: repositoryHome, maxReplicationLagInSecs: maxReplicationLagInSecs, documentStoreType: documentStoreType, bundlingDisabled: bundlingDisabled, updateLimit: updateLimit, persistentCacheIncludes: persistentCacheIncludes, leaseCheckMode: leaseCheckMode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mongouri: (query)  (optional)
     - parameter db: (query)  (optional)
     - parameter socketKeepAlive: (query)  (optional)
     - parameter cache: (query)  (optional)
     - parameter nodeCachePercentage: (query)  (optional)
     - parameter prevDocCachePercentage: (query)  (optional)
     - parameter childrenCachePercentage: (query)  (optional)
     - parameter diffCachePercentage: (query)  (optional)
     - parameter cacheSegmentCount: (query)  (optional)
     - parameter cacheStackMoveDistance: (query)  (optional)
     - parameter blobCacheSize: (query)  (optional)
     - parameter persistentCache: (query)  (optional)
     - parameter journalCache: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter journalGCInterval: (query)  (optional)
     - parameter journalGCMaxAge: (query)  (optional)
     - parameter prefetchExternalChanges: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter versionGcMaxAgeInSecs: (query)  (optional)
     - parameter versionGCExpression: (query)  (optional)
     - parameter versionGCTimeLimitInSecs: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter maxReplicationLagInSecs: (query)  (optional)
     - parameter documentStoreType: (query)  (optional)
     - parameter bundlingDisabled: (query)  (optional)
     - parameter updateLimit: (query)  (optional)
     - parameter persistentCacheIncludes: (query)  (optional)
     - parameter leaseCheckMode: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mongouri: String? = nil, db: String? = nil, socketKeepAlive: Bool? = nil, cache: Int? = nil, nodeCachePercentage: Int? = nil, prevDocCachePercentage: Int? = nil, childrenCachePercentage: Int? = nil, diffCachePercentage: Int? = nil, cacheSegmentCount: Int? = nil, cacheStackMoveDistance: Int? = nil, blobCacheSize: Int? = nil, persistentCache: String? = nil, journalCache: String? = nil, customBlobStore: Bool? = nil, journalGCInterval: Int? = nil, journalGCMaxAge: Int? = nil, prefetchExternalChanges: Bool? = nil, role: String? = nil, versionGcMaxAgeInSecs: Int? = nil, versionGCExpression: String? = nil, versionGCTimeLimitInSecs: Int? = nil, blobGcMaxAgeInSecs: Int? = nil, blobTrackSnapshotIntervalInSecs: Int? = nil, repositoryHome: String? = nil, maxReplicationLagInSecs: Int? = nil, documentStoreType: String? = nil, bundlingDisabled: Bool? = nil, updateLimit: Int? = nil, persistentCacheIncludes: [String]? = nil, leaseCheckMode: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "mongouri": mongouri, 
            "db": db, 
            "socketKeepAlive": socketKeepAlive, 
            "cache": cache?.encodeToJSON(), 
            "nodeCachePercentage": nodeCachePercentage?.encodeToJSON(), 
            "prevDocCachePercentage": prevDocCachePercentage?.encodeToJSON(), 
            "childrenCachePercentage": childrenCachePercentage?.encodeToJSON(), 
            "diffCachePercentage": diffCachePercentage?.encodeToJSON(), 
            "cacheSegmentCount": cacheSegmentCount?.encodeToJSON(), 
            "cacheStackMoveDistance": cacheStackMoveDistance?.encodeToJSON(), 
            "blobCacheSize": blobCacheSize?.encodeToJSON(), 
            "persistentCache": persistentCache, 
            "journalCache": journalCache, 
            "customBlobStore": customBlobStore, 
            "journalGCInterval": journalGCInterval?.encodeToJSON(), 
            "journalGCMaxAge": journalGCMaxAge?.encodeToJSON(), 
            "prefetchExternalChanges": prefetchExternalChanges, 
            "role": role, 
            "versionGcMaxAgeInSecs": versionGcMaxAgeInSecs?.encodeToJSON(), 
            "versionGCExpression": versionGCExpression, 
            "versionGCTimeLimitInSecs": versionGCTimeLimitInSecs?.encodeToJSON(), 
            "blobGcMaxAgeInSecs": blobGcMaxAgeInSecs?.encodeToJSON(), 
            "blobTrackSnapshotIntervalInSecs": blobTrackSnapshotIntervalInSecs?.encodeToJSON(), 
            "repository.home": repositoryHome, 
            "maxReplicationLagInSecs": maxReplicationLagInSecs?.encodeToJSON(), 
            "documentStoreType": documentStoreType, 
            "bundlingDisabled": bundlingDisabled, 
            "updateLimit": updateLimit?.encodeToJSON(), 
            "persistentCacheIncludes": persistentCacheIncludes, 
            "leaseCheckMode": leaseCheckMode
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter persistentCacheIncludes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, persistentCacheIncludes: [String]? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, persistentCacheIncludes: persistentCacheIncludes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter persistentCacheIncludes: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, persistentCacheIncludes: [String]? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "persistentCacheIncludes": persistentCacheIncludes
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter includedPaths: (query)  (optional)
     - parameter enableAsyncObserver: (query)  (optional)
     - parameter observerQueueSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, includedPaths: [String]? = nil, enableAsyncObserver: Bool? = nil, observerQueueSize: Int? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, includedPaths: includedPaths, enableAsyncObserver: enableAsyncObserver, observerQueueSize: observerQueueSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter includedPaths: (query)  (optional)
     - parameter enableAsyncObserver: (query)  (optional)
     - parameter observerQueueSize: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, includedPaths: [String]? = nil, enableAsyncObserver: Bool? = nil, observerQueueSize: Int? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "includedPaths": includedPaths, 
            "enableAsyncObserver": enableAsyncObserver, 
            "observerQueueSize": observerQueueSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter asyncConfigs: (query)  (optional)
     - parameter leaseTimeOutMinutes: (query)  (optional)
     - parameter failingIndexTimeoutSeconds: (query)  (optional)
     - parameter errorWarnIntervalSeconds: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, asyncConfigs: [String]? = nil, leaseTimeOutMinutes: Int? = nil, failingIndexTimeoutSeconds: Int? = nil, errorWarnIntervalSeconds: Int? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, asyncConfigs: asyncConfigs, leaseTimeOutMinutes: leaseTimeOutMinutes, failingIndexTimeoutSeconds: failingIndexTimeoutSeconds, errorWarnIntervalSeconds: errorWarnIntervalSeconds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter asyncConfigs: (query)  (optional)
     - parameter leaseTimeOutMinutes: (query)  (optional)
     - parameter failingIndexTimeoutSeconds: (query)  (optional)
     - parameter errorWarnIntervalSeconds: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, asyncConfigs: [String]? = nil, leaseTimeOutMinutes: Int? = nil, failingIndexTimeoutSeconds: Int? = nil, errorWarnIntervalSeconds: Int? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "asyncConfigs": asyncConfigs, 
            "leaseTimeOutMinutes": leaseTimeOutMinutes?.encodeToJSON(), 
            "failingIndexTimeoutSeconds": failingIndexTimeoutSeconds?.encodeToJSON(), 
            "errorWarnIntervalSeconds": errorWarnIntervalSeconds?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter debug: (query)  (optional)
     - parameter localIndexDir: (query)  (optional)
     - parameter enableOpenIndexAsync: (query)  (optional)
     - parameter threadPoolSize: (query)  (optional)
     - parameter prefetchIndexFiles: (query)  (optional)
     - parameter extractedTextCacheSizeInMB: (query)  (optional)
     - parameter extractedTextCacheExpiryInSecs: (query)  (optional)
     - parameter alwaysUsePreExtractedCache: (query)  (optional)
     - parameter booleanClauseLimit: (query)  (optional)
     - parameter enableHybridIndexing: (query)  (optional)
     - parameter hybridQueueSize: (query)  (optional)
     - parameter disableStoredIndexDefinition: (query)  (optional)
     - parameter deletedBlobsCollectionEnabled: (query)  (optional)
     - parameter propIndexCleanerIntervalInSecs: (query)  (optional)
     - parameter enableSingleBlobIndexFiles: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil, debug: Bool? = nil, localIndexDir: String? = nil, enableOpenIndexAsync: Bool? = nil, threadPoolSize: Int? = nil, prefetchIndexFiles: Bool? = nil, extractedTextCacheSizeInMB: Int? = nil, extractedTextCacheExpiryInSecs: Int? = nil, alwaysUsePreExtractedCache: Bool? = nil, booleanClauseLimit: Int? = nil, enableHybridIndexing: Bool? = nil, hybridQueueSize: Int? = nil, disableStoredIndexDefinition: Bool? = nil, deletedBlobsCollectionEnabled: Bool? = nil, propIndexCleanerIntervalInSecs: Int? = nil, enableSingleBlobIndexFiles: Bool? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disabled: disabled, debug: debug, localIndexDir: localIndexDir, enableOpenIndexAsync: enableOpenIndexAsync, threadPoolSize: threadPoolSize, prefetchIndexFiles: prefetchIndexFiles, extractedTextCacheSizeInMB: extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs: extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache: alwaysUsePreExtractedCache, booleanClauseLimit: booleanClauseLimit, enableHybridIndexing: enableHybridIndexing, hybridQueueSize: hybridQueueSize, disableStoredIndexDefinition: disableStoredIndexDefinition, deletedBlobsCollectionEnabled: deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs: propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles: enableSingleBlobIndexFiles).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter debug: (query)  (optional)
     - parameter localIndexDir: (query)  (optional)
     - parameter enableOpenIndexAsync: (query)  (optional)
     - parameter threadPoolSize: (query)  (optional)
     - parameter prefetchIndexFiles: (query)  (optional)
     - parameter extractedTextCacheSizeInMB: (query)  (optional)
     - parameter extractedTextCacheExpiryInSecs: (query)  (optional)
     - parameter alwaysUsePreExtractedCache: (query)  (optional)
     - parameter booleanClauseLimit: (query)  (optional)
     - parameter enableHybridIndexing: (query)  (optional)
     - parameter hybridQueueSize: (query)  (optional)
     - parameter disableStoredIndexDefinition: (query)  (optional)
     - parameter deletedBlobsCollectionEnabled: (query)  (optional)
     - parameter propIndexCleanerIntervalInSecs: (query)  (optional)
     - parameter enableSingleBlobIndexFiles: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil, debug: Bool? = nil, localIndexDir: String? = nil, enableOpenIndexAsync: Bool? = nil, threadPoolSize: Int? = nil, prefetchIndexFiles: Bool? = nil, extractedTextCacheSizeInMB: Int? = nil, extractedTextCacheExpiryInSecs: Int? = nil, alwaysUsePreExtractedCache: Bool? = nil, booleanClauseLimit: Int? = nil, enableHybridIndexing: Bool? = nil, hybridQueueSize: Int? = nil, disableStoredIndexDefinition: Bool? = nil, deletedBlobsCollectionEnabled: Bool? = nil, propIndexCleanerIntervalInSecs: Int? = nil, enableSingleBlobIndexFiles: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "disabled": disabled, 
            "debug": debug, 
            "localIndexDir": localIndexDir, 
            "enableOpenIndexAsync": enableOpenIndexAsync, 
            "threadPoolSize": threadPoolSize?.encodeToJSON(), 
            "prefetchIndexFiles": prefetchIndexFiles, 
            "extractedTextCacheSizeInMB": extractedTextCacheSizeInMB?.encodeToJSON(), 
            "extractedTextCacheExpiryInSecs": extractedTextCacheExpiryInSecs?.encodeToJSON(), 
            "alwaysUsePreExtractedCache": alwaysUsePreExtractedCache, 
            "booleanClauseLimit": booleanClauseLimit?.encodeToJSON(), 
            "enableHybridIndexing": enableHybridIndexing, 
            "hybridQueueSize": hybridQueueSize?.encodeToJSON(), 
            "disableStoredIndexDefinition": disableStoredIndexDefinition, 
            "deletedBlobsCollectionEnabled": deletedBlobsCollectionEnabled, 
            "propIndexCleanerIntervalInSecs": propIndexCleanerIntervalInSecs?.encodeToJSON(), 
            "enableSingleBlobIndexFiles": enableSingleBlobIndexFiles
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrHomePath: (query)  (optional)
     - parameter solrCoreName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrHomePath: String? = nil, solrCoreName: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, solrHomePath: solrHomePath, solrCoreName: solrCoreName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrHomePath: (query)  (optional)
     - parameter solrCoreName: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrHomePath: String? = nil, solrCoreName: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "solr.home.path": solrHomePath, 
            "solr.core.name": solrCoreName
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pathDescField: (query)  (optional)
     - parameter pathChildField: (query)  (optional)
     - parameter pathParentField: (query)  (optional)
     - parameter pathExactField: (query)  (optional)
     - parameter catchAllField: (query)  (optional)
     - parameter collapsedPathField: (query)  (optional)
     - parameter pathDepthField: (query)  (optional)
     - parameter commitPolicy: (query)  (optional)
     - parameter rows: (query)  (optional)
     - parameter pathRestrictions: (query)  (optional)
     - parameter propertyRestrictions: (query)  (optional)
     - parameter primarytypesRestrictions: (query)  (optional)
     - parameter ignoredProperties: (query)  (optional)
     - parameter usedProperties: (query)  (optional)
     - parameter typeMappings: (query)  (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter collapseJcrcontentNodes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pathDescField: String? = nil, pathChildField: String? = nil, pathParentField: String? = nil, pathExactField: String? = nil, catchAllField: String? = nil, collapsedPathField: String? = nil, pathDepthField: String? = nil, commitPolicy: String? = nil, rows: Int? = nil, pathRestrictions: Bool? = nil, propertyRestrictions: Bool? = nil, primarytypesRestrictions: Bool? = nil, ignoredProperties: [String]? = nil, usedProperties: [String]? = nil, typeMappings: [String]? = nil, propertyMappings: [String]? = nil, collapseJcrcontentNodes: Bool? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pathDescField: pathDescField, pathChildField: pathChildField, pathParentField: pathParentField, pathExactField: pathExactField, catchAllField: catchAllField, collapsedPathField: collapsedPathField, pathDepthField: pathDepthField, commitPolicy: commitPolicy, rows: rows, pathRestrictions: pathRestrictions, propertyRestrictions: propertyRestrictions, primarytypesRestrictions: primarytypesRestrictions, ignoredProperties: ignoredProperties, usedProperties: usedProperties, typeMappings: typeMappings, propertyMappings: propertyMappings, collapseJcrcontentNodes: collapseJcrcontentNodes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pathDescField: (query)  (optional)
     - parameter pathChildField: (query)  (optional)
     - parameter pathParentField: (query)  (optional)
     - parameter pathExactField: (query)  (optional)
     - parameter catchAllField: (query)  (optional)
     - parameter collapsedPathField: (query)  (optional)
     - parameter pathDepthField: (query)  (optional)
     - parameter commitPolicy: (query)  (optional)
     - parameter rows: (query)  (optional)
     - parameter pathRestrictions: (query)  (optional)
     - parameter propertyRestrictions: (query)  (optional)
     - parameter primarytypesRestrictions: (query)  (optional)
     - parameter ignoredProperties: (query)  (optional)
     - parameter usedProperties: (query)  (optional)
     - parameter typeMappings: (query)  (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter collapseJcrcontentNodes: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pathDescField: String? = nil, pathChildField: String? = nil, pathParentField: String? = nil, pathExactField: String? = nil, catchAllField: String? = nil, collapsedPathField: String? = nil, pathDepthField: String? = nil, commitPolicy: String? = nil, rows: Int? = nil, pathRestrictions: Bool? = nil, propertyRestrictions: Bool? = nil, primarytypesRestrictions: Bool? = nil, ignoredProperties: [String]? = nil, usedProperties: [String]? = nil, typeMappings: [String]? = nil, propertyMappings: [String]? = nil, collapseJcrcontentNodes: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path.desc.field": pathDescField, 
            "path.child.field": pathChildField, 
            "path.parent.field": pathParentField, 
            "path.exact.field": pathExactField, 
            "catch.all.field": catchAllField, 
            "collapsed.path.field": collapsedPathField, 
            "path.depth.field": pathDepthField, 
            "commit.policy": commitPolicy, 
            "rows": rows?.encodeToJSON(), 
            "path.restrictions": pathRestrictions, 
            "property.restrictions": propertyRestrictions, 
            "primarytypes.restrictions": primarytypesRestrictions, 
            "ignored.properties": ignoredProperties, 
            "used.properties": usedProperties, 
            "type.mappings": typeMappings, 
            "property.mappings": propertyMappings, 
            "collapse.jcrcontent.nodes": collapseJcrcontentNodes
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrHttpUrl: (query)  (optional)
     - parameter solrZkHost: (query)  (optional)
     - parameter solrCollection: (query)  (optional)
     - parameter solrSocketTimeout: (query)  (optional)
     - parameter solrConnectionTimeout: (query)  (optional)
     - parameter solrShardsNo: (query)  (optional)
     - parameter solrReplicationFactor: (query)  (optional)
     - parameter solrConfDir: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrHttpUrl: String? = nil, solrZkHost: String? = nil, solrCollection: String? = nil, solrSocketTimeout: Int? = nil, solrConnectionTimeout: Int? = nil, solrShardsNo: Int? = nil, solrReplicationFactor: Int? = nil, solrConfDir: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, solrHttpUrl: solrHttpUrl, solrZkHost: solrZkHost, solrCollection: solrCollection, solrSocketTimeout: solrSocketTimeout, solrConnectionTimeout: solrConnectionTimeout, solrShardsNo: solrShardsNo, solrReplicationFactor: solrReplicationFactor, solrConfDir: solrConfDir).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrHttpUrl: (query)  (optional)
     - parameter solrZkHost: (query)  (optional)
     - parameter solrCollection: (query)  (optional)
     - parameter solrSocketTimeout: (query)  (optional)
     - parameter solrConnectionTimeout: (query)  (optional)
     - parameter solrShardsNo: (query)  (optional)
     - parameter solrReplicationFactor: (query)  (optional)
     - parameter solrConfDir: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrHttpUrl: String? = nil, solrZkHost: String? = nil, solrCollection: String? = nil, solrSocketTimeout: Int? = nil, solrConnectionTimeout: Int? = nil, solrShardsNo: Int? = nil, solrReplicationFactor: Int? = nil, solrConfDir: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "solr.http.url": solrHttpUrl, 
            "solr.zk.host": solrZkHost, 
            "solr.collection": solrCollection, 
            "solr.socket.timeout": solrSocketTimeout?.encodeToJSON(), 
            "solr.connection.timeout": solrConnectionTimeout?.encodeToJSON(), 
            "solr.shards.no": solrShardsNo?.encodeToJSON(), 
            "solr.replication.factor": solrReplicationFactor?.encodeToJSON(), 
            "solr.conf.dir": solrConfDir
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryAggregation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryAggregation: Bool? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queryAggregation: queryAggregation).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryAggregation: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryAggregation: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "query.aggregation": queryAggregation
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serverType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serverType: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serverType: serverType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serverType: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serverType: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "server.type": serverType
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerType: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerType: providerType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerType: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerType: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "providerType": providerType
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxItems: (query)  (optional)
     - parameter maxPathDepth: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxItems: Int? = nil, maxPathDepth: Int? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxItems: maxItems, maxPathDepth: maxPathDepth, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxItems: (query)  (optional)
     - parameter maxPathDepth: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo> 
     */
    open class func orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxItems: Int? = nil, maxPathDepth: Int? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "maxItems": maxItems?.encodeToJSON(), 
            "maxPathDepth": maxPathDepth?.encodeToJSON(), 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryLimitInMemory: (query)  (optional)
     - parameter queryLimitReads: (query)  (optional)
     - parameter queryFailTraversal: (query)  (optional)
     - parameter fastQuerySize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakQueryQueryEngineSettingsService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryLimitInMemory: Int? = nil, queryLimitReads: Int? = nil, queryFailTraversal: Bool? = nil, fastQuerySize: Bool? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakQueryQueryEngineSettingsServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queryLimitInMemory: queryLimitInMemory, queryLimitReads: queryLimitReads, queryFailTraversal: queryFailTraversal, fastQuerySize: fastQuerySize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryLimitInMemory: (query)  (optional)
     - parameter queryLimitReads: (query)  (optional)
     - parameter queryFailTraversal: (query)  (optional)
     - parameter fastQuerySize: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo> 
     */
    open class func orgApacheJackrabbitOakQueryQueryEngineSettingsServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryLimitInMemory: Int? = nil, queryLimitReads: Int? = nil, queryFailTraversal: Bool? = nil, fastQuerySize: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "queryLimitInMemory": queryLimitInMemory?.encodeToJSON(), 
            "queryLimitReads": queryLimitReads?.encodeToJSON(), 
            "queryFailTraversal": queryFailTraversal, 
            "fastQuerySize": fastQuerySize
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthenticationAppName: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthenticationConfigSpiName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheJackrabbitOakAuthenticationAppName: String? = nil, orgApacheJackrabbitOakAuthenticationConfigSpiName: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheJackrabbitOakAuthenticationAppName: orgApacheJackrabbitOakAuthenticationAppName, orgApacheJackrabbitOakAuthenticationConfigSpiName: orgApacheJackrabbitOakAuthenticationConfigSpiName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthenticationAppName: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthenticationConfigSpiName: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo> 
     */
    open class func orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheJackrabbitOakAuthenticationAppName: String? = nil, orgApacheJackrabbitOakAuthenticationConfigSpiName: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.jackrabbit.oak.authentication.appName": orgApacheJackrabbitOakAuthenticationAppName, 
            "org.apache.jackrabbit.oak.authentication.configSpiName": orgApacheJackrabbitOakAuthenticationConfigSpiName
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerName: (query)  (optional)
     - parameter hostName: (query)  (optional)
     - parameter hostPort: (query)  (optional)
     - parameter hostSsl: (query)  (optional)
     - parameter hostTls: (query)  (optional)
     - parameter hostNoCertCheck: (query)  (optional)
     - parameter bindDn: (query)  (optional)
     - parameter bindPassword: (query)  (optional)
     - parameter searchTimeout: (query)  (optional)
     - parameter adminPoolMaxActive: (query)  (optional)
     - parameter adminPoolLookupOnValidate: (query)  (optional)
     - parameter userPoolMaxActive: (query)  (optional)
     - parameter userPoolLookupOnValidate: (query)  (optional)
     - parameter userBaseDN: (query)  (optional)
     - parameter userObjectclass: (query)  (optional)
     - parameter userIdAttribute: (query)  (optional)
     - parameter userExtraFilter: (query)  (optional)
     - parameter userMakeDnPath: (query)  (optional)
     - parameter groupBaseDN: (query)  (optional)
     - parameter groupObjectclass: (query)  (optional)
     - parameter groupNameAttribute: (query)  (optional)
     - parameter groupExtraFilter: (query)  (optional)
     - parameter groupMakeDnPath: (query)  (optional)
     - parameter groupMemberAttribute: (query)  (optional)
     - parameter useUidForExtId: (query)  (optional)
     - parameter customattributes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerName: String? = nil, hostName: String? = nil, hostPort: Int? = nil, hostSsl: Bool? = nil, hostTls: Bool? = nil, hostNoCertCheck: Bool? = nil, bindDn: String? = nil, bindPassword: String? = nil, searchTimeout: String? = nil, adminPoolMaxActive: Int? = nil, adminPoolLookupOnValidate: Bool? = nil, userPoolMaxActive: Int? = nil, userPoolLookupOnValidate: Bool? = nil, userBaseDN: String? = nil, userObjectclass: [String]? = nil, userIdAttribute: String? = nil, userExtraFilter: String? = nil, userMakeDnPath: Bool? = nil, groupBaseDN: String? = nil, groupObjectclass: [String]? = nil, groupNameAttribute: String? = nil, groupExtraFilter: String? = nil, groupMakeDnPath: Bool? = nil, groupMemberAttribute: String? = nil, useUidForExtId: Bool? = nil, customattributes: [String]? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerName: providerName, hostName: hostName, hostPort: hostPort, hostSsl: hostSsl, hostTls: hostTls, hostNoCertCheck: hostNoCertCheck, bindDn: bindDn, bindPassword: bindPassword, searchTimeout: searchTimeout, adminPoolMaxActive: adminPoolMaxActive, adminPoolLookupOnValidate: adminPoolLookupOnValidate, userPoolMaxActive: userPoolMaxActive, userPoolLookupOnValidate: userPoolLookupOnValidate, userBaseDN: userBaseDN, userObjectclass: userObjectclass, userIdAttribute: userIdAttribute, userExtraFilter: userExtraFilter, userMakeDnPath: userMakeDnPath, groupBaseDN: groupBaseDN, groupObjectclass: groupObjectclass, groupNameAttribute: groupNameAttribute, groupExtraFilter: groupExtraFilter, groupMakeDnPath: groupMakeDnPath, groupMemberAttribute: groupMemberAttribute, useUidForExtId: useUidForExtId, customattributes: customattributes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerName: (query)  (optional)
     - parameter hostName: (query)  (optional)
     - parameter hostPort: (query)  (optional)
     - parameter hostSsl: (query)  (optional)
     - parameter hostTls: (query)  (optional)
     - parameter hostNoCertCheck: (query)  (optional)
     - parameter bindDn: (query)  (optional)
     - parameter bindPassword: (query)  (optional)
     - parameter searchTimeout: (query)  (optional)
     - parameter adminPoolMaxActive: (query)  (optional)
     - parameter adminPoolLookupOnValidate: (query)  (optional)
     - parameter userPoolMaxActive: (query)  (optional)
     - parameter userPoolLookupOnValidate: (query)  (optional)
     - parameter userBaseDN: (query)  (optional)
     - parameter userObjectclass: (query)  (optional)
     - parameter userIdAttribute: (query)  (optional)
     - parameter userExtraFilter: (query)  (optional)
     - parameter userMakeDnPath: (query)  (optional)
     - parameter groupBaseDN: (query)  (optional)
     - parameter groupObjectclass: (query)  (optional)
     - parameter groupNameAttribute: (query)  (optional)
     - parameter groupExtraFilter: (query)  (optional)
     - parameter groupMakeDnPath: (query)  (optional)
     - parameter groupMemberAttribute: (query)  (optional)
     - parameter useUidForExtId: (query)  (optional)
     - parameter customattributes: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo> 
     */
    open class func orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerName: String? = nil, hostName: String? = nil, hostPort: Int? = nil, hostSsl: Bool? = nil, hostTls: Bool? = nil, hostNoCertCheck: Bool? = nil, bindDn: String? = nil, bindPassword: String? = nil, searchTimeout: String? = nil, adminPoolMaxActive: Int? = nil, adminPoolLookupOnValidate: Bool? = nil, userPoolMaxActive: Int? = nil, userPoolLookupOnValidate: Bool? = nil, userBaseDN: String? = nil, userObjectclass: [String]? = nil, userIdAttribute: String? = nil, userExtraFilter: String? = nil, userMakeDnPath: Bool? = nil, groupBaseDN: String? = nil, groupObjectclass: [String]? = nil, groupNameAttribute: String? = nil, groupExtraFilter: String? = nil, groupMakeDnPath: Bool? = nil, groupMemberAttribute: String? = nil, useUidForExtId: Bool? = nil, customattributes: [String]? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "provider.name": providerName, 
            "host.name": hostName, 
            "host.port": hostPort?.encodeToJSON(), 
            "host.ssl": hostSsl, 
            "host.tls": hostTls, 
            "host.noCertCheck": hostNoCertCheck, 
            "bind.dn": bindDn, 
            "bind.password": bindPassword, 
            "searchTimeout": searchTimeout, 
            "adminPool.maxActive": adminPoolMaxActive?.encodeToJSON(), 
            "adminPool.lookupOnValidate": adminPoolLookupOnValidate, 
            "userPool.maxActive": userPoolMaxActive?.encodeToJSON(), 
            "userPool.lookupOnValidate": userPoolLookupOnValidate, 
            "user.baseDN": userBaseDN, 
            "user.objectclass": userObjectclass, 
            "user.idAttribute": userIdAttribute, 
            "user.extraFilter": userExtraFilter, 
            "user.makeDnPath": userMakeDnPath, 
            "group.baseDN": groupBaseDN, 
            "group.objectclass": groupObjectclass, 
            "group.nameAttribute": groupNameAttribute, 
            "group.extraFilter": groupExtraFilter, 
            "group.makeDnPath": groupMakeDnPath, 
            "group.memberAttribute": groupMemberAttribute, 
            "useUidForExtId": useUidForExtId, 
            "customattributes": customattributes
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tokenExpiration: (query)  (optional)
     - parameter tokenLength: (query)  (optional)
     - parameter tokenRefresh: (query)  (optional)
     - parameter tokenCleanupThreshold: (query)  (optional)
     - parameter passwordHashAlgorithm: (query)  (optional)
     - parameter passwordHashIterations: (query)  (optional)
     - parameter passwordSaltSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tokenExpiration: String? = nil, tokenLength: String? = nil, tokenRefresh: Bool? = nil, tokenCleanupThreshold: Int? = nil, passwordHashAlgorithm: String? = nil, passwordHashIterations: Int? = nil, passwordSaltSize: Int? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, tokenExpiration: tokenExpiration, tokenLength: tokenLength, tokenRefresh: tokenRefresh, tokenCleanupThreshold: tokenCleanupThreshold, passwordHashAlgorithm: passwordHashAlgorithm, passwordHashIterations: passwordHashIterations, passwordSaltSize: passwordSaltSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tokenExpiration: (query)  (optional)
     - parameter tokenLength: (query)  (optional)
     - parameter tokenRefresh: (query)  (optional)
     - parameter tokenCleanupThreshold: (query)  (optional)
     - parameter passwordHashAlgorithm: (query)  (optional)
     - parameter passwordHashIterations: (query)  (optional)
     - parameter passwordSaltSize: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo> 
     */
    open class func orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tokenExpiration: String? = nil, tokenLength: String? = nil, tokenRefresh: Bool? = nil, tokenCleanupThreshold: Int? = nil, passwordHashAlgorithm: String? = nil, passwordHashIterations: Int? = nil, passwordSaltSize: Int? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "tokenExpiration": tokenExpiration, 
            "tokenLength": tokenLength, 
            "tokenRefresh": tokenRefresh, 
            "tokenCleanupThreshold": tokenCleanupThreshold?.encodeToJSON(), 
            "passwordHashAlgorithm": passwordHashAlgorithm, 
            "passwordHashIterations": passwordHashIterations?.encodeToJSON(), 
            "passwordSaltSize": passwordSaltSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter permissionsJr2: (query)  (optional)
     - parameter importBehavior: (query)  (optional)
     - parameter readPaths: (query)  (optional)
     - parameter administrativePrincipals: (query)  (optional)
     - parameter configurationRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, permissionsJr2: String? = nil, importBehavior: String? = nil, readPaths: [String]? = nil, administrativePrincipals: [String]? = nil, configurationRanking: Int? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, permissionsJr2: permissionsJr2, importBehavior: importBehavior, readPaths: readPaths, administrativePrincipals: administrativePrincipals, configurationRanking: configurationRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter permissionsJr2: (query)  (optional)
     - parameter importBehavior: (query)  (optional)
     - parameter readPaths: (query)  (optional)
     - parameter administrativePrincipals: (query)  (optional)
     - parameter configurationRanking: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo> 
     */
    open class func orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, permissionsJr2: String? = nil, importBehavior: String? = nil, readPaths: [String]? = nil, administrativePrincipals: [String]? = nil, configurationRanking: Int? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "permissionsJr2": permissionsJr2, 
            "importBehavior": importBehavior, 
            "readPaths": readPaths, 
            "administrativePrincipals": administrativePrincipals, 
            "configurationRanking": configurationRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requiredServicePids: (query)  (optional)
     - parameter authorizationCompositionType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requiredServicePids: [String]? = nil, authorizationCompositionType: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, requiredServicePids: requiredServicePids, authorizationCompositionType: authorizationCompositionType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requiredServicePids: (query)  (optional)
     - parameter authorizationCompositionType: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo> 
     */
    open class func orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requiredServicePids: [String]? = nil, authorizationCompositionType: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "requiredServicePids": requiredServicePids, 
            "authorizationCompositionType": authorizationCompositionType
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter length: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, length: Int? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, length: length).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter length: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo> 
     */
    open class func orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, length: Int? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "length": length?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter usersPath: (query)  (optional)
     - parameter groupsPath: (query)  (optional)
     - parameter systemRelativePath: (query)  (optional)
     - parameter defaultDepth: (query)  (optional)
     - parameter importBehavior: (query)  (optional)
     - parameter passwordHashAlgorithm: (query)  (optional)
     - parameter passwordHashIterations: (query)  (optional)
     - parameter passwordSaltSize: (query)  (optional)
     - parameter omitAdminPw: (query)  (optional)
     - parameter supportAutoSave: (query)  (optional)
     - parameter passwordMaxAge: (query)  (optional)
     - parameter initialPasswordChange: (query)  (optional)
     - parameter passwordHistorySize: (query)  (optional)
     - parameter passwordExpiryForAdmin: (query)  (optional)
     - parameter cacheExpiration: (query)  (optional)
     - parameter enableRFC7613UsercaseMappedProfile: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, usersPath: String? = nil, groupsPath: String? = nil, systemRelativePath: String? = nil, defaultDepth: Int? = nil, importBehavior: String? = nil, passwordHashAlgorithm: String? = nil, passwordHashIterations: Int? = nil, passwordSaltSize: Int? = nil, omitAdminPw: Bool? = nil, supportAutoSave: Bool? = nil, passwordMaxAge: Int? = nil, initialPasswordChange: Bool? = nil, passwordHistorySize: Int? = nil, passwordExpiryForAdmin: Bool? = nil, cacheExpiration: Int? = nil, enableRFC7613UsercaseMappedProfile: Bool? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSecurityUserUserConfigurationImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, usersPath: usersPath, groupsPath: groupsPath, systemRelativePath: systemRelativePath, defaultDepth: defaultDepth, importBehavior: importBehavior, passwordHashAlgorithm: passwordHashAlgorithm, passwordHashIterations: passwordHashIterations, passwordSaltSize: passwordSaltSize, omitAdminPw: omitAdminPw, supportAutoSave: supportAutoSave, passwordMaxAge: passwordMaxAge, initialPasswordChange: initialPasswordChange, passwordHistorySize: passwordHistorySize, passwordExpiryForAdmin: passwordExpiryForAdmin, cacheExpiration: cacheExpiration, enableRFC7613UsercaseMappedProfile: enableRFC7613UsercaseMappedProfile).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter usersPath: (query)  (optional)
     - parameter groupsPath: (query)  (optional)
     - parameter systemRelativePath: (query)  (optional)
     - parameter defaultDepth: (query)  (optional)
     - parameter importBehavior: (query)  (optional)
     - parameter passwordHashAlgorithm: (query)  (optional)
     - parameter passwordHashIterations: (query)  (optional)
     - parameter passwordSaltSize: (query)  (optional)
     - parameter omitAdminPw: (query)  (optional)
     - parameter supportAutoSave: (query)  (optional)
     - parameter passwordMaxAge: (query)  (optional)
     - parameter initialPasswordChange: (query)  (optional)
     - parameter passwordHistorySize: (query)  (optional)
     - parameter passwordExpiryForAdmin: (query)  (optional)
     - parameter cacheExpiration: (query)  (optional)
     - parameter enableRFC7613UsercaseMappedProfile: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo> 
     */
    open class func orgApacheJackrabbitOakSecurityUserUserConfigurationImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, usersPath: String? = nil, groupsPath: String? = nil, systemRelativePath: String? = nil, defaultDepth: Int? = nil, importBehavior: String? = nil, passwordHashAlgorithm: String? = nil, passwordHashIterations: Int? = nil, passwordSaltSize: Int? = nil, omitAdminPw: Bool? = nil, supportAutoSave: Bool? = nil, passwordMaxAge: Int? = nil, initialPasswordChange: Bool? = nil, passwordHistorySize: Int? = nil, passwordExpiryForAdmin: Bool? = nil, cacheExpiration: Int? = nil, enableRFC7613UsercaseMappedProfile: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "usersPath": usersPath, 
            "groupsPath": groupsPath, 
            "systemRelativePath": systemRelativePath, 
            "defaultDepth": defaultDepth?.encodeToJSON(), 
            "importBehavior": importBehavior, 
            "passwordHashAlgorithm": passwordHashAlgorithm, 
            "passwordHashIterations": passwordHashIterations?.encodeToJSON(), 
            "passwordSaltSize": passwordSaltSize?.encodeToJSON(), 
            "omitAdminPw": omitAdminPw, 
            "supportAutoSave": supportAutoSave, 
            "passwordMaxAge": passwordMaxAge?.encodeToJSON(), 
            "initialPasswordChange": initialPasswordChange, 
            "passwordHistorySize": passwordHistorySize?.encodeToJSON(), 
            "passwordExpiryForAdmin": passwordExpiryForAdmin, 
            "cacheExpiration": cacheExpiration?.encodeToJSON(), 
            "enableRFC7613UsercaseMappedProfile": enableRFC7613UsercaseMappedProfile
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter accountName: (query)  (optional)
     - parameter containerName: (query)  (optional)
     - parameter accessKey: (query)  (optional)
     - parameter rootPath: (query)  (optional)
     - parameter connectionURL: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, accountName: String? = nil, containerName: String? = nil, accessKey: String? = nil, rootPath: String? = nil, connectionURL: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, accountName: accountName, containerName: containerName, accessKey: accessKey, rootPath: rootPath, connectionURL: connectionURL).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter accountName: (query)  (optional)
     - parameter containerName: (query)  (optional)
     - parameter accessKey: (query)  (optional)
     - parameter rootPath: (query)  (optional)
     - parameter connectionURL: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo> 
     */
    open class func orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, accountName: String? = nil, containerName: String? = nil, accessKey: String? = nil, rootPath: String? = nil, connectionURL: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "accountName": accountName, 
            "containerName": containerName, 
            "accessKey": accessKey, 
            "rootPath": rootPath, 
            "connectionURL": connectionURL
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter tarmkMode: (query)  (optional)
     - parameter tarmkSize: (query)  (optional)
     - parameter segmentCacheSize: (query)  (optional)
     - parameter stringCacheSize: (query)  (optional)
     - parameter templateCacheSize: (query)  (optional)
     - parameter stringDeduplicationCacheSize: (query)  (optional)
     - parameter templateDeduplicationCacheSize: (query)  (optional)
     - parameter nodeDeduplicationCacheSize: (query)  (optional)
     - parameter pauseCompaction: (query)  (optional)
     - parameter compactionRetryCount: (query)  (optional)
     - parameter compactionForceTimeout: (query)  (optional)
     - parameter compactionSizeDeltaEstimation: (query)  (optional)
     - parameter compactionDisableEstimation: (query)  (optional)
     - parameter compactionRetainedGenerations: (query)  (optional)
     - parameter compactionMemoryThreshold: (query)  (optional)
     - parameter compactionProgressLog: (query)  (optional)
     - parameter standby: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter customSegmentStore: (query)  (optional)
     - parameter splitPersistence: (query)  (optional)
     - parameter repositoryBackupDir: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter registerDescriptors: (query)  (optional)
     - parameter dispatchChanges: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repositoryHome: String? = nil, tarmkMode: String? = nil, tarmkSize: Int? = nil, segmentCacheSize: Int? = nil, stringCacheSize: Int? = nil, templateCacheSize: Int? = nil, stringDeduplicationCacheSize: Int? = nil, templateDeduplicationCacheSize: Int? = nil, nodeDeduplicationCacheSize: Int? = nil, pauseCompaction: Bool? = nil, compactionRetryCount: Int? = nil, compactionForceTimeout: Int? = nil, compactionSizeDeltaEstimation: Int? = nil, compactionDisableEstimation: Bool? = nil, compactionRetainedGenerations: Int? = nil, compactionMemoryThreshold: Int? = nil, compactionProgressLog: Int? = nil, standby: Bool? = nil, customBlobStore: Bool? = nil, customSegmentStore: Bool? = nil, splitPersistence: Bool? = nil, repositoryBackupDir: String? = nil, blobGcMaxAgeInSecs: Int? = nil, blobTrackSnapshotIntervalInSecs: Int? = nil, role: String? = nil, registerDescriptors: Bool? = nil, dispatchChanges: Bool? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, repositoryHome: repositoryHome, tarmkMode: tarmkMode, tarmkSize: tarmkSize, segmentCacheSize: segmentCacheSize, stringCacheSize: stringCacheSize, templateCacheSize: templateCacheSize, stringDeduplicationCacheSize: stringDeduplicationCacheSize, templateDeduplicationCacheSize: templateDeduplicationCacheSize, nodeDeduplicationCacheSize: nodeDeduplicationCacheSize, pauseCompaction: pauseCompaction, compactionRetryCount: compactionRetryCount, compactionForceTimeout: compactionForceTimeout, compactionSizeDeltaEstimation: compactionSizeDeltaEstimation, compactionDisableEstimation: compactionDisableEstimation, compactionRetainedGenerations: compactionRetainedGenerations, compactionMemoryThreshold: compactionMemoryThreshold, compactionProgressLog: compactionProgressLog, standby: standby, customBlobStore: customBlobStore, customSegmentStore: customSegmentStore, splitPersistence: splitPersistence, repositoryBackupDir: repositoryBackupDir, blobGcMaxAgeInSecs: blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs: blobTrackSnapshotIntervalInSecs, role: role, registerDescriptors: registerDescriptors, dispatchChanges: dispatchChanges).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter tarmkMode: (query)  (optional)
     - parameter tarmkSize: (query)  (optional)
     - parameter segmentCacheSize: (query)  (optional)
     - parameter stringCacheSize: (query)  (optional)
     - parameter templateCacheSize: (query)  (optional)
     - parameter stringDeduplicationCacheSize: (query)  (optional)
     - parameter templateDeduplicationCacheSize: (query)  (optional)
     - parameter nodeDeduplicationCacheSize: (query)  (optional)
     - parameter pauseCompaction: (query)  (optional)
     - parameter compactionRetryCount: (query)  (optional)
     - parameter compactionForceTimeout: (query)  (optional)
     - parameter compactionSizeDeltaEstimation: (query)  (optional)
     - parameter compactionDisableEstimation: (query)  (optional)
     - parameter compactionRetainedGenerations: (query)  (optional)
     - parameter compactionMemoryThreshold: (query)  (optional)
     - parameter compactionProgressLog: (query)  (optional)
     - parameter standby: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter customSegmentStore: (query)  (optional)
     - parameter splitPersistence: (query)  (optional)
     - parameter repositoryBackupDir: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter registerDescriptors: (query)  (optional)
     - parameter dispatchChanges: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo> 
     */
    open class func orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repositoryHome: String? = nil, tarmkMode: String? = nil, tarmkSize: Int? = nil, segmentCacheSize: Int? = nil, stringCacheSize: Int? = nil, templateCacheSize: Int? = nil, stringDeduplicationCacheSize: Int? = nil, templateDeduplicationCacheSize: Int? = nil, nodeDeduplicationCacheSize: Int? = nil, pauseCompaction: Bool? = nil, compactionRetryCount: Int? = nil, compactionForceTimeout: Int? = nil, compactionSizeDeltaEstimation: Int? = nil, compactionDisableEstimation: Bool? = nil, compactionRetainedGenerations: Int? = nil, compactionMemoryThreshold: Int? = nil, compactionProgressLog: Int? = nil, standby: Bool? = nil, customBlobStore: Bool? = nil, customSegmentStore: Bool? = nil, splitPersistence: Bool? = nil, repositoryBackupDir: String? = nil, blobGcMaxAgeInSecs: Int? = nil, blobTrackSnapshotIntervalInSecs: Int? = nil, role: String? = nil, registerDescriptors: Bool? = nil, dispatchChanges: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "repository.home": repositoryHome, 
            "tarmk.mode": tarmkMode, 
            "tarmk.size": tarmkSize?.encodeToJSON(), 
            "segmentCache.size": segmentCacheSize?.encodeToJSON(), 
            "stringCache.size": stringCacheSize?.encodeToJSON(), 
            "templateCache.size": templateCacheSize?.encodeToJSON(), 
            "stringDeduplicationCache.size": stringDeduplicationCacheSize?.encodeToJSON(), 
            "templateDeduplicationCache.size": templateDeduplicationCacheSize?.encodeToJSON(), 
            "nodeDeduplicationCache.size": nodeDeduplicationCacheSize?.encodeToJSON(), 
            "pauseCompaction": pauseCompaction, 
            "compaction.retryCount": compactionRetryCount?.encodeToJSON(), 
            "compaction.force.timeout": compactionForceTimeout?.encodeToJSON(), 
            "compaction.sizeDeltaEstimation": compactionSizeDeltaEstimation?.encodeToJSON(), 
            "compaction.disableEstimation": compactionDisableEstimation, 
            "compaction.retainedGenerations": compactionRetainedGenerations?.encodeToJSON(), 
            "compaction.memoryThreshold": compactionMemoryThreshold?.encodeToJSON(), 
            "compaction.progressLog": compactionProgressLog?.encodeToJSON(), 
            "standby": standby, 
            "customBlobStore": customBlobStore, 
            "customSegmentStore": customSegmentStore, 
            "splitPersistence": splitPersistence, 
            "repository.backup.dir": repositoryBackupDir, 
            "blobGcMaxAgeInSecs": blobGcMaxAgeInSecs?.encodeToJSON(), 
            "blobTrackSnapshotIntervalInSecs": blobTrackSnapshotIntervalInSecs?.encodeToJSON(), 
            "role": role, 
            "registerDescriptors": registerDescriptors, 
            "dispatchChanges": dispatchChanges
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter commitsTrackerWriterGroups: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, commitsTrackerWriterGroups: [String]? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, commitsTrackerWriterGroups: commitsTrackerWriterGroups).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter commitsTrackerWriterGroups: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo> 
     */
    open class func orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, commitsTrackerWriterGroups: [String]? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "commitsTrackerWriterGroups": commitsTrackerWriterGroups
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter tarmkMode: (query)  (optional)
     - parameter tarmkSize: (query)  (optional)
     - parameter segmentCacheSize: (query)  (optional)
     - parameter stringCacheSize: (query)  (optional)
     - parameter templateCacheSize: (query)  (optional)
     - parameter stringDeduplicationCacheSize: (query)  (optional)
     - parameter templateDeduplicationCacheSize: (query)  (optional)
     - parameter nodeDeduplicationCacheSize: (query)  (optional)
     - parameter pauseCompaction: (query)  (optional)
     - parameter compactionRetryCount: (query)  (optional)
     - parameter compactionForceTimeout: (query)  (optional)
     - parameter compactionSizeDeltaEstimation: (query)  (optional)
     - parameter compactionDisableEstimation: (query)  (optional)
     - parameter compactionRetainedGenerations: (query)  (optional)
     - parameter compactionMemoryThreshold: (query)  (optional)
     - parameter compactionProgressLog: (query)  (optional)
     - parameter standby: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter customSegmentStore: (query)  (optional)
     - parameter splitPersistence: (query)  (optional)
     - parameter repositoryBackupDir: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repositoryHome: String? = nil, tarmkMode: String? = nil, tarmkSize: Int? = nil, segmentCacheSize: Int? = nil, stringCacheSize: Int? = nil, templateCacheSize: Int? = nil, stringDeduplicationCacheSize: Int? = nil, templateDeduplicationCacheSize: Int? = nil, nodeDeduplicationCacheSize: Int? = nil, pauseCompaction: Bool? = nil, compactionRetryCount: Int? = nil, compactionForceTimeout: Int? = nil, compactionSizeDeltaEstimation: Int? = nil, compactionDisableEstimation: Bool? = nil, compactionRetainedGenerations: Int? = nil, compactionMemoryThreshold: Int? = nil, compactionProgressLog: Int? = nil, standby: Bool? = nil, customBlobStore: Bool? = nil, customSegmentStore: Bool? = nil, splitPersistence: Bool? = nil, repositoryBackupDir: String? = nil, blobGcMaxAgeInSecs: Int? = nil, blobTrackSnapshotIntervalInSecs: Int? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, repositoryHome: repositoryHome, tarmkMode: tarmkMode, tarmkSize: tarmkSize, segmentCacheSize: segmentCacheSize, stringCacheSize: stringCacheSize, templateCacheSize: templateCacheSize, stringDeduplicationCacheSize: stringDeduplicationCacheSize, templateDeduplicationCacheSize: templateDeduplicationCacheSize, nodeDeduplicationCacheSize: nodeDeduplicationCacheSize, pauseCompaction: pauseCompaction, compactionRetryCount: compactionRetryCount, compactionForceTimeout: compactionForceTimeout, compactionSizeDeltaEstimation: compactionSizeDeltaEstimation, compactionDisableEstimation: compactionDisableEstimation, compactionRetainedGenerations: compactionRetainedGenerations, compactionMemoryThreshold: compactionMemoryThreshold, compactionProgressLog: compactionProgressLog, standby: standby, customBlobStore: customBlobStore, customSegmentStore: customSegmentStore, splitPersistence: splitPersistence, repositoryBackupDir: repositoryBackupDir, blobGcMaxAgeInSecs: blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs: blobTrackSnapshotIntervalInSecs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter tarmkMode: (query)  (optional)
     - parameter tarmkSize: (query)  (optional)
     - parameter segmentCacheSize: (query)  (optional)
     - parameter stringCacheSize: (query)  (optional)
     - parameter templateCacheSize: (query)  (optional)
     - parameter stringDeduplicationCacheSize: (query)  (optional)
     - parameter templateDeduplicationCacheSize: (query)  (optional)
     - parameter nodeDeduplicationCacheSize: (query)  (optional)
     - parameter pauseCompaction: (query)  (optional)
     - parameter compactionRetryCount: (query)  (optional)
     - parameter compactionForceTimeout: (query)  (optional)
     - parameter compactionSizeDeltaEstimation: (query)  (optional)
     - parameter compactionDisableEstimation: (query)  (optional)
     - parameter compactionRetainedGenerations: (query)  (optional)
     - parameter compactionMemoryThreshold: (query)  (optional)
     - parameter compactionProgressLog: (query)  (optional)
     - parameter standby: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter customSegmentStore: (query)  (optional)
     - parameter splitPersistence: (query)  (optional)
     - parameter repositoryBackupDir: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo> 
     */
    open class func orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repositoryHome: String? = nil, tarmkMode: String? = nil, tarmkSize: Int? = nil, segmentCacheSize: Int? = nil, stringCacheSize: Int? = nil, templateCacheSize: Int? = nil, stringDeduplicationCacheSize: Int? = nil, templateDeduplicationCacheSize: Int? = nil, nodeDeduplicationCacheSize: Int? = nil, pauseCompaction: Bool? = nil, compactionRetryCount: Int? = nil, compactionForceTimeout: Int? = nil, compactionSizeDeltaEstimation: Int? = nil, compactionDisableEstimation: Bool? = nil, compactionRetainedGenerations: Int? = nil, compactionMemoryThreshold: Int? = nil, compactionProgressLog: Int? = nil, standby: Bool? = nil, customBlobStore: Bool? = nil, customSegmentStore: Bool? = nil, splitPersistence: Bool? = nil, repositoryBackupDir: String? = nil, blobGcMaxAgeInSecs: Int? = nil, blobTrackSnapshotIntervalInSecs: Int? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "repository.home": repositoryHome, 
            "tarmk.mode": tarmkMode, 
            "tarmk.size": tarmkSize?.encodeToJSON(), 
            "segmentCache.size": segmentCacheSize?.encodeToJSON(), 
            "stringCache.size": stringCacheSize?.encodeToJSON(), 
            "templateCache.size": templateCacheSize?.encodeToJSON(), 
            "stringDeduplicationCache.size": stringDeduplicationCacheSize?.encodeToJSON(), 
            "templateDeduplicationCache.size": templateDeduplicationCacheSize?.encodeToJSON(), 
            "nodeDeduplicationCache.size": nodeDeduplicationCacheSize?.encodeToJSON(), 
            "pauseCompaction": pauseCompaction, 
            "compaction.retryCount": compactionRetryCount?.encodeToJSON(), 
            "compaction.force.timeout": compactionForceTimeout?.encodeToJSON(), 
            "compaction.sizeDeltaEstimation": compactionSizeDeltaEstimation?.encodeToJSON(), 
            "compaction.disableEstimation": compactionDisableEstimation, 
            "compaction.retainedGenerations": compactionRetainedGenerations?.encodeToJSON(), 
            "compaction.memoryThreshold": compactionMemoryThreshold?.encodeToJSON(), 
            "compaction.progressLog": compactionProgressLog?.encodeToJSON(), 
            "standby": standby, 
            "customBlobStore": customBlobStore, 
            "customSegmentStore": customSegmentStore, 
            "splitPersistence": splitPersistence, 
            "repository.backup.dir": repositoryBackupDir, 
            "blobGcMaxAgeInSecs": blobGcMaxAgeInSecs?.encodeToJSON(), 
            "blobTrackSnapshotIntervalInSecs": blobTrackSnapshotIntervalInSecs?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingInstallerConfigurationPersist: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter port: (query)  (optional)
     - parameter primaryHost: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter primaryAllowedClientIpRanges: (query)  (optional)
     - parameter secure: (query)  (optional)
     - parameter standbyReadtimeout: (query)  (optional)
     - parameter standbyAutoclean: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingInstallerConfigurationPersist: Bool? = nil, mode: String? = nil, port: Int? = nil, primaryHost: String? = nil, interval: Int? = nil, primaryAllowedClientIpRanges: [String]? = nil, secure: Bool? = nil, standbyReadtimeout: Int? = nil, standbyAutoclean: Bool? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingInstallerConfigurationPersist: orgApacheSlingInstallerConfigurationPersist, mode: mode, port: port, primaryHost: primaryHost, interval: interval, primaryAllowedClientIpRanges: primaryAllowedClientIpRanges, secure: secure, standbyReadtimeout: standbyReadtimeout, standbyAutoclean: standbyAutoclean).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingInstallerConfigurationPersist: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter port: (query)  (optional)
     - parameter primaryHost: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter primaryAllowedClientIpRanges: (query)  (optional)
     - parameter secure: (query)  (optional)
     - parameter standbyReadtimeout: (query)  (optional)
     - parameter standbyAutoclean: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo> 
     */
    open class func orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingInstallerConfigurationPersist: Bool? = nil, mode: String? = nil, port: Int? = nil, primaryHost: String? = nil, interval: Int? = nil, primaryAllowedClientIpRanges: [String]? = nil, secure: Bool? = nil, standbyReadtimeout: Int? = nil, standbyAutoclean: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.sling.installer.configuration.persist": orgApacheSlingInstallerConfigurationPersist, 
            "mode": mode, 
            "port": port?.encodeToJSON(), 
            "primary.host": primaryHost, 
            "interval": interval?.encodeToJSON(), 
            "primary.allowed-client-ip-ranges": primaryAllowedClientIpRanges, 
            "secure": secure, 
            "standby.readtimeout": standbyReadtimeout?.encodeToJSON(), 
            "standby.autoclean": standbyAutoclean
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter handlerName: (query)  (optional)
     - parameter userExpirationTime: (query)  (optional)
     - parameter userAutoMembership: (query)  (optional)
     - parameter userPropertyMapping: (query)  (optional)
     - parameter userPathPrefix: (query)  (optional)
     - parameter userMembershipExpTime: (query)  (optional)
     - parameter userMembershipNestingDepth: (query)  (optional)
     - parameter userDynamicMembership: (query)  (optional)
     - parameter userDisableMissing: (query)  (optional)
     - parameter groupExpirationTime: (query)  (optional)
     - parameter groupAutoMembership: (query)  (optional)
     - parameter groupPropertyMapping: (query)  (optional)
     - parameter groupPathPrefix: (query)  (optional)
     - parameter enableRFC7613UsercaseMappedProfile: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, handlerName: String? = nil, userExpirationTime: String? = nil, userAutoMembership: [String]? = nil, userPropertyMapping: [String]? = nil, userPathPrefix: String? = nil, userMembershipExpTime: String? = nil, userMembershipNestingDepth: Int? = nil, userDynamicMembership: Bool? = nil, userDisableMissing: Bool? = nil, groupExpirationTime: String? = nil, groupAutoMembership: [String]? = nil, groupPropertyMapping: [String]? = nil, groupPathPrefix: String? = nil, enableRFC7613UsercaseMappedProfile: Bool? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, handlerName: handlerName, userExpirationTime: userExpirationTime, userAutoMembership: userAutoMembership, userPropertyMapping: userPropertyMapping, userPathPrefix: userPathPrefix, userMembershipExpTime: userMembershipExpTime, userMembershipNestingDepth: userMembershipNestingDepth, userDynamicMembership: userDynamicMembership, userDisableMissing: userDisableMissing, groupExpirationTime: groupExpirationTime, groupAutoMembership: groupAutoMembership, groupPropertyMapping: groupPropertyMapping, groupPathPrefix: groupPathPrefix, enableRFC7613UsercaseMappedProfile: enableRFC7613UsercaseMappedProfile).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter handlerName: (query)  (optional)
     - parameter userExpirationTime: (query)  (optional)
     - parameter userAutoMembership: (query)  (optional)
     - parameter userPropertyMapping: (query)  (optional)
     - parameter userPathPrefix: (query)  (optional)
     - parameter userMembershipExpTime: (query)  (optional)
     - parameter userMembershipNestingDepth: (query)  (optional)
     - parameter userDynamicMembership: (query)  (optional)
     - parameter userDisableMissing: (query)  (optional)
     - parameter groupExpirationTime: (query)  (optional)
     - parameter groupAutoMembership: (query)  (optional)
     - parameter groupPropertyMapping: (query)  (optional)
     - parameter groupPathPrefix: (query)  (optional)
     - parameter enableRFC7613UsercaseMappedProfile: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo> 
     */
    open class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, handlerName: String? = nil, userExpirationTime: String? = nil, userAutoMembership: [String]? = nil, userPropertyMapping: [String]? = nil, userPathPrefix: String? = nil, userMembershipExpTime: String? = nil, userMembershipNestingDepth: Int? = nil, userDynamicMembership: Bool? = nil, userDisableMissing: Bool? = nil, groupExpirationTime: String? = nil, groupAutoMembership: [String]? = nil, groupPropertyMapping: [String]? = nil, groupPathPrefix: String? = nil, enableRFC7613UsercaseMappedProfile: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "handler.name": handlerName, 
            "user.expirationTime": userExpirationTime, 
            "user.autoMembership": userAutoMembership, 
            "user.propertyMapping": userPropertyMapping, 
            "user.pathPrefix": userPathPrefix, 
            "user.membershipExpTime": userMembershipExpTime, 
            "user.membershipNestingDepth": userMembershipNestingDepth?.encodeToJSON(), 
            "user.dynamicMembership": userDynamicMembership, 
            "user.disableMissing": userDisableMissing, 
            "group.expirationTime": groupExpirationTime, 
            "group.autoMembership": groupAutoMembership, 
            "group.propertyMapping": groupPropertyMapping, 
            "group.pathPrefix": groupPathPrefix, 
            "enableRFC7613UsercaseMappedProfile": enableRFC7613UsercaseMappedProfile
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter idpName: (query)  (optional)
     - parameter syncHandlerName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasRanking: Int? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, idpName: String? = nil, syncHandlerName: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jaasRanking: jaasRanking, jaasControlFlag: jaasControlFlag, jaasRealmName: jaasRealmName, idpName: idpName, syncHandlerName: syncHandlerName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter idpName: (query)  (optional)
     - parameter syncHandlerName: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo> 
     */
    open class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasRanking: Int? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, idpName: String? = nil, syncHandlerName: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "jaas.ranking": jaasRanking?.encodeToJSON(), 
            "jaas.controlFlag": jaasControlFlag, 
            "jaas.realmName": jaasRealmName, 
            "idp.name": idpName, 
            "sync.handlerName": syncHandlerName
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter protectExternalId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, protectExternalId: Bool? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, protectExternalId: protectExternalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter protectExternalId: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo> 
     */
    open class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, protectExternalId: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "protectExternalId": protectExternalId
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cugSupportedPaths: (query)  (optional)
     - parameter cugEnabled: (query)  (optional)
     - parameter configurationRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cugSupportedPaths: [String]? = nil, cugEnabled: Bool? = nil, configurationRanking: Int? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cugSupportedPaths: cugSupportedPaths, cugEnabled: cugEnabled, configurationRanking: configurationRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cugSupportedPaths: (query)  (optional)
     - parameter cugEnabled: (query)  (optional)
     - parameter configurationRanking: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo> 
     */
    open class func orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cugSupportedPaths: [String]? = nil, cugEnabled: Bool? = nil, configurationRanking: Int? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "cugSupportedPaths": cugSupportedPaths, 
            "cugEnabled": cugEnabled, 
            "configurationRanking": configurationRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter principalNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, principalNames: [String]? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, principalNames: principalNames).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter principalNames: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo> 
     */
    open class func orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, principalNames: [String]? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "principalNames": principalNames
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabledActions: (query)  (optional)
     - parameter userPrivilegeNames: (query)  (optional)
     - parameter groupPrivilegeNames: (query)  (optional)
     - parameter constraint: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabledActions: String? = nil, userPrivilegeNames: [String]? = nil, groupPrivilegeNames: [String]? = nil, constraint: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabledActions: enabledActions, userPrivilegeNames: userPrivilegeNames, groupPrivilegeNames: groupPrivilegeNames, constraint: constraint).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabledActions: (query)  (optional)
     - parameter userPrivilegeNames: (query)  (optional)
     - parameter groupPrivilegeNames: (query)  (optional)
     - parameter constraint: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo> 
     */
    open class func orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabledActions: String? = nil, userPrivilegeNames: [String]? = nil, groupPrivilegeNames: [String]? = nil, constraint: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabledActions": enabledActions, 
            "userPrivilegeNames": userPrivilegeNames, 
            "groupPrivilegeNames": groupPrivilegeNames, 
            "constraint": constraint
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter packageRoots: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitVaultPackagingImplPackagingImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, packageRoots: [String]? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitVaultPackagingImplPackagingImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, packageRoots: packageRoots).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter packageRoots: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo> 
     */
    open class func orgApacheJackrabbitVaultPackagingImplPackagingImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, packageRoots: [String]? = nil) -> RequestBuilder<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "packageRoots": packageRoots
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter homePath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, homePath: String? = nil, completion: @escaping ((_ data: OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo?,_ error: Error?) -> Void)) {
        orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, homePath: homePath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter homePath: (query)  (optional)
     - returns: RequestBuilder<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo> 
     */
    open class func orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, homePath: String? = nil) -> RequestBuilder<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "homePath": homePath
        ])

        let requestBuilder: RequestBuilder<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingAuthCoreImplLogoutServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletMethods: [String]? = nil, slingServletPaths: String? = nil, completion: @escaping ((_ data: OrgApacheSlingAuthCoreImplLogoutServletInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingAuthCoreImplLogoutServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletMethods: slingServletMethods, slingServletPaths: slingServletPaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingAuthCoreImplLogoutServletInfo> 
     */
    open class func orgApacheSlingAuthCoreImplLogoutServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletMethods: [String]? = nil, slingServletPaths: String? = nil) -> RequestBuilder<OrgApacheSlingAuthCoreImplLogoutServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.methods": slingServletMethods, 
            "sling.servlet.paths": slingServletPaths
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingAuthCoreImplLogoutServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCaconfigImplConfigurationBindingsValueProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo> 
     */
    open class func orgApacheSlingCaconfigImplConfigurationBindingsValueProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configBucketNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCaconfigImplConfigurationResolverImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configBucketNames: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingCaconfigImplConfigurationResolverImplInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCaconfigImplConfigurationResolverImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, configBucketNames: configBucketNames).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configBucketNames: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo> 
     */
    open class func orgApacheSlingCaconfigImplConfigurationResolverImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configBucketNames: [String]? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "configBucketNames": configBucketNames
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configPropertyInheritancePropertyNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configPropertyInheritancePropertyNames: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, configPropertyInheritancePropertyNames: configPropertyInheritancePropertyNames).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configPropertyInheritancePropertyNames: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo> 
     */
    open class func orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configPropertyInheritancePropertyNames: [String]? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled, 
            "configPropertyInheritancePropertyNames": configPropertyInheritancePropertyNames
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo> 
     */
    open class func orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter _description: (query)  (optional)
     - parameter overrides: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, _description: String? = nil, overrides: [String]? = nil, enabled: Bool? = nil, serviceRanking: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, _description: _description, overrides: overrides, enabled: enabled, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter _description: (query)  (optional)
     - parameter overrides: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo> 
     */
    open class func orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, _description: String? = nil, overrides: [String]? = nil, enabled: Bool? = nil, serviceRanking: Int? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "description": _description, 
            "overrides": overrides, 
            "enabled": enabled, 
            "service.ranking": serviceRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, serviceRanking: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo> 
     */
    open class func orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, serviceRanking: Int? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled, 
            "service.ranking": serviceRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ignorePropertyNameRegex: (query)  (optional)
     - parameter configCollectionPropertiesResourceNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ignorePropertyNameRegex: [String]? = nil, configCollectionPropertiesResourceNames: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCaconfigManagementImplConfigurationManagementSettiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, ignorePropertyNameRegex: ignorePropertyNameRegex, configCollectionPropertiesResourceNames: configCollectionPropertiesResourceNames).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ignorePropertyNameRegex: (query)  (optional)
     - parameter configCollectionPropertiesResourceNames: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo> 
     */
    open class func orgApacheSlingCaconfigManagementImplConfigurationManagementSettiWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ignorePropertyNameRegex: [String]? = nil, configCollectionPropertiesResourceNames: [String]? = nil) -> RequestBuilder<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "ignorePropertyNameRegex": ignorePropertyNameRegex, 
            "configCollectionPropertiesResourceNames": configCollectionPropertiesResourceNames
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configPath: (query)  (optional)
     - parameter fallbackPaths: (query)  (optional)
     - parameter configCollectionInheritancePropertyNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configPath: String? = nil, fallbackPaths: [String]? = nil, configCollectionInheritancePropertyNames: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, configPath: configPath, fallbackPaths: fallbackPaths, configCollectionInheritancePropertyNames: configCollectionInheritancePropertyNames).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configPath: (query)  (optional)
     - parameter fallbackPaths: (query)  (optional)
     - parameter configCollectionInheritancePropertyNames: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo> 
     */
    open class func orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configPath: String? = nil, fallbackPaths: [String]? = nil, configCollectionInheritancePropertyNames: [String]? = nil) -> RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled, 
            "configPath": configPath, 
            "fallbackPaths": fallbackPaths, 
            "configCollectionInheritancePropertyNames": configCollectionInheritancePropertyNames
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configRefResourceNames: (query)  (optional)
     - parameter configRefPropertyNames: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configRefResourceNames: [String]? = nil, configRefPropertyNames: [String]? = nil, serviceRanking: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, configRefResourceNames: configRefResourceNames, configRefPropertyNames: configRefPropertyNames, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configRefResourceNames: (query)  (optional)
     - parameter configRefPropertyNames: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo> 
     */
    open class func orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configRefResourceNames: [String]? = nil, configRefPropertyNames: [String]? = nil, serviceRanking: Int? = nil) -> RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "enabled": enabled, 
            "configRefResourceNames": configRefResourceNames, 
            "configRefPropertyNames": configRefPropertyNames, 
            "service.ranking": serviceRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parserFeatures: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parserFeatures: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, parserFeatures: parserFeatures).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parserFeatures: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo> 
     */
    open class func orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parserFeatures: [String]? = nil) -> RequestBuilder<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "parser.features": parserFeatures
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogLevel: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileNumber: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileSize: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPattern: (query)  (optional)
     - parameter orgApacheSlingCommonsLogConfigurationFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPackagingDataEnabled: (query)  (optional)
     - parameter orgApacheSlingCommonsLogMaxCallerDataDepth: (query)  (optional)
     - parameter orgApacheSlingCommonsLogMaxOldFileCountInDump: (query)  (optional)
     - parameter orgApacheSlingCommonsLogNumOfLines: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCommonsLogLogManager(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogLevel: String? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogFileNumber: Int? = nil, orgApacheSlingCommonsLogFileSize: String? = nil, orgApacheSlingCommonsLogPattern: String? = nil, orgApacheSlingCommonsLogConfigurationFile: String? = nil, orgApacheSlingCommonsLogPackagingDataEnabled: Bool? = nil, orgApacheSlingCommonsLogMaxCallerDataDepth: Int? = nil, orgApacheSlingCommonsLogMaxOldFileCountInDump: Int? = nil, orgApacheSlingCommonsLogNumOfLines: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingCommonsLogLogManagerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCommonsLogLogManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingCommonsLogLevel: orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile: orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber: orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize: orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogPattern: orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogConfigurationFile: orgApacheSlingCommonsLogConfigurationFile, orgApacheSlingCommonsLogPackagingDataEnabled: orgApacheSlingCommonsLogPackagingDataEnabled, orgApacheSlingCommonsLogMaxCallerDataDepth: orgApacheSlingCommonsLogMaxCallerDataDepth, orgApacheSlingCommonsLogMaxOldFileCountInDump: orgApacheSlingCommonsLogMaxOldFileCountInDump, orgApacheSlingCommonsLogNumOfLines: orgApacheSlingCommonsLogNumOfLines).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.log.LogManager
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogLevel: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileNumber: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileSize: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPattern: (query)  (optional)
     - parameter orgApacheSlingCommonsLogConfigurationFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPackagingDataEnabled: (query)  (optional)
     - parameter orgApacheSlingCommonsLogMaxCallerDataDepth: (query)  (optional)
     - parameter orgApacheSlingCommonsLogMaxOldFileCountInDump: (query)  (optional)
     - parameter orgApacheSlingCommonsLogNumOfLines: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCommonsLogLogManagerInfo> 
     */
    open class func orgApacheSlingCommonsLogLogManagerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogLevel: String? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogFileNumber: Int? = nil, orgApacheSlingCommonsLogFileSize: String? = nil, orgApacheSlingCommonsLogPattern: String? = nil, orgApacheSlingCommonsLogConfigurationFile: String? = nil, orgApacheSlingCommonsLogPackagingDataEnabled: Bool? = nil, orgApacheSlingCommonsLogMaxCallerDataDepth: Int? = nil, orgApacheSlingCommonsLogMaxOldFileCountInDump: Int? = nil, orgApacheSlingCommonsLogNumOfLines: Int? = nil) -> RequestBuilder<OrgApacheSlingCommonsLogLogManagerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.log.LogManager"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.sling.commons.log.level": orgApacheSlingCommonsLogLevel, 
            "org.apache.sling.commons.log.file": orgApacheSlingCommonsLogFile, 
            "org.apache.sling.commons.log.file.number": orgApacheSlingCommonsLogFileNumber?.encodeToJSON(), 
            "org.apache.sling.commons.log.file.size": orgApacheSlingCommonsLogFileSize, 
            "org.apache.sling.commons.log.pattern": orgApacheSlingCommonsLogPattern, 
            "org.apache.sling.commons.log.configurationFile": orgApacheSlingCommonsLogConfigurationFile, 
            "org.apache.sling.commons.log.packagingDataEnabled": orgApacheSlingCommonsLogPackagingDataEnabled, 
            "org.apache.sling.commons.log.maxCallerDataDepth": orgApacheSlingCommonsLogMaxCallerDataDepth?.encodeToJSON(), 
            "org.apache.sling.commons.log.maxOldFileCountInDump": orgApacheSlingCommonsLogMaxOldFileCountInDump?.encodeToJSON(), 
            "org.apache.sling.commons.log.numOfLines": orgApacheSlingCommonsLogNumOfLines?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsLogLogManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogLevel: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPattern: (query)  (optional)
     - parameter orgApacheSlingCommonsLogNames: (query)  (optional)
     - parameter orgApacheSlingCommonsLogAdditiv: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCommonsLogLogManagerFactoryConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogLevel: String? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogPattern: String? = nil, orgApacheSlingCommonsLogNames: [String]? = nil, orgApacheSlingCommonsLogAdditiv: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCommonsLogLogManagerFactoryConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingCommonsLogLevel: orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile: orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogPattern: orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogNames: orgApacheSlingCommonsLogNames, orgApacheSlingCommonsLogAdditiv: orgApacheSlingCommonsLogAdditiv).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogLevel: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPattern: (query)  (optional)
     - parameter orgApacheSlingCommonsLogNames: (query)  (optional)
     - parameter orgApacheSlingCommonsLogAdditiv: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo> 
     */
    open class func orgApacheSlingCommonsLogLogManagerFactoryConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogLevel: String? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogPattern: String? = nil, orgApacheSlingCommonsLogNames: [String]? = nil, orgApacheSlingCommonsLogAdditiv: Bool? = nil) -> RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.sling.commons.log.level": orgApacheSlingCommonsLogLevel, 
            "org.apache.sling.commons.log.file": orgApacheSlingCommonsLogFile, 
            "org.apache.sling.commons.log.pattern": orgApacheSlingCommonsLogPattern, 
            "org.apache.sling.commons.log.names": orgApacheSlingCommonsLogNames, 
            "org.apache.sling.commons.log.additiv": orgApacheSlingCommonsLogAdditiv
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileNumber: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileSize: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileBuffered: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCommonsLogLogManagerFactoryWriter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogFileNumber: Int? = nil, orgApacheSlingCommonsLogFileSize: String? = nil, orgApacheSlingCommonsLogFileBuffered: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCommonsLogLogManagerFactoryWriterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingCommonsLogFile: orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber: orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize: orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogFileBuffered: orgApacheSlingCommonsLogFileBuffered).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileNumber: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileSize: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileBuffered: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo> 
     */
    open class func orgApacheSlingCommonsLogLogManagerFactoryWriterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogFileNumber: Int? = nil, orgApacheSlingCommonsLogFileSize: String? = nil, orgApacheSlingCommonsLogFileBuffered: Bool? = nil) -> RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.sling.commons.log.file": orgApacheSlingCommonsLogFile, 
            "org.apache.sling.commons.log.file.number": orgApacheSlingCommonsLogFileNumber?.encodeToJSON(), 
            "org.apache.sling.commons.log.file.size": orgApacheSlingCommonsLogFileSize, 
            "org.apache.sling.commons.log.file.buffered": orgApacheSlingCommonsLogFileBuffered
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter period: (query)  (optional)
     - parameter timeUnit: (query)  (optional)
     - parameter level: (query)  (optional)
     - parameter loggerName: (query)  (optional)
     - parameter _prefix: (query)  (optional)
     - parameter pattern: (query)  (optional)
     - parameter registryName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCommonsMetricsInternalLogReporter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, period: Int? = nil, timeUnit: String? = nil, level: String? = nil, loggerName: String? = nil, _prefix: String? = nil, pattern: String? = nil, registryName: String? = nil, completion: @escaping ((_ data: OrgApacheSlingCommonsMetricsInternalLogReporterInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCommonsMetricsInternalLogReporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, period: period, timeUnit: timeUnit, level: level, loggerName: loggerName, _prefix: _prefix, pattern: pattern, registryName: registryName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter period: (query)  (optional)
     - parameter timeUnit: (query)  (optional)
     - parameter level: (query)  (optional)
     - parameter loggerName: (query)  (optional)
     - parameter _prefix: (query)  (optional)
     - parameter pattern: (query)  (optional)
     - parameter registryName: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCommonsMetricsInternalLogReporterInfo> 
     */
    open class func orgApacheSlingCommonsMetricsInternalLogReporterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, period: Int? = nil, timeUnit: String? = nil, level: String? = nil, loggerName: String? = nil, _prefix: String? = nil, pattern: String? = nil, registryName: String? = nil) -> RequestBuilder<OrgApacheSlingCommonsMetricsInternalLogReporterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "period": period?.encodeToJSON(), 
            "timeUnit": timeUnit, 
            "level": level, 
            "loggerName": loggerName, 
            "prefix": _prefix, 
            "pattern": pattern, 
            "registryName": registryName
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsMetricsInternalLogReporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasources: (query)  (optional)
     - parameter step: (query)  (optional)
     - parameter archives: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasources: [String]? = nil, step: Int? = nil, archives: [String]? = nil, path: String? = nil, completion: @escaping ((_ data: OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, datasources: datasources, step: step, archives: archives, path: path).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasources: (query)  (optional)
     - parameter step: (query)  (optional)
     - parameter archives: (query)  (optional)
     - parameter path: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo> 
     */
    open class func orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasources: [String]? = nil, step: Int? = nil, archives: [String]? = nil, path: String? = nil) -> RequestBuilder<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "datasources": datasources, 
            "step": step?.encodeToJSON(), 
            "archives": archives, 
            "path": path
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeTypes: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCommonsMimeInternalMimeTypeServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mimeTypes: mimeTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo> 
     */
    open class func orgApacheSlingCommonsMimeInternalMimeTypeServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeTypes: [String]? = nil) -> RequestBuilder<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "mime.types": mimeTypes
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter poolName: (query)  (optional)
     - parameter allowedPoolNames: (query)  (optional)
     - parameter schedulerUseleaderforsingle: (query)  (optional)
     - parameter metricsFilters: (query)  (optional)
     - parameter slowThresholdMillis: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCommonsSchedulerImplQuartzScheduler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, poolName: String? = nil, allowedPoolNames: [String]? = nil, schedulerUseleaderforsingle: Bool? = nil, metricsFilters: [String]? = nil, slowThresholdMillis: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCommonsSchedulerImplQuartzSchedulerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, poolName: poolName, allowedPoolNames: allowedPoolNames, schedulerUseleaderforsingle: schedulerUseleaderforsingle, metricsFilters: metricsFilters, slowThresholdMillis: slowThresholdMillis).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter poolName: (query)  (optional)
     - parameter allowedPoolNames: (query)  (optional)
     - parameter schedulerUseleaderforsingle: (query)  (optional)
     - parameter metricsFilters: (query)  (optional)
     - parameter slowThresholdMillis: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo> 
     */
    open class func orgApacheSlingCommonsSchedulerImplQuartzSchedulerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, poolName: String? = nil, allowedPoolNames: [String]? = nil, schedulerUseleaderforsingle: Bool? = nil, metricsFilters: [String]? = nil, slowThresholdMillis: Int? = nil) -> RequestBuilder<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "poolName": poolName, 
            "allowedPoolNames": allowedPoolNames, 
            "scheduler.useleaderforsingle": schedulerUseleaderforsingle, 
            "metrics.filters": metricsFilters, 
            "slowThresholdMillis": slowThresholdMillis?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxQuartzJobDurationAcceptable: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxQuartzJobDurationAcceptable: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxQuartzJobDurationAcceptable: maxQuartzJobDurationAcceptable).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxQuartzJobDurationAcceptable: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo> 
     */
    open class func orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxQuartzJobDurationAcceptable: Int? = nil) -> RequestBuilder<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "max.quartzJob.duration.acceptable": maxQuartzJobDurationAcceptable?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter minPoolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter maxThreadAge: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)
     - parameter blockPolicy: (query)  (optional)
     - parameter shutdownGraceful: (query)  (optional)
     - parameter daemon: (query)  (optional)
     - parameter shutdownWaitTime: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, minPoolSize: Int? = nil, maxPoolSize: Int? = nil, queueSize: Int? = nil, maxThreadAge: Int? = nil, keepAliveTime: Int? = nil, blockPolicy: String? = nil, shutdownGraceful: Bool? = nil, daemon: Bool? = nil, shutdownWaitTime: Int? = nil, priority: String? = nil, completion: @escaping ((_ data: OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, minPoolSize: minPoolSize, maxPoolSize: maxPoolSize, queueSize: queueSize, maxThreadAge: maxThreadAge, keepAliveTime: keepAliveTime, blockPolicy: blockPolicy, shutdownGraceful: shutdownGraceful, daemon: daemon, shutdownWaitTime: shutdownWaitTime, priority: priority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter minPoolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter maxThreadAge: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)
     - parameter blockPolicy: (query)  (optional)
     - parameter shutdownGraceful: (query)  (optional)
     - parameter daemon: (query)  (optional)
     - parameter shutdownWaitTime: (query)  (optional)
     - parameter priority: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo> 
     */
    open class func orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, minPoolSize: Int? = nil, maxPoolSize: Int? = nil, queueSize: Int? = nil, maxThreadAge: Int? = nil, keepAliveTime: Int? = nil, blockPolicy: String? = nil, shutdownGraceful: Bool? = nil, daemon: Bool? = nil, shutdownWaitTime: Int? = nil, priority: String? = nil) -> RequestBuilder<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "minPoolSize": minPoolSize?.encodeToJSON(), 
            "maxPoolSize": maxPoolSize?.encodeToJSON(), 
            "queueSize": queueSize?.encodeToJSON(), 
            "maxThreadAge": maxThreadAge?.encodeToJSON(), 
            "keepAliveTime": keepAliveTime?.encodeToJSON(), 
            "blockPolicy": blockPolicy, 
            "shutdownGraceful": shutdownGraceful, 
            "daemon": daemon, 
            "shutdownWaitTime": shutdownWaitTime?.encodeToJSON(), 
            "priority": priority
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcPropName: (query)  (optional)
     - parameter driverClassName: (query)  (optional)
     - parameter url: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter defaultAutoCommit: (query)  (optional)
     - parameter defaultReadOnly: (query)  (optional)
     - parameter defaultTransactionIsolation: (query)  (optional)
     - parameter defaultCatalog: (query)  (optional)
     - parameter maxActive: (query)  (optional)
     - parameter maxIdle: (query)  (optional)
     - parameter minIdle: (query)  (optional)
     - parameter initialSize: (query)  (optional)
     - parameter maxWait: (query)  (optional)
     - parameter maxAge: (query)  (optional)
     - parameter testOnBorrow: (query)  (optional)
     - parameter testOnReturn: (query)  (optional)
     - parameter testWhileIdle: (query)  (optional)
     - parameter validationQuery: (query)  (optional)
     - parameter validationQueryTimeout: (query)  (optional)
     - parameter timeBetweenEvictionRunsMillis: (query)  (optional)
     - parameter minEvictableIdleTimeMillis: (query)  (optional)
     - parameter connectionProperties: (query)  (optional)
     - parameter initSQL: (query)  (optional)
     - parameter jdbcInterceptors: (query)  (optional)
     - parameter validationInterval: (query)  (optional)
     - parameter logValidationErrors: (query)  (optional)
     - parameter datasourceSvcProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDatasourceDataSourceFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasourceName: String? = nil, datasourceSvcPropName: String? = nil, driverClassName: String? = nil, url: String? = nil, username: String? = nil, password: String? = nil, defaultAutoCommit: String? = nil, defaultReadOnly: String? = nil, defaultTransactionIsolation: String? = nil, defaultCatalog: String? = nil, maxActive: Int? = nil, maxIdle: Int? = nil, minIdle: Int? = nil, initialSize: Int? = nil, maxWait: Int? = nil, maxAge: Int? = nil, testOnBorrow: Bool? = nil, testOnReturn: Bool? = nil, testWhileIdle: Bool? = nil, validationQuery: String? = nil, validationQueryTimeout: Int? = nil, timeBetweenEvictionRunsMillis: Int? = nil, minEvictableIdleTimeMillis: Int? = nil, connectionProperties: String? = nil, initSQL: String? = nil, jdbcInterceptors: String? = nil, validationInterval: Int? = nil, logValidationErrors: Bool? = nil, datasourceSvcProperties: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingDatasourceDataSourceFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDatasourceDataSourceFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, datasourceName: datasourceName, datasourceSvcPropName: datasourceSvcPropName, driverClassName: driverClassName, url: url, username: username, password: password, defaultAutoCommit: defaultAutoCommit, defaultReadOnly: defaultReadOnly, defaultTransactionIsolation: defaultTransactionIsolation, defaultCatalog: defaultCatalog, maxActive: maxActive, maxIdle: maxIdle, minIdle: minIdle, initialSize: initialSize, maxWait: maxWait, maxAge: maxAge, testOnBorrow: testOnBorrow, testOnReturn: testOnReturn, testWhileIdle: testWhileIdle, validationQuery: validationQuery, validationQueryTimeout: validationQueryTimeout, timeBetweenEvictionRunsMillis: timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis: minEvictableIdleTimeMillis, connectionProperties: connectionProperties, initSQL: initSQL, jdbcInterceptors: jdbcInterceptors, validationInterval: validationInterval, logValidationErrors: logValidationErrors, datasourceSvcProperties: datasourceSvcProperties).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.datasource.DataSourceFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcPropName: (query)  (optional)
     - parameter driverClassName: (query)  (optional)
     - parameter url: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter defaultAutoCommit: (query)  (optional)
     - parameter defaultReadOnly: (query)  (optional)
     - parameter defaultTransactionIsolation: (query)  (optional)
     - parameter defaultCatalog: (query)  (optional)
     - parameter maxActive: (query)  (optional)
     - parameter maxIdle: (query)  (optional)
     - parameter minIdle: (query)  (optional)
     - parameter initialSize: (query)  (optional)
     - parameter maxWait: (query)  (optional)
     - parameter maxAge: (query)  (optional)
     - parameter testOnBorrow: (query)  (optional)
     - parameter testOnReturn: (query)  (optional)
     - parameter testWhileIdle: (query)  (optional)
     - parameter validationQuery: (query)  (optional)
     - parameter validationQueryTimeout: (query)  (optional)
     - parameter timeBetweenEvictionRunsMillis: (query)  (optional)
     - parameter minEvictableIdleTimeMillis: (query)  (optional)
     - parameter connectionProperties: (query)  (optional)
     - parameter initSQL: (query)  (optional)
     - parameter jdbcInterceptors: (query)  (optional)
     - parameter validationInterval: (query)  (optional)
     - parameter logValidationErrors: (query)  (optional)
     - parameter datasourceSvcProperties: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDatasourceDataSourceFactoryInfo> 
     */
    open class func orgApacheSlingDatasourceDataSourceFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasourceName: String? = nil, datasourceSvcPropName: String? = nil, driverClassName: String? = nil, url: String? = nil, username: String? = nil, password: String? = nil, defaultAutoCommit: String? = nil, defaultReadOnly: String? = nil, defaultTransactionIsolation: String? = nil, defaultCatalog: String? = nil, maxActive: Int? = nil, maxIdle: Int? = nil, minIdle: Int? = nil, initialSize: Int? = nil, maxWait: Int? = nil, maxAge: Int? = nil, testOnBorrow: Bool? = nil, testOnReturn: Bool? = nil, testWhileIdle: Bool? = nil, validationQuery: String? = nil, validationQueryTimeout: Int? = nil, timeBetweenEvictionRunsMillis: Int? = nil, minEvictableIdleTimeMillis: Int? = nil, connectionProperties: String? = nil, initSQL: String? = nil, jdbcInterceptors: String? = nil, validationInterval: Int? = nil, logValidationErrors: Bool? = nil, datasourceSvcProperties: [String]? = nil) -> RequestBuilder<OrgApacheSlingDatasourceDataSourceFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "datasource.name": datasourceName, 
            "datasource.svc.prop.name": datasourceSvcPropName, 
            "driverClassName": driverClassName, 
            "url": url, 
            "username": username, 
            "password": password, 
            "defaultAutoCommit": defaultAutoCommit, 
            "defaultReadOnly": defaultReadOnly, 
            "defaultTransactionIsolation": defaultTransactionIsolation, 
            "defaultCatalog": defaultCatalog, 
            "maxActive": maxActive?.encodeToJSON(), 
            "maxIdle": maxIdle?.encodeToJSON(), 
            "minIdle": minIdle?.encodeToJSON(), 
            "initialSize": initialSize?.encodeToJSON(), 
            "maxWait": maxWait?.encodeToJSON(), 
            "maxAge": maxAge?.encodeToJSON(), 
            "testOnBorrow": testOnBorrow, 
            "testOnReturn": testOnReturn, 
            "testWhileIdle": testWhileIdle, 
            "validationQuery": validationQuery, 
            "validationQueryTimeout": validationQueryTimeout?.encodeToJSON(), 
            "timeBetweenEvictionRunsMillis": timeBetweenEvictionRunsMillis?.encodeToJSON(), 
            "minEvictableIdleTimeMillis": minEvictableIdleTimeMillis?.encodeToJSON(), 
            "connectionProperties": connectionProperties, 
            "initSQL": initSQL, 
            "jdbcInterceptors": jdbcInterceptors, 
            "validationInterval": validationInterval?.encodeToJSON(), 
            "logValidationErrors": logValidationErrors, 
            "datasource.svc.properties": datasourceSvcProperties
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDatasourceDataSourceFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcPropName: (query)  (optional)
     - parameter datasourceJndiName: (query)  (optional)
     - parameter jndiProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDatasourceJNDIDataSourceFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasourceName: String? = nil, datasourceSvcPropName: String? = nil, datasourceJndiName: String? = nil, jndiProperties: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDatasourceJNDIDataSourceFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, datasourceName: datasourceName, datasourceSvcPropName: datasourceSvcPropName, datasourceJndiName: datasourceJndiName, jndiProperties: jndiProperties).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcPropName: (query)  (optional)
     - parameter datasourceJndiName: (query)  (optional)
     - parameter jndiProperties: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo> 
     */
    open class func orgApacheSlingDatasourceJNDIDataSourceFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasourceName: String? = nil, datasourceSvcPropName: String? = nil, datasourceJndiName: String? = nil, jndiProperties: [String]? = nil) -> RequestBuilder<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "datasource.name": datasourceName, 
            "datasource.svc.prop.name": datasourceSvcPropName, 
            "datasource.jndi.name": datasourceJndiName, 
            "jndi.properties": jndiProperties
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectorPingTimeout: (query)  (optional)
     - parameter connectorPingInterval: (query)  (optional)
     - parameter discoveryLiteCheckInterval: (query)  (optional)
     - parameter clusterSyncServiceTimeout: (query)  (optional)
     - parameter clusterSyncServiceInterval: (query)  (optional)
     - parameter enableSyncToken: (query)  (optional)
     - parameter minEventDelay: (query)  (optional)
     - parameter socketConnectTimeout: (query)  (optional)
     - parameter soTimeout: (query)  (optional)
     - parameter topologyConnectorUrls: (query)  (optional)
     - parameter topologyConnectorWhitelist: (query)  (optional)
     - parameter autoStopLocalLoopEnabled: (query)  (optional)
     - parameter gzipConnectorRequestsEnabled: (query)  (optional)
     - parameter hmacEnabled: (query)  (optional)
     - parameter enableEncryption: (query)  (optional)
     - parameter sharedKey: (query)  (optional)
     - parameter hmacSharedKeyTTL: (query)  (optional)
     - parameter backoffStandbyFactor: (query)  (optional)
     - parameter backoffStableFactor: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDiscoveryOakConfig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectorPingTimeout: Int? = nil, connectorPingInterval: Int? = nil, discoveryLiteCheckInterval: Int? = nil, clusterSyncServiceTimeout: Int? = nil, clusterSyncServiceInterval: Int? = nil, enableSyncToken: Bool? = nil, minEventDelay: Int? = nil, socketConnectTimeout: Int? = nil, soTimeout: Int? = nil, topologyConnectorUrls: [String]? = nil, topologyConnectorWhitelist: [String]? = nil, autoStopLocalLoopEnabled: Bool? = nil, gzipConnectorRequestsEnabled: Bool? = nil, hmacEnabled: Bool? = nil, enableEncryption: Bool? = nil, sharedKey: String? = nil, hmacSharedKeyTTL: Int? = nil, backoffStandbyFactor: String? = nil, backoffStableFactor: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDiscoveryOakConfigInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDiscoveryOakConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, connectorPingTimeout: connectorPingTimeout, connectorPingInterval: connectorPingInterval, discoveryLiteCheckInterval: discoveryLiteCheckInterval, clusterSyncServiceTimeout: clusterSyncServiceTimeout, clusterSyncServiceInterval: clusterSyncServiceInterval, enableSyncToken: enableSyncToken, minEventDelay: minEventDelay, socketConnectTimeout: socketConnectTimeout, soTimeout: soTimeout, topologyConnectorUrls: topologyConnectorUrls, topologyConnectorWhitelist: topologyConnectorWhitelist, autoStopLocalLoopEnabled: autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled: gzipConnectorRequestsEnabled, hmacEnabled: hmacEnabled, enableEncryption: enableEncryption, sharedKey: sharedKey, hmacSharedKeyTTL: hmacSharedKeyTTL, backoffStandbyFactor: backoffStandbyFactor, backoffStableFactor: backoffStableFactor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.discovery.oak.Config
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectorPingTimeout: (query)  (optional)
     - parameter connectorPingInterval: (query)  (optional)
     - parameter discoveryLiteCheckInterval: (query)  (optional)
     - parameter clusterSyncServiceTimeout: (query)  (optional)
     - parameter clusterSyncServiceInterval: (query)  (optional)
     - parameter enableSyncToken: (query)  (optional)
     - parameter minEventDelay: (query)  (optional)
     - parameter socketConnectTimeout: (query)  (optional)
     - parameter soTimeout: (query)  (optional)
     - parameter topologyConnectorUrls: (query)  (optional)
     - parameter topologyConnectorWhitelist: (query)  (optional)
     - parameter autoStopLocalLoopEnabled: (query)  (optional)
     - parameter gzipConnectorRequestsEnabled: (query)  (optional)
     - parameter hmacEnabled: (query)  (optional)
     - parameter enableEncryption: (query)  (optional)
     - parameter sharedKey: (query)  (optional)
     - parameter hmacSharedKeyTTL: (query)  (optional)
     - parameter backoffStandbyFactor: (query)  (optional)
     - parameter backoffStableFactor: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDiscoveryOakConfigInfo> 
     */
    open class func orgApacheSlingDiscoveryOakConfigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectorPingTimeout: Int? = nil, connectorPingInterval: Int? = nil, discoveryLiteCheckInterval: Int? = nil, clusterSyncServiceTimeout: Int? = nil, clusterSyncServiceInterval: Int? = nil, enableSyncToken: Bool? = nil, minEventDelay: Int? = nil, socketConnectTimeout: Int? = nil, soTimeout: Int? = nil, topologyConnectorUrls: [String]? = nil, topologyConnectorWhitelist: [String]? = nil, autoStopLocalLoopEnabled: Bool? = nil, gzipConnectorRequestsEnabled: Bool? = nil, hmacEnabled: Bool? = nil, enableEncryption: Bool? = nil, sharedKey: String? = nil, hmacSharedKeyTTL: Int? = nil, backoffStandbyFactor: String? = nil, backoffStableFactor: String? = nil) -> RequestBuilder<OrgApacheSlingDiscoveryOakConfigInfo> {
        let path = "/system/console/configMgr/org.apache.sling.discovery.oak.Config"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "connectorPingTimeout": connectorPingTimeout?.encodeToJSON(), 
            "connectorPingInterval": connectorPingInterval?.encodeToJSON(), 
            "discoveryLiteCheckInterval": discoveryLiteCheckInterval?.encodeToJSON(), 
            "clusterSyncServiceTimeout": clusterSyncServiceTimeout?.encodeToJSON(), 
            "clusterSyncServiceInterval": clusterSyncServiceInterval?.encodeToJSON(), 
            "enableSyncToken": enableSyncToken, 
            "minEventDelay": minEventDelay?.encodeToJSON(), 
            "socketConnectTimeout": socketConnectTimeout?.encodeToJSON(), 
            "soTimeout": soTimeout?.encodeToJSON(), 
            "topologyConnectorUrls": topologyConnectorUrls, 
            "topologyConnectorWhitelist": topologyConnectorWhitelist, 
            "autoStopLocalLoopEnabled": autoStopLocalLoopEnabled, 
            "gzipConnectorRequestsEnabled": gzipConnectorRequestsEnabled, 
            "hmacEnabled": hmacEnabled, 
            "enableEncryption": enableEncryption, 
            "sharedKey": sharedKey, 
            "hmacSharedKeyTTL": hmacSharedKeyTTL?.encodeToJSON(), 
            "backoffStandbyFactor": backoffStandbyFactor, 
            "backoffStableFactor": backoffStableFactor
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDiscoveryOakConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo> 
     */
    open class func orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil) -> RequestBuilder<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.name": hcName, 
            "hc.tags": hcTags, 
            "hc.mbean.name": hcMbeanName
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter allowedRoots: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageImporterEndpoints: (query)  (optional)
     - parameter passiveQueues: (query)  (optional)
     - parameter priorityQueues: (query)  (optional)
     - parameter retryStrategy: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter queueProvider: (query)  (optional)
     - parameter asyncDelivery: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, allowedRoots: [String]? = nil, queueProcessingEnabled: Bool? = nil, packageImporterEndpoints: [String]? = nil, passiveQueues: [String]? = nil, priorityQueues: [String]? = nil, retryStrategy: String? = nil, retryAttempts: Int? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, queueProvider: String? = nil, asyncDelivery: Bool? = nil, httpConnTimeout: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, title: title, details: details, enabled: enabled, serviceName: serviceName, logLevel: logLevel, allowedRoots: allowedRoots, queueProcessingEnabled: queueProcessingEnabled, packageImporterEndpoints: packageImporterEndpoints, passiveQueues: passiveQueues, priorityQueues: priorityQueues, retryStrategy: retryStrategy, retryAttempts: retryAttempts, requestAuthorizationStrategyTarget: requestAuthorizationStrategyTarget, transportSecretProviderTarget: transportSecretProviderTarget, packageBuilderTarget: packageBuilderTarget, triggersTarget: triggersTarget, queueProvider: queueProvider, asyncDelivery: asyncDelivery, httpConnTimeout: httpConnTimeout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter allowedRoots: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageImporterEndpoints: (query)  (optional)
     - parameter passiveQueues: (query)  (optional)
     - parameter priorityQueues: (query)  (optional)
     - parameter retryStrategy: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter queueProvider: (query)  (optional)
     - parameter asyncDelivery: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo> 
     */
    open class func orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, allowedRoots: [String]? = nil, queueProcessingEnabled: Bool? = nil, packageImporterEndpoints: [String]? = nil, passiveQueues: [String]? = nil, priorityQueues: [String]? = nil, retryStrategy: String? = nil, retryAttempts: Int? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, queueProvider: String? = nil, asyncDelivery: Bool? = nil, httpConnTimeout: Int? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "title": title, 
            "details": details, 
            "enabled": enabled, 
            "serviceName": serviceName, 
            "log.level": logLevel, 
            "allowed.roots": allowedRoots, 
            "queue.processing.enabled": queueProcessingEnabled, 
            "packageImporter.endpoints": packageImporterEndpoints, 
            "passiveQueues": passiveQueues, 
            "priorityQueues": priorityQueues, 
            "retry.strategy": retryStrategy, 
            "retry.attempts": retryAttempts?.encodeToJSON(), 
            "requestAuthorizationStrategy.target": requestAuthorizationStrategyTarget, 
            "transportSecretProvider.target": transportSecretProviderTarget, 
            "packageBuilder.target": packageBuilderTarget, 
            "triggers.target": triggersTarget, 
            "queue.provider": queueProvider, 
            "async.delivery": asyncDelivery, 
            "http.conn.timeout": httpConnTimeout?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter jcrPrivilege: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, jcrPrivilege: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, jcrPrivilege: jcrPrivilege).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter jcrPrivilege: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo> 
     */
    open class func orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, jcrPrivilege: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "jcrPrivilege": jcrPrivilege
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter allowedRoots: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter queueProviderFactoryTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter priorityQueues: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, allowedRoots: [String]? = nil, requestAuthorizationStrategyTarget: String? = nil, queueProviderFactoryTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, priorityQueues: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, title: title, details: details, enabled: enabled, serviceName: serviceName, logLevel: logLevel, allowedRoots: allowedRoots, requestAuthorizationStrategyTarget: requestAuthorizationStrategyTarget, queueProviderFactoryTarget: queueProviderFactoryTarget, packageBuilderTarget: packageBuilderTarget, triggersTarget: triggersTarget, priorityQueues: priorityQueues).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter allowedRoots: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter queueProviderFactoryTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter priorityQueues: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo> 
     */
    open class func orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, allowedRoots: [String]? = nil, requestAuthorizationStrategyTarget: String? = nil, queueProviderFactoryTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, priorityQueues: [String]? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "title": title, 
            "details": details, 
            "enabled": enabled, 
            "serviceName": serviceName, 
            "log.level": logLevel, 
            "allowed.roots": allowedRoots, 
            "requestAuthorizationStrategy.target": requestAuthorizationStrategyTarget, 
            "queueProviderFactory.target": queueProviderFactoryTarget, 
            "packageBuilder.target": packageBuilderTarget, 
            "triggers.target": triggersTarget, 
            "priorityQueues": priorityQueues
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageExporterEndpoints: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, packageExporterEndpoints: [String]? = nil, pullItems: Int? = nil, httpConnTimeout: Int? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, title: title, details: details, enabled: enabled, serviceName: serviceName, logLevel: logLevel, queueProcessingEnabled: queueProcessingEnabled, packageExporterEndpoints: packageExporterEndpoints, pullItems: pullItems, httpConnTimeout: httpConnTimeout, requestAuthorizationStrategyTarget: requestAuthorizationStrategyTarget, transportSecretProviderTarget: transportSecretProviderTarget, packageBuilderTarget: packageBuilderTarget, triggersTarget: triggersTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageExporterEndpoints: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo> 
     */
    open class func orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, packageExporterEndpoints: [String]? = nil, pullItems: Int? = nil, httpConnTimeout: Int? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "title": title, 
            "details": details, 
            "enabled": enabled, 
            "serviceName": serviceName, 
            "log.level": logLevel, 
            "queue.processing.enabled": queueProcessingEnabled, 
            "packageExporter.endpoints": packageExporterEndpoints, 
            "pull.items": pullItems?.encodeToJSON(), 
            "http.conn.timeout": httpConnTimeout?.encodeToJSON(), 
            "requestAuthorizationStrategy.target": requestAuthorizationStrategyTarget, 
            "transportSecretProvider.target": transportSecretProviderTarget, 
            "packageBuilder.target": packageBuilderTarget, 
            "triggers.target": triggersTarget
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageExporterTarget: (query)  (optional)
     - parameter packageImporterTarget: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, packageExporterTarget: String? = nil, packageImporterTarget: String? = nil, requestAuthorizationStrategyTarget: String? = nil, triggersTarget: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, title: title, details: details, enabled: enabled, serviceName: serviceName, logLevel: logLevel, queueProcessingEnabled: queueProcessingEnabled, packageExporterTarget: packageExporterTarget, packageImporterTarget: packageImporterTarget, requestAuthorizationStrategyTarget: requestAuthorizationStrategyTarget, triggersTarget: triggersTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageExporterTarget: (query)  (optional)
     - parameter packageImporterTarget: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo> 
     */
    open class func orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, packageExporterTarget: String? = nil, packageImporterTarget: String? = nil, requestAuthorizationStrategyTarget: String? = nil, triggersTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "title": title, 
            "details": details, 
            "enabled": enabled, 
            "serviceName": serviceName, 
            "log.level": logLevel, 
            "queue.processing.enabled": queueProcessingEnabled, 
            "packageExporter.target": packageExporterTarget, 
            "packageImporter.target": packageImporterTarget, 
            "requestAuthorizationStrategy.target": requestAuthorizationStrategyTarget, 
            "triggers.target": triggersTarget
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter passiveQueues: (query)  (optional)
     - parameter packageExporterEndpoints: (query)  (optional)
     - parameter packageImporterEndpoints: (query)  (optional)
     - parameter retryStrategy: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, passiveQueues: [String]? = nil, packageExporterEndpoints: [String]? = nil, packageImporterEndpoints: [String]? = nil, retryStrategy: String? = nil, retryAttempts: Int? = nil, pullItems: Int? = nil, httpConnTimeout: Int? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, title: title, details: details, enabled: enabled, serviceName: serviceName, logLevel: logLevel, queueProcessingEnabled: queueProcessingEnabled, passiveQueues: passiveQueues, packageExporterEndpoints: packageExporterEndpoints, packageImporterEndpoints: packageImporterEndpoints, retryStrategy: retryStrategy, retryAttempts: retryAttempts, pullItems: pullItems, httpConnTimeout: httpConnTimeout, requestAuthorizationStrategyTarget: requestAuthorizationStrategyTarget, transportSecretProviderTarget: transportSecretProviderTarget, packageBuilderTarget: packageBuilderTarget, triggersTarget: triggersTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter passiveQueues: (query)  (optional)
     - parameter packageExporterEndpoints: (query)  (optional)
     - parameter packageImporterEndpoints: (query)  (optional)
     - parameter retryStrategy: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo> 
     */
    open class func orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, passiveQueues: [String]? = nil, packageExporterEndpoints: [String]? = nil, packageImporterEndpoints: [String]? = nil, retryStrategy: String? = nil, retryAttempts: Int? = nil, pullItems: Int? = nil, httpConnTimeout: Int? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "title": title, 
            "details": details, 
            "enabled": enabled, 
            "serviceName": serviceName, 
            "log.level": logLevel, 
            "queue.processing.enabled": queueProcessingEnabled, 
            "passiveQueues": passiveQueues, 
            "packageExporter.endpoints": packageExporterEndpoints, 
            "packageImporter.endpoints": packageImporterEndpoints, 
            "retry.strategy": retryStrategy, 
            "retry.attempts": retryAttempts?.encodeToJSON(), 
            "pull.items": pullItems?.encodeToJSON(), 
            "http.conn.timeout": httpConnTimeout?.encodeToJSON(), 
            "requestAuthorizationStrategy.target": requestAuthorizationStrategyTarget, 
            "transportSecretProvider.target": transportSecretProviderTarget, 
            "packageBuilder.target": packageBuilderTarget, 
            "triggers.target": triggersTarget
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter numberOfRetriesAllowed: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, numberOfRetriesAllowed: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionMonitorDistributionQueueHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName, numberOfRetriesAllowed: numberOfRetriesAllowed).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter numberOfRetriesAllowed: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo> 
     */
    open class func orgApacheSlingDistributionMonitorDistributionQueueHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, numberOfRetriesAllowed: Int? = nil) -> RequestBuilder<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.name": hcName, 
            "hc.tags": hcTags, 
            "hc.mbean.name": hcMbeanName, 
            "numberOfRetriesAllowed": numberOfRetriesAllowed?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter queue: (query)  (optional)
     - parameter dropInvalidItems: (query)  (optional)
     - parameter agentTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionPackagingImplExporterAgentDistributio(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, queue: String? = nil, dropInvalidItems: Bool? = nil, agentTarget: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionPackagingImplExporterAgentDistributioWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, queue: queue, dropInvalidItems: dropInvalidItems, agentTarget: agentTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter queue: (query)  (optional)
     - parameter dropInvalidItems: (query)  (optional)
     - parameter agentTarget: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo> 
     */
    open class func orgApacheSlingDistributionPackagingImplExporterAgentDistributioWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, queue: String? = nil, dropInvalidItems: Bool? = nil, agentTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "queue": queue, 
            "drop.invalid.items": dropInvalidItems, 
            "agent.target": agentTarget
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionPackagingImplExporterLocalDistributio(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, packageBuilderTarget: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionPackagingImplExporterLocalDistributioWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, packageBuilderTarget: packageBuilderTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo> 
     */
    open class func orgApacheSlingDistributionPackagingImplExporterLocalDistributioWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, packageBuilderTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "packageBuilder.target": packageBuilderTarget
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoints: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoints: [String]? = nil, pullItems: Int? = nil, packageBuilderTarget: String? = nil, transportSecretProviderTarget: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionPackagingImplExporterRemoteDistributiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, endpoints: endpoints, pullItems: pullItems, packageBuilderTarget: packageBuilderTarget, transportSecretProviderTarget: transportSecretProviderTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoints: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo> 
     */
    open class func orgApacheSlingDistributionPackagingImplExporterRemoteDistributiWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoints: [String]? = nil, pullItems: Int? = nil, packageBuilderTarget: String? = nil, transportSecretProviderTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "endpoints": endpoints, 
            "pull.items": pullItems?.encodeToJSON(), 
            "packageBuilder.target": packageBuilderTarget, 
            "transportSecretProvider.target": transportSecretProviderTarget
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionPackagingImplImporterLocalDistributio(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, packageBuilderTarget: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionPackagingImplImporterLocalDistributioWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, packageBuilderTarget: packageBuilderTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo> 
     */
    open class func orgApacheSlingDistributionPackagingImplImporterLocalDistributioWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, packageBuilderTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "packageBuilder.target": packageBuilderTarget
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoints: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoints: [String]? = nil, transportSecretProviderTarget: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionPackagingImplImporterRemoteDistributiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, endpoints: endpoints, transportSecretProviderTarget: transportSecretProviderTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoints: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo> 
     */
    open class func orgApacheSlingDistributionPackagingImplImporterRemoteDistributiWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoints: [String]? = nil, transportSecretProviderTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "endpoints": endpoints, 
            "transportSecretProvider.target": transportSecretProviderTarget
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter privilegeName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, serviceName: String? = nil, path: String? = nil, privilegeName: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionPackagingImplImporterRepositoryDistriWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, serviceName: serviceName, path: path, privilegeName: privilegeName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter privilegeName: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo> 
     */
    open class func orgApacheSlingDistributionPackagingImplImporterRepositoryDistriWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, serviceName: String? = nil, path: String? = nil, privilegeName: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "service.name": serviceName, 
            "path": path, 
            "privilege.name": privilegeName
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter kind: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionResourcesImplDistributionConfiguration(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, kind: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionResourcesImplDistributionConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerRoots: providerRoots, kind: kind).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter kind: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo> 
     */
    open class func orgApacheSlingDistributionResourcesImplDistributionConfigurationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, kind: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "provider.roots": providerRoots, 
            "kind": kind
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter kind: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionResourcesImplDistributionServiceResour(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, kind: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionResourcesImplDistributionServiceResourWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerRoots: providerRoots, kind: kind).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter kind: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo> 
     */
    open class func orgApacheSlingDistributionResourcesImplDistributionServiceResourWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, kind: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "provider.roots": providerRoots, 
            "kind": kind
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter formatTarget: (query)  (optional)
     - parameter tempFsFolder: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter memoryUnit: (query)  (optional)
     - parameter useOffHeapMemory: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter monitoringQueueSize: (query)  (optional)
     - parameter cleanupDelay: (query)  (optional)
     - parameter packageFilters: (query)  (optional)
     - parameter propertyFilters: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionSerializationImplDistributionPackageBu(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, type: String? = nil, formatTarget: String? = nil, tempFsFolder: String? = nil, fileThreshold: Int? = nil, memoryUnit: String? = nil, useOffHeapMemory: Bool? = nil, digestAlgorithm: String? = nil, monitoringQueueSize: Int? = nil, cleanupDelay: Int? = nil, packageFilters: [String]? = nil, propertyFilters: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionSerializationImplDistributionPackageBuWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, type: type, formatTarget: formatTarget, tempFsFolder: tempFsFolder, fileThreshold: fileThreshold, memoryUnit: memoryUnit, useOffHeapMemory: useOffHeapMemory, digestAlgorithm: digestAlgorithm, monitoringQueueSize: monitoringQueueSize, cleanupDelay: cleanupDelay, packageFilters: packageFilters, propertyFilters: propertyFilters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter formatTarget: (query)  (optional)
     - parameter tempFsFolder: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter memoryUnit: (query)  (optional)
     - parameter useOffHeapMemory: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter monitoringQueueSize: (query)  (optional)
     - parameter cleanupDelay: (query)  (optional)
     - parameter packageFilters: (query)  (optional)
     - parameter propertyFilters: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo> 
     */
    open class func orgApacheSlingDistributionSerializationImplDistributionPackageBuWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, type: String? = nil, formatTarget: String? = nil, tempFsFolder: String? = nil, fileThreshold: Int? = nil, memoryUnit: String? = nil, useOffHeapMemory: Bool? = nil, digestAlgorithm: String? = nil, monitoringQueueSize: Int? = nil, cleanupDelay: Int? = nil, packageFilters: [String]? = nil, propertyFilters: [String]? = nil) -> RequestBuilder<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "type": type, 
            "format.target": formatTarget, 
            "tempFsFolder": tempFsFolder, 
            "fileThreshold": fileThreshold?.encodeToJSON(), 
            "memoryUnit": memoryUnit, 
            "useOffHeapMemory": useOffHeapMemory, 
            "digestAlgorithm": digestAlgorithm, 
            "monitoringQueueSize": monitoringQueueSize?.encodeToJSON(), 
            "cleanupDelay": cleanupDelay?.encodeToJSON(), 
            "package.filters": packageFilters, 
            "property.filters": propertyFilters
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter importMode: (query)  (optional)
     - parameter aclHandling: (query)  (optional)
     - parameter packageRoots: (query)  (optional)
     - parameter packageFilters: (query)  (optional)
     - parameter propertyFilters: (query)  (optional)
     - parameter tempFsFolder: (query)  (optional)
     - parameter useBinaryReferences: (query)  (optional)
     - parameter autoSaveThreshold: (query)  (optional)
     - parameter cleanupDelay: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter MEGA_BYTES: (query)  (optional)
     - parameter useOffHeapMemory: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter monitoringQueueSize: (query)  (optional)
     - parameter pathsMapping: (query)  (optional)
     - parameter strictImport: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionSerializationImplVltVaultDistribution(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, type: String? = nil, importMode: String? = nil, aclHandling: String? = nil, packageRoots: String? = nil, packageFilters: [String]? = nil, propertyFilters: [String]? = nil, tempFsFolder: String? = nil, useBinaryReferences: Bool? = nil, autoSaveThreshold: Int? = nil, cleanupDelay: Int? = nil, fileThreshold: Int? = nil, MEGA_BYTES: String? = nil, useOffHeapMemory: Bool? = nil, digestAlgorithm: String? = nil, monitoringQueueSize: Int? = nil, pathsMapping: [String]? = nil, strictImport: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionSerializationImplVltVaultDistributionWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, type: type, importMode: importMode, aclHandling: aclHandling, packageRoots: packageRoots, packageFilters: packageFilters, propertyFilters: propertyFilters, tempFsFolder: tempFsFolder, useBinaryReferences: useBinaryReferences, autoSaveThreshold: autoSaveThreshold, cleanupDelay: cleanupDelay, fileThreshold: fileThreshold, MEGA_BYTES: MEGA_BYTES, useOffHeapMemory: useOffHeapMemory, digestAlgorithm: digestAlgorithm, monitoringQueueSize: monitoringQueueSize, pathsMapping: pathsMapping, strictImport: strictImport).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter importMode: (query)  (optional)
     - parameter aclHandling: (query)  (optional)
     - parameter packageRoots: (query)  (optional)
     - parameter packageFilters: (query)  (optional)
     - parameter propertyFilters: (query)  (optional)
     - parameter tempFsFolder: (query)  (optional)
     - parameter useBinaryReferences: (query)  (optional)
     - parameter autoSaveThreshold: (query)  (optional)
     - parameter cleanupDelay: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter MEGA_BYTES: (query)  (optional)
     - parameter useOffHeapMemory: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter monitoringQueueSize: (query)  (optional)
     - parameter pathsMapping: (query)  (optional)
     - parameter strictImport: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo> 
     */
    open class func orgApacheSlingDistributionSerializationImplVltVaultDistributionWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, type: String? = nil, importMode: String? = nil, aclHandling: String? = nil, packageRoots: String? = nil, packageFilters: [String]? = nil, propertyFilters: [String]? = nil, tempFsFolder: String? = nil, useBinaryReferences: Bool? = nil, autoSaveThreshold: Int? = nil, cleanupDelay: Int? = nil, fileThreshold: Int? = nil, MEGA_BYTES: String? = nil, useOffHeapMemory: Bool? = nil, digestAlgorithm: String? = nil, monitoringQueueSize: Int? = nil, pathsMapping: [String]? = nil, strictImport: Bool? = nil) -> RequestBuilder<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "type": type, 
            "importMode": importMode, 
            "aclHandling": aclHandling, 
            "package.roots": packageRoots, 
            "package.filters": packageFilters, 
            "property.filters": propertyFilters, 
            "tempFsFolder": tempFsFolder, 
            "useBinaryReferences": useBinaryReferences, 
            "autoSaveThreshold": autoSaveThreshold?.encodeToJSON(), 
            "cleanupDelay": cleanupDelay?.encodeToJSON(), 
            "fileThreshold": fileThreshold?.encodeToJSON(), 
            "MEGA_BYTES": MEGA_BYTES, 
            "useOffHeapMemory": useOffHeapMemory, 
            "digestAlgorithm": digestAlgorithm, 
            "monitoringQueueSize": monitoringQueueSize?.encodeToJSON(), 
            "pathsMapping": pathsMapping, 
            "strictImport": strictImport
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionTransportImplUserCredentialsDistributi(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, username: String? = nil, password: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionTransportImplUserCredentialsDistributiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, username: username, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo> 
     */
    open class func orgApacheSlingDistributionTransportImplUserCredentialsDistributiWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, username: String? = nil, password: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "username": username, 
            "password": password
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionTriggerImplDistributionEventDistribute(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionTriggerImplDistributionEventDistributeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, path: path).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo> 
     */
    open class func orgApacheSlingDistributionTriggerImplDistributionEventDistributeWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "path": path
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter ignoredPathsPatterns: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter deep: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, ignoredPathsPatterns: [String]? = nil, serviceName: String? = nil, deep: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, path: path, ignoredPathsPatterns: ignoredPathsPatterns, serviceName: serviceName, deep: deep).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter ignoredPathsPatterns: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter deep: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo> 
     */
    open class func orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, ignoredPathsPatterns: [String]? = nil, serviceName: String? = nil, deep: Bool? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "path": path, 
            "ignoredPathsPatterns": ignoredPathsPatterns, 
            "serviceName": serviceName, 
            "deep": deep
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter nuggetsPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, serviceName: String? = nil, nuggetsPath: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, path: path, serviceName: serviceName, nuggetsPath: nuggetsPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter nuggetsPath: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo> 
     */
    open class func orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, serviceName: String? = nil, nuggetsPath: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "path": path, 
            "serviceName": serviceName, 
            "nuggetsPath": nuggetsPath
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoint: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoint: String? = nil, transportSecretProviderTarget: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, endpoint: endpoint, transportSecretProviderTarget: transportSecretProviderTarget).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoint: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo> 
     */
    open class func orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoint: String? = nil, transportSecretProviderTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "endpoint": endpoint, 
            "transportSecretProvider.target": transportSecretProviderTarget
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionTriggerImplResourceEventDistributionTrWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, path: path).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo> 
     */
    open class func orgApacheSlingDistributionTriggerImplResourceEventDistributionTrWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "path": path
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter seconds: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, seconds: String? = nil, serviceName: String? = nil, completion: @escaping ((_ data: OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, path: path, seconds: seconds, serviceName: serviceName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter seconds: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo> 
     */
    open class func orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, seconds: String? = nil, serviceName: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "path": path, 
            "seconds": seconds, 
            "serviceName": serviceName
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter osgiHttpWhiteboardListener: (query)  (optional)
     - parameter authSudoCookie: (query)  (optional)
     - parameter authSudoParameter: (query)  (optional)
     - parameter authAnnonymous: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)
     - parameter slingAuthAnonymousUser: (query)  (optional)
     - parameter slingAuthAnonymousPassword: (query)  (optional)
     - parameter authHttp: (query)  (optional)
     - parameter authHttpRealm: (query)  (optional)
     - parameter authUriSuffix: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingEngineImplAuthSlingAuthenticator(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardContextSelect: String? = nil, osgiHttpWhiteboardListener: String? = nil, authSudoCookie: String? = nil, authSudoParameter: String? = nil, authAnnonymous: Bool? = nil, slingAuthRequirements: [String]? = nil, slingAuthAnonymousUser: String? = nil, slingAuthAnonymousPassword: String? = nil, authHttp: String? = nil, authHttpRealm: String? = nil, authUriSuffix: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingEngineImplAuthSlingAuthenticatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, osgiHttpWhiteboardContextSelect: osgiHttpWhiteboardContextSelect, osgiHttpWhiteboardListener: osgiHttpWhiteboardListener, authSudoCookie: authSudoCookie, authSudoParameter: authSudoParameter, authAnnonymous: authAnnonymous, slingAuthRequirements: slingAuthRequirements, slingAuthAnonymousUser: slingAuthAnonymousUser, slingAuthAnonymousPassword: slingAuthAnonymousPassword, authHttp: authHttp, authHttpRealm: authHttpRealm, authUriSuffix: authUriSuffix).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter osgiHttpWhiteboardListener: (query)  (optional)
     - parameter authSudoCookie: (query)  (optional)
     - parameter authSudoParameter: (query)  (optional)
     - parameter authAnnonymous: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)
     - parameter slingAuthAnonymousUser: (query)  (optional)
     - parameter slingAuthAnonymousPassword: (query)  (optional)
     - parameter authHttp: (query)  (optional)
     - parameter authHttpRealm: (query)  (optional)
     - parameter authUriSuffix: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo> 
     */
    open class func orgApacheSlingEngineImplAuthSlingAuthenticatorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardContextSelect: String? = nil, osgiHttpWhiteboardListener: String? = nil, authSudoCookie: String? = nil, authSudoParameter: String? = nil, authAnnonymous: Bool? = nil, slingAuthRequirements: [String]? = nil, slingAuthAnonymousUser: String? = nil, slingAuthAnonymousPassword: String? = nil, authHttp: String? = nil, authHttpRealm: String? = nil, authUriSuffix: [String]? = nil) -> RequestBuilder<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "osgi.http.whiteboard.context.select": osgiHttpWhiteboardContextSelect, 
            "osgi.http.whiteboard.listener": osgiHttpWhiteboardListener, 
            "auth.sudo.cookie": authSudoCookie, 
            "auth.sudo.parameter": authSudoParameter, 
            "auth.annonymous": authAnnonymous, 
            "sling.auth.requirements": slingAuthRequirements, 
            "sling.auth.anonymous.user": slingAuthAnonymousUser, 
            "sling.auth.anonymous.password": slingAuthAnonymousPassword, 
            "auth.http": authHttp, 
            "auth.http.realm": authHttpRealm, 
            "auth.uri.suffix": authUriSuffix
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extensions: (query)  (optional)
     - parameter minDurationMs: (query)  (optional)
     - parameter maxDurationMs: (query)  (optional)
     - parameter compactLogFormat: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extensions: [String]? = nil, minDurationMs: Int? = nil, maxDurationMs: Int? = nil, compactLogFormat: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, extensions: extensions, minDurationMs: minDurationMs, maxDurationMs: maxDurationMs, compactLogFormat: compactLogFormat).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extensions: (query)  (optional)
     - parameter minDurationMs: (query)  (optional)
     - parameter maxDurationMs: (query)  (optional)
     - parameter compactLogFormat: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo> 
     */
    open class func orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extensions: [String]? = nil, minDurationMs: Int? = nil, maxDurationMs: Int? = nil, compactLogFormat: Bool? = nil) -> RequestBuilder<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "extensions": extensions, 
            "minDurationMs": minDurationMs?.encodeToJSON(), 
            "maxDurationMs": maxDurationMs?.encodeToJSON(), 
            "compactLogFormat": compactLogFormat
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogOutput: (query)  (optional)
     - parameter requestLogOutputtype: (query)  (optional)
     - parameter requestLogEnabled: (query)  (optional)
     - parameter accessLogOutput: (query)  (optional)
     - parameter accessLogOutputtype: (query)  (optional)
     - parameter accessLogEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingEngineImplLogRequestLogger(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogOutput: String? = nil, requestLogOutputtype: Int? = nil, requestLogEnabled: Bool? = nil, accessLogOutput: String? = nil, accessLogOutputtype: Int? = nil, accessLogEnabled: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingEngineImplLogRequestLoggerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingEngineImplLogRequestLoggerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, requestLogOutput: requestLogOutput, requestLogOutputtype: requestLogOutputtype, requestLogEnabled: requestLogEnabled, accessLogOutput: accessLogOutput, accessLogOutputtype: accessLogOutputtype, accessLogEnabled: accessLogEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogOutput: (query)  (optional)
     - parameter requestLogOutputtype: (query)  (optional)
     - parameter requestLogEnabled: (query)  (optional)
     - parameter accessLogOutput: (query)  (optional)
     - parameter accessLogOutputtype: (query)  (optional)
     - parameter accessLogEnabled: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerInfo> 
     */
    open class func orgApacheSlingEngineImplLogRequestLoggerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogOutput: String? = nil, requestLogOutputtype: Int? = nil, requestLogEnabled: Bool? = nil, accessLogOutput: String? = nil, accessLogOutputtype: Int? = nil, accessLogEnabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "request.log.output": requestLogOutput, 
            "request.log.outputtype": requestLogOutputtype?.encodeToJSON(), 
            "request.log.enabled": requestLogEnabled, 
            "access.log.output": accessLogOutput, 
            "access.log.outputtype": accessLogOutputtype?.encodeToJSON(), 
            "access.log.enabled": accessLogEnabled
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogServiceFormat: (query)  (optional)
     - parameter requestLogServiceOutput: (query)  (optional)
     - parameter requestLogServiceOutputtype: (query)  (optional)
     - parameter requestLogServiceOnentry: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingEngineImplLogRequestLoggerService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogServiceFormat: String? = nil, requestLogServiceOutput: String? = nil, requestLogServiceOutputtype: Int? = nil, requestLogServiceOnentry: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingEngineImplLogRequestLoggerServiceInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingEngineImplLogRequestLoggerServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, requestLogServiceFormat: requestLogServiceFormat, requestLogServiceOutput: requestLogServiceOutput, requestLogServiceOutputtype: requestLogServiceOutputtype, requestLogServiceOnentry: requestLogServiceOnentry).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogServiceFormat: (query)  (optional)
     - parameter requestLogServiceOutput: (query)  (optional)
     - parameter requestLogServiceOutputtype: (query)  (optional)
     - parameter requestLogServiceOnentry: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo> 
     */
    open class func orgApacheSlingEngineImplLogRequestLoggerServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogServiceFormat: String? = nil, requestLogServiceOutput: String? = nil, requestLogServiceOutputtype: Int? = nil, requestLogServiceOnentry: Bool? = nil) -> RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "request.log.service.format": requestLogServiceFormat, 
            "request.log.service.output": requestLogServiceOutput, 
            "request.log.service.outputtype": requestLogServiceOutputtype?.encodeToJSON(), 
            "request.log.service.onentry": requestLogServiceOnentry
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingMaxCalls: (query)  (optional)
     - parameter slingMaxInclusions: (query)  (optional)
     - parameter slingTraceAllow: (query)  (optional)
     - parameter slingMaxRecordRequests: (query)  (optional)
     - parameter slingStorePatternRequests: (query)  (optional)
     - parameter slingServerinfo: (query)  (optional)
     - parameter slingAdditionalResponseHeaders: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingEngineImplSlingMainServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingMaxCalls: Int? = nil, slingMaxInclusions: Int? = nil, slingTraceAllow: Bool? = nil, slingMaxRecordRequests: Int? = nil, slingStorePatternRequests: [String]? = nil, slingServerinfo: String? = nil, slingAdditionalResponseHeaders: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingEngineImplSlingMainServletInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingEngineImplSlingMainServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingMaxCalls: slingMaxCalls, slingMaxInclusions: slingMaxInclusions, slingTraceAllow: slingTraceAllow, slingMaxRecordRequests: slingMaxRecordRequests, slingStorePatternRequests: slingStorePatternRequests, slingServerinfo: slingServerinfo, slingAdditionalResponseHeaders: slingAdditionalResponseHeaders).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingMaxCalls: (query)  (optional)
     - parameter slingMaxInclusions: (query)  (optional)
     - parameter slingTraceAllow: (query)  (optional)
     - parameter slingMaxRecordRequests: (query)  (optional)
     - parameter slingStorePatternRequests: (query)  (optional)
     - parameter slingServerinfo: (query)  (optional)
     - parameter slingAdditionalResponseHeaders: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingEngineImplSlingMainServletInfo> 
     */
    open class func orgApacheSlingEngineImplSlingMainServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingMaxCalls: Int? = nil, slingMaxInclusions: Int? = nil, slingTraceAllow: Bool? = nil, slingMaxRecordRequests: Int? = nil, slingStorePatternRequests: [String]? = nil, slingServerinfo: String? = nil, slingAdditionalResponseHeaders: [String]? = nil) -> RequestBuilder<OrgApacheSlingEngineImplSlingMainServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.max.calls": slingMaxCalls?.encodeToJSON(), 
            "sling.max.inclusions": slingMaxInclusions?.encodeToJSON(), 
            "sling.trace.allow": slingTraceAllow, 
            "sling.max.record.requests": slingMaxRecordRequests?.encodeToJSON(), 
            "sling.store.pattern.requests": slingStorePatternRequests, 
            "sling.serverinfo": slingServerinfo, 
            "sling.additional.response.headers": slingAdditionalResponseHeaders
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingEngineImplSlingMainServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingDefaultParameterEncoding: (query)  (optional)
     - parameter slingDefaultMaxParameters: (query)  (optional)
     - parameter fileLocation: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter fileMax: (query)  (optional)
     - parameter requestMax: (query)  (optional)
     - parameter slingDefaultParameterCheckForAdditionalContainerParameters: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingEngineParameters(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingDefaultParameterEncoding: String? = nil, slingDefaultMaxParameters: Int? = nil, fileLocation: String? = nil, fileThreshold: Int? = nil, fileMax: Int? = nil, requestMax: Int? = nil, slingDefaultParameterCheckForAdditionalContainerParameters: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingEngineParametersInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingEngineParametersWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingDefaultParameterEncoding: slingDefaultParameterEncoding, slingDefaultMaxParameters: slingDefaultMaxParameters, fileLocation: fileLocation, fileThreshold: fileThreshold, fileMax: fileMax, requestMax: requestMax, slingDefaultParameterCheckForAdditionalContainerParameters: slingDefaultParameterCheckForAdditionalContainerParameters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.parameters
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingDefaultParameterEncoding: (query)  (optional)
     - parameter slingDefaultMaxParameters: (query)  (optional)
     - parameter fileLocation: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter fileMax: (query)  (optional)
     - parameter requestMax: (query)  (optional)
     - parameter slingDefaultParameterCheckForAdditionalContainerParameters: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingEngineParametersInfo> 
     */
    open class func orgApacheSlingEngineParametersWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingDefaultParameterEncoding: String? = nil, slingDefaultMaxParameters: Int? = nil, fileLocation: String? = nil, fileThreshold: Int? = nil, fileMax: Int? = nil, requestMax: Int? = nil, slingDefaultParameterCheckForAdditionalContainerParameters: Bool? = nil) -> RequestBuilder<OrgApacheSlingEngineParametersInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.parameters"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.default.parameter.encoding": slingDefaultParameterEncoding, 
            "sling.default.max.parameters": slingDefaultMaxParameters?.encodeToJSON(), 
            "file.location": fileLocation, 
            "file.threshold": fileThreshold?.encodeToJSON(), 
            "file.max": fileMax?.encodeToJSON(), 
            "request.max": requestMax?.encodeToJSON(), 
            "sling.default.parameter.checkForAdditionalContainerParameters": slingDefaultParameterCheckForAdditionalContainerParameters
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingEngineParametersInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter minPoolSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingEventImplEventingThreadPool(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, minPoolSize: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingEventImplEventingThreadPoolInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingEventImplEventingThreadPoolWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, minPoolSize: minPoolSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter minPoolSize: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingEventImplEventingThreadPoolInfo> 
     */
    open class func orgApacheSlingEventImplEventingThreadPoolWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, minPoolSize: Int? = nil) -> RequestBuilder<OrgApacheSlingEventImplEventingThreadPoolInfo> {
        let path = "/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "minPoolSize": minPoolSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingEventImplEventingThreadPoolInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queuePriority: (query)  (optional)
     - parameter queueRetries: (query)  (optional)
     - parameter queueRetrydelay: (query)  (optional)
     - parameter queueMaxparallel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingEventImplJobsDefaultJobManager(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queuePriority: String? = nil, queueRetries: Int? = nil, queueRetrydelay: Int? = nil, queueMaxparallel: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingEventImplJobsDefaultJobManagerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingEventImplJobsDefaultJobManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queuePriority: queuePriority, queueRetries: queueRetries, queueRetrydelay: queueRetrydelay, queueMaxparallel: queueMaxparallel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queuePriority: (query)  (optional)
     - parameter queueRetries: (query)  (optional)
     - parameter queueRetrydelay: (query)  (optional)
     - parameter queueMaxparallel: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingEventImplJobsDefaultJobManagerInfo> 
     */
    open class func orgApacheSlingEventImplJobsDefaultJobManagerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queuePriority: String? = nil, queueRetries: Int? = nil, queueRetrydelay: Int? = nil, queueMaxparallel: Int? = nil) -> RequestBuilder<OrgApacheSlingEventImplJobsDefaultJobManagerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "queue.priority": queuePriority, 
            "queue.retries": queueRetries?.encodeToJSON(), 
            "queue.retrydelay": queueRetrydelay?.encodeToJSON(), 
            "queue.maxparallel": queueMaxparallel?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingEventImplJobsDefaultJobManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobConsumermanagerDisableDistribution: (query)  (optional)
     - parameter startupDelay: (query)  (optional)
     - parameter cleanupPeriod: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingEventImplJobsJcrPersistenceHandler(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobConsumermanagerDisableDistribution: Bool? = nil, startupDelay: Int? = nil, cleanupPeriod: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingEventImplJobsJcrPersistenceHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jobConsumermanagerDisableDistribution: jobConsumermanagerDisableDistribution, startupDelay: startupDelay, cleanupPeriod: cleanupPeriod).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobConsumermanagerDisableDistribution: (query)  (optional)
     - parameter startupDelay: (query)  (optional)
     - parameter cleanupPeriod: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo> 
     */
    open class func orgApacheSlingEventImplJobsJcrPersistenceHandlerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobConsumermanagerDisableDistribution: Bool? = nil, startupDelay: Int? = nil, cleanupPeriod: Int? = nil) -> RequestBuilder<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "job.consumermanager.disableDistribution": jobConsumermanagerDisableDistribution, 
            "startup.delay": startupDelay?.encodeToJSON(), 
            "cleanup.period": cleanupPeriod?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingInstallerConfigurationPersist: (query)  (optional)
     - parameter jobConsumermanagerWhitelist: (query)  (optional)
     - parameter jobConsumermanagerBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingEventImplJobsJobConsumerManager(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingInstallerConfigurationPersist: Bool? = nil, jobConsumermanagerWhitelist: [String]? = nil, jobConsumermanagerBlacklist: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingEventImplJobsJobConsumerManagerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingEventImplJobsJobConsumerManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingInstallerConfigurationPersist: orgApacheSlingInstallerConfigurationPersist, jobConsumermanagerWhitelist: jobConsumermanagerWhitelist, jobConsumermanagerBlacklist: jobConsumermanagerBlacklist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingInstallerConfigurationPersist: (query)  (optional)
     - parameter jobConsumermanagerWhitelist: (query)  (optional)
     - parameter jobConsumermanagerBlacklist: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingEventImplJobsJobConsumerManagerInfo> 
     */
    open class func orgApacheSlingEventImplJobsJobConsumerManagerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingInstallerConfigurationPersist: Bool? = nil, jobConsumermanagerWhitelist: [String]? = nil, jobConsumermanagerBlacklist: [String]? = nil) -> RequestBuilder<OrgApacheSlingEventImplJobsJobConsumerManagerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.sling.installer.configuration.persist": orgApacheSlingInstallerConfigurationPersist, 
            "job.consumermanager.whitelist": jobConsumermanagerWhitelist, 
            "job.consumermanager.blacklist": jobConsumermanagerBlacklist
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingEventImplJobsJobConsumerManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queueName: (query)  (optional)
     - parameter queueTopics: (query)  (optional)
     - parameter queueType: (query)  (optional)
     - parameter queuePriority: (query)  (optional)
     - parameter queueRetries: (query)  (optional)
     - parameter queueRetrydelay: (query)  (optional)
     - parameter queueMaxparallel: (query)  (optional)
     - parameter queueKeepJobs: (query)  (optional)
     - parameter queuePreferRunOnCreationInstance: (query)  (optional)
     - parameter queueThreadPoolSize: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingEventJobsQueueConfiguration(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queueName: String? = nil, queueTopics: [String]? = nil, queueType: String? = nil, queuePriority: String? = nil, queueRetries: Int? = nil, queueRetrydelay: Int? = nil, queueMaxparallel: Double? = nil, queueKeepJobs: Bool? = nil, queuePreferRunOnCreationInstance: Bool? = nil, queueThreadPoolSize: Int? = nil, serviceRanking: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingEventJobsQueueConfigurationInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingEventJobsQueueConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queueName: queueName, queueTopics: queueTopics, queueType: queueType, queuePriority: queuePriority, queueRetries: queueRetries, queueRetrydelay: queueRetrydelay, queueMaxparallel: queueMaxparallel, queueKeepJobs: queueKeepJobs, queuePreferRunOnCreationInstance: queuePreferRunOnCreationInstance, queueThreadPoolSize: queueThreadPoolSize, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queueName: (query)  (optional)
     - parameter queueTopics: (query)  (optional)
     - parameter queueType: (query)  (optional)
     - parameter queuePriority: (query)  (optional)
     - parameter queueRetries: (query)  (optional)
     - parameter queueRetrydelay: (query)  (optional)
     - parameter queueMaxparallel: (query)  (optional)
     - parameter queueKeepJobs: (query)  (optional)
     - parameter queuePreferRunOnCreationInstance: (query)  (optional)
     - parameter queueThreadPoolSize: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingEventJobsQueueConfigurationInfo> 
     */
    open class func orgApacheSlingEventJobsQueueConfigurationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queueName: String? = nil, queueTopics: [String]? = nil, queueType: String? = nil, queuePriority: String? = nil, queueRetries: Int? = nil, queueRetrydelay: Int? = nil, queueMaxparallel: Double? = nil, queueKeepJobs: Bool? = nil, queuePreferRunOnCreationInstance: Bool? = nil, queueThreadPoolSize: Int? = nil, serviceRanking: Int? = nil) -> RequestBuilder<OrgApacheSlingEventJobsQueueConfigurationInfo> {
        let path = "/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "queue.name": queueName, 
            "queue.topics": queueTopics, 
            "queue.type": queueType, 
            "queue.priority": queuePriority, 
            "queue.retries": queueRetries?.encodeToJSON(), 
            "queue.retrydelay": queueRetrydelay?.encodeToJSON(), 
            "queue.maxparallel": queueMaxparallel, 
            "queue.keepJobs": queueKeepJobs, 
            "queue.preferRunOnCreationInstance": queuePreferRunOnCreationInstance, 
            "queue.threadPoolSize": queueThreadPoolSize?.encodeToJSON(), 
            "service.ranking": serviceRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingEventJobsQueueConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter users: (query)  (optional)
     - parameter groups: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, users: [String]? = nil, groups: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, users: users, groups: groups).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter users: (query)  (optional)
     - parameter groups: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo> 
     */
    open class func orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, users: [String]? = nil, groups: [String]? = nil) -> RequestBuilder<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo> {
        let path = "/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "users": users, 
            "groups": groups
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter _description: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingFeatureflagsFeature(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, _description: String? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingFeatureflagsFeatureInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingFeatureflagsFeatureWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, _description: _description, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.featureflags.Feature
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter _description: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingFeatureflagsFeatureInfo> 
     */
    open class func orgApacheSlingFeatureflagsFeatureWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, _description: String? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingFeatureflagsFeatureInfo> {
        let path = "/system/console/configMgr/org.apache.sling.featureflags.Feature"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "description": _description, 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingFeatureflagsFeatureInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter _description: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingFeatureflagsImplConfiguredFeature(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, _description: String? = nil, enabled: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingFeatureflagsImplConfiguredFeatureWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, _description: _description, enabled: enabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter _description: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo> 
     */
    open class func orgApacheSlingFeatureflagsImplConfiguredFeatureWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, _description: String? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo> {
        let path = "/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "name": name, 
            "description": _description, 
            "enabled": enabled
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingHapiToolsResourcetype: (query)  (optional)
     - parameter orgApacheSlingHapiToolsCollectionresourcetype: (query)  (optional)
     - parameter orgApacheSlingHapiToolsSearchpaths: (query)  (optional)
     - parameter orgApacheSlingHapiToolsExternalurl: (query)  (optional)
     - parameter orgApacheSlingHapiToolsEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingHapiImplHApiUtilImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingHapiToolsResourcetype: String? = nil, orgApacheSlingHapiToolsCollectionresourcetype: String? = nil, orgApacheSlingHapiToolsSearchpaths: [String]? = nil, orgApacheSlingHapiToolsExternalurl: String? = nil, orgApacheSlingHapiToolsEnabled: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingHapiImplHApiUtilImplInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingHapiImplHApiUtilImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingHapiToolsResourcetype: orgApacheSlingHapiToolsResourcetype, orgApacheSlingHapiToolsCollectionresourcetype: orgApacheSlingHapiToolsCollectionresourcetype, orgApacheSlingHapiToolsSearchpaths: orgApacheSlingHapiToolsSearchpaths, orgApacheSlingHapiToolsExternalurl: orgApacheSlingHapiToolsExternalurl, orgApacheSlingHapiToolsEnabled: orgApacheSlingHapiToolsEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingHapiToolsResourcetype: (query)  (optional)
     - parameter orgApacheSlingHapiToolsCollectionresourcetype: (query)  (optional)
     - parameter orgApacheSlingHapiToolsSearchpaths: (query)  (optional)
     - parameter orgApacheSlingHapiToolsExternalurl: (query)  (optional)
     - parameter orgApacheSlingHapiToolsEnabled: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingHapiImplHApiUtilImplInfo> 
     */
    open class func orgApacheSlingHapiImplHApiUtilImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingHapiToolsResourcetype: String? = nil, orgApacheSlingHapiToolsCollectionresourcetype: String? = nil, orgApacheSlingHapiToolsSearchpaths: [String]? = nil, orgApacheSlingHapiToolsExternalurl: String? = nil, orgApacheSlingHapiToolsEnabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingHapiImplHApiUtilImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.sling.hapi.tools.resourcetype": orgApacheSlingHapiToolsResourcetype, 
            "org.apache.sling.hapi.tools.collectionresourcetype": orgApacheSlingHapiToolsCollectionresourcetype, 
            "org.apache.sling.hapi.tools.searchpaths": orgApacheSlingHapiToolsSearchpaths, 
            "org.apache.sling.hapi.tools.externalurl": orgApacheSlingHapiToolsExternalurl, 
            "org.apache.sling.hapi.tools.enabled": orgApacheSlingHapiToolsEnabled
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingHapiImplHApiUtilImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter filterTags: (query)  (optional)
     - parameter filterCombineTagsWithOr: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingHcCoreImplCompositeHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, filterTags: [String]? = nil, filterCombineTagsWithOr: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingHcCoreImplCompositeHealthCheckInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingHcCoreImplCompositeHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName, filterTags: filterTags, filterCombineTagsWithOr: filterCombineTagsWithOr).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter filterTags: (query)  (optional)
     - parameter filterCombineTagsWithOr: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo> 
     */
    open class func orgApacheSlingHcCoreImplCompositeHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, filterTags: [String]? = nil, filterCombineTagsWithOr: Bool? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.name": hcName, 
            "hc.tags": hcTags, 
            "hc.mbean.name": hcMbeanName, 
            "filter.tags": filterTags, 
            "filter.combineTagsWithOr": filterCombineTagsWithOr
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timeoutInMs: (query)  (optional)
     - parameter longRunningFutureThresholdForCriticalMs: (query)  (optional)
     - parameter resultCacheTtlInMs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timeoutInMs: Int? = nil, longRunningFutureThresholdForCriticalMs: Int? = nil, resultCacheTtlInMs: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, timeoutInMs: timeoutInMs, longRunningFutureThresholdForCriticalMs: longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs: resultCacheTtlInMs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timeoutInMs: (query)  (optional)
     - parameter longRunningFutureThresholdForCriticalMs: (query)  (optional)
     - parameter resultCacheTtlInMs: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo> 
     */
    open class func orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timeoutInMs: Int? = nil, longRunningFutureThresholdForCriticalMs: Int? = nil, resultCacheTtlInMs: Int? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "timeoutInMs": timeoutInMs?.encodeToJSON(), 
            "longRunningFutureThresholdForCriticalMs": longRunningFutureThresholdForCriticalMs?.encodeToJSON(), 
            "resultCacheTtlInMs": resultCacheTtlInMs?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter mbeanName: (query)  (optional)
     - parameter attributeName: (query)  (optional)
     - parameter attributeValueConstraint: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, mbeanName: String? = nil, attributeName: String? = nil, attributeValueConstraint: String? = nil, completion: @escaping ((_ data: OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingHcCoreImplJmxAttributeHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName, mbeanName: mbeanName, attributeName: attributeName, attributeValueConstraint: attributeValueConstraint).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter mbeanName: (query)  (optional)
     - parameter attributeName: (query)  (optional)
     - parameter attributeValueConstraint: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo> 
     */
    open class func orgApacheSlingHcCoreImplJmxAttributeHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, mbeanName: String? = nil, attributeName: String? = nil, attributeValueConstraint: String? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.name": hcName, 
            "hc.tags": hcTags, 
            "hc.mbean.name": hcMbeanName, 
            "mbean.name": mbeanName, 
            "attribute.name": attributeName, 
            "attribute.value.constraint": attributeValueConstraint
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter languageExtension: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingHcCoreImplScriptableHealthCheck(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, expression: String? = nil, languageExtension: String? = nil, completion: @escaping ((_ data: OrgApacheSlingHcCoreImplScriptableHealthCheckInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingHcCoreImplScriptableHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName, expression: expression, languageExtension: languageExtension).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter languageExtension: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo> 
     */
    open class func orgApacheSlingHcCoreImplScriptableHealthCheckWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, expression: String? = nil, languageExtension: String? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "hc.name": hcName, 
            "hc.tags": hcTags, 
            "hc.mbean.name": hcMbeanName, 
            "expression": expression, 
            "language.extension": languageExtension
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletPath: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter corsAccessControlAllowOrigin: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletPath: String? = nil, disabled: Bool? = nil, corsAccessControlAllowOrigin: String? = nil, completion: @escaping ((_ data: OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingHcCoreImplServletHealthCheckExecutorServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, servletPath: servletPath, disabled: disabled, corsAccessControlAllowOrigin: corsAccessControlAllowOrigin).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletPath: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter corsAccessControlAllowOrigin: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo> 
     */
    open class func orgApacheSlingHcCoreImplServletHealthCheckExecutorServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletPath: String? = nil, disabled: Bool? = nil, corsAccessControlAllowOrigin: String? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "servletPath": servletPath, 
            "disabled": disabled, 
            "cors.accessControlAllowOrigin": corsAccessControlAllowOrigin
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter totalWidth: (query)  (optional)
     - parameter colWidthName: (query)  (optional)
     - parameter colWidthResult: (query)  (optional)
     - parameter colWidthTiming: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, totalWidth: Int? = nil, colWidthName: Int? = nil, colWidthResult: Int? = nil, colWidthTiming: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, totalWidth: totalWidth, colWidthName: colWidthName, colWidthResult: colWidthResult, colWidthTiming: colWidthTiming).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter totalWidth: (query)  (optional)
     - parameter colWidthName: (query)  (optional)
     - parameter colWidthResult: (query)  (optional)
     - parameter colWidthTiming: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo> 
     */
    open class func orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, totalWidth: Int? = nil, colWidthName: Int? = nil, colWidthResult: Int? = nil, colWidthTiming: Int? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "totalWidth": totalWidth?.encodeToJSON(), 
            "colWidthName": colWidthName?.encodeToJSON(), 
            "colWidthResult": colWidthResult?.encodeToJSON(), 
            "colWidthTiming": colWidthTiming?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter slingFilterScope: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingI18nImplI18NFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, slingFilterScope: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingI18nImplI18NFilterInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingI18nImplI18NFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, slingFilterScope: slingFilterScope).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter slingFilterScope: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingI18nImplI18NFilterInfo> 
     */
    open class func orgApacheSlingI18nImplI18NFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, slingFilterScope: [String]? = nil) -> RequestBuilder<OrgApacheSlingI18nImplI18NFilterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "sling.filter.scope": slingFilterScope
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingI18nImplI18NFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter localeDefault: (query)  (optional)
     - parameter preloadBundles: (query)  (optional)
     - parameter invalidationDelay: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingI18nImplJcrResourceBundleProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, localeDefault: String? = nil, preloadBundles: Bool? = nil, invalidationDelay: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingI18nImplJcrResourceBundleProviderInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingI18nImplJcrResourceBundleProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, localeDefault: localeDefault, preloadBundles: preloadBundles, invalidationDelay: invalidationDelay).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter localeDefault: (query)  (optional)
     - parameter preloadBundles: (query)  (optional)
     - parameter invalidationDelay: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo> 
     */
    open class func orgApacheSlingI18nImplJcrResourceBundleProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, localeDefault: String? = nil, preloadBundles: Bool? = nil, invalidationDelay: Int? = nil) -> RequestBuilder<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo> {
        let path = "/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "locale.default": localeDefault, 
            "preload.bundles": preloadBundles, 
            "invalidation.delay": invalidationDelay?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter handlerSchemes: (query)  (optional)
     - parameter slingJcrinstallFolderNameRegexp: (query)  (optional)
     - parameter slingJcrinstallFolderMaxDepth: (query)  (optional)
     - parameter slingJcrinstallSearchPath: (query)  (optional)
     - parameter slingJcrinstallNewConfigPath: (query)  (optional)
     - parameter slingJcrinstallSignalPath: (query)  (optional)
     - parameter slingJcrinstallEnableWriteback: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingInstallerProviderJcrImplJcrInstaller(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, handlerSchemes: [String]? = nil, slingJcrinstallFolderNameRegexp: String? = nil, slingJcrinstallFolderMaxDepth: Int? = nil, slingJcrinstallSearchPath: [String]? = nil, slingJcrinstallNewConfigPath: String? = nil, slingJcrinstallSignalPath: String? = nil, slingJcrinstallEnableWriteback: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingInstallerProviderJcrImplJcrInstallerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, handlerSchemes: handlerSchemes, slingJcrinstallFolderNameRegexp: slingJcrinstallFolderNameRegexp, slingJcrinstallFolderMaxDepth: slingJcrinstallFolderMaxDepth, slingJcrinstallSearchPath: slingJcrinstallSearchPath, slingJcrinstallNewConfigPath: slingJcrinstallNewConfigPath, slingJcrinstallSignalPath: slingJcrinstallSignalPath, slingJcrinstallEnableWriteback: slingJcrinstallEnableWriteback).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter handlerSchemes: (query)  (optional)
     - parameter slingJcrinstallFolderNameRegexp: (query)  (optional)
     - parameter slingJcrinstallFolderMaxDepth: (query)  (optional)
     - parameter slingJcrinstallSearchPath: (query)  (optional)
     - parameter slingJcrinstallNewConfigPath: (query)  (optional)
     - parameter slingJcrinstallSignalPath: (query)  (optional)
     - parameter slingJcrinstallEnableWriteback: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo> 
     */
    open class func orgApacheSlingInstallerProviderJcrImplJcrInstallerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, handlerSchemes: [String]? = nil, slingJcrinstallFolderNameRegexp: String? = nil, slingJcrinstallFolderMaxDepth: Int? = nil, slingJcrinstallSearchPath: [String]? = nil, slingJcrinstallNewConfigPath: String? = nil, slingJcrinstallSignalPath: String? = nil, slingJcrinstallEnableWriteback: Bool? = nil) -> RequestBuilder<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "handler.schemes": handlerSchemes, 
            "sling.jcrinstall.folder.name.regexp": slingJcrinstallFolderNameRegexp, 
            "sling.jcrinstall.folder.max.depth": slingJcrinstallFolderMaxDepth?.encodeToJSON(), 
            "sling.jcrinstall.search.path": slingJcrinstallSearchPath, 
            "sling.jcrinstall.new.config.path": slingJcrinstallNewConfigPath, 
            "sling.jcrinstall.signal.path": slingJcrinstallSignalPath, 
            "sling.jcrinstall.enable.writeback": slingJcrinstallEnableWriteback
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter whitelistBypass: (query)  (optional)
     - parameter whitelistBundlesRegexp: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, whitelistBypass: Bool? = nil, whitelistBundlesRegexp: String? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrBaseInternalLoginAdminWhitelistWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, whitelistBypass: whitelistBypass, whitelistBundlesRegexp: whitelistBundlesRegexp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter whitelistBypass: (query)  (optional)
     - parameter whitelistBundlesRegexp: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo> 
     */
    open class func orgApacheSlingJcrBaseInternalLoginAdminWhitelistWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, whitelistBypass: Bool? = nil, whitelistBundlesRegexp: String? = nil) -> RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "whitelist.bypass": whitelistBypass, 
            "whitelist.bundles.regexp": whitelistBundlesRegexp
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter whitelistName: (query)  (optional)
     - parameter whitelistBundles: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, whitelistName: String? = nil, whitelistBundles: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, whitelistName: whitelistName, whitelistBundles: whitelistBundles).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter whitelistName: (query)  (optional)
     - parameter whitelistBundles: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo> 
     */
    open class func orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, whitelistName: String? = nil, whitelistBundles: [String]? = nil) -> RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "whitelist.name": whitelistName, 
            "whitelist.bundles": whitelistBundles
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alias: (query)  (optional)
     - parameter davCreateAbsoluteUri: (query)  (optional)
     - parameter davProtectedhandlers: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alias: String? = nil, davCreateAbsoluteUri: Bool? = nil, davProtectedhandlers: String? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrDavexImplServletsSlingDavExServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, alias: alias, davCreateAbsoluteUri: davCreateAbsoluteUri, davProtectedhandlers: davProtectedhandlers).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alias: (query)  (optional)
     - parameter davCreateAbsoluteUri: (query)  (optional)
     - parameter davProtectedhandlers: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo> 
     */
    open class func orgApacheSlingJcrDavexImplServletsSlingDavExServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alias: String? = nil, davCreateAbsoluteUri: Bool? = nil, davProtectedhandlers: String? = nil) -> RequestBuilder<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "alias": alias, 
            "dav.create-absolute-uri": davCreateAbsoluteUri, 
            "dav.protectedhandlers": davProtectedhandlers
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter javaNamingFactoryInitial: (query)  (optional)
     - parameter javaNamingProviderUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, javaNamingFactoryInitial: String? = nil, javaNamingProviderUrl: String? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, javaNamingFactoryInitial: javaNamingFactoryInitial, javaNamingProviderUrl: javaNamingProviderUrl).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter javaNamingFactoryInitial: (query)  (optional)
     - parameter javaNamingProviderUrl: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo> 
     */
    open class func orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, javaNamingFactoryInitial: String? = nil, javaNamingProviderUrl: String? = nil) -> RequestBuilder<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "java.naming.factory.initial": javaNamingFactoryInitial, 
            "java.naming.provider.url": javaNamingProviderUrl
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter port: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, port: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, port: port).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter port: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo> 
     */
    open class func orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, port: Int? = nil) -> RequestBuilder<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "port": port?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter references: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrRepoinitImplRepositoryInitializer(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, references: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrRepoinitImplRepositoryInitializerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, references: references).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter references: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo> 
     */
    open class func orgApacheSlingJcrRepoinitImplRepositoryInitializerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, references: [String]? = nil) -> RequestBuilder<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "references": references
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter references: (query)  (optional)
     - parameter scripts: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrRepoinitRepositoryInitializer(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, references: [String]? = nil, scripts: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrRepoinitRepositoryInitializerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrRepoinitRepositoryInitializerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, references: references, scripts: scripts).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter references: (query)  (optional)
     - parameter scripts: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo> 
     */
    open class func orgApacheSlingJcrRepoinitRepositoryInitializerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, references: [String]? = nil, scripts: [String]? = nil) -> RequestBuilder<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "references": references, 
            "scripts": scripts
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceResolverSearchpath: (query)  (optional)
     - parameter resourceResolverManglenamespaces: (query)  (optional)
     - parameter resourceResolverAllowDirect: (query)  (optional)
     - parameter resourceResolverRequiredProviders: (query)  (optional)
     - parameter resourceResolverRequiredProvidernames: (query)  (optional)
     - parameter resourceResolverVirtual: (query)  (optional)
     - parameter resourceResolverMapping: (query)  (optional)
     - parameter resourceResolverMapLocation: (query)  (optional)
     - parameter resourceResolverMapObservation: (query)  (optional)
     - parameter resourceResolverDefaultVanityRedirectStatus: (query)  (optional)
     - parameter resourceResolverEnableVanitypath: (query)  (optional)
     - parameter resourceResolverVanitypathMaxEntries: (query)  (optional)
     - parameter resourceResolverVanitypathMaxEntriesStartup: (query)  (optional)
     - parameter resourceResolverVanitypathBloomfilterMaxBytes: (query)  (optional)
     - parameter resourceResolverOptimizeAliasResolution: (query)  (optional)
     - parameter resourceResolverVanitypathWhitelist: (query)  (optional)
     - parameter resourceResolverVanitypathBlacklist: (query)  (optional)
     - parameter resourceResolverVanityPrecedence: (query)  (optional)
     - parameter resourceResolverProviderhandlingParanoid: (query)  (optional)
     - parameter resourceResolverLogClosing: (query)  (optional)
     - parameter resourceResolverLogUnclosed: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceResolverSearchpath: [String]? = nil, resourceResolverManglenamespaces: Bool? = nil, resourceResolverAllowDirect: Bool? = nil, resourceResolverRequiredProviders: [String]? = nil, resourceResolverRequiredProvidernames: [String]? = nil, resourceResolverVirtual: [String]? = nil, resourceResolverMapping: [String]? = nil, resourceResolverMapLocation: String? = nil, resourceResolverMapObservation: [String]? = nil, resourceResolverDefaultVanityRedirectStatus: Int? = nil, resourceResolverEnableVanitypath: Bool? = nil, resourceResolverVanitypathMaxEntries: Int? = nil, resourceResolverVanitypathMaxEntriesStartup: Bool? = nil, resourceResolverVanitypathBloomfilterMaxBytes: Int? = nil, resourceResolverOptimizeAliasResolution: Bool? = nil, resourceResolverVanitypathWhitelist: [String]? = nil, resourceResolverVanitypathBlacklist: [String]? = nil, resourceResolverVanityPrecedence: Bool? = nil, resourceResolverProviderhandlingParanoid: Bool? = nil, resourceResolverLogClosing: Bool? = nil, resourceResolverLogUnclosed: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, resourceResolverSearchpath: resourceResolverSearchpath, resourceResolverManglenamespaces: resourceResolverManglenamespaces, resourceResolverAllowDirect: resourceResolverAllowDirect, resourceResolverRequiredProviders: resourceResolverRequiredProviders, resourceResolverRequiredProvidernames: resourceResolverRequiredProvidernames, resourceResolverVirtual: resourceResolverVirtual, resourceResolverMapping: resourceResolverMapping, resourceResolverMapLocation: resourceResolverMapLocation, resourceResolverMapObservation: resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus: resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath: resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries: resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup: resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes: resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution: resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist: resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist: resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence: resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid: resourceResolverProviderhandlingParanoid, resourceResolverLogClosing: resourceResolverLogClosing, resourceResolverLogUnclosed: resourceResolverLogUnclosed).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceResolverSearchpath: (query)  (optional)
     - parameter resourceResolverManglenamespaces: (query)  (optional)
     - parameter resourceResolverAllowDirect: (query)  (optional)
     - parameter resourceResolverRequiredProviders: (query)  (optional)
     - parameter resourceResolverRequiredProvidernames: (query)  (optional)
     - parameter resourceResolverVirtual: (query)  (optional)
     - parameter resourceResolverMapping: (query)  (optional)
     - parameter resourceResolverMapLocation: (query)  (optional)
     - parameter resourceResolverMapObservation: (query)  (optional)
     - parameter resourceResolverDefaultVanityRedirectStatus: (query)  (optional)
     - parameter resourceResolverEnableVanitypath: (query)  (optional)
     - parameter resourceResolverVanitypathMaxEntries: (query)  (optional)
     - parameter resourceResolverVanitypathMaxEntriesStartup: (query)  (optional)
     - parameter resourceResolverVanitypathBloomfilterMaxBytes: (query)  (optional)
     - parameter resourceResolverOptimizeAliasResolution: (query)  (optional)
     - parameter resourceResolverVanitypathWhitelist: (query)  (optional)
     - parameter resourceResolverVanitypathBlacklist: (query)  (optional)
     - parameter resourceResolverVanityPrecedence: (query)  (optional)
     - parameter resourceResolverProviderhandlingParanoid: (query)  (optional)
     - parameter resourceResolverLogClosing: (query)  (optional)
     - parameter resourceResolverLogUnclosed: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo> 
     */
    open class func orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceResolverSearchpath: [String]? = nil, resourceResolverManglenamespaces: Bool? = nil, resourceResolverAllowDirect: Bool? = nil, resourceResolverRequiredProviders: [String]? = nil, resourceResolverRequiredProvidernames: [String]? = nil, resourceResolverVirtual: [String]? = nil, resourceResolverMapping: [String]? = nil, resourceResolverMapLocation: String? = nil, resourceResolverMapObservation: [String]? = nil, resourceResolverDefaultVanityRedirectStatus: Int? = nil, resourceResolverEnableVanitypath: Bool? = nil, resourceResolverVanitypathMaxEntries: Int? = nil, resourceResolverVanitypathMaxEntriesStartup: Bool? = nil, resourceResolverVanitypathBloomfilterMaxBytes: Int? = nil, resourceResolverOptimizeAliasResolution: Bool? = nil, resourceResolverVanitypathWhitelist: [String]? = nil, resourceResolverVanitypathBlacklist: [String]? = nil, resourceResolverVanityPrecedence: Bool? = nil, resourceResolverProviderhandlingParanoid: Bool? = nil, resourceResolverLogClosing: Bool? = nil, resourceResolverLogUnclosed: Bool? = nil) -> RequestBuilder<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "resource.resolver.searchpath": resourceResolverSearchpath, 
            "resource.resolver.manglenamespaces": resourceResolverManglenamespaces, 
            "resource.resolver.allowDirect": resourceResolverAllowDirect, 
            "resource.resolver.required.providers": resourceResolverRequiredProviders, 
            "resource.resolver.required.providernames": resourceResolverRequiredProvidernames, 
            "resource.resolver.virtual": resourceResolverVirtual, 
            "resource.resolver.mapping": resourceResolverMapping, 
            "resource.resolver.map.location": resourceResolverMapLocation, 
            "resource.resolver.map.observation": resourceResolverMapObservation, 
            "resource.resolver.default.vanity.redirect.status": resourceResolverDefaultVanityRedirectStatus?.encodeToJSON(), 
            "resource.resolver.enable.vanitypath": resourceResolverEnableVanitypath, 
            "resource.resolver.vanitypath.maxEntries": resourceResolverVanitypathMaxEntries?.encodeToJSON(), 
            "resource.resolver.vanitypath.maxEntries.startup": resourceResolverVanitypathMaxEntriesStartup, 
            "resource.resolver.vanitypath.bloomfilter.maxBytes": resourceResolverVanitypathBloomfilterMaxBytes?.encodeToJSON(), 
            "resource.resolver.optimize.alias.resolution": resourceResolverOptimizeAliasResolution, 
            "resource.resolver.vanitypath.whitelist": resourceResolverVanitypathWhitelist, 
            "resource.resolver.vanitypath.blacklist": resourceResolverVanitypathBlacklist, 
            "resource.resolver.vanity.precedence": resourceResolverVanityPrecedence, 
            "resource.resolver.providerhandling.paranoid": resourceResolverProviderhandlingParanoid, 
            "resource.resolver.log.closing": resourceResolverLogClosing, 
            "resource.resolver.log.unclosed": resourceResolverLogUnclosed
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowOnlySystemUser: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowOnlySystemUser: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrResourceInternalJcrSystemUserValidatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, allowOnlySystemUser: allowOnlySystemUser).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowOnlySystemUser: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo> 
     */
    open class func orgApacheSlingJcrResourceInternalJcrSystemUserValidatorWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowOnlySystemUser: Bool? = nil) -> RequestBuilder<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "allow.only.system.user": allowOnlySystemUser
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter checkpathPrefix: (query)  (optional)
     - parameter jcrPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, checkpathPrefix: String? = nil, jcrPath: String? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, checkpathPrefix: checkpathPrefix, jcrPath: jcrPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter checkpathPrefix: (query)  (optional)
     - parameter jcrPath: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo> 
     */
    open class func orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, checkpathPrefix: String? = nil, jcrPath: String? = nil) -> RequestBuilder<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "path": path, 
            "checkpath.prefix": checkpathPrefix, 
            "jcrPath": jcrPath
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter typeCollections: (query)  (optional)
     - parameter typeNoncollections: (query)  (optional)
     - parameter typeContent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, typeCollections: String? = nil, typeNoncollections: String? = nil, typeContent: String? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, typeCollections: typeCollections, typeNoncollections: typeNoncollections, typeContent: typeContent).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter typeCollections: (query)  (optional)
     - parameter typeNoncollections: (query)  (optional)
     - parameter typeContent: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo> 
     */
    open class func orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, typeCollections: String? = nil, typeNoncollections: String? = nil, typeContent: String? = nil) -> RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "type.collections": typeCollections, 
            "type.noncollections": typeNoncollections, 
            "type.content": typeContent
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo> 
     */
    open class func orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil) -> RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter davRoot: (query)  (optional)
     - parameter davCreateAbsoluteUri: (query)  (optional)
     - parameter davRealm: (query)  (optional)
     - parameter collectionTypes: (query)  (optional)
     - parameter filterPrefixes: (query)  (optional)
     - parameter filterTypes: (query)  (optional)
     - parameter filterUris: (query)  (optional)
     - parameter typeCollections: (query)  (optional)
     - parameter typeNoncollections: (query)  (optional)
     - parameter typeContent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, davRoot: String? = nil, davCreateAbsoluteUri: Bool? = nil, davRealm: String? = nil, collectionTypes: [String]? = nil, filterPrefixes: [String]? = nil, filterTypes: String? = nil, filterUris: String? = nil, typeCollections: String? = nil, typeNoncollections: String? = nil, typeContent: String? = nil, completion: @escaping ((_ data: OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, davRoot: davRoot, davCreateAbsoluteUri: davCreateAbsoluteUri, davRealm: davRealm, collectionTypes: collectionTypes, filterPrefixes: filterPrefixes, filterTypes: filterTypes, filterUris: filterUris, typeCollections: typeCollections, typeNoncollections: typeNoncollections, typeContent: typeContent).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter davRoot: (query)  (optional)
     - parameter davCreateAbsoluteUri: (query)  (optional)
     - parameter davRealm: (query)  (optional)
     - parameter collectionTypes: (query)  (optional)
     - parameter filterPrefixes: (query)  (optional)
     - parameter filterTypes: (query)  (optional)
     - parameter filterUris: (query)  (optional)
     - parameter typeCollections: (query)  (optional)
     - parameter typeNoncollections: (query)  (optional)
     - parameter typeContent: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo> 
     */
    open class func orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, davRoot: String? = nil, davCreateAbsoluteUri: Bool? = nil, davRealm: String? = nil, collectionTypes: [String]? = nil, filterPrefixes: [String]? = nil, filterTypes: String? = nil, filterUris: String? = nil, typeCollections: String? = nil, typeNoncollections: String? = nil, typeContent: String? = nil) -> RequestBuilder<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "dav.root": davRoot, 
            "dav.create-absolute-uri": davCreateAbsoluteUri, 
            "dav.realm": davRealm, 
            "collection.types": collectionTypes, 
            "filter.prefixes": filterPrefixes, 
            "filter.types": filterTypes, 
            "filter.uris": filterUris, 
            "type.collections": typeCollections, 
            "type.noncollections": typeNoncollections, 
            "type.content": typeContent
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingJmxProviderImplJMXResourceProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, completion: @escaping ((_ data: OrgApacheSlingJmxProviderImplJMXResourceProviderInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingJmxProviderImplJMXResourceProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerRoots: providerRoots).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo> 
     */
    open class func orgApacheSlingJmxProviderImplJMXResourceProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil) -> RequestBuilder<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "provider.roots": providerRoots
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardListener: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter maxRecursionDepth: (query)  (optional)
     - parameter cleanupJobPeriod: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingModelsImplModelAdapterFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardListener: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil, maxRecursionDepth: Int? = nil, cleanupJobPeriod: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingModelsImplModelAdapterFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingModelsImplModelAdapterFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, osgiHttpWhiteboardListener: osgiHttpWhiteboardListener, osgiHttpWhiteboardContextSelect: osgiHttpWhiteboardContextSelect, maxRecursionDepth: maxRecursionDepth, cleanupJobPeriod: cleanupJobPeriod).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardListener: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter maxRecursionDepth: (query)  (optional)
     - parameter cleanupJobPeriod: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingModelsImplModelAdapterFactoryInfo> 
     */
    open class func orgApacheSlingModelsImplModelAdapterFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardListener: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil, maxRecursionDepth: Int? = nil, cleanupJobPeriod: Int? = nil) -> RequestBuilder<OrgApacheSlingModelsImplModelAdapterFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "osgi.http.whiteboard.listener": osgiHttpWhiteboardListener, 
            "osgi.http.whiteboard.context.select": osgiHttpWhiteboardContextSelect, 
            "max.recursion.depth": maxRecursionDepth?.encodeToJSON(), 
            "cleanup.job.period": cleanupJobPeriod?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingModelsImplModelAdapterFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRecursionLevels: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRecursionLevels: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingModelsJacksonexporterImplResourceModuleProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxRecursionLevels: maxRecursionLevels).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRecursionLevels: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo> 
     */
    open class func orgApacheSlingModelsJacksonexporterImplResourceModuleProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRecursionLevels: Int? = nil) -> RequestBuilder<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo> {
        let path = "/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "max.recursion.levels": maxRecursionLevels?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter felixInventoryPrinterName: (query)  (optional)
     - parameter felixInventoryPrinterTitle: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, felixInventoryPrinterName: String? = nil, felixInventoryPrinterTitle: String? = nil, path: String? = nil, completion: @escaping ((_ data: OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, felixInventoryPrinterName: felixInventoryPrinterName, felixInventoryPrinterTitle: felixInventoryPrinterTitle, path: path).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter felixInventoryPrinterName: (query)  (optional)
     - parameter felixInventoryPrinterTitle: (query)  (optional)
     - parameter path: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo> 
     */
    open class func orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, felixInventoryPrinterName: String? = nil, felixInventoryPrinterTitle: String? = nil, path: String? = nil) -> RequestBuilder<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo> {
        let path = "/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "felix.inventory.printer.name": felixInventoryPrinterName, 
            "felix.inventory.printer.title": felixInventoryPrinterTitle, 
            "path": path
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mergeRoot: (query)  (optional)
     - parameter mergeReadOnly: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mergeRoot: String? = nil, mergeReadOnly: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingResourcemergerImplMergedResourceProviderFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mergeRoot: mergeRoot, mergeReadOnly: mergeReadOnly).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mergeRoot: (query)  (optional)
     - parameter mergeReadOnly: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo> 
     */
    open class func orgApacheSlingResourcemergerImplMergedResourceProviderFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mergeRoot: String? = nil, mergeReadOnly: Bool? = nil) -> RequestBuilder<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "merge.root": mergeRoot, 
            "merge.readOnly": mergeReadOnly
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mergeRoot: (query)  (optional)
     - parameter mergeReadOnly: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingResourcemergerPickerOverriding(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mergeRoot: String? = nil, mergeReadOnly: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingResourcemergerPickerOverridingInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingResourcemergerPickerOverridingWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mergeRoot: mergeRoot, mergeReadOnly: mergeReadOnly).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mergeRoot: (query)  (optional)
     - parameter mergeReadOnly: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingResourcemergerPickerOverridingInfo> 
     */
    open class func orgApacheSlingResourcemergerPickerOverridingWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mergeRoot: String? = nil, mergeReadOnly: Bool? = nil) -> RequestBuilder<OrgApacheSlingResourcemergerPickerOverridingInfo> {
        let path = "/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "merge.root": mergeRoot, 
            "merge.readOnly": mergeReadOnly
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingResourcemergerPickerOverridingInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingCacheSize: (query)  (optional)
     - parameter orgApacheSlingScriptingCacheAdditionalExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingScriptingCoreImplScriptCacheImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingCacheSize: Int? = nil, orgApacheSlingScriptingCacheAdditionalExtensions: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingScriptingCoreImplScriptCacheImplInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingScriptingCoreImplScriptCacheImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingScriptingCacheSize: orgApacheSlingScriptingCacheSize, orgApacheSlingScriptingCacheAdditionalExtensions: orgApacheSlingScriptingCacheAdditionalExtensions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingCacheSize: (query)  (optional)
     - parameter orgApacheSlingScriptingCacheAdditionalExtensions: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo> 
     */
    open class func orgApacheSlingScriptingCoreImplScriptCacheImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingCacheSize: Int? = nil, orgApacheSlingScriptingCacheAdditionalExtensions: [String]? = nil) -> RequestBuilder<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.sling.scripting.cache.size": orgApacheSlingScriptingCacheSize?.encodeToJSON(), 
            "org.apache.sling.scripting.cache.additional_extensions": orgApacheSlingScriptingCacheAdditionalExtensions
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter logStacktraceOnclose: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, logStacktraceOnclose: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, logStacktraceOnclose: logStacktraceOnclose).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter logStacktraceOnclose: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo> 
     */
    open class func orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, logStacktraceOnclose: Bool? = nil) -> RequestBuilder<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "log.stacktrace.onclose": logStacktraceOnclose
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter javaClassdebuginfo: (query)  (optional)
     - parameter javaJavaEncoding: (query)  (optional)
     - parameter javaCompilerSourceVM: (query)  (optional)
     - parameter javaCompilerTargetVM: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, javaClassdebuginfo: Bool? = nil, javaJavaEncoding: String? = nil, javaCompilerSourceVM: String? = nil, javaCompilerTargetVM: String? = nil, completion: @escaping ((_ data: OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, javaClassdebuginfo: javaClassdebuginfo, javaJavaEncoding: javaJavaEncoding, javaCompilerSourceVM: javaCompilerSourceVM, javaCompilerTargetVM: javaCompilerTargetVM).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter javaClassdebuginfo: (query)  (optional)
     - parameter javaJavaEncoding: (query)  (optional)
     - parameter javaCompilerSourceVM: (query)  (optional)
     - parameter javaCompilerTargetVM: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo> 
     */
    open class func orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, javaClassdebuginfo: Bool? = nil, javaJavaEncoding: String? = nil, javaCompilerSourceVM: String? = nil, javaCompilerTargetVM: String? = nil) -> RequestBuilder<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "java.classdebuginfo": javaClassdebuginfo, 
            "java.javaEncoding": javaJavaEncoding, 
            "java.compilerSourceVM": javaCompilerSourceVM, 
            "java.compilerTargetVM": javaCompilerTargetVM
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingJavascriptRhinoOptLevel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingJavascriptRhinoOptLevel: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingScriptingJavascriptRhinoOptLevel: orgApacheSlingScriptingJavascriptRhinoOptLevel).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingJavascriptRhinoOptLevel: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo> 
     */
    open class func orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingJavascriptRhinoOptLevel: Int? = nil) -> RequestBuilder<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.sling.scripting.javascript.rhino.optLevel": orgApacheSlingScriptingJavascriptRhinoOptLevel?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jasperCompilerTargetVM: (query)  (optional)
     - parameter jasperCompilerSourceVM: (query)  (optional)
     - parameter jasperClassdebuginfo: (query)  (optional)
     - parameter jasperEnablePooling: (query)  (optional)
     - parameter jasperIeClassId: (query)  (optional)
     - parameter jasperGenStringAsCharArray: (query)  (optional)
     - parameter jasperKeepgenerated: (query)  (optional)
     - parameter jasperMappedfile: (query)  (optional)
     - parameter jasperTrimSpaces: (query)  (optional)
     - parameter jasperDisplaySourceFragments: (query)  (optional)
     - parameter defaultIsSession: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingScriptingJspJspScriptEngineFactory(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jasperCompilerTargetVM: String? = nil, jasperCompilerSourceVM: String? = nil, jasperClassdebuginfo: Bool? = nil, jasperEnablePooling: Bool? = nil, jasperIeClassId: String? = nil, jasperGenStringAsCharArray: Bool? = nil, jasperKeepgenerated: Bool? = nil, jasperMappedfile: Bool? = nil, jasperTrimSpaces: Bool? = nil, jasperDisplaySourceFragments: Bool? = nil, defaultIsSession: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingScriptingJspJspScriptEngineFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jasperCompilerTargetVM: jasperCompilerTargetVM, jasperCompilerSourceVM: jasperCompilerSourceVM, jasperClassdebuginfo: jasperClassdebuginfo, jasperEnablePooling: jasperEnablePooling, jasperIeClassId: jasperIeClassId, jasperGenStringAsCharArray: jasperGenStringAsCharArray, jasperKeepgenerated: jasperKeepgenerated, jasperMappedfile: jasperMappedfile, jasperTrimSpaces: jasperTrimSpaces, jasperDisplaySourceFragments: jasperDisplaySourceFragments, defaultIsSession: defaultIsSession).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jasperCompilerTargetVM: (query)  (optional)
     - parameter jasperCompilerSourceVM: (query)  (optional)
     - parameter jasperClassdebuginfo: (query)  (optional)
     - parameter jasperEnablePooling: (query)  (optional)
     - parameter jasperIeClassId: (query)  (optional)
     - parameter jasperGenStringAsCharArray: (query)  (optional)
     - parameter jasperKeepgenerated: (query)  (optional)
     - parameter jasperMappedfile: (query)  (optional)
     - parameter jasperTrimSpaces: (query)  (optional)
     - parameter jasperDisplaySourceFragments: (query)  (optional)
     - parameter defaultIsSession: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo> 
     */
    open class func orgApacheSlingScriptingJspJspScriptEngineFactoryWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jasperCompilerTargetVM: String? = nil, jasperCompilerSourceVM: String? = nil, jasperClassdebuginfo: Bool? = nil, jasperEnablePooling: Bool? = nil, jasperIeClassId: String? = nil, jasperGenStringAsCharArray: Bool? = nil, jasperKeepgenerated: Bool? = nil, jasperMappedfile: Bool? = nil, jasperTrimSpaces: Bool? = nil, jasperDisplaySourceFragments: Bool? = nil, defaultIsSession: Bool? = nil) -> RequestBuilder<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "jasper.compilerTargetVM": jasperCompilerTargetVM, 
            "jasper.compilerSourceVM": jasperCompilerSourceVM, 
            "jasper.classdebuginfo": jasperClassdebuginfo, 
            "jasper.enablePooling": jasperEnablePooling, 
            "jasper.ieClassId": jasperIeClassId, 
            "jasper.genStringAsCharArray": jasperGenStringAsCharArray, 
            "jasper.keepgenerated": jasperKeepgenerated, 
            "jasper.mappedfile": jasperMappedfile, 
            "jasper.trimSpaces": jasperTrimSpaces, 
            "jasper.displaySourceFragments": jasperDisplaySourceFragments, 
            "default.is.session": defaultIsSession
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyJsBindings: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingSightlyJsBindings: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingScriptingSightlyJsBindings: orgApacheSlingScriptingSightlyJsBindings).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyJsBindings: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo> 
     */
    open class func orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingSightlyJsBindings: [String]? = nil) -> RequestBuilder<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "org.apache.sling.scripting.sightly.js.bindings": orgApacheSlingScriptingSightlyJsBindings
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingContentDispositionPaths: (query)  (optional)
     - parameter slingContentDispositionExcludedPaths: (query)  (optional)
     - parameter slingContentDispositionAllPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingSecurityImplContentDispositionFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingContentDispositionPaths: [String]? = nil, slingContentDispositionExcludedPaths: [String]? = nil, slingContentDispositionAllPaths: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingSecurityImplContentDispositionFilterInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingSecurityImplContentDispositionFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingContentDispositionPaths: slingContentDispositionPaths, slingContentDispositionExcludedPaths: slingContentDispositionExcludedPaths, slingContentDispositionAllPaths: slingContentDispositionAllPaths).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingContentDispositionPaths: (query)  (optional)
     - parameter slingContentDispositionExcludedPaths: (query)  (optional)
     - parameter slingContentDispositionAllPaths: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingSecurityImplContentDispositionFilterInfo> 
     */
    open class func orgApacheSlingSecurityImplContentDispositionFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingContentDispositionPaths: [String]? = nil, slingContentDispositionExcludedPaths: [String]? = nil, slingContentDispositionAllPaths: Bool? = nil) -> RequestBuilder<OrgApacheSlingSecurityImplContentDispositionFilterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.content.disposition.paths": slingContentDispositionPaths, 
            "sling.content.disposition.excluded.paths": slingContentDispositionExcludedPaths, 
            "sling.content.disposition.all.paths": slingContentDispositionAllPaths
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingSecurityImplContentDispositionFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowEmpty: (query)  (optional)
     - parameter allowHosts: (query)  (optional)
     - parameter allowHostsRegexp: (query)  (optional)
     - parameter filterMethods: (query)  (optional)
     - parameter excludeAgentsRegexp: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingSecurityImplReferrerFilter(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowEmpty: Bool? = nil, allowHosts: [String]? = nil, allowHostsRegexp: [String]? = nil, filterMethods: [String]? = nil, excludeAgentsRegexp: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingSecurityImplReferrerFilterInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingSecurityImplReferrerFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, allowEmpty: allowEmpty, allowHosts: allowHosts, allowHostsRegexp: allowHostsRegexp, filterMethods: filterMethods, excludeAgentsRegexp: excludeAgentsRegexp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowEmpty: (query)  (optional)
     - parameter allowHosts: (query)  (optional)
     - parameter allowHostsRegexp: (query)  (optional)
     - parameter filterMethods: (query)  (optional)
     - parameter excludeAgentsRegexp: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingSecurityImplReferrerFilterInfo> 
     */
    open class func orgApacheSlingSecurityImplReferrerFilterWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowEmpty: Bool? = nil, allowHosts: [String]? = nil, allowHostsRegexp: [String]? = nil, filterMethods: [String]? = nil, excludeAgentsRegexp: [String]? = nil) -> RequestBuilder<OrgApacheSlingSecurityImplReferrerFilterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "allow.empty": allowEmpty, 
            "allow.hosts": allowHosts, 
            "allow.hosts.regexp": allowHostsRegexp, 
            "filter.methods": filterMethods, 
            "exclude.agents.regexp": excludeAgentsRegexp
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingSecurityImplReferrerFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter userMapping: (query)  (optional)
     - parameter userDefault: (query)  (optional)
     - parameter userEnableDefaultMapping: (query)  (optional)
     - parameter requireValidation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, userMapping: [String]? = nil, userDefault: String? = nil, userEnableDefaultMapping: Bool? = nil, requireValidation: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingServiceusermappingImplServiceUserMapperImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, userMapping: userMapping, userDefault: userDefault, userEnableDefaultMapping: userEnableDefaultMapping, requireValidation: requireValidation).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter userMapping: (query)  (optional)
     - parameter userDefault: (query)  (optional)
     - parameter userEnableDefaultMapping: (query)  (optional)
     - parameter requireValidation: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo> 
     */
    open class func orgApacheSlingServiceusermappingImplServiceUserMapperImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, userMapping: [String]? = nil, userDefault: String? = nil, userEnableDefaultMapping: Bool? = nil, requireValidation: Bool? = nil) -> RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "user.mapping": userMapping, 
            "user.default": userDefault, 
            "user.enable.default.mapping": userEnableDefaultMapping, 
            "require.validation": requireValidation
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter userMapping: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, userMapping: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, userMapping: userMapping).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter userMapping: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo> 
     */
    open class func orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int? = nil, userMapping: [String]? = nil) -> RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo> {
        let path = "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "user.mapping": userMapping
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aliases: (query)  (optional)
     - parameter index: (query)  (optional)
     - parameter indexFiles: (query)  (optional)
     - parameter enableHtml: (query)  (optional)
     - parameter enableJson: (query)  (optional)
     - parameter enableTxt: (query)  (optional)
     - parameter enableXml: (query)  (optional)
     - parameter jsonMaximumresults: (query)  (optional)
     - parameter ecmaSuport: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingServletsGetDefaultGetServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aliases: [String]? = nil, index: Bool? = nil, indexFiles: [String]? = nil, enableHtml: Bool? = nil, enableJson: Bool? = nil, enableTxt: Bool? = nil, enableXml: Bool? = nil, jsonMaximumresults: Int? = nil, ecmaSuport: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingServletsGetDefaultGetServletInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingServletsGetDefaultGetServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, aliases: aliases, index: index, indexFiles: indexFiles, enableHtml: enableHtml, enableJson: enableJson, enableTxt: enableTxt, enableXml: enableXml, jsonMaximumresults: jsonMaximumresults, ecmaSuport: ecmaSuport).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aliases: (query)  (optional)
     - parameter index: (query)  (optional)
     - parameter indexFiles: (query)  (optional)
     - parameter enableHtml: (query)  (optional)
     - parameter enableJson: (query)  (optional)
     - parameter enableTxt: (query)  (optional)
     - parameter enableXml: (query)  (optional)
     - parameter jsonMaximumresults: (query)  (optional)
     - parameter ecmaSuport: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingServletsGetDefaultGetServletInfo> 
     */
    open class func orgApacheSlingServletsGetDefaultGetServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aliases: [String]? = nil, index: Bool? = nil, indexFiles: [String]? = nil, enableHtml: Bool? = nil, enableJson: Bool? = nil, enableTxt: Bool? = nil, enableXml: Bool? = nil, jsonMaximumresults: Int? = nil, ecmaSuport: Bool? = nil) -> RequestBuilder<OrgApacheSlingServletsGetDefaultGetServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "aliases": aliases, 
            "index": index, 
            "index.files": indexFiles, 
            "enable.html": enableHtml, 
            "enable.json": enableJson, 
            "enable.txt": enableTxt, 
            "enable.xml": enableXml, 
            "json.maximumresults": jsonMaximumresults?.encodeToJSON(), 
            "ecmaSuport": ecmaSuport
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingServletsGetDefaultGetServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter ecmaSuport: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingServletsGetImplVersionVersionInfoServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: [String]? = nil, ecmaSuport: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingServletsGetImplVersionVersionInfoServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletSelectors: slingServletSelectors, ecmaSuport: ecmaSuport).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter ecmaSuport: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo> 
     */
    open class func orgApacheSlingServletsGetImplVersionVersionInfoServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: [String]? = nil, ecmaSuport: Bool? = nil) -> RequestBuilder<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.servlet.selectors": slingServletSelectors, 
            "ecmaSuport": ecmaSuport
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter chunkCleanupAge: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, schedulerConcurrent: Bool? = nil, chunkCleanupAge: Int? = nil, completion: @escaping ((_ data: OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingServletsPostImplHelperChunkCleanUpTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, schedulerConcurrent: schedulerConcurrent, chunkCleanupAge: chunkCleanupAge).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter chunkCleanupAge: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo> 
     */
    open class func orgApacheSlingServletsPostImplHelperChunkCleanUpTaskWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, schedulerConcurrent: Bool? = nil, chunkCleanupAge: Int? = nil) -> RequestBuilder<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo> {
        let path = "/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "scheduler.expression": schedulerExpression, 
            "scheduler.concurrent": schedulerConcurrent, 
            "chunk.cleanup.age": chunkCleanupAge?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletPostDateFormats: (query)  (optional)
     - parameter servletPostNodeNameHints: (query)  (optional)
     - parameter servletPostNodeNameMaxLength: (query)  (optional)
     - parameter servletPostCheckinNewVersionableNodes: (query)  (optional)
     - parameter servletPostAutoCheckout: (query)  (optional)
     - parameter servletPostAutoCheckin: (query)  (optional)
     - parameter servletPostIgnorePattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingServletsPostImplSlingPostServlet(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletPostDateFormats: [String]? = nil, servletPostNodeNameHints: [String]? = nil, servletPostNodeNameMaxLength: Int? = nil, servletPostCheckinNewVersionableNodes: Bool? = nil, servletPostAutoCheckout: Bool? = nil, servletPostAutoCheckin: Bool? = nil, servletPostIgnorePattern: String? = nil, completion: @escaping ((_ data: OrgApacheSlingServletsPostImplSlingPostServletInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingServletsPostImplSlingPostServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, servletPostDateFormats: servletPostDateFormats, servletPostNodeNameHints: servletPostNodeNameHints, servletPostNodeNameMaxLength: servletPostNodeNameMaxLength, servletPostCheckinNewVersionableNodes: servletPostCheckinNewVersionableNodes, servletPostAutoCheckout: servletPostAutoCheckout, servletPostAutoCheckin: servletPostAutoCheckin, servletPostIgnorePattern: servletPostIgnorePattern).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletPostDateFormats: (query)  (optional)
     - parameter servletPostNodeNameHints: (query)  (optional)
     - parameter servletPostNodeNameMaxLength: (query)  (optional)
     - parameter servletPostCheckinNewVersionableNodes: (query)  (optional)
     - parameter servletPostAutoCheckout: (query)  (optional)
     - parameter servletPostAutoCheckin: (query)  (optional)
     - parameter servletPostIgnorePattern: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingServletsPostImplSlingPostServletInfo> 
     */
    open class func orgApacheSlingServletsPostImplSlingPostServletWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletPostDateFormats: [String]? = nil, servletPostNodeNameHints: [String]? = nil, servletPostNodeNameMaxLength: Int? = nil, servletPostCheckinNewVersionableNodes: Bool? = nil, servletPostAutoCheckout: Bool? = nil, servletPostAutoCheckin: Bool? = nil, servletPostIgnorePattern: String? = nil) -> RequestBuilder<OrgApacheSlingServletsPostImplSlingPostServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "servlet.post.dateFormats": servletPostDateFormats, 
            "servlet.post.nodeNameHints": servletPostNodeNameHints, 
            "servlet.post.nodeNameMaxLength": servletPostNodeNameMaxLength?.encodeToJSON(), 
            "servlet.post.checkinNewVersionableNodes": servletPostCheckinNewVersionableNodes, 
            "servlet.post.autoCheckout": servletPostAutoCheckout, 
            "servlet.post.autoCheckin": servletPostAutoCheckin, 
            "servlet.post.ignorePattern": servletPostIgnorePattern
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingServletsPostImplSlingPostServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletresolverServletRoot: (query)  (optional)
     - parameter servletresolverCacheSize: (query)  (optional)
     - parameter servletresolverPaths: (query)  (optional)
     - parameter servletresolverDefaultExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingServletsResolverSlingServletResolver(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletresolverServletRoot: String? = nil, servletresolverCacheSize: Int? = nil, servletresolverPaths: [String]? = nil, servletresolverDefaultExtensions: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingServletsResolverSlingServletResolverInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingServletsResolverSlingServletResolverWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, servletresolverServletRoot: servletresolverServletRoot, servletresolverCacheSize: servletresolverCacheSize, servletresolverPaths: servletresolverPaths, servletresolverDefaultExtensions: servletresolverDefaultExtensions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletresolverServletRoot: (query)  (optional)
     - parameter servletresolverCacheSize: (query)  (optional)
     - parameter servletresolverPaths: (query)  (optional)
     - parameter servletresolverDefaultExtensions: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingServletsResolverSlingServletResolverInfo> 
     */
    open class func orgApacheSlingServletsResolverSlingServletResolverWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletresolverServletRoot: String? = nil, servletresolverCacheSize: Int? = nil, servletresolverPaths: [String]? = nil, servletresolverDefaultExtensions: [String]? = nil) -> RequestBuilder<OrgApacheSlingServletsResolverSlingServletResolverInfo> {
        let path = "/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "servletresolver.servletRoot": servletresolverServletRoot, 
            "servletresolver.cacheSize": servletresolverCacheSize?.encodeToJSON(), 
            "servletresolver.paths": servletresolverPaths, 
            "servletresolver.defaultExtensions": servletresolverDefaultExtensions
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingServletsResolverSlingServletResolverInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingName: (query)  (optional)
     - parameter slingDescription: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingSettingsImplSlingSettingsServiceImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingName: String? = nil, slingDescription: String? = nil, completion: @escaping ((_ data: OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingSettingsImplSlingSettingsServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingName: slingName, slingDescription: slingDescription).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingName: (query)  (optional)
     - parameter slingDescription: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo> 
     */
    open class func orgApacheSlingSettingsImplSlingSettingsServiceImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingName: String? = nil, slingDescription: String? = nil) -> RequestBuilder<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "sling.name": slingName, 
            "sling.description": slingDescription
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter activeByDefault: (query)  (optional)
     - parameter defaultMessage: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingStartupfilterImplStartupFilterImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, activeByDefault: Bool? = nil, defaultMessage: String? = nil, completion: @escaping ((_ data: OrgApacheSlingStartupfilterImplStartupFilterImplInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingStartupfilterImplStartupFilterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, activeByDefault: activeByDefault, defaultMessage: defaultMessage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter activeByDefault: (query)  (optional)
     - parameter defaultMessage: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingStartupfilterImplStartupFilterImplInfo> 
     */
    open class func orgApacheSlingStartupfilterImplStartupFilterImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, activeByDefault: Bool? = nil, defaultMessage: String? = nil) -> RequestBuilder<OrgApacheSlingStartupfilterImplStartupFilterImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "active.by.default": activeByDefault, 
            "default.message": defaultMessage
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingStartupfilterImplStartupFilterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tenantRoot: (query)  (optional)
     - parameter tenantPathMatcher: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingTenantInternalTenantProviderImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tenantRoot: String? = nil, tenantPathMatcher: [String]? = nil, completion: @escaping ((_ data: OrgApacheSlingTenantInternalTenantProviderImplInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingTenantInternalTenantProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, tenantRoot: tenantRoot, tenantPathMatcher: tenantPathMatcher).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tenantRoot: (query)  (optional)
     - parameter tenantPathMatcher: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingTenantInternalTenantProviderImplInfo> 
     */
    open class func orgApacheSlingTenantInternalTenantProviderImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tenantRoot: String? = nil, tenantPathMatcher: [String]? = nil) -> RequestBuilder<OrgApacheSlingTenantInternalTenantProviderImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "tenant.root": tenantRoot, 
            "tenant.path.matcher": tenantPathMatcher
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingTenantInternalTenantProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tracerSets: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter servletEnabled: (query)  (optional)
     - parameter recordingCacheSizeInMB: (query)  (optional)
     - parameter recordingCacheDurationInSecs: (query)  (optional)
     - parameter recordingCompressionEnabled: (query)  (optional)
     - parameter gzipResponse: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingTracerInternalLogTracer(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tracerSets: [String]? = nil, enabled: Bool? = nil, servletEnabled: Bool? = nil, recordingCacheSizeInMB: Int? = nil, recordingCacheDurationInSecs: Int? = nil, recordingCompressionEnabled: Bool? = nil, gzipResponse: Bool? = nil, completion: @escaping ((_ data: OrgApacheSlingTracerInternalLogTracerInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingTracerInternalLogTracerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, tracerSets: tracerSets, enabled: enabled, servletEnabled: servletEnabled, recordingCacheSizeInMB: recordingCacheSizeInMB, recordingCacheDurationInSecs: recordingCacheDurationInSecs, recordingCompressionEnabled: recordingCompressionEnabled, gzipResponse: gzipResponse).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.tracer.internal.LogTracer
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tracerSets: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter servletEnabled: (query)  (optional)
     - parameter recordingCacheSizeInMB: (query)  (optional)
     - parameter recordingCacheDurationInSecs: (query)  (optional)
     - parameter recordingCompressionEnabled: (query)  (optional)
     - parameter gzipResponse: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingTracerInternalLogTracerInfo> 
     */
    open class func orgApacheSlingTracerInternalLogTracerWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tracerSets: [String]? = nil, enabled: Bool? = nil, servletEnabled: Bool? = nil, recordingCacheSizeInMB: Int? = nil, recordingCacheDurationInSecs: Int? = nil, recordingCompressionEnabled: Bool? = nil, gzipResponse: Bool? = nil) -> RequestBuilder<OrgApacheSlingTracerInternalLogTracerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "tracerSets": tracerSets, 
            "enabled": enabled, 
            "servletEnabled": servletEnabled, 
            "recordingCacheSizeInMB": recordingCacheSizeInMB?.encodeToJSON(), 
            "recordingCacheDurationInSecs": recordingCacheDurationInSecs?.encodeToJSON(), 
            "recordingCompressionEnabled": recordingCompressionEnabled, 
            "gzipResponse": gzipResponse
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingTracerInternalLogTracerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter policyPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgApacheSlingXssImplXSSFilterImpl(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, policyPath: String? = nil, completion: @escaping ((_ data: OrgApacheSlingXssImplXSSFilterImplInfo?,_ error: Error?) -> Void)) {
        orgApacheSlingXssImplXSSFilterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, policyPath: policyPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter policyPath: (query)  (optional)
     - returns: RequestBuilder<OrgApacheSlingXssImplXSSFilterImplInfo> 
     */
    open class func orgApacheSlingXssImplXSSFilterImplWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, policyPath: String? = nil) -> RequestBuilder<OrgApacheSlingXssImplXSSFilterImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "propertylist": propertylist, 
            "policyPath": policyPath
        ])

        let requestBuilder: RequestBuilder<OrgApacheSlingXssImplXSSFilterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
