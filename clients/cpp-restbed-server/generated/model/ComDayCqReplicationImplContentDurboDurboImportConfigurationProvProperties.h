/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties.h
 *
 * 
 */

#ifndef ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties_H_
#define ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties
{
public:
    ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties();
    virtual ~ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPreserveHierarchyNodes() const;
    void setPreserveHierarchyNodes(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getIgnoreVersioning() const;
    void setIgnoreVersioning(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getImportAcl() const;
    void setImportAcl(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSaveThreshold() const;
    void setSaveThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPreserveUserPaths() const;
    void setPreserveUserPaths(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPreserveUuid() const;
    void setPreserveUuid(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPreserveUuidNodetypes() const;
    void setPreserveUuidNodetypes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPreserveUuidSubtrees() const;
    void setPreserveUuidSubtrees(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAutoCommit() const;
    void setAutoCommit(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Preserve_hierarchy_nodes;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Ignore_versioning;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Import_acl;
    std::shared_ptr<ConfigNodePropertyInteger> m_Save_threshold;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Preserve_user_paths;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Preserve_uuid;
    std::shared_ptr<ConfigNodePropertyArray> m_Preserve_uuid_nodetypes;
    std::shared_ptr<ConfigNodePropertyArray> m_Preserve_uuid_subtrees;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Auto_commit;
};

}
}
}
}

#endif /* ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties_H_ */
