/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingStartupfilterImplStartupFilterImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingStartupfilterImplStartupFilterImplProperties::OrgApacheSlingStartupfilterImplStartupFilterImplProperties()
{
    m_Active_by_defaultIsSet = false;
    m_Default_messageIsSet = false;
}

OrgApacheSlingStartupfilterImplStartupFilterImplProperties::~OrgApacheSlingStartupfilterImplStartupFilterImplProperties()
{
}

void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingStartupfilterImplStartupFilterImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Active_by_defaultIsSet)
    {
        val[utility::conversions::to_string_t("active.by.default")] = ModelBase::toJson(m_Active_by_default);
    }
    if(m_Default_messageIsSet)
    {
        val[utility::conversions::to_string_t("default.message")] = ModelBase::toJson(m_Default_message);
    }

    return val;
}

void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("active.by.default")))
    {
        if(!val[utility::conversions::to_string_t("active.by.default")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("active.by.default")]);
            setActiveByDefault( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default.message")))
    {
        if(!val[utility::conversions::to_string_t("default.message")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("default.message")]);
            setDefaultMessage( newItem );
        }
    }
}

void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Active_by_defaultIsSet)
    {
        if (m_Active_by_default.get())
        {
            m_Active_by_default->toMultipart(multipart, utility::conversions::to_string_t("active.by.default."));
        }
    }
    if(m_Default_messageIsSet)
    {
        if (m_Default_message.get())
        {
            m_Default_message->toMultipart(multipart, utility::conversions::to_string_t("default.message."));
        }
    }
}

void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("active.by.default")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("active.by.default")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("active.by.default."));
            setActiveByDefault( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default.message")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.message")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.message."));
            setDefaultMessage( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingStartupfilterImplStartupFilterImplProperties::getActiveByDefault() const
{
    return m_Active_by_default;
}


void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::setActiveByDefault(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Active_by_default = value;
    m_Active_by_defaultIsSet = true;
}
bool OrgApacheSlingStartupfilterImplStartupFilterImplProperties::activeByDefaultIsSet() const
{
    return m_Active_by_defaultIsSet;
}

void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::unsetActive_by_default()
{
    m_Active_by_defaultIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingStartupfilterImplStartupFilterImplProperties::getDefaultMessage() const
{
    return m_Default_message;
}


void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::setDefaultMessage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Default_message = value;
    m_Default_messageIsSet = true;
}
bool OrgApacheSlingStartupfilterImplStartupFilterImplProperties::defaultMessageIsSet() const
{
    return m_Default_messageIsSet;
}

void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::unsetDefault_message()
{
    m_Default_messageIsSet = false;
}

}
}
}
}

