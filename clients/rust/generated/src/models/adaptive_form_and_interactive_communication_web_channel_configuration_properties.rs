/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
  #[serde(rename = "showPlaceholder")]
  show_placeholder: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "maximumCacheEntries")]
  maximum_cache_entries: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "af.scripting.compatversion")]
  af_scripting_compatversion: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "makeFileNameUnique")]
  make_file_name_unique: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "generatingCompliantData")]
  generating_compliant_data: Option<::models::ConfigNodePropertyBoolean>
}

impl AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
  pub fn new() -> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
    AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
      show_placeholder: None,
      maximum_cache_entries: None,
      af_scripting_compatversion: None,
      make_file_name_unique: None,
      generating_compliant_data: None
    }
  }

  pub fn set_show_placeholder(&mut self, show_placeholder: ::models::ConfigNodePropertyBoolean) {
    self.show_placeholder = Some(show_placeholder);
  }

  pub fn with_show_placeholder(mut self, show_placeholder: ::models::ConfigNodePropertyBoolean) -> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
    self.show_placeholder = Some(show_placeholder);
    self
  }

  pub fn show_placeholder(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.show_placeholder.as_ref()
  }

  pub fn reset_show_placeholder(&mut self) {
    self.show_placeholder = None;
  }

  pub fn set_maximum_cache_entries(&mut self, maximum_cache_entries: ::models::ConfigNodePropertyInteger) {
    self.maximum_cache_entries = Some(maximum_cache_entries);
  }

  pub fn with_maximum_cache_entries(mut self, maximum_cache_entries: ::models::ConfigNodePropertyInteger) -> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
    self.maximum_cache_entries = Some(maximum_cache_entries);
    self
  }

  pub fn maximum_cache_entries(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.maximum_cache_entries.as_ref()
  }

  pub fn reset_maximum_cache_entries(&mut self) {
    self.maximum_cache_entries = None;
  }

  pub fn set_af_scripting_compatversion(&mut self, af_scripting_compatversion: ::models::ConfigNodePropertyDropDown) {
    self.af_scripting_compatversion = Some(af_scripting_compatversion);
  }

  pub fn with_af_scripting_compatversion(mut self, af_scripting_compatversion: ::models::ConfigNodePropertyDropDown) -> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
    self.af_scripting_compatversion = Some(af_scripting_compatversion);
    self
  }

  pub fn af_scripting_compatversion(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.af_scripting_compatversion.as_ref()
  }

  pub fn reset_af_scripting_compatversion(&mut self) {
    self.af_scripting_compatversion = None;
  }

  pub fn set_make_file_name_unique(&mut self, make_file_name_unique: ::models::ConfigNodePropertyBoolean) {
    self.make_file_name_unique = Some(make_file_name_unique);
  }

  pub fn with_make_file_name_unique(mut self, make_file_name_unique: ::models::ConfigNodePropertyBoolean) -> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
    self.make_file_name_unique = Some(make_file_name_unique);
    self
  }

  pub fn make_file_name_unique(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.make_file_name_unique.as_ref()
  }

  pub fn reset_make_file_name_unique(&mut self) {
    self.make_file_name_unique = None;
  }

  pub fn set_generating_compliant_data(&mut self, generating_compliant_data: ::models::ConfigNodePropertyBoolean) {
    self.generating_compliant_data = Some(generating_compliant_data);
  }

  pub fn with_generating_compliant_data(mut self, generating_compliant_data: ::models::ConfigNodePropertyBoolean) -> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
    self.generating_compliant_data = Some(generating_compliant_data);
    self
  }

  pub fn generating_compliant_data(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.generating_compliant_data.as_ref()
  }

  pub fn reset_generating_compliant_data(&mut self) {
    self.generating_compliant_data = None;
  }

}



