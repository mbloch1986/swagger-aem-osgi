/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.h
 *
 * 
 */

#ifndef OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H_
#define OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties
{
public:
    OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties();
    virtual ~OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getMongouri() const;
    void setMongouri(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDb() const;
    void setDb(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSocketKeepAlive() const;
    void setSocketKeepAlive(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCache() const;
    void setCache(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getNodeCachePercentage() const;
    void setNodeCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPrevDocCachePercentage() const;
    void setPrevDocCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getChildrenCachePercentage() const;
    void setChildrenCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getDiffCachePercentage() const;
    void setDiffCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheSegmentCount() const;
    void setCacheSegmentCount(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCacheStackMoveDistance() const;
    void setCacheStackMoveDistance(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBlobCacheSize() const;
    void setBlobCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPersistentCache() const;
    void setPersistentCache(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getJournalCache() const;
    void setJournalCache(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getCustomBlobStore() const;
    void setCustomBlobStore(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getJournalGCInterval() const;
    void setJournalGCInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getJournalGCMaxAge() const;
    void setJournalGCMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPrefetchExternalChanges() const;
    void setPrefetchExternalChanges(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRole() const;
    void setRole(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getVersionGcMaxAgeInSecs() const;
    void setVersionGcMaxAgeInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getVersionGCExpression() const;
    void setVersionGCExpression(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getVersionGCTimeLimitInSecs() const;
    void setVersionGCTimeLimitInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBlobGcMaxAgeInSecs() const;
    void setBlobGcMaxAgeInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBlobTrackSnapshotIntervalInSecs() const;
    void setBlobTrackSnapshotIntervalInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRepositoryHome() const;
    void setRepositoryHome(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxReplicationLagInSecs() const;
    void setMaxReplicationLagInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getDocumentStoreType() const;
    void setDocumentStoreType(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getBundlingDisabled() const;
    void setBundlingDisabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getUpdateLimit() const;
    void setUpdateLimit(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPersistentCacheIncludes() const;
    void setPersistentCacheIncludes(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getLeaseCheckMode() const;
    void setLeaseCheckMode(std::shared_ptr<ConfigNodePropertyDropDown> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Mongouri;
    std::shared_ptr<ConfigNodePropertyString> m_Db;
    std::shared_ptr<ConfigNodePropertyBoolean> m_SocketKeepAlive;
    std::shared_ptr<ConfigNodePropertyInteger> m_Cache;
    std::shared_ptr<ConfigNodePropertyInteger> m_NodeCachePercentage;
    std::shared_ptr<ConfigNodePropertyInteger> m_PrevDocCachePercentage;
    std::shared_ptr<ConfigNodePropertyInteger> m_ChildrenCachePercentage;
    std::shared_ptr<ConfigNodePropertyInteger> m_DiffCachePercentage;
    std::shared_ptr<ConfigNodePropertyInteger> m_CacheSegmentCount;
    std::shared_ptr<ConfigNodePropertyInteger> m_CacheStackMoveDistance;
    std::shared_ptr<ConfigNodePropertyInteger> m_BlobCacheSize;
    std::shared_ptr<ConfigNodePropertyString> m_PersistentCache;
    std::shared_ptr<ConfigNodePropertyString> m_JournalCache;
    std::shared_ptr<ConfigNodePropertyBoolean> m_CustomBlobStore;
    std::shared_ptr<ConfigNodePropertyInteger> m_JournalGCInterval;
    std::shared_ptr<ConfigNodePropertyInteger> m_JournalGCMaxAge;
    std::shared_ptr<ConfigNodePropertyBoolean> m_PrefetchExternalChanges;
    std::shared_ptr<ConfigNodePropertyString> m_Role;
    std::shared_ptr<ConfigNodePropertyInteger> m_VersionGcMaxAgeInSecs;
    std::shared_ptr<ConfigNodePropertyString> m_VersionGCExpression;
    std::shared_ptr<ConfigNodePropertyInteger> m_VersionGCTimeLimitInSecs;
    std::shared_ptr<ConfigNodePropertyInteger> m_BlobGcMaxAgeInSecs;
    std::shared_ptr<ConfigNodePropertyInteger> m_BlobTrackSnapshotIntervalInSecs;
    std::shared_ptr<ConfigNodePropertyString> m_Repository_home;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxReplicationLagInSecs;
    std::shared_ptr<ConfigNodePropertyDropDown> m_DocumentStoreType;
    std::shared_ptr<ConfigNodePropertyBoolean> m_BundlingDisabled;
    std::shared_ptr<ConfigNodePropertyInteger> m_UpdateLimit;
    std::shared_ptr<ConfigNodePropertyArray> m_PersistentCacheIncludes;
    std::shared_ptr<ConfigNodePropertyDropDown> m_LeaseCheckMode;
};

}
}
}
}

#endif /* OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H_ */
