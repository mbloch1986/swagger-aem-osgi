/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqReportingImplConfigServiceImplProperties : IEquatable<ComDayCqReportingImplConfigServiceImplProperties>
    { 
        /// <summary>
        /// Gets or Sets RepconfTimezone
        /// </summary>
        [DataMember(Name="repconf.timezone")]
        public ConfigNodePropertyString RepconfTimezone { get; set; }

        /// <summary>
        /// Gets or Sets RepconfLocale
        /// </summary>
        [DataMember(Name="repconf.locale")]
        public ConfigNodePropertyString RepconfLocale { get; set; }

        /// <summary>
        /// Gets or Sets RepconfSnapshots
        /// </summary>
        [DataMember(Name="repconf.snapshots")]
        public ConfigNodePropertyString RepconfSnapshots { get; set; }

        /// <summary>
        /// Gets or Sets RepconfRepdir
        /// </summary>
        [DataMember(Name="repconf.repdir")]
        public ConfigNodePropertyString RepconfRepdir { get; set; }

        /// <summary>
        /// Gets or Sets RepconfHourofday
        /// </summary>
        [DataMember(Name="repconf.hourofday")]
        public ConfigNodePropertyInteger RepconfHourofday { get; set; }

        /// <summary>
        /// Gets or Sets RepconfMinofhour
        /// </summary>
        [DataMember(Name="repconf.minofhour")]
        public ConfigNodePropertyInteger RepconfMinofhour { get; set; }

        /// <summary>
        /// Gets or Sets RepconfMaxrows
        /// </summary>
        [DataMember(Name="repconf.maxrows")]
        public ConfigNodePropertyInteger RepconfMaxrows { get; set; }

        /// <summary>
        /// Gets or Sets RepconfFakedata
        /// </summary>
        [DataMember(Name="repconf.fakedata")]
        public ConfigNodePropertyBoolean RepconfFakedata { get; set; }

        /// <summary>
        /// Gets or Sets RepconfSnapshotuser
        /// </summary>
        [DataMember(Name="repconf.snapshotuser")]
        public ConfigNodePropertyString RepconfSnapshotuser { get; set; }

        /// <summary>
        /// Gets or Sets RepconfEnforcesnapshotuser
        /// </summary>
        [DataMember(Name="repconf.enforcesnapshotuser")]
        public ConfigNodePropertyBoolean RepconfEnforcesnapshotuser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqReportingImplConfigServiceImplProperties {\n");
            sb.Append("  RepconfTimezone: ").Append(RepconfTimezone).Append("\n");
            sb.Append("  RepconfLocale: ").Append(RepconfLocale).Append("\n");
            sb.Append("  RepconfSnapshots: ").Append(RepconfSnapshots).Append("\n");
            sb.Append("  RepconfRepdir: ").Append(RepconfRepdir).Append("\n");
            sb.Append("  RepconfHourofday: ").Append(RepconfHourofday).Append("\n");
            sb.Append("  RepconfMinofhour: ").Append(RepconfMinofhour).Append("\n");
            sb.Append("  RepconfMaxrows: ").Append(RepconfMaxrows).Append("\n");
            sb.Append("  RepconfFakedata: ").Append(RepconfFakedata).Append("\n");
            sb.Append("  RepconfSnapshotuser: ").Append(RepconfSnapshotuser).Append("\n");
            sb.Append("  RepconfEnforcesnapshotuser: ").Append(RepconfEnforcesnapshotuser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqReportingImplConfigServiceImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqReportingImplConfigServiceImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqReportingImplConfigServiceImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqReportingImplConfigServiceImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RepconfTimezone == other.RepconfTimezone ||
                    RepconfTimezone != null &&
                    RepconfTimezone.Equals(other.RepconfTimezone)
                ) && 
                (
                    RepconfLocale == other.RepconfLocale ||
                    RepconfLocale != null &&
                    RepconfLocale.Equals(other.RepconfLocale)
                ) && 
                (
                    RepconfSnapshots == other.RepconfSnapshots ||
                    RepconfSnapshots != null &&
                    RepconfSnapshots.Equals(other.RepconfSnapshots)
                ) && 
                (
                    RepconfRepdir == other.RepconfRepdir ||
                    RepconfRepdir != null &&
                    RepconfRepdir.Equals(other.RepconfRepdir)
                ) && 
                (
                    RepconfHourofday == other.RepconfHourofday ||
                    RepconfHourofday != null &&
                    RepconfHourofday.Equals(other.RepconfHourofday)
                ) && 
                (
                    RepconfMinofhour == other.RepconfMinofhour ||
                    RepconfMinofhour != null &&
                    RepconfMinofhour.Equals(other.RepconfMinofhour)
                ) && 
                (
                    RepconfMaxrows == other.RepconfMaxrows ||
                    RepconfMaxrows != null &&
                    RepconfMaxrows.Equals(other.RepconfMaxrows)
                ) && 
                (
                    RepconfFakedata == other.RepconfFakedata ||
                    RepconfFakedata != null &&
                    RepconfFakedata.Equals(other.RepconfFakedata)
                ) && 
                (
                    RepconfSnapshotuser == other.RepconfSnapshotuser ||
                    RepconfSnapshotuser != null &&
                    RepconfSnapshotuser.Equals(other.RepconfSnapshotuser)
                ) && 
                (
                    RepconfEnforcesnapshotuser == other.RepconfEnforcesnapshotuser ||
                    RepconfEnforcesnapshotuser != null &&
                    RepconfEnforcesnapshotuser.Equals(other.RepconfEnforcesnapshotuser)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RepconfTimezone != null)
                    hashCode = hashCode * 59 + RepconfTimezone.GetHashCode();
                    if (RepconfLocale != null)
                    hashCode = hashCode * 59 + RepconfLocale.GetHashCode();
                    if (RepconfSnapshots != null)
                    hashCode = hashCode * 59 + RepconfSnapshots.GetHashCode();
                    if (RepconfRepdir != null)
                    hashCode = hashCode * 59 + RepconfRepdir.GetHashCode();
                    if (RepconfHourofday != null)
                    hashCode = hashCode * 59 + RepconfHourofday.GetHashCode();
                    if (RepconfMinofhour != null)
                    hashCode = hashCode * 59 + RepconfMinofhour.GetHashCode();
                    if (RepconfMaxrows != null)
                    hashCode = hashCode * 59 + RepconfMaxrows.GetHashCode();
                    if (RepconfFakedata != null)
                    hashCode = hashCode * 59 + RepconfFakedata.GetHashCode();
                    if (RepconfSnapshotuser != null)
                    hashCode = hashCode * 59 + RepconfSnapshotuser.GetHashCode();
                    if (RepconfEnforcesnapshotuser != null)
                    hashCode = hashCode * 59 + RepconfEnforcesnapshotuser.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqReportingImplConfigServiceImplProperties left, ComDayCqReportingImplConfigServiceImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqReportingImplConfigServiceImplProperties left, ComDayCqReportingImplConfigServiceImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
