/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties()
{
    m_NameIsSet = false;
    m_MinPoolSizeIsSet = false;
    m_MaxPoolSizeIsSet = false;
    m_QueueSizeIsSet = false;
    m_MaxThreadAgeIsSet = false;
    m_KeepAliveTimeIsSet = false;
    m_BlockPolicyIsSet = false;
    m_ShutdownGracefulIsSet = false;
    m_DaemonIsSet = false;
    m_ShutdownWaitTimeIsSet = false;
    m_PriorityIsSet = false;
    
}

OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::~OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties()
{
}

void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_MinPoolSizeIsSet)
    {
        val["minPoolSize"] = ModelBase::toJson(m_MinPoolSize);
    }
    if(m_MaxPoolSizeIsSet)
    {
        val["maxPoolSize"] = ModelBase::toJson(m_MaxPoolSize);
    }
    if(m_QueueSizeIsSet)
    {
        val["queueSize"] = ModelBase::toJson(m_QueueSize);
    }
    if(m_MaxThreadAgeIsSet)
    {
        val["maxThreadAge"] = ModelBase::toJson(m_MaxThreadAge);
    }
    if(m_KeepAliveTimeIsSet)
    {
        val["keepAliveTime"] = ModelBase::toJson(m_KeepAliveTime);
    }
    if(m_BlockPolicyIsSet)
    {
        val["blockPolicy"] = ModelBase::toJson(m_BlockPolicy);
    }
    if(m_ShutdownGracefulIsSet)
    {
        val["shutdownGraceful"] = ModelBase::toJson(m_ShutdownGraceful);
    }
    if(m_DaemonIsSet)
    {
        val["daemon"] = ModelBase::toJson(m_Daemon);
    }
    if(m_ShutdownWaitTimeIsSet)
    {
        val["shutdownWaitTime"] = ModelBase::toJson(m_ShutdownWaitTime);
    }
    if(m_PriorityIsSet)
    {
        val["priority"] = ModelBase::toJson(m_Priority);
    }
    

    return val;
}

void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("minPoolSize") != val.end())
    {
        if(!val["minPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["minPoolSize"]);
            setMinPoolSize( newItem );
        }
        
    }
    if(val.find("maxPoolSize") != val.end())
    {
        if(!val["maxPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxPoolSize"]);
            setMaxPoolSize( newItem );
        }
        
    }
    if(val.find("queueSize") != val.end())
    {
        if(!val["queueSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["queueSize"]);
            setQueueSize( newItem );
        }
        
    }
    if(val.find("maxThreadAge") != val.end())
    {
        if(!val["maxThreadAge"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxThreadAge"]);
            setMaxThreadAge( newItem );
        }
        
    }
    if(val.find("keepAliveTime") != val.end())
    {
        if(!val["keepAliveTime"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["keepAliveTime"]);
            setKeepAliveTime( newItem );
        }
        
    }
    if(val.find("blockPolicy") != val.end())
    {
        if(!val["blockPolicy"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["blockPolicy"]);
            setBlockPolicy( newItem );
        }
        
    }
    if(val.find("shutdownGraceful") != val.end())
    {
        if(!val["shutdownGraceful"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["shutdownGraceful"]);
            setShutdownGraceful( newItem );
        }
        
    }
    if(val.find("daemon") != val.end())
    {
        if(!val["daemon"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["daemon"]);
            setDaemon( newItem );
        }
        
    }
    if(val.find("shutdownWaitTime") != val.end())
    {
        if(!val["shutdownWaitTime"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["shutdownWaitTime"]);
            setShutdownWaitTime( newItem );
        }
        
    }
    if(val.find("priority") != val.end())
    {
        if(!val["priority"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["priority"]);
            setPriority( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getName() const
{
    return m_Name;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setName(ConfigNodePropertyString const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::nameIsSet() const
{
    return m_NameIsSet;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::unsetName()
{
    m_NameIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMinPoolSize() const
{
    return m_MinPoolSize;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMinPoolSize(ConfigNodePropertyInteger const& value)
{
    m_MinPoolSize = value;
    m_MinPoolSizeIsSet = true;
}
bool OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::minPoolSizeIsSet() const
{
    return m_MinPoolSizeIsSet;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::unsetMinPoolSize()
{
    m_MinPoolSizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMaxPoolSize() const
{
    return m_MaxPoolSize;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMaxPoolSize(ConfigNodePropertyInteger const& value)
{
    m_MaxPoolSize = value;
    m_MaxPoolSizeIsSet = true;
}
bool OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::maxPoolSizeIsSet() const
{
    return m_MaxPoolSizeIsSet;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::unsetMaxPoolSize()
{
    m_MaxPoolSizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getQueueSize() const
{
    return m_QueueSize;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setQueueSize(ConfigNodePropertyInteger const& value)
{
    m_QueueSize = value;
    m_QueueSizeIsSet = true;
}
bool OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::queueSizeIsSet() const
{
    return m_QueueSizeIsSet;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::unsetQueueSize()
{
    m_QueueSizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getMaxThreadAge() const
{
    return m_MaxThreadAge;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setMaxThreadAge(ConfigNodePropertyInteger const& value)
{
    m_MaxThreadAge = value;
    m_MaxThreadAgeIsSet = true;
}
bool OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::maxThreadAgeIsSet() const
{
    return m_MaxThreadAgeIsSet;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::unsetMaxThreadAge()
{
    m_MaxThreadAgeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getKeepAliveTime() const
{
    return m_KeepAliveTime;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setKeepAliveTime(ConfigNodePropertyInteger const& value)
{
    m_KeepAliveTime = value;
    m_KeepAliveTimeIsSet = true;
}
bool OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::keepAliveTimeIsSet() const
{
    return m_KeepAliveTimeIsSet;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::unsetKeepAliveTime()
{
    m_KeepAliveTimeIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getBlockPolicy() const
{
    return m_BlockPolicy;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setBlockPolicy(ConfigNodePropertyDropDown const& value)
{
    m_BlockPolicy = value;
    m_BlockPolicyIsSet = true;
}
bool OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::blockPolicyIsSet() const
{
    return m_BlockPolicyIsSet;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::unsetBlockPolicy()
{
    m_BlockPolicyIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getShutdownGraceful() const
{
    return m_ShutdownGraceful;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setShutdownGraceful(ConfigNodePropertyBoolean const& value)
{
    m_ShutdownGraceful = value;
    m_ShutdownGracefulIsSet = true;
}
bool OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::shutdownGracefulIsSet() const
{
    return m_ShutdownGracefulIsSet;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::unsetShutdownGraceful()
{
    m_ShutdownGracefulIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getDaemon() const
{
    return m_Daemon;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setDaemon(ConfigNodePropertyBoolean const& value)
{
    m_Daemon = value;
    m_DaemonIsSet = true;
}
bool OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::daemonIsSet() const
{
    return m_DaemonIsSet;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::unsetDaemon()
{
    m_DaemonIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getShutdownWaitTime() const
{
    return m_ShutdownWaitTime;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setShutdownWaitTime(ConfigNodePropertyInteger const& value)
{
    m_ShutdownWaitTime = value;
    m_ShutdownWaitTimeIsSet = true;
}
bool OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::shutdownWaitTimeIsSet() const
{
    return m_ShutdownWaitTimeIsSet;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::unsetShutdownWaitTime()
{
    m_ShutdownWaitTimeIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::getPriority() const
{
    return m_Priority;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::setPriority(ConfigNodePropertyDropDown const& value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}
bool OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::priorityIsSet() const
{
    return m_PriorityIsSet;
}
void OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties::unsetPriority()
{
    m_PriorityIsSet = false;
}

}
}
}
}

