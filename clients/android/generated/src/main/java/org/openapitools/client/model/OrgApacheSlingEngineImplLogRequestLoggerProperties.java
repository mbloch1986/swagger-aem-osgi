/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyDropDown;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OrgApacheSlingEngineImplLogRequestLoggerProperties {
  
  @SerializedName("request.log.output")
  private ConfigNodePropertyString requestLogOutput = null;
  @SerializedName("request.log.outputtype")
  private ConfigNodePropertyDropDown requestLogOutputtype = null;
  @SerializedName("request.log.enabled")
  private ConfigNodePropertyBoolean requestLogEnabled = null;
  @SerializedName("access.log.output")
  private ConfigNodePropertyString accessLogOutput = null;
  @SerializedName("access.log.outputtype")
  private ConfigNodePropertyDropDown accessLogOutputtype = null;
  @SerializedName("access.log.enabled")
  private ConfigNodePropertyBoolean accessLogEnabled = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getRequestLogOutput() {
    return requestLogOutput;
  }
  public void setRequestLogOutput(ConfigNodePropertyString requestLogOutput) {
    this.requestLogOutput = requestLogOutput;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyDropDown getRequestLogOutputtype() {
    return requestLogOutputtype;
  }
  public void setRequestLogOutputtype(ConfigNodePropertyDropDown requestLogOutputtype) {
    this.requestLogOutputtype = requestLogOutputtype;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getRequestLogEnabled() {
    return requestLogEnabled;
  }
  public void setRequestLogEnabled(ConfigNodePropertyBoolean requestLogEnabled) {
    this.requestLogEnabled = requestLogEnabled;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getAccessLogOutput() {
    return accessLogOutput;
  }
  public void setAccessLogOutput(ConfigNodePropertyString accessLogOutput) {
    this.accessLogOutput = accessLogOutput;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyDropDown getAccessLogOutputtype() {
    return accessLogOutputtype;
  }
  public void setAccessLogOutputtype(ConfigNodePropertyDropDown accessLogOutputtype) {
    this.accessLogOutputtype = accessLogOutputtype;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getAccessLogEnabled() {
    return accessLogEnabled;
  }
  public void setAccessLogEnabled(ConfigNodePropertyBoolean accessLogEnabled) {
    this.accessLogEnabled = accessLogEnabled;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheSlingEngineImplLogRequestLoggerProperties orgApacheSlingEngineImplLogRequestLoggerProperties = (OrgApacheSlingEngineImplLogRequestLoggerProperties) o;
    return (this.requestLogOutput == null ? orgApacheSlingEngineImplLogRequestLoggerProperties.requestLogOutput == null : this.requestLogOutput.equals(orgApacheSlingEngineImplLogRequestLoggerProperties.requestLogOutput)) &&
        (this.requestLogOutputtype == null ? orgApacheSlingEngineImplLogRequestLoggerProperties.requestLogOutputtype == null : this.requestLogOutputtype.equals(orgApacheSlingEngineImplLogRequestLoggerProperties.requestLogOutputtype)) &&
        (this.requestLogEnabled == null ? orgApacheSlingEngineImplLogRequestLoggerProperties.requestLogEnabled == null : this.requestLogEnabled.equals(orgApacheSlingEngineImplLogRequestLoggerProperties.requestLogEnabled)) &&
        (this.accessLogOutput == null ? orgApacheSlingEngineImplLogRequestLoggerProperties.accessLogOutput == null : this.accessLogOutput.equals(orgApacheSlingEngineImplLogRequestLoggerProperties.accessLogOutput)) &&
        (this.accessLogOutputtype == null ? orgApacheSlingEngineImplLogRequestLoggerProperties.accessLogOutputtype == null : this.accessLogOutputtype.equals(orgApacheSlingEngineImplLogRequestLoggerProperties.accessLogOutputtype)) &&
        (this.accessLogEnabled == null ? orgApacheSlingEngineImplLogRequestLoggerProperties.accessLogEnabled == null : this.accessLogEnabled.equals(orgApacheSlingEngineImplLogRequestLoggerProperties.accessLogEnabled));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.requestLogOutput == null ? 0: this.requestLogOutput.hashCode());
    result = 31 * result + (this.requestLogOutputtype == null ? 0: this.requestLogOutputtype.hashCode());
    result = 31 * result + (this.requestLogEnabled == null ? 0: this.requestLogEnabled.hashCode());
    result = 31 * result + (this.accessLogOutput == null ? 0: this.accessLogOutput.hashCode());
    result = 31 * result + (this.accessLogOutputtype == null ? 0: this.accessLogOutputtype.hashCode());
    result = 31 * result + (this.accessLogEnabled == null ? 0: this.accessLogEnabled.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheSlingEngineImplLogRequestLoggerProperties {\n");
    
    sb.append("  requestLogOutput: ").append(requestLogOutput).append("\n");
    sb.append("  requestLogOutputtype: ").append(requestLogOutputtype).append("\n");
    sb.append("  requestLogEnabled: ").append(requestLogEnabled).append("\n");
    sb.append("  accessLogOutput: ").append(accessLogOutput).append("\n");
    sb.append("  accessLogOutputtype: ").append(accessLogOutputtype).append("\n");
    sb.append("  accessLogEnabled: ").append(accessLogEnabled).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
