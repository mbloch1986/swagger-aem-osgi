/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplServletBatchMetadataServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplServletBatchMetadataServletProperties::ComDayCqDamCoreImplServletBatchMetadataServletProperties()
{
    m_Cq_dam_batch_metadata_asset_defaultIsSet = false;
    m_Cq_dam_batch_metadata_collection_defaultIsSet = false;
    m_Cq_dam_batch_metadata_maxresourcesIsSet = false;
}

ComDayCqDamCoreImplServletBatchMetadataServletProperties::~ComDayCqDamCoreImplServletBatchMetadataServletProperties()
{
}

void ComDayCqDamCoreImplServletBatchMetadataServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplServletBatchMetadataServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_batch_metadata_asset_defaultIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.batch.metadata.asset.default")] = ModelBase::toJson(m_Cq_dam_batch_metadata_asset_default);
    }
    if(m_Cq_dam_batch_metadata_collection_defaultIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.batch.metadata.collection.default")] = ModelBase::toJson(m_Cq_dam_batch_metadata_collection_default);
    }
    if(m_Cq_dam_batch_metadata_maxresourcesIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.batch.metadata.maxresources")] = ModelBase::toJson(m_Cq_dam_batch_metadata_maxresources);
    }

    return val;
}

void ComDayCqDamCoreImplServletBatchMetadataServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.batch.metadata.asset.default")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.batch.metadata.asset.default")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.batch.metadata.asset.default")]);
            setCqDamBatchMetadataAssetDefault( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.batch.metadata.collection.default")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.batch.metadata.collection.default")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.batch.metadata.collection.default")]);
            setCqDamBatchMetadataCollectionDefault( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.batch.metadata.maxresources")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.batch.metadata.maxresources")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.batch.metadata.maxresources")]);
            setCqDamBatchMetadataMaxresources( newItem );
        }
    }
}

void ComDayCqDamCoreImplServletBatchMetadataServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_batch_metadata_asset_defaultIsSet)
    {
        if (m_Cq_dam_batch_metadata_asset_default.get())
        {
            m_Cq_dam_batch_metadata_asset_default->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.batch.metadata.asset.default."));
        }
    }
    if(m_Cq_dam_batch_metadata_collection_defaultIsSet)
    {
        if (m_Cq_dam_batch_metadata_collection_default.get())
        {
            m_Cq_dam_batch_metadata_collection_default->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.batch.metadata.collection.default."));
        }
    }
    if(m_Cq_dam_batch_metadata_maxresourcesIsSet)
    {
        if (m_Cq_dam_batch_metadata_maxresources.get())
        {
            m_Cq_dam_batch_metadata_maxresources->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.batch.metadata.maxresources."));
        }
    }
}

void ComDayCqDamCoreImplServletBatchMetadataServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.batch.metadata.asset.default")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.batch.metadata.asset.default")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.batch.metadata.asset.default."));
            setCqDamBatchMetadataAssetDefault( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.batch.metadata.collection.default")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.batch.metadata.collection.default")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.batch.metadata.collection.default."));
            setCqDamBatchMetadataCollectionDefault( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.batch.metadata.maxresources")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.batch.metadata.maxresources")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.batch.metadata.maxresources."));
            setCqDamBatchMetadataMaxresources( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqDamCoreImplServletBatchMetadataServletProperties::getCqDamBatchMetadataAssetDefault() const
{
    return m_Cq_dam_batch_metadata_asset_default;
}


void ComDayCqDamCoreImplServletBatchMetadataServletProperties::setCqDamBatchMetadataAssetDefault(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_dam_batch_metadata_asset_default = value;
    m_Cq_dam_batch_metadata_asset_defaultIsSet = true;
}
bool ComDayCqDamCoreImplServletBatchMetadataServletProperties::cqDamBatchMetadataAssetDefaultIsSet() const
{
    return m_Cq_dam_batch_metadata_asset_defaultIsSet;
}

void ComDayCqDamCoreImplServletBatchMetadataServletProperties::unsetCq_dam_batch_metadata_asset_default()
{
    m_Cq_dam_batch_metadata_asset_defaultIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqDamCoreImplServletBatchMetadataServletProperties::getCqDamBatchMetadataCollectionDefault() const
{
    return m_Cq_dam_batch_metadata_collection_default;
}


void ComDayCqDamCoreImplServletBatchMetadataServletProperties::setCqDamBatchMetadataCollectionDefault(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_dam_batch_metadata_collection_default = value;
    m_Cq_dam_batch_metadata_collection_defaultIsSet = true;
}
bool ComDayCqDamCoreImplServletBatchMetadataServletProperties::cqDamBatchMetadataCollectionDefaultIsSet() const
{
    return m_Cq_dam_batch_metadata_collection_defaultIsSet;
}

void ComDayCqDamCoreImplServletBatchMetadataServletProperties::unsetCq_dam_batch_metadata_collection_default()
{
    m_Cq_dam_batch_metadata_collection_defaultIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplServletBatchMetadataServletProperties::getCqDamBatchMetadataMaxresources() const
{
    return m_Cq_dam_batch_metadata_maxresources;
}


void ComDayCqDamCoreImplServletBatchMetadataServletProperties::setCqDamBatchMetadataMaxresources(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_batch_metadata_maxresources = value;
    m_Cq_dam_batch_metadata_maxresourcesIsSet = true;
}
bool ComDayCqDamCoreImplServletBatchMetadataServletProperties::cqDamBatchMetadataMaxresourcesIsSet() const
{
    return m_Cq_dam_batch_metadata_maxresourcesIsSet;
}

void ComDayCqDamCoreImplServletBatchMetadataServletProperties::unsetCq_dam_batch_metadata_maxresources()
{
    m_Cq_dam_batch_metadata_maxresourcesIsSet = false;
}

}
}
}
}

