/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqCommonsImplExternalizerImplProperties {
  #[serde(rename = "externalizer.domains")]
  externalizer_domains: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "externalizer.host")]
  externalizer_host: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "externalizer.contextpath")]
  externalizer_contextpath: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "externalizer.encodedpath")]
  externalizer_encodedpath: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqCommonsImplExternalizerImplProperties {
  pub fn new() -> ComDayCqCommonsImplExternalizerImplProperties {
    ComDayCqCommonsImplExternalizerImplProperties {
      externalizer_domains: None,
      externalizer_host: None,
      externalizer_contextpath: None,
      externalizer_encodedpath: None
    }
  }

  pub fn set_externalizer_domains(&mut self, externalizer_domains: ::models::ConfigNodePropertyArray) {
    self.externalizer_domains = Some(externalizer_domains);
  }

  pub fn with_externalizer_domains(mut self, externalizer_domains: ::models::ConfigNodePropertyArray) -> ComDayCqCommonsImplExternalizerImplProperties {
    self.externalizer_domains = Some(externalizer_domains);
    self
  }

  pub fn externalizer_domains(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.externalizer_domains.as_ref()
  }

  pub fn reset_externalizer_domains(&mut self) {
    self.externalizer_domains = None;
  }

  pub fn set_externalizer_host(&mut self, externalizer_host: ::models::ConfigNodePropertyString) {
    self.externalizer_host = Some(externalizer_host);
  }

  pub fn with_externalizer_host(mut self, externalizer_host: ::models::ConfigNodePropertyString) -> ComDayCqCommonsImplExternalizerImplProperties {
    self.externalizer_host = Some(externalizer_host);
    self
  }

  pub fn externalizer_host(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.externalizer_host.as_ref()
  }

  pub fn reset_externalizer_host(&mut self) {
    self.externalizer_host = None;
  }

  pub fn set_externalizer_contextpath(&mut self, externalizer_contextpath: ::models::ConfigNodePropertyString) {
    self.externalizer_contextpath = Some(externalizer_contextpath);
  }

  pub fn with_externalizer_contextpath(mut self, externalizer_contextpath: ::models::ConfigNodePropertyString) -> ComDayCqCommonsImplExternalizerImplProperties {
    self.externalizer_contextpath = Some(externalizer_contextpath);
    self
  }

  pub fn externalizer_contextpath(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.externalizer_contextpath.as_ref()
  }

  pub fn reset_externalizer_contextpath(&mut self) {
    self.externalizer_contextpath = None;
  }

  pub fn set_externalizer_encodedpath(&mut self, externalizer_encodedpath: ::models::ConfigNodePropertyBoolean) {
    self.externalizer_encodedpath = Some(externalizer_encodedpath);
  }

  pub fn with_externalizer_encodedpath(mut self, externalizer_encodedpath: ::models::ConfigNodePropertyBoolean) -> ComDayCqCommonsImplExternalizerImplProperties {
    self.externalizer_encodedpath = Some(externalizer_encodedpath);
    self
  }

  pub fn externalizer_encodedpath(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.externalizer_encodedpath.as_ref()
  }

  pub fn reset_externalizer_encodedpath(&mut self) {
    self.externalizer_encodedpath = None;
  }

}



