/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCoreImplMissingMetadataNotificationJobProperties : IEquatable<ComDayCqDamCoreImplMissingMetadataNotificationJobProperties>
    { 
        /// <summary>
        /// Gets or Sets CqDamMissingmetadataNotificationSchedulerIstimebased
        /// </summary>
        [DataMember(Name="cq.dam.missingmetadata.notification.scheduler.istimebased")]
        public ConfigNodePropertyBoolean CqDamMissingmetadataNotificationSchedulerIstimebased { get; set; }

        /// <summary>
        /// Gets or Sets CqDamMissingmetadataNotificationSchedulerTimebasedRule
        /// </summary>
        [DataMember(Name="cq.dam.missingmetadata.notification.scheduler.timebased.rule")]
        public ConfigNodePropertyString CqDamMissingmetadataNotificationSchedulerTimebasedRule { get; set; }

        /// <summary>
        /// Gets or Sets CqDamMissingmetadataNotificationSchedulerPeriodRule
        /// </summary>
        [DataMember(Name="cq.dam.missingmetadata.notification.scheduler.period.rule")]
        public ConfigNodePropertyInteger CqDamMissingmetadataNotificationSchedulerPeriodRule { get; set; }

        /// <summary>
        /// Gets or Sets CqDamMissingmetadataNotificationRecipient
        /// </summary>
        [DataMember(Name="cq.dam.missingmetadata.notification.recipient")]
        public ConfigNodePropertyString CqDamMissingmetadataNotificationRecipient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCoreImplMissingMetadataNotificationJobProperties {\n");
            sb.Append("  CqDamMissingmetadataNotificationSchedulerIstimebased: ").Append(CqDamMissingmetadataNotificationSchedulerIstimebased).Append("\n");
            sb.Append("  CqDamMissingmetadataNotificationSchedulerTimebasedRule: ").Append(CqDamMissingmetadataNotificationSchedulerTimebasedRule).Append("\n");
            sb.Append("  CqDamMissingmetadataNotificationSchedulerPeriodRule: ").Append(CqDamMissingmetadataNotificationSchedulerPeriodRule).Append("\n");
            sb.Append("  CqDamMissingmetadataNotificationRecipient: ").Append(CqDamMissingmetadataNotificationRecipient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqDamCoreImplMissingMetadataNotificationJobProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCoreImplMissingMetadataNotificationJobProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqDamCoreImplMissingMetadataNotificationJobProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCoreImplMissingMetadataNotificationJobProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CqDamMissingmetadataNotificationSchedulerIstimebased == other.CqDamMissingmetadataNotificationSchedulerIstimebased ||
                    CqDamMissingmetadataNotificationSchedulerIstimebased != null &&
                    CqDamMissingmetadataNotificationSchedulerIstimebased.Equals(other.CqDamMissingmetadataNotificationSchedulerIstimebased)
                ) && 
                (
                    CqDamMissingmetadataNotificationSchedulerTimebasedRule == other.CqDamMissingmetadataNotificationSchedulerTimebasedRule ||
                    CqDamMissingmetadataNotificationSchedulerTimebasedRule != null &&
                    CqDamMissingmetadataNotificationSchedulerTimebasedRule.Equals(other.CqDamMissingmetadataNotificationSchedulerTimebasedRule)
                ) && 
                (
                    CqDamMissingmetadataNotificationSchedulerPeriodRule == other.CqDamMissingmetadataNotificationSchedulerPeriodRule ||
                    CqDamMissingmetadataNotificationSchedulerPeriodRule != null &&
                    CqDamMissingmetadataNotificationSchedulerPeriodRule.Equals(other.CqDamMissingmetadataNotificationSchedulerPeriodRule)
                ) && 
                (
                    CqDamMissingmetadataNotificationRecipient == other.CqDamMissingmetadataNotificationRecipient ||
                    CqDamMissingmetadataNotificationRecipient != null &&
                    CqDamMissingmetadataNotificationRecipient.Equals(other.CqDamMissingmetadataNotificationRecipient)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CqDamMissingmetadataNotificationSchedulerIstimebased != null)
                    hashCode = hashCode * 59 + CqDamMissingmetadataNotificationSchedulerIstimebased.GetHashCode();
                    if (CqDamMissingmetadataNotificationSchedulerTimebasedRule != null)
                    hashCode = hashCode * 59 + CqDamMissingmetadataNotificationSchedulerTimebasedRule.GetHashCode();
                    if (CqDamMissingmetadataNotificationSchedulerPeriodRule != null)
                    hashCode = hashCode * 59 + CqDamMissingmetadataNotificationSchedulerPeriodRule.GetHashCode();
                    if (CqDamMissingmetadataNotificationRecipient != null)
                    hashCode = hashCode * 59 + CqDamMissingmetadataNotificationRecipient.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqDamCoreImplMissingMetadataNotificationJobProperties left, ComDayCqDamCoreImplMissingMetadataNotificationJobProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqDamCoreImplMissingMetadataNotificationJobProperties left, ComDayCqDamCoreImplMissingMetadataNotificationJobProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
