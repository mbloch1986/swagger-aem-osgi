/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.ConfigNodePropertyBoolean;
import org.openapitools.client.model.ConfigNodePropertyInteger;
import org.openapitools.client.model.ConfigNodePropertyString;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
  
  @SerializedName("tokenExpiration")
  private ConfigNodePropertyString tokenExpiration = null;
  @SerializedName("tokenLength")
  private ConfigNodePropertyString tokenLength = null;
  @SerializedName("tokenRefresh")
  private ConfigNodePropertyBoolean tokenRefresh = null;
  @SerializedName("tokenCleanupThreshold")
  private ConfigNodePropertyInteger tokenCleanupThreshold = null;
  @SerializedName("passwordHashAlgorithm")
  private ConfigNodePropertyString passwordHashAlgorithm = null;
  @SerializedName("passwordHashIterations")
  private ConfigNodePropertyInteger passwordHashIterations = null;
  @SerializedName("passwordSaltSize")
  private ConfigNodePropertyInteger passwordSaltSize = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getTokenExpiration() {
    return tokenExpiration;
  }
  public void setTokenExpiration(ConfigNodePropertyString tokenExpiration) {
    this.tokenExpiration = tokenExpiration;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getTokenLength() {
    return tokenLength;
  }
  public void setTokenLength(ConfigNodePropertyString tokenLength) {
    this.tokenLength = tokenLength;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyBoolean getTokenRefresh() {
    return tokenRefresh;
  }
  public void setTokenRefresh(ConfigNodePropertyBoolean tokenRefresh) {
    this.tokenRefresh = tokenRefresh;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getTokenCleanupThreshold() {
    return tokenCleanupThreshold;
  }
  public void setTokenCleanupThreshold(ConfigNodePropertyInteger tokenCleanupThreshold) {
    this.tokenCleanupThreshold = tokenCleanupThreshold;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyString getPasswordHashAlgorithm() {
    return passwordHashAlgorithm;
  }
  public void setPasswordHashAlgorithm(ConfigNodePropertyString passwordHashAlgorithm) {
    this.passwordHashAlgorithm = passwordHashAlgorithm;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getPasswordHashIterations() {
    return passwordHashIterations;
  }
  public void setPasswordHashIterations(ConfigNodePropertyInteger passwordHashIterations) {
    this.passwordHashIterations = passwordHashIterations;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ConfigNodePropertyInteger getPasswordSaltSize() {
    return passwordSaltSize;
  }
  public void setPasswordSaltSize(ConfigNodePropertyInteger passwordSaltSize) {
    this.passwordSaltSize = passwordSaltSize;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties = (OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties) o;
    return (this.tokenExpiration == null ? orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.tokenExpiration == null : this.tokenExpiration.equals(orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.tokenExpiration)) &&
        (this.tokenLength == null ? orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.tokenLength == null : this.tokenLength.equals(orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.tokenLength)) &&
        (this.tokenRefresh == null ? orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.tokenRefresh == null : this.tokenRefresh.equals(orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.tokenRefresh)) &&
        (this.tokenCleanupThreshold == null ? orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.tokenCleanupThreshold == null : this.tokenCleanupThreshold.equals(orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.tokenCleanupThreshold)) &&
        (this.passwordHashAlgorithm == null ? orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.passwordHashAlgorithm == null : this.passwordHashAlgorithm.equals(orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.passwordHashAlgorithm)) &&
        (this.passwordHashIterations == null ? orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.passwordHashIterations == null : this.passwordHashIterations.equals(orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.passwordHashIterations)) &&
        (this.passwordSaltSize == null ? orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.passwordSaltSize == null : this.passwordSaltSize.equals(orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.passwordSaltSize));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.tokenExpiration == null ? 0: this.tokenExpiration.hashCode());
    result = 31 * result + (this.tokenLength == null ? 0: this.tokenLength.hashCode());
    result = 31 * result + (this.tokenRefresh == null ? 0: this.tokenRefresh.hashCode());
    result = 31 * result + (this.tokenCleanupThreshold == null ? 0: this.tokenCleanupThreshold.hashCode());
    result = 31 * result + (this.passwordHashAlgorithm == null ? 0: this.passwordHashAlgorithm.hashCode());
    result = 31 * result + (this.passwordHashIterations == null ? 0: this.passwordHashIterations.hashCode());
    result = 31 * result + (this.passwordSaltSize == null ? 0: this.passwordSaltSize.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {\n");
    
    sb.append("  tokenExpiration: ").append(tokenExpiration).append("\n");
    sb.append("  tokenLength: ").append(tokenLength).append("\n");
    sb.append("  tokenRefresh: ").append(tokenRefresh).append("\n");
    sb.append("  tokenCleanupThreshold: ").append(tokenCleanupThreshold).append("\n");
    sb.append("  passwordHashAlgorithm: ").append(passwordHashAlgorithm).append("\n");
    sb.append("  passwordHashIterations: ").append(passwordHashIterations).append("\n");
    sb.append("  passwordSaltSize: ").append(passwordSaltSize).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
