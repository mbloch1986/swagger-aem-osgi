/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteAcpPlatformPlatformServletProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteAcpPlatformPlatformServletProperties :  IEquatable<ComAdobeGraniteAcpPlatformPlatformServletProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteAcpPlatformPlatformServletProperties" /> class.
        /// </summary>
        /// <param name="queryLimit">queryLimit.</param>
        /// <param name="fileTypeExtensionMap">fileTypeExtensionMap.</param>
        public ComAdobeGraniteAcpPlatformPlatformServletProperties(ConfigNodePropertyInteger queryLimit = default(ConfigNodePropertyInteger), ConfigNodePropertyArray fileTypeExtensionMap = default(ConfigNodePropertyArray))
        {
            this.QueryLimit = queryLimit;
            this.FileTypeExtensionMap = fileTypeExtensionMap;
        }
        
        /// <summary>
        /// Gets or Sets QueryLimit
        /// </summary>
        [DataMember(Name="query.limit", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger QueryLimit { get; set; }

        /// <summary>
        /// Gets or Sets FileTypeExtensionMap
        /// </summary>
        [DataMember(Name="file.type.extension.map", EmitDefaultValue=false)]
        public ConfigNodePropertyArray FileTypeExtensionMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteAcpPlatformPlatformServletProperties {\n");
            sb.Append("  QueryLimit: ").Append(QueryLimit).Append("\n");
            sb.Append("  FileTypeExtensionMap: ").Append(FileTypeExtensionMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteAcpPlatformPlatformServletProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteAcpPlatformPlatformServletProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteAcpPlatformPlatformServletProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteAcpPlatformPlatformServletProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueryLimit == input.QueryLimit ||
                    (this.QueryLimit != null &&
                    this.QueryLimit.Equals(input.QueryLimit))
                ) && 
                (
                    this.FileTypeExtensionMap == input.FileTypeExtensionMap ||
                    (this.FileTypeExtensionMap != null &&
                    this.FileTypeExtensionMap.Equals(input.FileTypeExtensionMap))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueryLimit != null)
                    hashCode = hashCode * 59 + this.QueryLimit.GetHashCode();
                if (this.FileTypeExtensionMap != null)
                    hashCode = hashCode * 59 + this.FileTypeExtensionMap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
