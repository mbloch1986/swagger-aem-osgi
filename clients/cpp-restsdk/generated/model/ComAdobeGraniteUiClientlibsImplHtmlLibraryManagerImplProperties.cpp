/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties()
{
    m_Htmllibmanager_timingIsSet = false;
    m_Htmllibmanager_debug_init_jsIsSet = false;
    m_Htmllibmanager_minifyIsSet = false;
    m_Htmllibmanager_debugIsSet = false;
    m_Htmllibmanager_gzipIsSet = false;
    m_Htmllibmanager_maxDataUriSizeIsSet = false;
    m_Htmllibmanager_maxageIsSet = false;
    m_Htmllibmanager_forceCQUrlInfoIsSet = false;
    m_Htmllibmanager_defaultthemenameIsSet = false;
    m_Htmllibmanager_defaultuserthemenameIsSet = false;
    m_Htmllibmanager_clientmanagerIsSet = false;
    m_Htmllibmanager_path_listIsSet = false;
    m_Htmllibmanager_excluded_path_listIsSet = false;
    m_Htmllibmanager_processor_jsIsSet = false;
    m_Htmllibmanager_processor_cssIsSet = false;
    m_Htmllibmanager_longcache_patternsIsSet = false;
    m_Htmllibmanager_longcache_formatIsSet = false;
    m_Htmllibmanager_useFileSystemOutputCacheIsSet = false;
    m_Htmllibmanager_fileSystemOutputCacheLocationIsSet = false;
    m_Htmllibmanager_disable_replacementIsSet = false;
}

ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::~ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties()
{
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Htmllibmanager_timingIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.timing")] = ModelBase::toJson(m_Htmllibmanager_timing);
    }
    if(m_Htmllibmanager_debug_init_jsIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.debug.init.js")] = ModelBase::toJson(m_Htmllibmanager_debug_init_js);
    }
    if(m_Htmllibmanager_minifyIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.minify")] = ModelBase::toJson(m_Htmllibmanager_minify);
    }
    if(m_Htmllibmanager_debugIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.debug")] = ModelBase::toJson(m_Htmllibmanager_debug);
    }
    if(m_Htmllibmanager_gzipIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.gzip")] = ModelBase::toJson(m_Htmllibmanager_gzip);
    }
    if(m_Htmllibmanager_maxDataUriSizeIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.maxDataUriSize")] = ModelBase::toJson(m_Htmllibmanager_maxDataUriSize);
    }
    if(m_Htmllibmanager_maxageIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.maxage")] = ModelBase::toJson(m_Htmllibmanager_maxage);
    }
    if(m_Htmllibmanager_forceCQUrlInfoIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.forceCQUrlInfo")] = ModelBase::toJson(m_Htmllibmanager_forceCQUrlInfo);
    }
    if(m_Htmllibmanager_defaultthemenameIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.defaultthemename")] = ModelBase::toJson(m_Htmllibmanager_defaultthemename);
    }
    if(m_Htmllibmanager_defaultuserthemenameIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.defaultuserthemename")] = ModelBase::toJson(m_Htmllibmanager_defaultuserthemename);
    }
    if(m_Htmllibmanager_clientmanagerIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.clientmanager")] = ModelBase::toJson(m_Htmllibmanager_clientmanager);
    }
    if(m_Htmllibmanager_path_listIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.path.list")] = ModelBase::toJson(m_Htmllibmanager_path_list);
    }
    if(m_Htmllibmanager_excluded_path_listIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.excluded.path.list")] = ModelBase::toJson(m_Htmllibmanager_excluded_path_list);
    }
    if(m_Htmllibmanager_processor_jsIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.processor.js")] = ModelBase::toJson(m_Htmllibmanager_processor_js);
    }
    if(m_Htmllibmanager_processor_cssIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.processor.css")] = ModelBase::toJson(m_Htmllibmanager_processor_css);
    }
    if(m_Htmllibmanager_longcache_patternsIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.longcache.patterns")] = ModelBase::toJson(m_Htmllibmanager_longcache_patterns);
    }
    if(m_Htmllibmanager_longcache_formatIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.longcache.format")] = ModelBase::toJson(m_Htmllibmanager_longcache_format);
    }
    if(m_Htmllibmanager_useFileSystemOutputCacheIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.useFileSystemOutputCache")] = ModelBase::toJson(m_Htmllibmanager_useFileSystemOutputCache);
    }
    if(m_Htmllibmanager_fileSystemOutputCacheLocationIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.fileSystemOutputCacheLocation")] = ModelBase::toJson(m_Htmllibmanager_fileSystemOutputCacheLocation);
    }
    if(m_Htmllibmanager_disable_replacementIsSet)
    {
        val[utility::conversions::to_string_t("htmllibmanager.disable.replacement")] = ModelBase::toJson(m_Htmllibmanager_disable_replacement);
    }

    return val;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.timing")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.timing")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.timing")]);
            setHtmllibmanagerTiming( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.debug.init.js")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.debug.init.js")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.debug.init.js")]);
            setHtmllibmanagerDebugInitJs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.minify")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.minify")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.minify")]);
            setHtmllibmanagerMinify( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.debug")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.debug")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.debug")]);
            setHtmllibmanagerDebug( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.gzip")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.gzip")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.gzip")]);
            setHtmllibmanagerGzip( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.maxDataUriSize")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.maxDataUriSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.maxDataUriSize")]);
            setHtmllibmanagerMaxDataUriSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.maxage")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.maxage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.maxage")]);
            setHtmllibmanagerMaxage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.forceCQUrlInfo")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.forceCQUrlInfo")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.forceCQUrlInfo")]);
            setHtmllibmanagerForceCQUrlInfo( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.defaultthemename")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.defaultthemename")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.defaultthemename")]);
            setHtmllibmanagerDefaultthemename( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.defaultuserthemename")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.defaultuserthemename")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.defaultuserthemename")]);
            setHtmllibmanagerDefaultuserthemename( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.clientmanager")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.clientmanager")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.clientmanager")]);
            setHtmllibmanagerClientmanager( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.path.list")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.path.list")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.path.list")]);
            setHtmllibmanagerPathList( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.excluded.path.list")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.excluded.path.list")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.excluded.path.list")]);
            setHtmllibmanagerExcludedPathList( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.processor.js")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.processor.js")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.processor.js")]);
            setHtmllibmanagerProcessorJs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.processor.css")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.processor.css")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.processor.css")]);
            setHtmllibmanagerProcessorCss( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.longcache.patterns")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.longcache.patterns")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.longcache.patterns")]);
            setHtmllibmanagerLongcachePatterns( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.longcache.format")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.longcache.format")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.longcache.format")]);
            setHtmllibmanagerLongcacheFormat( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.useFileSystemOutputCache")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.useFileSystemOutputCache")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.useFileSystemOutputCache")]);
            setHtmllibmanagerUseFileSystemOutputCache( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.fileSystemOutputCacheLocation")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.fileSystemOutputCacheLocation")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.fileSystemOutputCacheLocation")]);
            setHtmllibmanagerFileSystemOutputCacheLocation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmllibmanager.disable.replacement")))
    {
        if(!val[utility::conversions::to_string_t("htmllibmanager.disable.replacement")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("htmllibmanager.disable.replacement")]);
            setHtmllibmanagerDisableReplacement( newItem );
        }
    }
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Htmllibmanager_timingIsSet)
    {
        if (m_Htmllibmanager_timing.get())
        {
            m_Htmllibmanager_timing->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.timing."));
        }
    }
    if(m_Htmllibmanager_debug_init_jsIsSet)
    {
        if (m_Htmllibmanager_debug_init_js.get())
        {
            m_Htmllibmanager_debug_init_js->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.debug.init.js."));
        }
    }
    if(m_Htmllibmanager_minifyIsSet)
    {
        if (m_Htmllibmanager_minify.get())
        {
            m_Htmllibmanager_minify->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.minify."));
        }
    }
    if(m_Htmllibmanager_debugIsSet)
    {
        if (m_Htmllibmanager_debug.get())
        {
            m_Htmllibmanager_debug->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.debug."));
        }
    }
    if(m_Htmllibmanager_gzipIsSet)
    {
        if (m_Htmllibmanager_gzip.get())
        {
            m_Htmllibmanager_gzip->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.gzip."));
        }
    }
    if(m_Htmllibmanager_maxDataUriSizeIsSet)
    {
        if (m_Htmllibmanager_maxDataUriSize.get())
        {
            m_Htmllibmanager_maxDataUriSize->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.maxDataUriSize."));
        }
    }
    if(m_Htmllibmanager_maxageIsSet)
    {
        if (m_Htmllibmanager_maxage.get())
        {
            m_Htmllibmanager_maxage->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.maxage."));
        }
    }
    if(m_Htmllibmanager_forceCQUrlInfoIsSet)
    {
        if (m_Htmllibmanager_forceCQUrlInfo.get())
        {
            m_Htmllibmanager_forceCQUrlInfo->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.forceCQUrlInfo."));
        }
    }
    if(m_Htmllibmanager_defaultthemenameIsSet)
    {
        if (m_Htmllibmanager_defaultthemename.get())
        {
            m_Htmllibmanager_defaultthemename->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.defaultthemename."));
        }
    }
    if(m_Htmllibmanager_defaultuserthemenameIsSet)
    {
        if (m_Htmllibmanager_defaultuserthemename.get())
        {
            m_Htmllibmanager_defaultuserthemename->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.defaultuserthemename."));
        }
    }
    if(m_Htmllibmanager_clientmanagerIsSet)
    {
        if (m_Htmllibmanager_clientmanager.get())
        {
            m_Htmllibmanager_clientmanager->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.clientmanager."));
        }
    }
    if(m_Htmllibmanager_path_listIsSet)
    {
        if (m_Htmllibmanager_path_list.get())
        {
            m_Htmllibmanager_path_list->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.path.list."));
        }
    }
    if(m_Htmllibmanager_excluded_path_listIsSet)
    {
        if (m_Htmllibmanager_excluded_path_list.get())
        {
            m_Htmllibmanager_excluded_path_list->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.excluded.path.list."));
        }
    }
    if(m_Htmllibmanager_processor_jsIsSet)
    {
        if (m_Htmllibmanager_processor_js.get())
        {
            m_Htmllibmanager_processor_js->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.processor.js."));
        }
    }
    if(m_Htmllibmanager_processor_cssIsSet)
    {
        if (m_Htmllibmanager_processor_css.get())
        {
            m_Htmllibmanager_processor_css->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.processor.css."));
        }
    }
    if(m_Htmllibmanager_longcache_patternsIsSet)
    {
        if (m_Htmllibmanager_longcache_patterns.get())
        {
            m_Htmllibmanager_longcache_patterns->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.longcache.patterns."));
        }
    }
    if(m_Htmllibmanager_longcache_formatIsSet)
    {
        if (m_Htmllibmanager_longcache_format.get())
        {
            m_Htmllibmanager_longcache_format->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.longcache.format."));
        }
    }
    if(m_Htmllibmanager_useFileSystemOutputCacheIsSet)
    {
        if (m_Htmllibmanager_useFileSystemOutputCache.get())
        {
            m_Htmllibmanager_useFileSystemOutputCache->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.useFileSystemOutputCache."));
        }
    }
    if(m_Htmllibmanager_fileSystemOutputCacheLocationIsSet)
    {
        if (m_Htmllibmanager_fileSystemOutputCacheLocation.get())
        {
            m_Htmllibmanager_fileSystemOutputCacheLocation->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.fileSystemOutputCacheLocation."));
        }
    }
    if(m_Htmllibmanager_disable_replacementIsSet)
    {
        if (m_Htmllibmanager_disable_replacement.get())
        {
            m_Htmllibmanager_disable_replacement->toMultipart(multipart, utility::conversions::to_string_t("htmllibmanager.disable.replacement."));
        }
    }
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.timing")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.timing")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.timing."));
            setHtmllibmanagerTiming( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.debug.init.js")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.debug.init.js")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.debug.init.js."));
            setHtmllibmanagerDebugInitJs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.minify")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.minify")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.minify."));
            setHtmllibmanagerMinify( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.debug")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.debug")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.debug."));
            setHtmllibmanagerDebug( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.gzip")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.gzip")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.gzip."));
            setHtmllibmanagerGzip( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.maxDataUriSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.maxDataUriSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.maxDataUriSize."));
            setHtmllibmanagerMaxDataUriSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.maxage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.maxage")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.maxage."));
            setHtmllibmanagerMaxage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.forceCQUrlInfo")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.forceCQUrlInfo")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.forceCQUrlInfo."));
            setHtmllibmanagerForceCQUrlInfo( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.defaultthemename")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.defaultthemename")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.defaultthemename."));
            setHtmllibmanagerDefaultthemename( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.defaultuserthemename")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.defaultuserthemename")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.defaultuserthemename."));
            setHtmllibmanagerDefaultuserthemename( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.clientmanager")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.clientmanager")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.clientmanager."));
            setHtmllibmanagerClientmanager( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.path.list")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.path.list")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.path.list."));
            setHtmllibmanagerPathList( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.excluded.path.list")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.excluded.path.list")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.excluded.path.list."));
            setHtmllibmanagerExcludedPathList( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.processor.js")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.processor.js")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.processor.js."));
            setHtmllibmanagerProcessorJs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.processor.css")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.processor.css")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.processor.css."));
            setHtmllibmanagerProcessorCss( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.longcache.patterns")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.longcache.patterns")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.longcache.patterns."));
            setHtmllibmanagerLongcachePatterns( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.longcache.format")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.longcache.format")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.longcache.format."));
            setHtmllibmanagerLongcacheFormat( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.useFileSystemOutputCache")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.useFileSystemOutputCache")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.useFileSystemOutputCache."));
            setHtmllibmanagerUseFileSystemOutputCache( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.fileSystemOutputCacheLocation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.fileSystemOutputCacheLocation")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.fileSystemOutputCacheLocation."));
            setHtmllibmanagerFileSystemOutputCacheLocation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.disable.replacement")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("htmllibmanager.disable.replacement")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("htmllibmanager.disable.replacement."));
            setHtmllibmanagerDisableReplacement( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerTiming() const
{
    return m_Htmllibmanager_timing;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerTiming(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Htmllibmanager_timing = value;
    m_Htmllibmanager_timingIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerTimingIsSet() const
{
    return m_Htmllibmanager_timingIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_timing()
{
    m_Htmllibmanager_timingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerDebugInitJs() const
{
    return m_Htmllibmanager_debug_init_js;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerDebugInitJs(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Htmllibmanager_debug_init_js = value;
    m_Htmllibmanager_debug_init_jsIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerDebugInitJsIsSet() const
{
    return m_Htmllibmanager_debug_init_jsIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_debug_init_js()
{
    m_Htmllibmanager_debug_init_jsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerMinify() const
{
    return m_Htmllibmanager_minify;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerMinify(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Htmllibmanager_minify = value;
    m_Htmllibmanager_minifyIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerMinifyIsSet() const
{
    return m_Htmllibmanager_minifyIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_minify()
{
    m_Htmllibmanager_minifyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerDebug() const
{
    return m_Htmllibmanager_debug;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerDebug(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Htmllibmanager_debug = value;
    m_Htmllibmanager_debugIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerDebugIsSet() const
{
    return m_Htmllibmanager_debugIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_debug()
{
    m_Htmllibmanager_debugIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerGzip() const
{
    return m_Htmllibmanager_gzip;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerGzip(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Htmllibmanager_gzip = value;
    m_Htmllibmanager_gzipIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerGzipIsSet() const
{
    return m_Htmllibmanager_gzipIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_gzip()
{
    m_Htmllibmanager_gzipIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerMaxDataUriSize() const
{
    return m_Htmllibmanager_maxDataUriSize;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerMaxDataUriSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Htmllibmanager_maxDataUriSize = value;
    m_Htmllibmanager_maxDataUriSizeIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerMaxDataUriSizeIsSet() const
{
    return m_Htmllibmanager_maxDataUriSizeIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_maxDataUriSize()
{
    m_Htmllibmanager_maxDataUriSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerMaxage() const
{
    return m_Htmllibmanager_maxage;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerMaxage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Htmllibmanager_maxage = value;
    m_Htmllibmanager_maxageIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerMaxageIsSet() const
{
    return m_Htmllibmanager_maxageIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_maxage()
{
    m_Htmllibmanager_maxageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerForceCQUrlInfo() const
{
    return m_Htmllibmanager_forceCQUrlInfo;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerForceCQUrlInfo(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Htmllibmanager_forceCQUrlInfo = value;
    m_Htmllibmanager_forceCQUrlInfoIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerForceCQUrlInfoIsSet() const
{
    return m_Htmllibmanager_forceCQUrlInfoIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_forceCQUrlInfo()
{
    m_Htmllibmanager_forceCQUrlInfoIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerDefaultthemename() const
{
    return m_Htmllibmanager_defaultthemename;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerDefaultthemename(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Htmllibmanager_defaultthemename = value;
    m_Htmllibmanager_defaultthemenameIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerDefaultthemenameIsSet() const
{
    return m_Htmllibmanager_defaultthemenameIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_defaultthemename()
{
    m_Htmllibmanager_defaultthemenameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerDefaultuserthemename() const
{
    return m_Htmllibmanager_defaultuserthemename;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerDefaultuserthemename(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Htmllibmanager_defaultuserthemename = value;
    m_Htmllibmanager_defaultuserthemenameIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerDefaultuserthemenameIsSet() const
{
    return m_Htmllibmanager_defaultuserthemenameIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_defaultuserthemename()
{
    m_Htmllibmanager_defaultuserthemenameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerClientmanager() const
{
    return m_Htmllibmanager_clientmanager;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerClientmanager(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Htmllibmanager_clientmanager = value;
    m_Htmllibmanager_clientmanagerIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerClientmanagerIsSet() const
{
    return m_Htmllibmanager_clientmanagerIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_clientmanager()
{
    m_Htmllibmanager_clientmanagerIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerPathList() const
{
    return m_Htmllibmanager_path_list;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerPathList(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Htmllibmanager_path_list = value;
    m_Htmllibmanager_path_listIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerPathListIsSet() const
{
    return m_Htmllibmanager_path_listIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_path_list()
{
    m_Htmllibmanager_path_listIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerExcludedPathList() const
{
    return m_Htmllibmanager_excluded_path_list;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerExcludedPathList(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Htmllibmanager_excluded_path_list = value;
    m_Htmllibmanager_excluded_path_listIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerExcludedPathListIsSet() const
{
    return m_Htmllibmanager_excluded_path_listIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_excluded_path_list()
{
    m_Htmllibmanager_excluded_path_listIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerProcessorJs() const
{
    return m_Htmllibmanager_processor_js;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerProcessorJs(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Htmllibmanager_processor_js = value;
    m_Htmllibmanager_processor_jsIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerProcessorJsIsSet() const
{
    return m_Htmllibmanager_processor_jsIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_processor_js()
{
    m_Htmllibmanager_processor_jsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerProcessorCss() const
{
    return m_Htmllibmanager_processor_css;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerProcessorCss(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Htmllibmanager_processor_css = value;
    m_Htmllibmanager_processor_cssIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerProcessorCssIsSet() const
{
    return m_Htmllibmanager_processor_cssIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_processor_css()
{
    m_Htmllibmanager_processor_cssIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerLongcachePatterns() const
{
    return m_Htmllibmanager_longcache_patterns;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerLongcachePatterns(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Htmllibmanager_longcache_patterns = value;
    m_Htmllibmanager_longcache_patternsIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerLongcachePatternsIsSet() const
{
    return m_Htmllibmanager_longcache_patternsIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_longcache_patterns()
{
    m_Htmllibmanager_longcache_patternsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerLongcacheFormat() const
{
    return m_Htmllibmanager_longcache_format;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerLongcacheFormat(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Htmllibmanager_longcache_format = value;
    m_Htmllibmanager_longcache_formatIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerLongcacheFormatIsSet() const
{
    return m_Htmllibmanager_longcache_formatIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_longcache_format()
{
    m_Htmllibmanager_longcache_formatIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerUseFileSystemOutputCache() const
{
    return m_Htmllibmanager_useFileSystemOutputCache;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerUseFileSystemOutputCache(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Htmllibmanager_useFileSystemOutputCache = value;
    m_Htmllibmanager_useFileSystemOutputCacheIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerUseFileSystemOutputCacheIsSet() const
{
    return m_Htmllibmanager_useFileSystemOutputCacheIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_useFileSystemOutputCache()
{
    m_Htmllibmanager_useFileSystemOutputCacheIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerFileSystemOutputCacheLocation() const
{
    return m_Htmllibmanager_fileSystemOutputCacheLocation;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerFileSystemOutputCacheLocation(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Htmllibmanager_fileSystemOutputCacheLocation = value;
    m_Htmllibmanager_fileSystemOutputCacheLocationIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerFileSystemOutputCacheLocationIsSet() const
{
    return m_Htmllibmanager_fileSystemOutputCacheLocationIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_fileSystemOutputCacheLocation()
{
    m_Htmllibmanager_fileSystemOutputCacheLocationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::getHtmllibmanagerDisableReplacement() const
{
    return m_Htmllibmanager_disable_replacement;
}


void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::setHtmllibmanagerDisableReplacement(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Htmllibmanager_disable_replacement = value;
    m_Htmllibmanager_disable_replacementIsSet = true;
}
bool ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::htmllibmanagerDisableReplacementIsSet() const
{
    return m_Htmllibmanager_disable_replacementIsSet;
}

void ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties::unsetHtmllibmanager_disable_replacement()
{
    m_Htmllibmanager_disable_replacementIsSet = false;
}

}
}
}
}

