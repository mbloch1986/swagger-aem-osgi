/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties.h
 *
 * 
 */

#ifndef ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties_H_
#define ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties
    : public ModelBase
{
public:
    ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties();
    virtual ~ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getEventTopics() const;
    void setEventTopics(ConfigNodePropertyString const& value);
    bool eventTopicsIsSet() const;
    void unsetEvent_topics();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getEventFilter() const;
    void setEventFilter(ConfigNodePropertyString const& value);
    bool eventFilterIsSet() const;
    void unsetEvent_filter();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getTranslateListenerType() const;
    void setTranslateListenerType(ConfigNodePropertyArray const& value);
    bool translateListenerTypeIsSet() const;
    void unsetTranslate_listener_type();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getTranslatePropertyList() const;
    void setTranslatePropertyList(ConfigNodePropertyArray const& value);
    bool translatePropertyListIsSet() const;
    void unsetTranslate_property_list();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getPoolSize() const;
    void setPoolSize(ConfigNodePropertyInteger const& value);
    bool poolSizeIsSet() const;
    void unsetPoolSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxPoolSize() const;
    void setMaxPoolSize(ConfigNodePropertyInteger const& value);
    bool maxPoolSizeIsSet() const;
    void unsetMaxPoolSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getQueueSize() const;
    void setQueueSize(ConfigNodePropertyInteger const& value);
    bool queueSizeIsSet() const;
    void unsetQueueSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getKeepAliveTime() const;
    void setKeepAliveTime(ConfigNodePropertyInteger const& value);
    bool keepAliveTimeIsSet() const;
    void unsetKeepAliveTime();

protected:
    ConfigNodePropertyString m_Event_topics;
    bool m_Event_topicsIsSet;
    ConfigNodePropertyString m_Event_filter;
    bool m_Event_filterIsSet;
    ConfigNodePropertyArray m_Translate_listener_type;
    bool m_Translate_listener_typeIsSet;
    ConfigNodePropertyArray m_Translate_property_list;
    bool m_Translate_property_listIsSet;
    ConfigNodePropertyInteger m_PoolSize;
    bool m_PoolSizeIsSet;
    ConfigNodePropertyInteger m_MaxPoolSize;
    bool m_MaxPoolSizeIsSet;
    ConfigNodePropertyInteger m_QueueSize;
    bool m_QueueSizeIsSet;
    ConfigNodePropertyInteger m_KeepAliveTime;
    bool m_KeepAliveTimeIsSet;
};

}
}
}
}

#endif /* ComAdobeCqSocialTranslationImplUGCLanguageDetectorProperties_H_ */
