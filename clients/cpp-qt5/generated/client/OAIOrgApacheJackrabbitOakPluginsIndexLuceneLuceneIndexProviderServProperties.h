/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_
#define OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties: public OAIObject {
public:
    OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties();
    OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties(QString json);
    ~OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyBoolean* getDisabled();
    void setDisabled(OAIConfigNodePropertyBoolean* disabled);

    OAIConfigNodePropertyBoolean* getDebug();
    void setDebug(OAIConfigNodePropertyBoolean* debug);

    OAIConfigNodePropertyString* getLocalIndexDir();
    void setLocalIndexDir(OAIConfigNodePropertyString* local_index_dir);

    OAIConfigNodePropertyBoolean* getEnableOpenIndexAsync();
    void setEnableOpenIndexAsync(OAIConfigNodePropertyBoolean* enable_open_index_async);

    OAIConfigNodePropertyInteger* getThreadPoolSize();
    void setThreadPoolSize(OAIConfigNodePropertyInteger* thread_pool_size);

    OAIConfigNodePropertyBoolean* getPrefetchIndexFiles();
    void setPrefetchIndexFiles(OAIConfigNodePropertyBoolean* prefetch_index_files);

    OAIConfigNodePropertyInteger* getExtractedTextCacheSizeInMb();
    void setExtractedTextCacheSizeInMb(OAIConfigNodePropertyInteger* extracted_text_cache_size_in_mb);

    OAIConfigNodePropertyInteger* getExtractedTextCacheExpiryInSecs();
    void setExtractedTextCacheExpiryInSecs(OAIConfigNodePropertyInteger* extracted_text_cache_expiry_in_secs);

    OAIConfigNodePropertyBoolean* getAlwaysUsePreExtractedCache();
    void setAlwaysUsePreExtractedCache(OAIConfigNodePropertyBoolean* always_use_pre_extracted_cache);

    OAIConfigNodePropertyInteger* getBooleanClauseLimit();
    void setBooleanClauseLimit(OAIConfigNodePropertyInteger* boolean_clause_limit);

    OAIConfigNodePropertyBoolean* getEnableHybridIndexing();
    void setEnableHybridIndexing(OAIConfigNodePropertyBoolean* enable_hybrid_indexing);

    OAIConfigNodePropertyInteger* getHybridQueueSize();
    void setHybridQueueSize(OAIConfigNodePropertyInteger* hybrid_queue_size);

    OAIConfigNodePropertyBoolean* getDisableStoredIndexDefinition();
    void setDisableStoredIndexDefinition(OAIConfigNodePropertyBoolean* disable_stored_index_definition);

    OAIConfigNodePropertyBoolean* getDeletedBlobsCollectionEnabled();
    void setDeletedBlobsCollectionEnabled(OAIConfigNodePropertyBoolean* deleted_blobs_collection_enabled);

    OAIConfigNodePropertyInteger* getPropIndexCleanerIntervalInSecs();
    void setPropIndexCleanerIntervalInSecs(OAIConfigNodePropertyInteger* prop_index_cleaner_interval_in_secs);

    OAIConfigNodePropertyBoolean* getEnableSingleBlobIndexFiles();
    void setEnableSingleBlobIndexFiles(OAIConfigNodePropertyBoolean* enable_single_blob_index_files);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyBoolean* disabled;
    bool m_disabled_isSet;

    OAIConfigNodePropertyBoolean* debug;
    bool m_debug_isSet;

    OAIConfigNodePropertyString* local_index_dir;
    bool m_local_index_dir_isSet;

    OAIConfigNodePropertyBoolean* enable_open_index_async;
    bool m_enable_open_index_async_isSet;

    OAIConfigNodePropertyInteger* thread_pool_size;
    bool m_thread_pool_size_isSet;

    OAIConfigNodePropertyBoolean* prefetch_index_files;
    bool m_prefetch_index_files_isSet;

    OAIConfigNodePropertyInteger* extracted_text_cache_size_in_mb;
    bool m_extracted_text_cache_size_in_mb_isSet;

    OAIConfigNodePropertyInteger* extracted_text_cache_expiry_in_secs;
    bool m_extracted_text_cache_expiry_in_secs_isSet;

    OAIConfigNodePropertyBoolean* always_use_pre_extracted_cache;
    bool m_always_use_pre_extracted_cache_isSet;

    OAIConfigNodePropertyInteger* boolean_clause_limit;
    bool m_boolean_clause_limit_isSet;

    OAIConfigNodePropertyBoolean* enable_hybrid_indexing;
    bool m_enable_hybrid_indexing_isSet;

    OAIConfigNodePropertyInteger* hybrid_queue_size;
    bool m_hybrid_queue_size_isSet;

    OAIConfigNodePropertyBoolean* disable_stored_index_definition;
    bool m_disable_stored_index_definition_isSet;

    OAIConfigNodePropertyBoolean* deleted_blobs_collection_enabled;
    bool m_deleted_blobs_collection_enabled_isSet;

    OAIConfigNodePropertyInteger* prop_index_cleaner_interval_in_secs;
    bool m_prop_index_cleaner_interval_in_secs_isSet;

    OAIConfigNodePropertyBoolean* enable_single_blob_index_files;
    bool m_enable_single_blob_index_files_isSet;

};

}

#endif /* OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_ */
