/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingServletsGetDefaultGetServletProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingServletsGetDefaultGetServletProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingServletsGetDefaultGetServletProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingServletsGetDefaultGetServletProperties
    : public ModelBase
{
public:
    OrgApacheSlingServletsGetDefaultGetServletProperties();
    virtual ~OrgApacheSlingServletsGetDefaultGetServletProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingServletsGetDefaultGetServletProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAliases() const;
    bool aliasesIsSet() const;
    void unsetAliases();
    void setAliases(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getIndex() const;
    bool indexIsSet() const;
    void unsetIndex();
    void setIndex(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getIndexFiles() const;
    bool indexFilesIsSet() const;
    void unsetIndex_files();
    void setIndexFiles(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableHtml() const;
    bool enableHtmlIsSet() const;
    void unsetEnable_html();
    void setEnableHtml(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableJson() const;
    bool enableJsonIsSet() const;
    void unsetEnable_json();
    void setEnableJson(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableTxt() const;
    bool enableTxtIsSet() const;
    void unsetEnable_txt();
    void setEnableTxt(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableXml() const;
    bool enableXmlIsSet() const;
    void unsetEnable_xml();
    void setEnableXml(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getJsonMaximumresults() const;
    bool jsonMaximumresultsIsSet() const;
    void unsetJson_maximumresults();
    void setJsonMaximumresults(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEcmaSuport() const;
    bool ecmaSuportIsSet() const;
    void unsetEcmaSuport();
    void setEcmaSuport(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyArray> m_Aliases;
    bool m_AliasesIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Index;
    bool m_IndexIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Index_files;
    bool m_Index_filesIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enable_html;
    bool m_Enable_htmlIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enable_json;
    bool m_Enable_jsonIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enable_txt;
    bool m_Enable_txtIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enable_xml;
    bool m_Enable_xmlIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Json_maximumresults;
    bool m_Json_maximumresultsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EcmaSuport;
    bool m_EcmaSuportIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingServletsGetDefaultGetServletProperties_H_ */
