/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties : IEquatable<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties>
    { 
        /// <summary>
        /// Gets or Sets OrgApacheSlingInstallerConfigurationPersist
        /// </summary>
        [DataMember(Name="org.apache.sling.installer.configuration.persist")]
        public ConfigNodePropertyBoolean OrgApacheSlingInstallerConfigurationPersist { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode")]
        public ConfigNodePropertyDropDown Mode { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port")]
        public ConfigNodePropertyInteger Port { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryHost
        /// </summary>
        [DataMember(Name="primary.host")]
        public ConfigNodePropertyString PrimaryHost { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name="interval")]
        public ConfigNodePropertyInteger Interval { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryAllowedClientIpRanges
        /// </summary>
        [DataMember(Name="primary.allowed-client-ip-ranges")]
        public ConfigNodePropertyArray PrimaryAllowedClientIpRanges { get; set; }

        /// <summary>
        /// Gets or Sets Secure
        /// </summary>
        [DataMember(Name="secure")]
        public ConfigNodePropertyBoolean Secure { get; set; }

        /// <summary>
        /// Gets or Sets StandbyReadtimeout
        /// </summary>
        [DataMember(Name="standby.readtimeout")]
        public ConfigNodePropertyInteger StandbyReadtimeout { get; set; }

        /// <summary>
        /// Gets or Sets StandbyAutoclean
        /// </summary>
        [DataMember(Name="standby.autoclean")]
        public ConfigNodePropertyBoolean StandbyAutoclean { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {\n");
            sb.Append("  OrgApacheSlingInstallerConfigurationPersist: ").Append(OrgApacheSlingInstallerConfigurationPersist).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  PrimaryHost: ").Append(PrimaryHost).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  PrimaryAllowedClientIpRanges: ").Append(PrimaryAllowedClientIpRanges).Append("\n");
            sb.Append("  Secure: ").Append(Secure).Append("\n");
            sb.Append("  StandbyReadtimeout: ").Append(StandbyReadtimeout).Append("\n");
            sb.Append("  StandbyAutoclean: ").Append(StandbyAutoclean).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrgApacheSlingInstallerConfigurationPersist == other.OrgApacheSlingInstallerConfigurationPersist ||
                    OrgApacheSlingInstallerConfigurationPersist != null &&
                    OrgApacheSlingInstallerConfigurationPersist.Equals(other.OrgApacheSlingInstallerConfigurationPersist)
                ) && 
                (
                    Mode == other.Mode ||
                    Mode != null &&
                    Mode.Equals(other.Mode)
                ) && 
                (
                    Port == other.Port ||
                    Port != null &&
                    Port.Equals(other.Port)
                ) && 
                (
                    PrimaryHost == other.PrimaryHost ||
                    PrimaryHost != null &&
                    PrimaryHost.Equals(other.PrimaryHost)
                ) && 
                (
                    Interval == other.Interval ||
                    Interval != null &&
                    Interval.Equals(other.Interval)
                ) && 
                (
                    PrimaryAllowedClientIpRanges == other.PrimaryAllowedClientIpRanges ||
                    PrimaryAllowedClientIpRanges != null &&
                    PrimaryAllowedClientIpRanges.Equals(other.PrimaryAllowedClientIpRanges)
                ) && 
                (
                    Secure == other.Secure ||
                    Secure != null &&
                    Secure.Equals(other.Secure)
                ) && 
                (
                    StandbyReadtimeout == other.StandbyReadtimeout ||
                    StandbyReadtimeout != null &&
                    StandbyReadtimeout.Equals(other.StandbyReadtimeout)
                ) && 
                (
                    StandbyAutoclean == other.StandbyAutoclean ||
                    StandbyAutoclean != null &&
                    StandbyAutoclean.Equals(other.StandbyAutoclean)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrgApacheSlingInstallerConfigurationPersist != null)
                    hashCode = hashCode * 59 + OrgApacheSlingInstallerConfigurationPersist.GetHashCode();
                    if (Mode != null)
                    hashCode = hashCode * 59 + Mode.GetHashCode();
                    if (Port != null)
                    hashCode = hashCode * 59 + Port.GetHashCode();
                    if (PrimaryHost != null)
                    hashCode = hashCode * 59 + PrimaryHost.GetHashCode();
                    if (Interval != null)
                    hashCode = hashCode * 59 + Interval.GetHashCode();
                    if (PrimaryAllowedClientIpRanges != null)
                    hashCode = hashCode * 59 + PrimaryAllowedClientIpRanges.GetHashCode();
                    if (Secure != null)
                    hashCode = hashCode * 59 + Secure.GetHashCode();
                    if (StandbyReadtimeout != null)
                    hashCode = hashCode * 59 + StandbyReadtimeout.GetHashCode();
                    if (StandbyAutoclean != null)
                    hashCode = hashCode * 59 + StandbyAutoclean.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties left, OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties left, OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
