#![allow(unused_imports, unused_qualifications, unused_extern_crates)]
extern crate chrono;
extern crate uuid;


use serde::ser::Serializer;

use std::collections::HashMap;
use models;
use swagger;


#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties>,

}

impl AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo {
    pub fn new() -> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo {
        AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
    #[serde(rename = "showPlaceholder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub show_placeholder: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "maximumCacheEntries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub maximum_cache_entries: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "af.scripting.compatversion")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub af_scripting_compatversion: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "makeFileNameUnique")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub make_file_name_unique: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "generatingCompliantData")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub generating_compliant_data: Option<models::ConfigNodePropertyBoolean>,

}

impl AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
    pub fn new() -> AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
        AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {
            show_placeholder: None,
            maximum_cache_entries: None,
            af_scripting_compatversion: None,
            make_file_name_unique: None,
            generating_compliant_data: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties>,

}

impl AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo {
    pub fn new() -> AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo {
        AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties {
    #[serde(rename = "fontList")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub font_list: Option<models::ConfigNodePropertyArray>,

}

impl AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties {
    pub fn new() -> AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties {
        AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurProperties {
            font_list: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct AnalyticsComponentQueryCacheServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::AnalyticsComponentQueryCacheServiceProperties>,

}

impl AnalyticsComponentQueryCacheServiceInfo {
    pub fn new() -> AnalyticsComponentQueryCacheServiceInfo {
        AnalyticsComponentQueryCacheServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct AnalyticsComponentQueryCacheServiceProperties {
    #[serde(rename = "cq.analytics.component.query.cache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_component_query_cache_size: Option<models::ConfigNodePropertyInteger>,

}

impl AnalyticsComponentQueryCacheServiceProperties {
    pub fn new() -> AnalyticsComponentQueryCacheServiceProperties {
        AnalyticsComponentQueryCacheServiceProperties {
            cq_analytics_component_query_cache_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ApacheSlingHealthCheckResultHtmlSerializerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ApacheSlingHealthCheckResultHtmlSerializerProperties>,

}

impl ApacheSlingHealthCheckResultHtmlSerializerInfo {
    pub fn new() -> ApacheSlingHealthCheckResultHtmlSerializerInfo {
        ApacheSlingHealthCheckResultHtmlSerializerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ApacheSlingHealthCheckResultHtmlSerializerProperties {
    #[serde(rename = "styleString")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub style_string: Option<models::ConfigNodePropertyString>,

}

impl ApacheSlingHealthCheckResultHtmlSerializerProperties {
    pub fn new() -> ApacheSlingHealthCheckResultHtmlSerializerProperties {
        ApacheSlingHealthCheckResultHtmlSerializerProperties {
            style_string: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationProperties>,

}

impl ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationInfo {
    pub fn new() -> ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationInfo {
        ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationProperties {
    #[serde(rename = "formsManagerConfig.includeOOTBTemplates")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub forms_manager_config_include_ootb_templates: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "formsManagerConfig.includeDeprecatedTemplates")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub forms_manager_config_include_deprecated_templates: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationProperties {
    pub fn new() -> ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationProperties {
        ComAdobeAemFormsndocumentsConfigAemFormsManagerConfigurationProperties {
            forms_manager_config_include_ootb_templates: None,
            forms_manager_config_include_deprecated_templates: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemTransactionCoreImplTransactionRecorderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeAemTransactionCoreImplTransactionRecorderProperties>,

}

impl ComAdobeAemTransactionCoreImplTransactionRecorderInfo {
    pub fn new() -> ComAdobeAemTransactionCoreImplTransactionRecorderInfo {
        ComAdobeAemTransactionCoreImplTransactionRecorderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemTransactionCoreImplTransactionRecorderProperties {
    #[serde(rename = "isTransactionRecordingEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_transaction_recording_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeAemTransactionCoreImplTransactionRecorderProperties {
    pub fn new() -> ComAdobeAemTransactionCoreImplTransactionRecorderProperties {
        ComAdobeAemTransactionCoreImplTransactionRecorderProperties {
            is_transaction_recording_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcProperties>,

}

impl ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcInfo {
    pub fn new() -> ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcInfo {
        ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcProperties {
    #[serde(rename = "hc.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "hc.mbean.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_mbean_name: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcProperties {
    pub fn new() -> ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcProperties {
        ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHcProperties {
            hc_name: None,
            hc_tags: None,
            hc_mbean_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcProperties>,

}

impl ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcInfo {
    pub fn new() -> ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcInfo {
        ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcProperties {
    #[serde(rename = "hc.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "hc.mbean.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_mbean_name: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcProperties {
    pub fn new() -> ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcProperties {
        ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHcProperties {
            hc_name: None,
            hc_tags: None,
            hc_mbean_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo {
    pub fn new() -> ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo {
        ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties {
    #[serde(rename = "pre-upgrade.maintenance.tasks")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pre_upgrade_maintenance_tasks: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "pre-upgrade.hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pre_upgrade_hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties {
    pub fn new() -> ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties {
        ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplProperties {
            pre_upgrade_maintenance_tasks: None,
            pre_upgrade_hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties>,

}

impl ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo {
    pub fn new() -> ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo {
        ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties {
    #[serde(rename = "root.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub root_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "fix.inconsistencies")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fix_inconsistencies: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties {
    pub fn new() -> ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties {
        ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplProperties {
            root_path: None,
            fix_inconsistencies: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAccountApiAccountManagementServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqAccountApiAccountManagementServiceProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeCqAccountApiAccountManagementServiceInfo {
    pub fn new() -> ComAdobeCqAccountApiAccountManagementServiceInfo {
        ComAdobeCqAccountApiAccountManagementServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAccountApiAccountManagementServiceProperties {
    #[serde(rename = "cq.accountmanager.token.validity.period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_accountmanager_token_validity_period: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.accountmanager.config.requestnewaccount.mail")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_accountmanager_config_requestnewaccount_mail: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.accountmanager.config.requestnewpwd.mail")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_accountmanager_config_requestnewpwd_mail: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqAccountApiAccountManagementServiceProperties {
    pub fn new() -> ComAdobeCqAccountApiAccountManagementServiceProperties {
        ComAdobeCqAccountApiAccountManagementServiceProperties {
            cq_accountmanager_token_validity_period: None,
            cq_accountmanager_config_requestnewaccount_mail: None,
            cq_accountmanager_config_requestnewpwd_mail: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAccountImplAccountManagementServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqAccountImplAccountManagementServletProperties>,

}

impl ComAdobeCqAccountImplAccountManagementServletInfo {
    pub fn new() -> ComAdobeCqAccountImplAccountManagementServletInfo {
        ComAdobeCqAccountImplAccountManagementServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAccountImplAccountManagementServletProperties {
    #[serde(rename = "cq.accountmanager.config.informnewaccount.mail")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_accountmanager_config_informnewaccount_mail: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.accountmanager.config.informnewpwd.mail")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_accountmanager_config_informnewpwd_mail: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqAccountImplAccountManagementServletProperties {
    pub fn new() -> ComAdobeCqAccountImplAccountManagementServletProperties {
        ComAdobeCqAccountImplAccountManagementServletProperties {
            cq_accountmanager_config_informnewaccount_mail: None,
            cq_accountmanager_config_informnewpwd_mail: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAddressImplLocationLocationListServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqAddressImplLocationLocationListServletProperties>,

}

impl ComAdobeCqAddressImplLocationLocationListServletInfo {
    pub fn new() -> ComAdobeCqAddressImplLocationLocationListServletInfo {
        ComAdobeCqAddressImplLocationLocationListServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAddressImplLocationLocationListServletProperties {
    #[serde(rename = "cq.address.location.default.maxResults")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_address_location_default_max_results: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqAddressImplLocationLocationListServletProperties {
    pub fn new() -> ComAdobeCqAddressImplLocationLocationListServletProperties {
        ComAdobeCqAddressImplLocationLocationListServletProperties {
            cq_address_location_default_max_results: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAuditPurgeDamInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqAuditPurgeDamProperties>,

}

impl ComAdobeCqAuditPurgeDamInfo {
    pub fn new() -> ComAdobeCqAuditPurgeDamInfo {
        ComAdobeCqAuditPurgeDamInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAuditPurgeDamProperties {
    #[serde(rename = "auditlog.rule.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auditlog.rule.contentpath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_contentpath: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auditlog.rule.minimumage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_minimumage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "auditlog.rule.types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_types: Option<models::ConfigNodePropertyDropDown>,

}

impl ComAdobeCqAuditPurgeDamProperties {
    pub fn new() -> ComAdobeCqAuditPurgeDamProperties {
        ComAdobeCqAuditPurgeDamProperties {
            auditlog_rule_name: None,
            auditlog_rule_contentpath: None,
            auditlog_rule_minimumage: None,
            auditlog_rule_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAuditPurgePagesInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqAuditPurgePagesProperties>,

}

impl ComAdobeCqAuditPurgePagesInfo {
    pub fn new() -> ComAdobeCqAuditPurgePagesInfo {
        ComAdobeCqAuditPurgePagesInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAuditPurgePagesProperties {
    #[serde(rename = "auditlog.rule.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auditlog.rule.contentpath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_contentpath: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auditlog.rule.minimumage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_minimumage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "auditlog.rule.types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_types: Option<models::ConfigNodePropertyDropDown>,

}

impl ComAdobeCqAuditPurgePagesProperties {
    pub fn new() -> ComAdobeCqAuditPurgePagesProperties {
        ComAdobeCqAuditPurgePagesProperties {
            auditlog_rule_name: None,
            auditlog_rule_contentpath: None,
            auditlog_rule_minimumage: None,
            auditlog_rule_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAuditPurgeReplicationInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqAuditPurgeReplicationProperties>,

}

impl ComAdobeCqAuditPurgeReplicationInfo {
    pub fn new() -> ComAdobeCqAuditPurgeReplicationInfo {
        ComAdobeCqAuditPurgeReplicationInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqAuditPurgeReplicationProperties {
    #[serde(rename = "auditlog.rule.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auditlog.rule.contentpath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_contentpath: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auditlog.rule.minimumage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_minimumage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "auditlog.rule.types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlog_rule_types: Option<models::ConfigNodePropertyDropDown>,

}

impl ComAdobeCqAuditPurgeReplicationProperties {
    pub fn new() -> ComAdobeCqAuditPurgeReplicationProperties {
        ComAdobeCqAuditPurgeReplicationProperties {
            auditlog_rule_name: None,
            auditlog_rule_contentpath: None,
            auditlog_rule_minimumage: None,
            auditlog_rule_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties>,

}

impl ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterInfo {
    pub fn new() -> ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterInfo {
        ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "keypair.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub keypair_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "keypair.alias")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub keypair_alias: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cdnrewriter.attributes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cdnrewriter_attributes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cdn.rewriter.distribution.domain")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cdn_rewriter_distribution_domain: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
    pub fn new() -> ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
        ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
            service_ranking: None,
            keypair_id: None,
            keypair_alias: None,
            cdnrewriter_attributes: None,
            cdn_rewriter_distribution_domain: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCdnRewriterImplCdnConfigServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCdnRewriterImplCdnConfigServiceImplProperties>,

}

impl ComAdobeCqCdnRewriterImplCdnConfigServiceImplInfo {
    pub fn new() -> ComAdobeCqCdnRewriterImplCdnConfigServiceImplInfo {
        ComAdobeCqCdnRewriterImplCdnConfigServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCdnRewriterImplCdnConfigServiceImplProperties {
    #[serde(rename = "cdn.config.distribution.domain")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cdn_config_distribution_domain: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cdn.config.enable.rewriting")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cdn_config_enable_rewriting: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cdn.config.path.prefixes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cdn_config_path_prefixes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cdn.config.cdnttl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cdn_config_cdnttl: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cdn.config.application.protocol")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cdn_config_application_protocol: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqCdnRewriterImplCdnConfigServiceImplProperties {
    pub fn new() -> ComAdobeCqCdnRewriterImplCdnConfigServiceImplProperties {
        ComAdobeCqCdnRewriterImplCdnConfigServiceImplProperties {
            cdn_config_distribution_domain: None,
            cdn_config_enable_rewriting: None,
            cdn_config_path_prefixes: None,
            cdn_config_cdnttl: None,
            cdn_config_application_protocol: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCdnRewriterImplCdnRewriterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCdnRewriterImplCdnRewriterProperties>,

}

impl ComAdobeCqCdnRewriterImplCdnRewriterInfo {
    pub fn new() -> ComAdobeCqCdnRewriterImplCdnRewriterInfo {
        ComAdobeCqCdnRewriterImplCdnRewriterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCdnRewriterImplCdnRewriterProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cdnrewriter.attributes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cdnrewriter_attributes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cdn.rewriter.distribution.domain")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cdn_rewriter_distribution_domain: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqCdnRewriterImplCdnRewriterProperties {
    pub fn new() -> ComAdobeCqCdnRewriterImplCdnRewriterProperties {
        ComAdobeCqCdnRewriterImplCdnRewriterProperties {
            service_ranking: None,
            cdnrewriter_attributes: None,
            cdn_rewriter_distribution_domain: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties>,

}

impl ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo {
    pub fn new() -> ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo {
        ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties {
    #[serde(rename = "flush.agents")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub flush_agents: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties {
    pub fn new() -> ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties {
        ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleProperties {
            flush_agents: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties>,

}

impl ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo {
    pub fn new() -> ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo {
        ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties {
    #[serde(rename = "cq.commerce.asset.handler.active")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_asset_handler_active: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.commerce.asset.handler.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_asset_handler_name: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties {
    pub fn new() -> ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties {
        ComAdobeCqCommerceImplAssetDynamicImageHandlerProperties {
            cq_commerce_asset_handler_active: None,
            cq_commerce_asset_handler_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties>,

}

impl ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo {
    pub fn new() -> ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo {
        ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties {
    #[serde(rename = "cq.commerce.asset.handler.fallback")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_asset_handler_fallback: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties {
    pub fn new() -> ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties {
        ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplProperties {
            cq_commerce_asset_handler_fallback: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommerceImplAssetStaticImageHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCommerceImplAssetStaticImageHandlerProperties>,

}

impl ComAdobeCqCommerceImplAssetStaticImageHandlerInfo {
    pub fn new() -> ComAdobeCqCommerceImplAssetStaticImageHandlerInfo {
        ComAdobeCqCommerceImplAssetStaticImageHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommerceImplAssetStaticImageHandlerProperties {
    #[serde(rename = "cq.commerce.asset.handler.active")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_asset_handler_active: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.commerce.asset.handler.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_asset_handler_name: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqCommerceImplAssetStaticImageHandlerProperties {
    pub fn new() -> ComAdobeCqCommerceImplAssetStaticImageHandlerProperties {
        ComAdobeCqCommerceImplAssetStaticImageHandlerProperties {
            cq_commerce_asset_handler_active: None,
            cq_commerce_asset_handler_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommerceImplAssetVideoHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCommerceImplAssetVideoHandlerProperties>,

}

impl ComAdobeCqCommerceImplAssetVideoHandlerInfo {
    pub fn new() -> ComAdobeCqCommerceImplAssetVideoHandlerInfo {
        ComAdobeCqCommerceImplAssetVideoHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommerceImplAssetVideoHandlerProperties {
    #[serde(rename = "cq.commerce.asset.handler.active")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_asset_handler_active: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.commerce.asset.handler.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_asset_handler_name: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqCommerceImplAssetVideoHandlerProperties {
    pub fn new() -> ComAdobeCqCommerceImplAssetVideoHandlerProperties {
        ComAdobeCqCommerceImplAssetVideoHandlerProperties {
            cq_commerce_asset_handler_active: None,
            cq_commerce_asset_handler_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties>,

}

impl ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo {
    pub fn new() -> ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo {
        ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties {
    #[serde(rename = "cq.commerce.promotion.root")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_promotion_root: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties {
    pub fn new() -> ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties {
        ComAdobeCqCommerceImplPromotionPromotionManagerImplProperties {
            cq_commerce_promotion_root: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties>,

}

impl ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo {
    pub fn new() -> ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo {
        ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties {
    #[serde(rename = "cq.commerce.cataloggenerator.bucketsize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_cataloggenerator_bucketsize: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.commerce.cataloggenerator.bucketname")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_cataloggenerator_bucketname: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.commerce.cataloggenerator.excludedtemplateproperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_cataloggenerator_excludedtemplateproperties: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties {
    pub fn new() -> ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties {
        ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties {
            cq_commerce_cataloggenerator_bucketsize: None,
            cq_commerce_cataloggenerator_bucketname: None,
            cq_commerce_cataloggenerator_excludedtemplateproperties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommercePimImplPageEventListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCommercePimImplPageEventListenerProperties>,

}

impl ComAdobeCqCommercePimImplPageEventListenerInfo {
    pub fn new() -> ComAdobeCqCommercePimImplPageEventListenerInfo {
        ComAdobeCqCommercePimImplPageEventListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommercePimImplPageEventListenerProperties {
    #[serde(rename = "cq.commerce.pageeventlistener.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_commerce_pageeventlistener_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqCommercePimImplPageEventListenerProperties {
    pub fn new() -> ComAdobeCqCommercePimImplPageEventListenerProperties {
        ComAdobeCqCommercePimImplPageEventListenerProperties {
            cq_commerce_pageeventlistener_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties>,

}

impl ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo {
    pub fn new() -> ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo {
        ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties {
    #[serde(rename = "Feed generator algorithm")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub feed_generator_algorithm: Option<models::ConfigNodePropertyDropDown>,

}

impl ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties {
    pub fn new() -> ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties {
        ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplProperties {
            feed_generator_algorithm: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties>,

}

impl ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo {
    pub fn new() -> ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo {
        ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties {
    #[serde(rename = "reportingservices.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub reportingservices_url: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties {
    pub fn new() -> ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties {
        ComAdobeCqContentinsightImplReportingServicesSettingsProviderProperties {
            reportingservices_url: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties>,

}

impl ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo {
    pub fn new() -> ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo {
        ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties {
    #[serde(rename = "brightedge.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub brightedge_url: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties {
    pub fn new() -> ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties {
        ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletProperties {
            brightedge_url: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties>,

}

impl ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo {
    pub fn new() -> ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo {
        ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties {
    #[serde(rename = "reportingservices.proxy.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub reportingservices_proxy_whitelist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties {
    pub fn new() -> ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties {
        ComAdobeCqContentinsightImplServletsReportingServicesProxyServleProperties {
            reportingservices_proxy_whitelist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamCfmImplComponentComponentConfigImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamCfmImplComponentComponentConfigImplProperties>,

}

impl ComAdobeCqDamCfmImplComponentComponentConfigImplInfo {
    pub fn new() -> ComAdobeCqDamCfmImplComponentComponentConfigImplInfo {
        ComAdobeCqDamCfmImplComponentComponentConfigImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamCfmImplComponentComponentConfigImplProperties {
    #[serde(rename = "dam.cfm.component.resourceType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dam_cfm_component_resource_type: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "dam.cfm.component.fileReferenceProp")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dam_cfm_component_file_reference_prop: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "dam.cfm.component.elementsProp")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dam_cfm_component_elements_prop: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "dam.cfm.component.variationProp")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dam_cfm_component_variation_prop: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqDamCfmImplComponentComponentConfigImplProperties {
    pub fn new() -> ComAdobeCqDamCfmImplComponentComponentConfigImplProperties {
        ComAdobeCqDamCfmImplComponentComponentConfigImplProperties {
            dam_cfm_component_resource_type: None,
            dam_cfm_component_file_reference_prop: None,
            dam_cfm_component_elements_prop: None,
            dam_cfm_component_variation_prop: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamCfmImplConfFeatureConfigImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamCfmImplConfFeatureConfigImplProperties>,

}

impl ComAdobeCqDamCfmImplConfFeatureConfigImplInfo {
    pub fn new() -> ComAdobeCqDamCfmImplConfFeatureConfigImplInfo {
        ComAdobeCqDamCfmImplConfFeatureConfigImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamCfmImplConfFeatureConfigImplProperties {
    #[serde(rename = "dam.cfm.resourceTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dam_cfm_resource_types: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "dam.cfm.referenceProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dam_cfm_reference_properties: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqDamCfmImplConfFeatureConfigImplProperties {
    pub fn new() -> ComAdobeCqDamCfmImplConfFeatureConfigImplProperties {
        ComAdobeCqDamCfmImplConfFeatureConfigImplProperties {
            dam_cfm_resource_types: None,
            dam_cfm_reference_properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties>,

}

impl ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo {
    pub fn new() -> ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo {
        ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties {
    #[serde(rename = "pipeline.type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pipeline_type: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties {
    pub fn new() -> ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties {
        ComAdobeCqDamCfmImplContentRewriterAssetProcessorProperties {
            pipeline_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties>,

}

impl ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo {
    pub fn new() -> ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo {
        ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties {
    #[serde(rename = "pipeline.type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pipeline_type: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties {
    pub fn new() -> ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties {
        ComAdobeCqDamCfmImplContentRewriterParRangeFilterProperties {
            pipeline_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties>,

}

impl ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo {
    pub fn new() -> ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo {
        ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties {
    #[serde(rename = "pipeline.type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pipeline_type: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties {
    pub fn new() -> ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties {
        ComAdobeCqDamCfmImplContentRewriterPayloadFilterProperties {
            pipeline_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamDmProcessImagePTiffManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamDmProcessImagePTiffManagerImplProperties>,

}

impl ComAdobeCqDamDmProcessImagePTiffManagerImplInfo {
    pub fn new() -> ComAdobeCqDamDmProcessImagePTiffManagerImplInfo {
        ComAdobeCqDamDmProcessImagePTiffManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamDmProcessImagePTiffManagerImplProperties {
    #[serde(rename = "maxMemory")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_memory: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqDamDmProcessImagePTiffManagerImplProperties {
    pub fn new() -> ComAdobeCqDamDmProcessImagePTiffManagerImplProperties {
        ComAdobeCqDamDmProcessImagePTiffManagerImplProperties {
            max_memory: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties>,

}

impl ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo {
    pub fn new() -> ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo {
        ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties {
    #[serde(rename = "dmreplicateonmodify.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dmreplicateonmodify_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "dmreplicateonmodify.forcesyncdeletes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dmreplicateonmodify_forcesyncdeletes: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties {
    pub fn new() -> ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties {
        ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerProperties {
            dmreplicateonmodify_enabled: None,
            dmreplicateonmodify_forcesyncdeletes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamMacSyncHelperImplMacSyncClientImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamMacSyncHelperImplMacSyncClientImplProperties>,

}

impl ComAdobeCqDamMacSyncHelperImplMacSyncClientImplInfo {
    pub fn new() -> ComAdobeCqDamMacSyncHelperImplMacSyncClientImplInfo {
        ComAdobeCqDamMacSyncHelperImplMacSyncClientImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamMacSyncHelperImplMacSyncClientImplProperties {
    #[serde(rename = "com.adobe.dam.mac.sync.client.so.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_dam_mac_sync_client_so_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqDamMacSyncHelperImplMacSyncClientImplProperties {
    pub fn new() -> ComAdobeCqDamMacSyncHelperImplMacSyncClientImplProperties {
        ComAdobeCqDamMacSyncHelperImplMacSyncClientImplProperties {
            com_adobe_dam_mac_sync_client_so_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamMacSyncImplDamSyncServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamMacSyncImplDamSyncServiceImplProperties>,

}

impl ComAdobeCqDamMacSyncImplDamSyncServiceImplInfo {
    pub fn new() -> ComAdobeCqDamMacSyncImplDamSyncServiceImplInfo {
        ComAdobeCqDamMacSyncImplDamSyncServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamMacSyncImplDamSyncServiceImplProperties {
    #[serde(rename = "com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "com.adobe.cq.dam.mac.sync.damsyncservice.platform")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_dam_mac_sync_damsyncservice_platform: Option<models::ConfigNodePropertyDropDown>,

}

impl ComAdobeCqDamMacSyncImplDamSyncServiceImplProperties {
    pub fn new() -> ComAdobeCqDamMacSyncImplDamSyncServiceImplProperties {
        ComAdobeCqDamMacSyncImplDamSyncServiceImplProperties {
            com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths: None,
            com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions: None,
            com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms: None,
            com_adobe_cq_dam_mac_sync_damsyncservice_platform: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties>,

}

impl ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo {
    pub fn new() -> ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo {
        ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties {
    #[serde(rename = "nuiEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub nui_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "nuiServiceUrl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub nui_service_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "nuiApiKey")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub nui_api_key: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties {
    pub fn new() -> ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties {
        ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties {
            nui_enabled: None,
            nui_service_url: None,
            nui_api_key: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamS7imagingImplIsImageServerComponentInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamS7imagingImplIsImageServerComponentProperties>,

}

impl ComAdobeCqDamS7imagingImplIsImageServerComponentInfo {
    pub fn new() -> ComAdobeCqDamS7imagingImplIsImageServerComponentInfo {
        ComAdobeCqDamS7imagingImplIsImageServerComponentInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
    #[serde(rename = "TcpPort")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tcp_port: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "AllowRemoteAccess")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allow_remote_access: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "MaxRenderRgnPixels")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_render_rgn_pixels: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "MaxMessageSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_message_size: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "RandomAccessUrlTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub random_access_url_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "WorkerThreads")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub worker_threads: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
    pub fn new() -> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
        ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
            tcp_port: None,
            allow_remote_access: None,
            max_render_rgn_pixels: None,
            max_message_size: None,
            random_access_url_timeout: None,
            worker_threads: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties>,

}

impl ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo {
    pub fn new() -> ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo {
        ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
    #[serde(rename = "cache.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cache.rootPaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_root_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cache.maxSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_max_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.maxEntries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_max_entries: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
    pub fn new() -> ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
        ComAdobeCqDamS7imagingImplPsPlatformServerServletProperties {
            cache_enable: None,
            cache_root_paths: None,
            cache_max_size: None,
            cache_max_entries: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamWebdavImplIoAssetIoHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamWebdavImplIoAssetIoHandlerProperties>,

}

impl ComAdobeCqDamWebdavImplIoAssetIoHandlerInfo {
    pub fn new() -> ComAdobeCqDamWebdavImplIoAssetIoHandlerInfo {
        ComAdobeCqDamWebdavImplIoAssetIoHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamWebdavImplIoAssetIoHandlerProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "pathPrefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path_prefix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "createVersion")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub create_version: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqDamWebdavImplIoAssetIoHandlerProperties {
    pub fn new() -> ComAdobeCqDamWebdavImplIoAssetIoHandlerProperties {
        ComAdobeCqDamWebdavImplIoAssetIoHandlerProperties {
            service_ranking: None,
            path_prefix: None,
            create_version: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties>,

}

impl ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo {
    pub fn new() -> ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo {
        ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties {
    #[serde(rename = "cq.dam.webdav.version.linking.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_webdav_version_linking_enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.dam.webdav.version.linking.scheduler.period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_webdav_version_linking_scheduler_period: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.webdav.version.linking.staging.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_webdav_version_linking_staging_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties {
    pub fn new() -> ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties {
        ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobProperties {
            cq_dam_webdav_version_linking_enable: None,
            cq_dam_webdav_version_linking_scheduler_period: None,
            cq_dam_webdav_version_linking_staging_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties>,

}

impl ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo {
    pub fn new() -> ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo {
        ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties {
    #[serde(rename = "com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_dam_core_impl_io_special_files_handler_filepatters: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties {
    pub fn new() -> ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties {
        ComAdobeCqDamWebdavImplIoSpecialFilesHandlerProperties {
            com_day_cq_dam_core_impl_io_special_files_handler_filepatters: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDeserfwImplDeserializationFirewallImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDeserfwImplDeserializationFirewallImplProperties>,

}

impl ComAdobeCqDeserfwImplDeserializationFirewallImplInfo {
    pub fn new() -> ComAdobeCqDeserfwImplDeserializationFirewallImplInfo {
        ComAdobeCqDeserfwImplDeserializationFirewallImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {
    #[serde(rename = "firewall.deserialization.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub firewall_deserialization_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "firewall.deserialization.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub firewall_deserialization_blacklist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "firewall.deserialization.diagnostics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub firewall_deserialization_diagnostics: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {
    pub fn new() -> ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {
        ComAdobeCqDeserfwImplDeserializationFirewallImplProperties {
            firewall_deserialization_whitelist: None,
            firewall_deserialization_blacklist: None,
            firewall_deserialization_diagnostics: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDtmImplServiceDtmWebServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDtmImplServiceDtmWebServiceImplProperties>,

}

impl ComAdobeCqDtmImplServiceDtmWebServiceImplInfo {
    pub fn new() -> ComAdobeCqDtmImplServiceDtmWebServiceImplInfo {
        ComAdobeCqDtmImplServiceDtmWebServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDtmImplServiceDtmWebServiceImplProperties {
    #[serde(rename = "connection.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connection_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "socket.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub socket_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqDtmImplServiceDtmWebServiceImplProperties {
    pub fn new() -> ComAdobeCqDtmImplServiceDtmWebServiceImplProperties {
        ComAdobeCqDtmImplServiceDtmWebServiceImplProperties {
            connection_timeout: None,
            socket_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDtmImplServletsDtmDeployHookServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDtmImplServletsDtmDeployHookServletProperties>,

}

impl ComAdobeCqDtmImplServletsDtmDeployHookServletInfo {
    pub fn new() -> ComAdobeCqDtmImplServletsDtmDeployHookServletInfo {
        ComAdobeCqDtmImplServletsDtmDeployHookServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDtmImplServletsDtmDeployHookServletProperties {
    #[serde(rename = "dtm.staging.ip.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dtm_staging_ip_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "dtm.production.ip.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dtm_production_ip_whitelist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqDtmImplServletsDtmDeployHookServletProperties {
    pub fn new() -> ComAdobeCqDtmImplServletsDtmDeployHookServletProperties {
        ComAdobeCqDtmImplServletsDtmDeployHookServletProperties {
            dtm_staging_ip_whitelist: None,
            dtm_production_ip_whitelist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDtmReactorImplServiceWebServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqDtmReactorImplServiceWebServiceImplProperties>,

}

impl ComAdobeCqDtmReactorImplServiceWebServiceImplInfo {
    pub fn new() -> ComAdobeCqDtmReactorImplServiceWebServiceImplInfo {
        ComAdobeCqDtmReactorImplServiceWebServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqDtmReactorImplServiceWebServiceImplProperties {
    #[serde(rename = "endpointUri")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub endpoint_uri: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "connectionTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connection_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "socketTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub socket_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqDtmReactorImplServiceWebServiceImplProperties {
    pub fn new() -> ComAdobeCqDtmReactorImplServiceWebServiceImplProperties {
        ComAdobeCqDtmReactorImplServiceWebServiceImplProperties {
            endpoint_uri: None,
            connection_timeout: None,
            socket_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo {
    pub fn new() -> ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo {
        ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "disabledForGroups")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disabled_for_groups: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties {
    pub fn new() -> ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties {
        ComAdobeCqExperiencelogImplExperienceLogConfigServletProperties {
            enabled: None,
            disabled_for_groups: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqHcContentPackagesHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqHcContentPackagesHealthCheckProperties>,

}

impl ComAdobeCqHcContentPackagesHealthCheckInfo {
    pub fn new() -> ComAdobeCqHcContentPackagesHealthCheckInfo {
        ComAdobeCqHcContentPackagesHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqHcContentPackagesHealthCheckProperties {
    #[serde(rename = "hc.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "hc.mbean.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_mbean_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "package.names")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_names: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqHcContentPackagesHealthCheckProperties {
    pub fn new() -> ComAdobeCqHcContentPackagesHealthCheckProperties {
        ComAdobeCqHcContentPackagesHealthCheckProperties {
            hc_name: None,
            hc_tags: None,
            hc_mbean_name: None,
            package_names: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqHistoryImplHistoryRequestFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqHistoryImplHistoryRequestFilterProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeCqHistoryImplHistoryRequestFilterInfo {
    pub fn new() -> ComAdobeCqHistoryImplHistoryRequestFilterInfo {
        ComAdobeCqHistoryImplHistoryRequestFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqHistoryImplHistoryRequestFilterProperties {
    #[serde(rename = "history.requestFilter.excludedSelectors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub history_request_filter_excluded_selectors: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "history.requestFilter.excludedExtensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub history_request_filter_excluded_extensions: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqHistoryImplHistoryRequestFilterProperties {
    pub fn new() -> ComAdobeCqHistoryImplHistoryRequestFilterProperties {
        ComAdobeCqHistoryImplHistoryRequestFilterProperties {
            history_request_filter_excluded_selectors: None,
            history_request_filter_excluded_extensions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqHistoryImplHistoryServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqHistoryImplHistoryServiceImplProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeCqHistoryImplHistoryServiceImplInfo {
    pub fn new() -> ComAdobeCqHistoryImplHistoryServiceImplInfo {
        ComAdobeCqHistoryImplHistoryServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqHistoryImplHistoryServiceImplProperties {
    #[serde(rename = "history.service.resourceTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub history_service_resource_types: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "history.service.pathFilter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub history_service_path_filter: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqHistoryImplHistoryServiceImplProperties {
    pub fn new() -> ComAdobeCqHistoryImplHistoryServiceImplProperties {
        ComAdobeCqHistoryImplHistoryServiceImplProperties {
            history_service_resource_types: None,
            history_service_path_filter: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties>,

}

impl ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo {
    pub fn new() -> ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo {
        ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
    #[serde(rename = "inbox.impl.typeprovider.registrypaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub inbox_impl_typeprovider_registrypaths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "inbox.impl.typeprovider.legacypaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub inbox_impl_typeprovider_legacypaths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "inbox.impl.typeprovider.defaulturl.failureitem")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub inbox_impl_typeprovider_defaulturl_failureitem: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "inbox.impl.typeprovider.defaulturl.workitem")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub inbox_impl_typeprovider_defaulturl_workitem: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "inbox.impl.typeprovider.defaulturl.task")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub inbox_impl_typeprovider_defaulturl_task: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
    pub fn new() -> ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
        ComAdobeCqInboxImplTypeproviderItemTypeProviderProperties {
            inbox_impl_typeprovider_registrypaths: None,
            inbox_impl_typeprovider_legacypaths: None,
            inbox_impl_typeprovider_defaulturl_failureitem: None,
            inbox_impl_typeprovider_defaulturl_workitem: None,
            inbox_impl_typeprovider_defaulturl_task: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqProjectsImplServletProjectImageServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqProjectsImplServletProjectImageServletProperties>,

}

impl ComAdobeCqProjectsImplServletProjectImageServletInfo {
    pub fn new() -> ComAdobeCqProjectsImplServletProjectImageServletInfo {
        ComAdobeCqProjectsImplServletProjectImageServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqProjectsImplServletProjectImageServletProperties {
    #[serde(rename = "image.quality")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub image_quality: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "image.supported.resolutions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub image_supported_resolutions: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqProjectsImplServletProjectImageServletProperties {
    pub fn new() -> ComAdobeCqProjectsImplServletProjectImageServletProperties {
        ComAdobeCqProjectsImplServletProjectImageServletProperties {
            image_quality: None,
            image_supported_resolutions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqProjectsPurgeSchedulerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqProjectsPurgeSchedulerProperties>,

}

impl ComAdobeCqProjectsPurgeSchedulerInfo {
    pub fn new() -> ComAdobeCqProjectsPurgeSchedulerInfo {
        ComAdobeCqProjectsPurgeSchedulerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqProjectsPurgeSchedulerProperties {
    #[serde(rename = "scheduledpurge.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "scheduledpurge.purgeActive")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_purge_active: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "scheduledpurge.templates")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_templates: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "scheduledpurge.purgeGroups")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_purge_groups: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "scheduledpurge.purgeAssets")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_purge_assets: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "scheduledpurge.terminateRunningWorkflows")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_terminate_running_workflows: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "scheduledpurge.daysold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_daysold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "scheduledpurge.saveThreshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_save_threshold: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqProjectsPurgeSchedulerProperties {
    pub fn new() -> ComAdobeCqProjectsPurgeSchedulerProperties {
        ComAdobeCqProjectsPurgeSchedulerProperties {
            scheduledpurge_name: None,
            scheduledpurge_purge_active: None,
            scheduledpurge_templates: None,
            scheduledpurge_purge_groups: None,
            scheduledpurge_purge_assets: None,
            scheduledpurge_terminate_running_workflows: None,
            scheduledpurge_daysold: None,
            scheduledpurge_save_threshold: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScheduledExporterImplScheduledExporterImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScheduledExporterImplScheduledExporterImplProperties>,

}

impl ComAdobeCqScheduledExporterImplScheduledExporterImplInfo {
    pub fn new() -> ComAdobeCqScheduledExporterImplScheduledExporterImplInfo {
        ComAdobeCqScheduledExporterImplScheduledExporterImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScheduledExporterImplScheduledExporterImplProperties {
    #[serde(rename = "include.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub include_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "exporter.user")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub exporter_user: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqScheduledExporterImplScheduledExporterImplProperties {
    pub fn new() -> ComAdobeCqScheduledExporterImplScheduledExporterImplProperties {
        ComAdobeCqScheduledExporterImplScheduledExporterImplProperties {
            include_paths: None,
            exporter_user: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties>,

}

impl ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo {
    pub fn new() -> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo {
        ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
    #[serde(rename = "com.adobe.cq.screens.analytics.impl.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_analytics_impl_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.screens.analytics.impl.apikey")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_analytics_impl_apikey: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.screens.analytics.impl.project")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_analytics_impl_project: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.screens.analytics.impl.environment")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_analytics_impl_environment: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "com.adobe.cq.screens.analytics.impl.sendFrequency")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_analytics_impl_send_frequency: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
    pub fn new() -> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
        ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties {
            com_adobe_cq_screens_analytics_impl_url: None,
            com_adobe_cq_screens_analytics_impl_apikey: None,
            com_adobe_cq_screens_analytics_impl_project: None,
            com_adobe_cq_screens_analytics_impl_environment: None,
            com_adobe_cq_screens_analytics_impl_send_frequency: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensDeviceImplDeviceServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensDeviceImplDeviceServiceProperties>,

}

impl ComAdobeCqScreensDeviceImplDeviceServiceInfo {
    pub fn new() -> ComAdobeCqScreensDeviceImplDeviceServiceInfo {
        ComAdobeCqScreensDeviceImplDeviceServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensDeviceImplDeviceServiceProperties {
    #[serde(rename = "com.adobe.aem.screens.player.pingfrequency")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_aem_screens_player_pingfrequency: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "com.adobe.aem.screens.device.pasword.specialchars")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_aem_screens_device_pasword_specialchars: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.aem.screens.device.pasword.minlowercasechars")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_aem_screens_device_pasword_minlowercasechars: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "com.adobe.aem.screens.device.pasword.minuppercasechars")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_aem_screens_device_pasword_minuppercasechars: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "com.adobe.aem.screens.device.pasword.minnumberchars")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_aem_screens_device_pasword_minnumberchars: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "com.adobe.aem.screens.device.pasword.minspecialchars")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_aem_screens_device_pasword_minspecialchars: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "com.adobe.aem.screens.device.pasword.minlength")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_aem_screens_device_pasword_minlength: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqScreensDeviceImplDeviceServiceProperties {
    pub fn new() -> ComAdobeCqScreensDeviceImplDeviceServiceProperties {
        ComAdobeCqScreensDeviceImplDeviceServiceProperties {
            com_adobe_aem_screens_player_pingfrequency: None,
            com_adobe_aem_screens_device_pasword_specialchars: None,
            com_adobe_aem_screens_device_pasword_minlowercasechars: None,
            com_adobe_aem_screens_device_pasword_minuppercasechars: None,
            com_adobe_aem_screens_device_pasword_minnumberchars: None,
            com_adobe_aem_screens_device_pasword_minspecialchars: None,
            com_adobe_aem_screens_device_pasword_minlength: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties>,

}

impl ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo {
    pub fn new() -> ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo {
        ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties {
    #[serde(rename = "deviceRegistrationTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub device_registration_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties {
    pub fn new() -> ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties {
        ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplProperties {
            device_registration_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties>,

}

impl ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo {
    pub fn new() -> ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo {
        ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties {
    #[serde(rename = "cq.pagesupdatehandler.imageresourcetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_pagesupdatehandler_imageresourcetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.pagesupdatehandler.productresourcetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_pagesupdatehandler_productresourcetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.pagesupdatehandler.videoresourcetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_pagesupdatehandler_videoresourcetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.pagesupdatehandler.dynamicsequenceresourcetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_pagesupdatehandler_dynamicsequenceresourcetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.pagesupdatehandler.previewmodepaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_pagesupdatehandler_previewmodepaths: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties {
    pub fn new() -> ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties {
        ComAdobeCqScreensImplHandlerChannelsUpdateHandlerProperties {
            cq_pagesupdatehandler_imageresourcetypes: None,
            cq_pagesupdatehandler_productresourcetypes: None,
            cq_pagesupdatehandler_videoresourcetypes: None,
            cq_pagesupdatehandler_dynamicsequenceresourcetypes: None,
            cq_pagesupdatehandler_previewmodepaths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties>,

}

impl ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo {
    pub fn new() -> ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo {
        ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties {
    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties {
    pub fn new() -> ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties {
        ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobProperties {
            scheduler_expression: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties>,

}

impl ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo {
    pub fn new() -> ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo {
        ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties {
    #[serde(rename = "com.adobe.aem.screens.impl.remote.request_timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_aem_screens_impl_remote_request_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties {
    pub fn new() -> ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties {
        ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplProperties {
            com_adobe_aem_screens_impl_remote_request_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensImplScreensChannelPostProcessorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensImplScreensChannelPostProcessorProperties>,

}

impl ComAdobeCqScreensImplScreensChannelPostProcessorInfo {
    pub fn new() -> ComAdobeCqScreensImplScreensChannelPostProcessorInfo {
        ComAdobeCqScreensImplScreensChannelPostProcessorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensImplScreensChannelPostProcessorProperties {
    #[serde(rename = "screens.channels.properties.to.remove")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub screens_channels_properties_to_remove: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqScreensImplScreensChannelPostProcessorProperties {
    pub fn new() -> ComAdobeCqScreensImplScreensChannelPostProcessorProperties {
        ComAdobeCqScreensImplScreensChannelPostProcessorProperties {
            screens_channels_properties_to_remove: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties>,

}

impl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo {
    pub fn new() -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo {
        ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    pub fn new() -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
        ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
            com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path: None,
            com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency: None,
            com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout: None,
            com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients: None,
            com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver: None,
            com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport: None,
            com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls: None,
            com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username: None,
            com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensMqActivemqImplArtemisJmsProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties>,

}

impl ComAdobeCqScreensMqActivemqImplArtemisJmsProviderInfo {
    pub fn new() -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderInfo {
        ComAdobeCqScreensMqActivemqImplArtemisJmsProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "global.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub global_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "max.disk.usage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_disk_usage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "persistence.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub persistence_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "thread.pool.max.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub thread_pool_max_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "scheduled.thread.pool.max.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduled_thread_pool_max_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "graceful.shutdown.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub graceful_shutdown_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "queues")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queues: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub topics: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "addresses.max.delivery.attempts")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub addresses_max_delivery_attempts: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "addresses.expiry.delay")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub addresses_expiry_delay: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "addresses.address.full.message.policy")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub addresses_address_full_message_policy: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "addresses.max.size.bytes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub addresses_max_size_bytes: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "addresses.page.size.bytes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub addresses_page_size_bytes: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "addresses.page.cache.max.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub addresses_page_cache_max_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.user")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_user: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cluster.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cluster.call.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_call_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.call.failover.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_call_failover_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.client.failure.check.period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_client_failure_check_period: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.notification.attempts")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_notification_attempts: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.notification.interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_notification_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "id.cache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub id_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.confirmation.window.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_confirmation_window_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.connection.ttl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_connection_ttl: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.duplicate.detection")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_duplicate_detection: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cluster.initial.connect.attempts")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_initial_connect_attempts: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.max.retry.interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_max_retry_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.min.large.message.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_min_large_message_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.producer.window.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_producer_window_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.reconnect.attempts")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_reconnect_attempts: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.retry.interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_retry_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.retry.interval.multiplier")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_retry_interval_multiplier: Option<models::ConfigNodePropertyFloat>,

}

impl ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
    pub fn new() -> ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
        ComAdobeCqScreensMqActivemqImplArtemisJmsProviderProperties {
            service_ranking: None,
            global_size: None,
            max_disk_usage: None,
            persistence_enabled: None,
            thread_pool_max_size: None,
            scheduled_thread_pool_max_size: None,
            graceful_shutdown_timeout: None,
            queues: None,
            topics: None,
            addresses_max_delivery_attempts: None,
            addresses_expiry_delay: None,
            addresses_address_full_message_policy: None,
            addresses_max_size_bytes: None,
            addresses_page_size_bytes: None,
            addresses_page_cache_max_size: None,
            cluster_user: None,
            cluster_password: None,
            cluster_call_timeout: None,
            cluster_call_failover_timeout: None,
            cluster_client_failure_check_period: None,
            cluster_notification_attempts: None,
            cluster_notification_interval: None,
            id_cache_size: None,
            cluster_confirmation_window_size: None,
            cluster_connection_ttl: None,
            cluster_duplicate_detection: None,
            cluster_initial_connect_attempts: None,
            cluster_max_retry_interval: None,
            cluster_min_large_message_size: None,
            cluster_producer_window_size: None,
            cluster_reconnect_attempts: None,
            cluster_retry_interval: None,
            cluster_retry_interval_multiplier: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties>,

}

impl ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo {
    pub fn new() -> ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo {
        ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties {
    #[serde(rename = "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties {
    pub fn new() -> ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties {
        ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties {
            com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path: None,
            com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties>,

}

impl ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo {
    pub fn new() -> ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo {
        ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties {
    #[serde(rename = "disableSmartSync")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disable_smart_sync: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties {
    pub fn new() -> ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties {
        ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplProperties {
            disable_smart_sync: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties>,

}

impl ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo {
    pub fn new() -> ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo {
        ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties {
    #[serde(rename = "enableDataTriggeredContent")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_data_triggered_content: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties {
    pub fn new() -> ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties {
        ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagProperties {
            enable_data_triggered_content: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties>,

}

impl ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo {
    pub fn new() -> ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo {
        ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties {
    pub fn new() -> ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties {
        ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties>,

}

impl ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo {
    pub fn new() -> ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo {
        ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties {
    pub fn new() -> ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties {
        ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties>,

}

impl ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo {
    pub fn new() -> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo {
        ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "dispatcher.address")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dispatcher_address: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "dispatcher.filter.allowed")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dispatcher_filter_allowed: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "dispatcher.filter.blocked")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dispatcher_filter_blocked: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
    pub fn new() -> ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
        ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {
            hc_tags: None,
            dispatcher_address: None,
            dispatcher_filter_allowed: None,
            dispatcher_filter_blocked: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo {
    pub fn new() -> ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo {
        ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties {
    pub fn new() -> ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties {
        ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties>,

}

impl ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo {
    pub fn new() -> ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo {
        ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "webserver.address")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub webserver_address: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties {
    pub fn new() -> ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties {
        ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties {
            hc_tags: None,
            webserver_address: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties>,

}

impl ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo {
    pub fn new() -> ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo {
        ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties {
    #[serde(rename = "enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "ttl1")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ttl1: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "ttl2")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ttl2: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties {
    pub fn new() -> ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties {
        ComAdobeCqSocialAccountverificationImplAccountManagementConfigImProperties {
            enable: None,
            ttl1: None,
            ttl2: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties>,

}

impl ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo {
    pub fn new() -> ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo {
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties {
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties {
    pub fn new() -> ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties {
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenProperties {
            priority: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties>,

}

impl ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo {
    pub fn new() -> ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo {
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties {
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties {
    pub fn new() -> ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties {
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoProperties {
            priority: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties>,

}

impl ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo {
    pub fn new() -> ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo {
        ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties {
    #[serde(rename = "event.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_topics: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties {
    pub fn new() -> ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties {
        ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerProperties {
            event_topics: None,
            event_filter: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties>,

}

impl ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo {
    pub fn new() -> ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo {
        ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties {
    #[serde(rename = "accepted")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub accepted: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "ranked")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ranked: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties {
    pub fn new() -> ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties {
        ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenProperties {
            accepted: None,
            ranked: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties>,

}

impl ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo {
    pub fn new() -> ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo {
        ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties {
    #[serde(rename = "ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties {
    pub fn new() -> ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties {
        ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySProperties {
            ranking: None,
            enable: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo {
    pub fn new() -> ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo {
        ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties {
    #[serde(rename = "streamPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub stream_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "streamName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub stream_name: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties {
    pub fn new() -> ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties {
        ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreProperties {
            stream_path: None,
            stream_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties>,

}

impl ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo {
    pub fn new() -> ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo {
        ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties {
    #[serde(rename = "MaxRetry")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_retry: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "attachmentTypeBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties {
    pub fn new() -> ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties {
        ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIProperties {
            max_retry: None,
            field_whitelist: None,
            attachment_type_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties>,

}

impl ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo {
    pub fn new() -> ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo {
        ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties {
    #[serde(rename = "attachmentTypeBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attachment_type_blacklist: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "extension.order")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub extension_order: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties {
    pub fn new() -> ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties {
        ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenProperties {
            attachment_type_blacklist: None,
            extension_order: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCalendarServletsTimeZoneServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCalendarServletsTimeZoneServletProperties>,

}

impl ComAdobeCqSocialCalendarServletsTimeZoneServletInfo {
    pub fn new() -> ComAdobeCqSocialCalendarServletsTimeZoneServletInfo {
        ComAdobeCqSocialCalendarServletsTimeZoneServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCalendarServletsTimeZoneServletProperties {
    #[serde(rename = "timezones.expirytime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub timezones_expirytime: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialCalendarServletsTimeZoneServletProperties {
    pub fn new() -> ComAdobeCqSocialCalendarServletsTimeZoneServletProperties {
        ComAdobeCqSocialCalendarServletsTimeZoneServletProperties {
            timezones_expirytime: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties>,

}

impl ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo {
    pub fn new() -> ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo {
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties {
    #[serde(rename = "ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ranking: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties {
    pub fn new() -> ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties {
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventProperties {
            ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties>,

}

impl ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo {
    pub fn new() -> ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo {
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "attachmentTypeBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties {
    pub fn new() -> ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties {
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeProperties {
            field_whitelist: None,
            attachment_type_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties>,

}

impl ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo {
    pub fn new() -> ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo {
        ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "attachmentTypeBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties {
    pub fn new() -> ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties {
        ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiProperties {
            field_whitelist: None,
            attachment_type_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties>,

}

impl ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo {
    pub fn new() -> ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo {
        ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties {
    #[serde(rename = "numUserLimit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub num_user_limit: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties {
    pub fn new() -> ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties {
        ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCProperties {
            num_user_limit: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties>,

}

impl ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo {
    pub fn new() -> ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo {
        ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties {
    #[serde(rename = "enableScheduledPostsSearch")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_scheduled_posts_search: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "numberOfMinutes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub number_of_minutes: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxSearchLimit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_search_limit: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties {
    pub fn new() -> ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties {
        ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosProperties {
            enable_scheduled_posts_search: None,
            number_of_minutes: None,
            max_search_limit: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterProperties>,

}

impl ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterInfo {
    pub fn new() -> ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterInfo {
        ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterProperties {
    #[serde(rename = "cors.enabling")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cors_enabling: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterProperties {
    pub fn new() -> ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterProperties {
        ComAdobeCqSocialCommonsCorsCorsAuthenticationFilterProperties {
            cors_enabling: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo {
        ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties {
    #[serde(rename = "priorityOrder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority_order: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "replyEmailPatterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub reply_email_patterns: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties {
        ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderProperties {
            priority_order: None,
            reply_email_patterns: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo {
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties {
    #[serde(rename = "context.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub context_path: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties {
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplProperties {
            context_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo {
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties {
    #[serde(rename = "event.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_topics: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties {
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerProperties {
            event_topics: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo {
        ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties {
    #[serde(rename = "priorityOrder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority_order: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "replyEmailPatterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub reply_email_patterns: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties {
        ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderProperties {
            priority_order: None,
            reply_email_patterns: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo {
        ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
    #[serde(rename = "pattern.time")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pattern_time: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pattern.newline")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pattern_newline: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pattern.dayOfMonth")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pattern_day_of_month: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pattern.month")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pattern_month: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pattern.year")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pattern_year: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pattern.date")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pattern_date: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pattern.dateTime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pattern_date_time: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pattern.email")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pattern_email: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
        ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpProperties {
            pattern_time: None,
            pattern_newline: None,
            pattern_day_of_month: None,
            pattern_month: None,
            pattern_year: None,
            pattern_date: None,
            pattern_date_time: None,
            pattern_email: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo {
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    #[serde(rename = "email.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "email.createPostFromReply")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_create_post_from_reply: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "email.addCommentIdTo")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_add_comment_id_to: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "email.subjectMaximumLength")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_subject_maximum_length: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "email.replyToAddress")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_reply_to_address: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "email.replyToDelimiter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_reply_to_delimiter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "email.trackerIdPrefixInSubject")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_tracker_id_prefix_in_subject: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "email.trackerIdPrefixInBody")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_tracker_id_prefix_in_body: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "email.asHTML")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_as_html: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "email.defaultUserName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_default_user_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "email.templates.rootPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_templates_root_path: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties {
            email_name: None,
            email_create_post_from_reply: None,
            email_add_comment_id_to: None,
            email_subject_maximum_length: None,
            email_reply_to_address: None,
            email_reply_to_delimiter: None,
            email_tracker_id_prefix_in_subject: None,
            email_tracker_id_prefix_in_body: None,
            email_as_html: None,
            email_default_user_name: None,
            email_templates_root_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo {
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties {
    #[serde(rename = "connectProtocol")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connect_protocol: Option<models::ConfigNodePropertyDropDown>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties {
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterProperties {
            connect_protocol: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo {
        ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties {
    #[serde(rename = "priorityOrder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority_order: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "replyEmailPatterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub reply_email_patterns: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties {
        ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderProperties {
            priority_order: None,
            reply_email_patterns: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderInfo {
        ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderProperties {
    #[serde(rename = "priorityOrder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority_order: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "replyEmailPatterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub reply_email_patterns: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderProperties {
        ComAdobeCqSocialCommonsEmailreplyImplIosEmailClientProviderProperties {
            priority_order: None,
            reply_email_patterns: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo {
        ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties {
    #[serde(rename = "priorityOrder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority_order: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "replyEmailPatterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub reply_email_patterns: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties {
        ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderProperties {
            priority_order: None,
            reply_email_patterns: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo {
        ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties {
    #[serde(rename = "priorityOrder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority_order: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "replyEmailPatterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub reply_email_patterns: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties {
        ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderProperties {
            priority_order: None,
            reply_email_patterns: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo {
        ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties {
    #[serde(rename = "replyEmailPatterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub reply_email_patterns: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "priorityOrder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority_order: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties {
        ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderProperties {
            reply_email_patterns: None,
            priority_order: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo {
        ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties {
    #[serde(rename = "priorityOrder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority_order: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "replyEmailPatterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub reply_email_patterns: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties {
    pub fn new() -> ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties {
        ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderProperties {
            priority_order: None,
            reply_email_patterns: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadProperties>,

}

impl ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadInfo {
    pub fn new() -> ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadInfo {
        ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadProperties {
    #[serde(rename = "numberOfDays")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub number_of_days: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "ageOfFile")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub age_of_file: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadProperties {
    pub fn new() -> ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadProperties {
        ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUgcImageUploadProperties {
            number_of_days: None,
            age_of_file: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplProperties>,

}

impl ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplInfo {
    pub fn new() -> ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplInfo {
        ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplProperties {
    #[serde(rename = "event.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_topics: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "verbs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub verbs: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplProperties {
    pub fn new() -> ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplProperties {
        ComAdobeCqSocialCommonsUgclimiterImplUgcLimiterServiceImplProperties {
            event_topics: None,
            event_filter: None,
            verbs: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties>,

}

impl ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitInfo {
    pub fn new() -> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitInfo {
        ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
    #[serde(rename = "enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "UGCLimit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ugc_limit: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "ugcLimitDuration")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ugc_limit_duration: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "domains")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub domains: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "toList")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub to_list: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
    pub fn new() -> ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
        ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUgcLimitProperties {
            enable: None,
            ugc_limit: None,
            ugc_limit_duration: None,
            domains: None,
            to_list: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties>,

}

impl ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo {
    pub fn new() -> ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo {
        ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties {
    #[serde(rename = "oauth.provider.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.cloud.config.root")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_cloud_config_root: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "provider.config.root")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_root: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "provider.config.create.tags.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_create_tags_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "provider.config.user.folder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_user_folder: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "provider.config.facebook.fetch.fields")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_facebook_fetch_fields: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "provider.config.facebook.fields")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_facebook_fields: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "provider.config.refresh.userdata.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_refresh_userdata_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties {
    pub fn new() -> ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties {
        ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties {
            oauth_provider_id: None,
            oauth_cloud_config_root: None,
            provider_config_root: None,
            provider_config_create_tags_enabled: None,
            provider_config_user_folder: None,
            provider_config_facebook_fetch_fields: None,
            provider_config_facebook_fields: None,
            provider_config_refresh_userdata_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties>,

}

impl ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo {
    pub fn new() -> ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo {
        ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties {
    pub fn new() -> ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties {
        ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleProperties {
            path: None,
            service_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties>,

}

impl ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo {
    pub fn new() -> ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo {
        ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties {
    #[serde(rename = "facebook")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub facebook: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "twitter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub twitter: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "provider.config.user.folder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_user_folder: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties {
    pub fn new() -> ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties {
        ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties {
            facebook: None,
            twitter: None,
            provider_config_user_folder: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties>,

}

impl ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo {
    pub fn new() -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo {
        ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
    #[serde(rename = "oauth.provider.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.cloud.config.root")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_cloud_config_root: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "provider.config.root")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_root: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "provider.config.user.folder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_user_folder: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "provider.config.twitter.enable.params")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_twitter_enable_params: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "provider.config.twitter.params")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_twitter_params: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "provider.config.refresh.userdata.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_config_refresh_userdata_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
    pub fn new() -> ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
        ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {
            oauth_provider_id: None,
            oauth_cloud_config_root: None,
            provider_config_root: None,
            provider_config_user_folder: None,
            provider_config_twitter_enable_params: None,
            provider_config_twitter_params: None,
            provider_config_refresh_userdata_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties>,

}

impl ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo {
    pub fn new() -> ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo {
        ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties {
    #[serde(rename = "cq.social.content.fragments.services.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_social_content_fragments_services_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.social.content.fragments.services.waitTimeSeconds")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_social_content_fragments_services_wait_time_seconds: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties {
    pub fn new() -> ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties {
        ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenProperties {
            cq_social_content_fragments_services_enabled: None,
            cq_social_content_fragments_services_wait_time_seconds: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties>,

}

impl ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryInfo {
    pub fn new() -> ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryInfo {
        ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
    #[serde(rename = "version.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub version_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cache.on")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_on: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "concurrency.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub concurrency_level: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.start.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_start_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.ttl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_ttl: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "time.limit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub time_limit: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
    pub fn new() -> ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
        ComAdobeCqSocialDatastoreAsImplAsResourceProviderFactoryProperties {
            version_id: None,
            cache_on: None,
            concurrency_level: None,
            cache_start_size: None,
            cache_ttl: None,
            cache_size: None,
            time_limit: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryProperties>,

}

impl ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryInfo {
    pub fn new() -> ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryInfo {
        ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryProperties {
    #[serde(rename = "solr.zk.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_zk_timeout: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "solr.commit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_commit: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cache.on")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_on: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "concurrency.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub concurrency_level: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.start.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_start_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.ttl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_ttl: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_size: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryProperties {
    pub fn new() -> ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryProperties {
        ComAdobeCqSocialDatastoreOpImplSocialMsResourceProviderFactoryProperties {
            solr_zk_timeout: None,
            solr_commit: None,
            cache_on: None,
            concurrency_level: None,
            cache_start_size: None,
            cache_ttl: None,
            cache_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorProperties>,

}

impl ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorInfo {
    pub fn new() -> ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorInfo {
        ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorProperties {
    #[serde(rename = "solr.zk.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_zk_timeout: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "solr.commit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_commit: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cache.on")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_on: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "concurrency.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub concurrency_level: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.start.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_start_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.ttl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_ttl: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_size: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorProperties {
    pub fn new() -> ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorProperties {
        ComAdobeCqSocialDatastoreRdbImplSocialRdbResourceProviderFactorProperties {
            solr_zk_timeout: None,
            solr_commit: None,
            cache_on: None,
            concurrency_level: None,
            cache_start_size: None,
            cache_ttl: None,
            cache_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties>,

}

impl ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo {
    pub fn new() -> ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo {
        ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties {
    #[serde(rename = "isMemberCheck")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_member_check: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties {
    pub fn new() -> ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties {
        ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFProperties {
            is_member_check: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties>,

}

impl ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo {
    pub fn new() -> ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo {
        ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties {
    #[serde(rename = "isMemberCheck")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_member_check: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties {
    pub fn new() -> ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties {
        ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoProperties {
            is_member_check: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties>,

}

impl ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo {
    pub fn new() -> ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo {
        ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties {
    pub fn new() -> ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties {
        ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLProperties {
            field_whitelist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties>,

}

impl ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo {
    pub fn new() -> ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo {
        ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties {
    pub fn new() -> ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties {
        ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouProperties {
            field_whitelist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo {
    pub fn new() -> ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo {
        ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties {
    pub fn new() -> ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties {
        ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplProperties {
            service_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties>,

}

impl ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo {
    pub fn new() -> ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo {
        ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties {
    #[serde(rename = "sling.servlet.selectors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_selectors: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.extensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_extensions: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties {
    pub fn new() -> ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties {
        ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeProperties {
            sling_servlet_selectors: None,
            sling_servlet_extensions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties>,

}

impl ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo {
    pub fn new() -> ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo {
        ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "attachmentTypeBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties {
    pub fn new() -> ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties {
        ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaProperties {
            field_whitelist: None,
            attachment_type_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties>,

}

impl ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo {
    pub fn new() -> ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo {
        ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "attachmentTypeBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties {
    pub fn new() -> ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties {
        ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceProperties {
            field_whitelist: None,
            attachment_type_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties>,

}

impl ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo {
    pub fn new() -> ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo {
        ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties {
    #[serde(rename = "extension.order")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub extension_order: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "flush.forumontopic")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub flush_forumontopic: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties {
    pub fn new() -> ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties {
        ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties {
            extension_order: None,
            flush_forumontopic: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties>,

}

impl ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo {
    pub fn new() -> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo {
        ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
    #[serde(rename = "group.listing.pagination.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_listing_pagination_enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "group.listing.lazyloading.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_listing_lazyloading_enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "page.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub page_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
    pub fn new() -> ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
        ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenProperties {
            group_listing_pagination_enable: None,
            group_listing_lazyloading_enable: None,
            page_size: None,
            priority: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialGroupImplGroupServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialGroupImplGroupServiceImplProperties>,

}

impl ComAdobeCqSocialGroupImplGroupServiceImplInfo {
    pub fn new() -> ComAdobeCqSocialGroupImplGroupServiceImplInfo {
        ComAdobeCqSocialGroupImplGroupServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialGroupImplGroupServiceImplProperties {
    #[serde(rename = "maxWaitTime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_wait_time: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "minWaitBetweenRetries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub min_wait_between_retries: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialGroupImplGroupServiceImplProperties {
    pub fn new() -> ComAdobeCqSocialGroupImplGroupServiceImplProperties {
        ComAdobeCqSocialGroupImplGroupServiceImplProperties {
            max_wait_time: None,
            min_wait_between_retries: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo {
    pub fn new() -> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo {
        ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
    #[serde(rename = "parameter.guava.cache.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub parameter_guava_cache_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "parameter.guava.cache.params")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub parameter_guava_cache_params: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "parameter.guava.cache.reload")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub parameter_guava_cache_reload: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
    pub fn new() -> ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
        ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplProperties {
            parameter_guava_cache_enabled: None,
            parameter_guava_cache_params: None,
            parameter_guava_cache_reload: None,
            service_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties>,

}

impl ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo {
    pub fn new() -> ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo {
        ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "attachmentTypeBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties {
    pub fn new() -> ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties {
        ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSProperties {
            field_whitelist: None,
            attachment_type_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties>,

}

impl ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo {
    pub fn new() -> ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo {
        ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "attachmentTypeBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties {
    pub fn new() -> ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties {
        ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerProperties {
            field_whitelist: None,
            attachment_type_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties>,

}

impl ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo {
    pub fn new() -> ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo {
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties {
    pub fn new() -> ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties {
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileProperties {
            field_whitelist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties>,

}

impl ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo {
    pub fn new() -> ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo {
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties {
    pub fn new() -> ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties {
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOProperties {
            field_whitelist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties>,

}

impl ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo {
    pub fn new() -> ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo {
        ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties {
    #[serde(rename = "everyoneLimit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub everyone_limit: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties {
    pub fn new() -> ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties {
        ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFProperties {
            everyone_limit: None,
            priority: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties>,

}

impl ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo {
    pub fn new() -> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo {
        ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties {
    #[serde(rename = "message.properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub message_properties: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "messageBoxSizeLimit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub message_box_size_limit: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "messageCountLimit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub message_count_limit: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "notifyFailure")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub notify_failure: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "failureMessageFrom")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub failure_message_from: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "failureTemplatePath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub failure_template_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "maxRetries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_retries: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "minWaitBetweenRetries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub min_wait_between_retries: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "countUpdatePoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub count_update_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "inbox.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub inbox_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sentitems.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sentitems_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "supportAttachments")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub support_attachments: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "supportGroupMessaging")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub support_group_messaging: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "maxTotalRecipients")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_total_recipients: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "batchSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub batch_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxTotalAttachmentSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_total_attachment_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "attachmentTypeBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "allowedAttachmentTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allowed_attachment_types: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "serviceSelector")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_selector: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties {
    pub fn new() -> ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties {
        ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties {
            message_properties: None,
            message_box_size_limit: None,
            message_count_limit: None,
            notify_failure: None,
            failure_message_from: None,
            failure_template_path: None,
            max_retries: None,
            min_wait_between_retries: None,
            count_update_pool_size: None,
            inbox_path: None,
            sentitems_path: None,
            support_attachments: None,
            support_group_messaging: None,
            max_total_recipients: None,
            batch_size: None,
            max_total_attachment_size: None,
            attachment_type_blacklist: None,
            allowed_attachment_types: None,
            service_selector: None,
            field_whitelist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties>,

}

impl ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo {
    pub fn new() -> ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo {
        ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties {
    #[serde(rename = "resourceType.filters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_type_filters: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties {
    pub fn new() -> ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties {
        ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenProperties {
            resource_type_filters: None,
            priority: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties>,

}

impl ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo {
    pub fn new() -> ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo {
        ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties {
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties {
    pub fn new() -> ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties {
        ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialProperties {
            priority: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties>,

}

impl ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo {
    pub fn new() -> ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo {
        ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties {
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties {
    pub fn new() -> ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties {
        ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenProperties {
            priority: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties>,

}

impl ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo {
    pub fn new() -> ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo {
        ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties {
    #[serde(rename = "resourceType.filters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_type_filters: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties {
    pub fn new() -> ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties {
        ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociProperties {
            resource_type_filters: None,
            priority: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialNotificationsImplMentionsRouterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialNotificationsImplMentionsRouterProperties>,

}

impl ComAdobeCqSocialNotificationsImplMentionsRouterInfo {
    pub fn new() -> ComAdobeCqSocialNotificationsImplMentionsRouterInfo {
        ComAdobeCqSocialNotificationsImplMentionsRouterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialNotificationsImplMentionsRouterProperties {
    #[serde(rename = "event.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_topics: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialNotificationsImplMentionsRouterProperties {
    pub fn new() -> ComAdobeCqSocialNotificationsImplMentionsRouterProperties {
        ComAdobeCqSocialNotificationsImplMentionsRouterProperties {
            event_topics: None,
            event_filter: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties>,

}

impl ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo {
    pub fn new() -> ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo {
        ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties {
    #[serde(rename = "max.unread.notification.count")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_unread_notification_count: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties {
    pub fn new() -> ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties {
        ComAdobeCqSocialNotificationsImplNotificationManagerImplProperties {
            max_unread_notification_count: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialNotificationsImplNotificationsRouterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialNotificationsImplNotificationsRouterProperties>,

}

impl ComAdobeCqSocialNotificationsImplNotificationsRouterInfo {
    pub fn new() -> ComAdobeCqSocialNotificationsImplNotificationsRouterInfo {
        ComAdobeCqSocialNotificationsImplNotificationsRouterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialNotificationsImplNotificationsRouterProperties {
    #[serde(rename = "event.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_topics: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialNotificationsImplNotificationsRouterProperties {
    pub fn new() -> ComAdobeCqSocialNotificationsImplNotificationsRouterProperties {
        ComAdobeCqSocialNotificationsImplNotificationsRouterProperties {
            event_topics: None,
            event_filter: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties>,

}

impl ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo {
    pub fn new() -> ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo {
        ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "attachmentTypeBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties {
    pub fn new() -> ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties {
        ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicProperties {
            field_whitelist: None,
            attachment_type_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties>,

}

impl ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo {
    pub fn new() -> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo {
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties {
    #[serde(rename = "cq.social.reporting.analytics.polling.importer.interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_social_reporting_analytics_polling_importer_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.social.reporting.analytics.polling.importer.pageSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_social_reporting_analytics_polling_importer_page_size: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties {
    pub fn new() -> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties {
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIProperties {
            cq_social_reporting_analytics_polling_importer_interval: None,
            cq_social_reporting_analytics_polling_importer_page_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties>,

}

impl ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo {
    pub fn new() -> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo {
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties {
    #[serde(rename = "report.fetch.delay")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub report_fetch_delay: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties {
    pub fn new() -> ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties {
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMProperties {
            report_fetch_delay: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties>,

}

impl ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo {
    pub fn new() -> ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo {
        ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties {
    #[serde(rename = "cq.social.console.analytics.sites.mapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_social_console_analytics_sites_mapping: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties {
    pub fn new() -> ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties {
        ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSProperties {
            cq_social_console_analytics_sites_mapping: None,
            priority: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties>,

}

impl ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo {
    pub fn new() -> ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo {
        ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "attachmentTypeBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties {
    pub fn new() -> ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties {
        ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiProperties {
            field_whitelist: None,
            attachment_type_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties>,

}

impl ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo {
    pub fn new() -> ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo {
        ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties {
    #[serde(rename = "sling.servlet.selectors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_selectors: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.extensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_extensions: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties {
    pub fn new() -> ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties {
        ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletProperties {
            sling_servlet_selectors: None,
            sling_servlet_extensions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties>,

}

impl ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo {
    pub fn new() -> ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo {
        ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties {
    #[serde(rename = "sling.servlet.selectors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_selectors: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sling.servlet.extensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_extensions: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties {
    pub fn new() -> ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties {
        ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletProperties {
            sling_servlet_selectors: None,
            sling_servlet_extensions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialScoringImplScoringEventListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialScoringImplScoringEventListenerProperties>,

}

impl ComAdobeCqSocialScoringImplScoringEventListenerInfo {
    pub fn new() -> ComAdobeCqSocialScoringImplScoringEventListenerInfo {
        ComAdobeCqSocialScoringImplScoringEventListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialScoringImplScoringEventListenerProperties {
    #[serde(rename = "event.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_topics: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialScoringImplScoringEventListenerProperties {
    pub fn new() -> ComAdobeCqSocialScoringImplScoringEventListenerProperties {
        ComAdobeCqSocialScoringImplScoringEventListenerProperties {
            event_topics: None,
            event_filter: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties>,

}

impl ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo {
    pub fn new() -> ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo {
        ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties {
    #[serde(rename = "enableFallback")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_fallback: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties {
    pub fn new() -> ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties {
        ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplProperties {
            enable_fallback: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties>,

}

impl ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo {
    pub fn new() -> ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo {
        ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties {
    #[serde(rename = "fieldWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub field_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sitePathFilters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub site_path_filters: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sitePackageGroup")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub site_package_group: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties {
    pub fn new() -> ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties {
        ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceProperties {
            field_whitelist: None,
            site_path_filters: None,
            site_package_group: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties>,

}

impl ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo {
    pub fn new() -> ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo {
        ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties {
    #[serde(rename = "cq.social.console.analytics.components")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_social_console_analytics_components: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties {
    pub fn new() -> ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties {
        ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImProperties {
            cq_social_console_analytics_components: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties>,

}

impl ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo {
    pub fn new() -> ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo {
        ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties {
    #[serde(rename = "componentsUsingTags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub components_using_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties {
    pub fn new() -> ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties {
        ComAdobeCqSocialSiteImplSiteConfiguratorImplProperties {
            components_using_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSrpImplSocialSolrConnectorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialSrpImplSocialSolrConnectorProperties>,

}

impl ComAdobeCqSocialSrpImplSocialSolrConnectorInfo {
    pub fn new() -> ComAdobeCqSocialSrpImplSocialSolrConnectorInfo {
        ComAdobeCqSocialSrpImplSocialSolrConnectorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSrpImplSocialSolrConnectorProperties {
    #[serde(rename = "srp.type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub srp_type: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialSrpImplSocialSolrConnectorProperties {
    pub fn new() -> ComAdobeCqSocialSrpImplSocialSolrConnectorProperties {
        ComAdobeCqSocialSrpImplSocialSolrConnectorProperties {
            srp_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSyncImplDiffChangesObserverInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialSyncImplDiffChangesObserverProperties>,

}

impl ComAdobeCqSocialSyncImplDiffChangesObserverInfo {
    pub fn new() -> ComAdobeCqSocialSyncImplDiffChangesObserverInfo {
        ComAdobeCqSocialSyncImplDiffChangesObserverInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "agentName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub agent_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "diffPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub diff_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "propertyNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub property_names: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
    pub fn new() -> ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
        ComAdobeCqSocialSyncImplDiffChangesObserverProperties {
            enabled: None,
            agent_name: None,
            diff_path: None,
            property_names: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties>,

}

impl ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo {
    pub fn new() -> ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo {
        ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties {
    #[serde(rename = "nodetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub nodetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "ignorableprops")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ignorableprops: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "ignorablenodes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ignorablenodes: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "distfolders")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub distfolders: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties {
    pub fn new() -> ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties {
        ComAdobeCqSocialSyncImplGroupSyncListenerImplProperties {
            nodetypes: None,
            ignorableprops: None,
            ignorablenodes: None,
            enabled: None,
            distfolders: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties>,

}

impl ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo {
    pub fn new() -> ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo {
        ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties {
    #[serde(rename = "activeRunModes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub active_run_modes: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties {
    pub fn new() -> ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties {
        ComAdobeCqSocialSyncImplPublisherSyncServiceImplProperties {
            active_run_modes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSyncImplUserSyncListenerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialSyncImplUserSyncListenerImplProperties>,

}

impl ComAdobeCqSocialSyncImplUserSyncListenerImplInfo {
    pub fn new() -> ComAdobeCqSocialSyncImplUserSyncListenerImplInfo {
        ComAdobeCqSocialSyncImplUserSyncListenerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
    #[serde(rename = "nodetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub nodetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "ignorableprops")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ignorableprops: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "ignorablenodes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ignorablenodes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "distfolders")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub distfolders: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
    pub fn new() -> ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
        ComAdobeCqSocialSyncImplUserSyncListenerImplProperties {
            nodetypes: None,
            ignorableprops: None,
            ignorablenodes: None,
            enabled: None,
            distfolders: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties>,

}

impl ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo {
    pub fn new() -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo {
        ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
    #[serde(rename = "translate.language")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub translate_language: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "translate.display")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub translate_display: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "translate.attribution")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub translate_attribution: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "translate.caching")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub translate_caching: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "translate.smart.rendering")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub translate_smart_rendering: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "translate.caching.duration")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub translate_caching_duration: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "translate.session.save.interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub translate_session_save_interval: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "translate.session.save.batchLimit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub translate_session_save_batch_limit: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
    pub fn new() -> ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
        ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerProperties {
            translate_language: None,
            translate_display: None,
            translate_attribution: None,
            translate_caching: None,
            translate_smart_rendering: None,
            translate_caching_duration: None,
            translate_session_save_interval: None,
            translate_session_save_batch_limit: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialTranslationImplUgcLanguageDetectorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties>,

}

impl ComAdobeCqSocialTranslationImplUgcLanguageDetectorInfo {
    pub fn new() -> ComAdobeCqSocialTranslationImplUgcLanguageDetectorInfo {
        ComAdobeCqSocialTranslationImplUgcLanguageDetectorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
    #[serde(rename = "event.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_topics: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "translate.listener.type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub translate_listener_type: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "translate.property.list")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub translate_property_list: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "poolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "queueSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "keepAliveTime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub keep_alive_time: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
    pub fn new() -> ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
        ComAdobeCqSocialTranslationImplUgcLanguageDetectorProperties {
            event_topics: None,
            event_filter: None,
            translate_listener_type: None,
            translate_property_list: None,
            pool_size: None,
            max_pool_size: None,
            queue_size: None,
            keep_alive_time: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties>,

}

impl ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo {
    pub fn new() -> ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo {
        ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties {
    #[serde(rename = "threadPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub thread_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "delayTime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub delay_time: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "workerSleepTime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub worker_sleep_time: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties {
    pub fn new() -> ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties {
        ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplProperties {
            thread_pool_size: None,
            delay_time: None,
            worker_sleep_time: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties>,

}

impl ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo {
    pub fn new() -> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo {
        ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
    #[serde(rename = "poolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "queueSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "keepAliveTime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub keep_alive_time: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
    pub fn new() -> ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
        ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplProperties {
            pool_size: None,
            max_pool_size: None,
            queue_size: None,
            keep_alive_time: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties>,

}

impl ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo {
    pub fn new() -> ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo {
        ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties {
    #[serde(rename = "isPrimaryPublisher")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_primary_publisher: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties {
    pub fn new() -> ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties {
        ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplProperties {
            is_primary_publisher: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties>,

}

impl ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo {
    pub fn new() -> ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo {
        ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties {
    #[serde(rename = "legacyCloudUGCPathMapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub legacy_cloud_ugc_path_mapping: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties {
    pub fn new() -> ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties {
        ComAdobeCqSocialUgcbaseImplSocialUtilsImplProperties {
            legacy_cloud_ugc_path_mapping: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties>,

}

impl ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo {
    pub fn new() -> ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo {
        ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties {
    #[serde(rename = "automoderation.sequence")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub automoderation_sequence: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "automoderation.onfailurestop")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub automoderation_onfailurestop: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties {
    pub fn new() -> ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties {
        ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplProperties {
            automoderation_sequence: None,
            automoderation_onfailurestop: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties>,

}

impl ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo {
    pub fn new() -> ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo {
        ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
    #[serde(rename = "watchwords.positive")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub watchwords_positive: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "watchwords.negative")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub watchwords_negative: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "watchwords.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub watchwords_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sentiment.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sentiment_path: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
    pub fn new() -> ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
        ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties {
            watchwords_positive: None,
            watchwords_negative: None,
            watchwords_path: None,
            sentiment_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties>,

}

impl ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo {
    pub fn new() -> ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo {
        ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties {
    #[serde(rename = "default.attachment.type.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "baseline.attachment.type.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub baseline_attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties {
    pub fn new() -> ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties {
        ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliProperties {
            default_attachment_type_blacklist: None,
            baseline_attachment_type_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties>,

}

impl ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo {
    pub fn new() -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo {
        ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
    #[serde(rename = "parameter.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub parameter_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "parameter.whitelist.prefixes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub parameter_whitelist_prefixes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "binary.parameter.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub binary_parameter_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "modifier.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub modifier_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "operation.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub operation_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "operation.whitelist.prefixes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub operation_whitelist_prefixes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "typehint.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub typehint_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "resourcetype.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resourcetype_whitelist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
    pub fn new() -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
        ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
            parameter_whitelist: None,
            parameter_whitelist_prefixes: None,
            binary_parameter_whitelist: None,
            modifier_whitelist: None,
            operation_whitelist: None,
            operation_whitelist_prefixes: None,
            typehint_whitelist: None,
            resourcetype_whitelist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties>,

}

impl ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo {
    pub fn new() -> ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo {
        ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties {
    #[serde(rename = "sling.servlet.extensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_extensions: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_paths: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_methods: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties {
    pub fn new() -> ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties {
        ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletProperties {
            sling_servlet_extensions: None,
            sling_servlet_paths: None,
            sling_servlet_methods: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUserImplTransportHttpToPublisherInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqSocialUserImplTransportHttpToPublisherProperties>,

}

impl ComAdobeCqSocialUserImplTransportHttpToPublisherInfo {
    pub fn new() -> ComAdobeCqSocialUserImplTransportHttpToPublisherInfo {
        ComAdobeCqSocialUserImplTransportHttpToPublisherInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
    #[serde(rename = "enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "agent.configuration")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub agent_configuration: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "context.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub context_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "disabled.cipher.suites")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disabled_cipher_suites: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "enabled.cipher.suites")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled_cipher_suites: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
    pub fn new() -> ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
        ComAdobeCqSocialUserImplTransportHttpToPublisherProperties {
            enable: None,
            agent_configuration: None,
            context_path: None,
            disabled_cipher_suites: None,
            enabled_cipher_suites: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactProperties>,

}

impl ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactInfo {
    pub fn new() -> ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactInfo {
        ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactProperties {
    #[serde(rename = "resource.types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_types: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactProperties {
    pub fn new() -> ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactProperties {
        ComAdobeCqUiWcmCommonsInternalServletsRteRteFilterServletFactProperties {
            resource_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties>,

}

impl ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo {
    pub fn new() -> ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo {
        ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties {
    #[serde(rename = "delete.path.regexps")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub delete_path_regexps: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "delete.sql2.query")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub delete_sql2_query: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties {
    pub fn new() -> ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties {
        ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties {
            delete_path_regexps: None,
            delete_sql2_query: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties>,

}

impl ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo {
    pub fn new() -> ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo {
        ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties {
    #[serde(rename = "delete.name.regexps")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub delete_name_regexps: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties {
    pub fn new() -> ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties {
        ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupProperties {
            delete_name_regexps: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties>,

}

impl ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo {
    pub fn new() -> ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo {
        ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties {
    #[serde(rename = "threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "jobTopicName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_topic_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "emailEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties {
    pub fn new() -> ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties {
        ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties {
            threshold: None,
            job_topic_name: None,
            email_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties>,

}

impl ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo {
    pub fn new() -> ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo {
        ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties {
    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "job.purge.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_purge_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "job.purge.max.jobs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_purge_max_jobs: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties {
    pub fn new() -> ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties {
        ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskProperties {
            scheduler_expression: None,
            job_purge_threshold: None,
            job_purge_max_jobs: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties>,

}

impl ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo {
    pub fn new() -> ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo {
        ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties {
    #[serde(rename = "threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "jobTopicName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_topic_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "emailEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties {
    pub fn new() -> ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties {
        ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceProperties {
            threshold: None,
            job_topic_name: None,
            email_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties>,

}

impl ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo {
    pub fn new() -> ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo {
        ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties {
    #[serde(rename = "threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "jobTopicName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_topic_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "emailEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties {
    pub fn new() -> ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties {
        ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceProperties {
            threshold: None,
            job_topic_name: None,
            email_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties>,

}

impl ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo {
    pub fn new() -> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo {
        ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "launches.eventhandler.threadpool.maxsize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub launches_eventhandler_threadpool_maxsize: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "launches.eventhandler.threadpool.priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub launches_eventhandler_threadpool_priority: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "launches.eventhandler.updatelastmodification")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub launches_eventhandler_updatelastmodification: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
    pub fn new() -> ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
        ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties {
            event_filter: None,
            launches_eventhandler_threadpool_maxsize: None,
            launches_eventhandler_threadpool_priority: None,
            launches_eventhandler_updatelastmodification: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorProperties>,

}

impl ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorInfo {
    pub fn new() -> ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorInfo {
        ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorProperties {
    #[serde(rename = "cq.wcm.qrcode.servlet.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_qrcode_servlet_whitelist: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorProperties {
    pub fn new() -> ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorProperties {
        ComAdobeCqWcmMobileQrcodeServletQrCodeImageGeneratorProperties {
            cq_wcm_qrcode_servlet_whitelist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties>,

}

impl ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo {
    pub fn new() -> ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo {
        ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties {
    #[serde(rename = "size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub size: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties {
    pub fn new() -> ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties {
        ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplProperties {
            size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties>,

}

impl ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo {
    pub fn new() -> ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo {
        ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties {
    #[serde(rename = "syncTranslationState.schedulingFormat")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sync_translation_state_scheduling_format: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "schedulingRepeatTranslation.schedulingFormat")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduling_repeat_translation_scheduling_format: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "syncTranslationState.lockTimeoutInMinutes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sync_translation_state_lock_timeout_in_minutes: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "export.format")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub export_format: Option<models::ConfigNodePropertyDropDown>,

}

impl ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties {
    pub fn new() -> ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties {
        ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties {
            sync_translation_state_scheduling_format: None,
            scheduling_repeat_translation_scheduling_format: None,
            sync_translation_state_lock_timeout_in_minutes: None,
            export_format: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties>,

}

impl ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo {
    pub fn new() -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo {
        ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
    #[serde(rename = "portal.outboxes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub portal_outboxes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "draft.data.service")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub draft_data_service: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "draft.metadata.service")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub draft_metadata_service: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "submit.data.service")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub submit_data_service: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "submit.metadata.service")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub submit_metadata_service: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pendingSign.data.service")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pending_sign_data_service: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pendingSign.metadata.service")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pending_sign_metadata_service: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
    pub fn new() -> ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
        ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {
            portal_outboxes: None,
            draft_data_service: None,
            draft_metadata_service: None,
            submit_data_service: None,
            submit_metadata_service: None,
            pending_sign_data_service: None,
            pending_sign_metadata_service: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties>,

}

impl ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo {
    pub fn new() -> ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo {
        ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties {
    #[serde(rename = "formportal.interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub formportal_interval: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties {
    pub fn new() -> ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties {
        ComAdobeFdFpConfigFormsPortalSchedulerServiceProperties {
            formportal_interval: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeFormsCommonServiceImplDefaultDataProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeFormsCommonServiceImplDefaultDataProviderProperties>,

}

impl ComAdobeFormsCommonServiceImplDefaultDataProviderInfo {
    pub fn new() -> ComAdobeFormsCommonServiceImplDefaultDataProviderInfo {
        ComAdobeFormsCommonServiceImplDefaultDataProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeFormsCommonServiceImplDefaultDataProviderProperties {
    #[serde(rename = "alloweddataFileLocations")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub alloweddata_file_locations: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeFormsCommonServiceImplDefaultDataProviderProperties {
    pub fn new() -> ComAdobeFormsCommonServiceImplDefaultDataProviderProperties {
        ComAdobeFormsCommonServiceImplDefaultDataProviderProperties {
            alloweddata_file_locations: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties>,

}

impl ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo {
    pub fn new() -> ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo {
        ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties {
    #[serde(rename = "tempStorageConfig")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub temp_storage_config: Option<models::ConfigNodePropertyDropDown>,

}

impl ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties {
    pub fn new() -> ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties {
        ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpProperties {
            temp_storage_config: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeFormsCommonServletTempCleanUpTaskInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeFormsCommonServletTempCleanUpTaskProperties>,

}

impl ComAdobeFormsCommonServletTempCleanUpTaskInfo {
    pub fn new() -> ComAdobeFormsCommonServletTempCleanUpTaskInfo {
        ComAdobeFormsCommonServletTempCleanUpTaskInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeFormsCommonServletTempCleanUpTaskProperties {
    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "Duration for Temporary Storage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub duration_for_temporary_storage: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "Duration for Anonymous Storage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub duration_for_anonymous_storage: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeFormsCommonServletTempCleanUpTaskProperties {
    pub fn new() -> ComAdobeFormsCommonServletTempCleanUpTaskProperties {
        ComAdobeFormsCommonServletTempCleanUpTaskProperties {
            scheduler_expression: None,
            duration_for_temporary_storage: None,
            duration_for_anonymous_storage: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAcpPlatformPlatformServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAcpPlatformPlatformServletProperties>,

}

impl ComAdobeGraniteAcpPlatformPlatformServletInfo {
    pub fn new() -> ComAdobeGraniteAcpPlatformPlatformServletInfo {
        ComAdobeGraniteAcpPlatformPlatformServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAcpPlatformPlatformServletProperties {
    #[serde(rename = "query.limit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub query_limit: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "file.type.extension.map")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub file_type_extension_map: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteAcpPlatformPlatformServletProperties {
    pub fn new() -> ComAdobeGraniteAcpPlatformPlatformServletProperties {
        ComAdobeGraniteAcpPlatformPlatformServletProperties {
            query_limit: None,
            file_type_extension_map: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties>,

}

impl ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo {
    pub fn new() -> ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo {
        ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties {
    #[serde(rename = "aggregate.relationships")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub aggregate_relationships: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "aggregate.descend.virtual")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub aggregate_descend_virtual: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties {
    pub fn new() -> ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties {
        ComAdobeGraniteActivitystreamsImplActivityManagerImplProperties {
            aggregate_relationships: None,
            aggregate_descend_virtual: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo {
    pub fn new() -> ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo {
        ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties {
    #[serde(rename = "disabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties {
    pub fn new() -> ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties {
        ComAdobeGraniteAnalyzerBaseSystemStatusServletProperties {
            disabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo {
    pub fn new() -> ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo {
        ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties {
    #[serde(rename = "disabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties {
    pub fn new() -> ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties {
        ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletProperties {
            disabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo {
    pub fn new() -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo {
        ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    #[serde(rename = "com.adobe.cq.cdn.cdn-rewriter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cdn_cdn_rewriter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cloud-config.components")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cloud_config_components: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cloud-config.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cloud_config_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cloud-config.ui")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cloud_config_ui: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.com.adobe.cq.editor")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_com_adobe_cq_editor: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.com.adobe.cq.projects.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_com_adobe_cq_projects_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.com.adobe.cq.projects.wcm.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_com_adobe_cq_projects_wcm_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.com.adobe.cq.ui.commons")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_com_adobe_cq_ui_commons: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.com.adobe.cq.wcm.style")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_com_adobe_cq_wcm_style: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cq-activitymap-integration")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cq_activitymap_integration: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cq-contexthub-commons")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cq_contexthub_commons: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cq-dtm")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cq_dtm: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cq-healthcheck")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cq_healthcheck: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cq-multisite-targeting")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cq_multisite_targeting: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cq-pre-upgrade-cleanup")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cq_pre_upgrade_cleanup: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cq-product-info-provider")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cq_product_info_provider: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cq-rest-sites")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cq_rest_sites: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.cq-security-hc")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_cq_security_hc: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.dam.cq-dam-svg-handler")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_dam_cq_dam_svg_handler: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.dam.cq-scene7-imaging")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_dam_cq_scene7_imaging: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.dtm-reactor.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_dtm_reactor_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.dtm-reactor.ui")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_dtm_reactor_ui: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.exp-jspel-resolver")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_exp_jspel_resolver: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.inbox.cq-inbox")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_inbox_cq_inbox: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.json-schema-parser")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_json_schema_parser: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.media.cq-media-publishing-dps-fp-core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_media_cq_media_publishing_dps_fp_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.mobile.cq-mobile-caas")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_mobile_cq_mobile_caas: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.mobile.cq-mobile-index-builder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_mobile_cq_mobile_index_builder: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.mobile.cq-mobile-phonegap-build")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_mobile_cq_mobile_phonegap_build: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.myspell")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_myspell: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.sample.we.retail.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_sample_we_retail_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.screens.com.adobe.cq.screens.dcc")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_com_adobe_cq_screens_dcc: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.screens.com.adobe.cq.screens.mq.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_screens_com_adobe_cq_screens_mq_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-as-provider")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_as_provider: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-badging-basic-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_badging_basic_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-badging-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_badging_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-calendar-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_calendar_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-content-fragments-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_content_fragments_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-enablement-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_enablement_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-graph-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_graph_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-ideation-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_ideation_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-jcr-provider")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_jcr_provider: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-members-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_members_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-ms-provider")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_ms_provider: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-notifications-channels-web")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_notifications_channels_web: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-notifications-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_notifications_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-rdb-provider")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_rdb_provider: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-scf-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_scf_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-scoring-basic-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_scoring_basic_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-scoring-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_scoring_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-serviceusers-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_serviceusers_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-srp-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_srp_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.cq.social.cq-social-ugcbase-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_cq_social_cq_social_ugcbase_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.dam.cq-dam-cfm-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_dam_cq_dam_cfm_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.forms.foundation-forms-foundation-base")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_forms_foundation_forms_foundation_base: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.apicontroller")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_apicontroller: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.asset.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_asset_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.auth.sso")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_auth_sso: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.bundles.hc.impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_bundles_hc_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.compat-router")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_compat_router: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.conf")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_conf: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.conf.ui.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_conf_ui_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.cors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_cors: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.crx-explorer")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_crx_explorer: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.crxde-lite")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_crxde_lite: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.crypto.config")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_crypto_config: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.crypto.extension")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_crypto_extension: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.crypto.file")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_crypto_file: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.crypto.jcr")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_crypto_jcr: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.csrf")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_csrf: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.distribution.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_distribution_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.dropwizard.metrics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_dropwizard_metrics: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.frags.impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_frags_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.gibson")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_gibson: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.infocollector")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_infocollector: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.installer.factory.packages")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_installer_factory_packages: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.jetty.ssl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_jetty_ssl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.jobs.async")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_jobs_async: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.maintenance.oak")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_maintenance_oak: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.monitoring.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_monitoring_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.queries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_queries: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.replication.hc.impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_replication_hc_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.repository.checker")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_repository_checker: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.repository.hc.impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_repository_hc_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.rest.assets")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_rest_assets: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.security.ui")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_security_ui: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.startup")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_startup: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.tagsoup")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_tagsoup: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.taskmanagement.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_taskmanagement_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.taskmanagement.workflow")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_taskmanagement_workflow: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.ui.clientlibs.compiler.less")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_ui_clientlibs_compiler_less: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.ui.clientlibs.processor.gcc")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_ui_clientlibs_processor_gcc: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.webconsole.plugins")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_webconsole_plugins: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.workflow.console")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_workflow_console: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.xmp.worker.files.native.fragment.linux")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_xmp_worker_files_native_fragment_linux: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.xmp.worker.files.native.fragment.macosx")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_xmp_worker_files_native_fragment_macosx: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.xmp.worker.files.native.fragment.win")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_xmp_worker_files_native_fragment_win: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.commons.osgi.wrapper.simple-jndi")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_commons_osgi_wrapper_simple_jndi: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.cq-authhandler")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_cq_authhandler: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.cq-compat-configupdate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_cq_compat_configupdate: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.cq-licensebranding")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_cq_licensebranding: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.cq-notifcation-impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_cq_notifcation_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.cq-replication-audit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_cq_replication_audit: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.cq-search-ext")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_cq_search_ext: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.dam.cq-dam-annotation-print")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_dam_cq_dam_annotation_print: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.dam.cq-dam-asset-usage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_dam_cq_dam_asset_usage: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.dam.cq-dam-s7dam")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_dam_cq_dam_s7dam: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.dam.cq-dam-similaritysearch")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_dam_cq_dam_similaritysearch: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.dam.dam-webdav-support")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_dam_dam_webdav_support: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.pre-upgrade-tasks")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_pre_upgrade_tasks: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.replication.extensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_replication_extensions: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.wcm.cq-msm-core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_wcm_cq_msm_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.day.cq.wcm.cq-wcm-translation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_wcm_cq_wcm_translation: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "day-commons-jrawio")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub day_commons_jrawio: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.aries.jmx.whiteboard")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_aries_jmx_whiteboard: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.http.sslfilter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_sslfilter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.org.apache.felix.threaddump")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_org_apache_felix_threaddump: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.webconsole.plugins.ds")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_webconsole_plugins_ds: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.webconsole.plugins.event")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_webconsole_plugins_event: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.webconsole.plugins.memoryusage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_webconsole_plugins_memoryusage: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.webconsole.plugins.packageadmin")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_webconsole_plugins_packageadmin: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.jackrabbit.oak-auth-ldap")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_jackrabbit_oak_auth_ldap: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.jackrabbit.oak-segment-tar")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_jackrabbit_oak_segment_tar: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.jackrabbit.oak-solr-osgi")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_jackrabbit_oak_solr_osgi: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.bundleresource.impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_bundleresource_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.commons.fsclassloader")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_fsclassloader: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.commons.log.webconsole")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_webconsole: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.datasource")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_datasource: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.discovery.base")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_discovery_base: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.discovery.oak")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_discovery_oak: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.discovery.support")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_discovery_support: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.distribution.api")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_distribution_api: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.distribution.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_distribution_core: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.extensions.webconsolesecurityprovider")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_extensions_webconsolesecurityprovider: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.hc.webconsole")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_hc_webconsole: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.installer.console")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_installer_console: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.installer.provider.file")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_installer_provider_file: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.installer.provider.jcr")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_installer_provider_jcr: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.jcr.davex")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_jcr_davex: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.jcr.resourcesecurity")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_jcr_resourcesecurity: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.jmx.provider")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_jmx_provider: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.launchpad.installer")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_launchpad_installer: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.models.impl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_models_impl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.repoinit.parser")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_repoinit_parser: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.resource.inventory")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_resource_inventory: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.resourceresolver")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_resourceresolver: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.scripting.javascript")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_scripting_javascript: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.scripting.jst")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_scripting_jst: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.scripting.sightly.js.provider")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_scripting_sightly_js_provider: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.scripting.sightly.models.provider")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_scripting_sightly_models_provider: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.security")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_security: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.servlets.compat")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_servlets_compat: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.servlets.get")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_servlets_get: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.startupfilter.disabler")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_startupfilter_disabler: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.tracer")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_tracer: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "we.retail.client.app.core")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub we_retail_client_app_core: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
    pub fn new() -> ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
        ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties {
            com_adobe_cq_cdn_cdn_rewriter: None,
            com_adobe_cq_cloud_config_components: None,
            com_adobe_cq_cloud_config_core: None,
            com_adobe_cq_cloud_config_ui: None,
            com_adobe_cq_com_adobe_cq_editor: None,
            com_adobe_cq_com_adobe_cq_projects_core: None,
            com_adobe_cq_com_adobe_cq_projects_wcm_core: None,
            com_adobe_cq_com_adobe_cq_ui_commons: None,
            com_adobe_cq_com_adobe_cq_wcm_style: None,
            com_adobe_cq_cq_activitymap_integration: None,
            com_adobe_cq_cq_contexthub_commons: None,
            com_adobe_cq_cq_dtm: None,
            com_adobe_cq_cq_healthcheck: None,
            com_adobe_cq_cq_multisite_targeting: None,
            com_adobe_cq_cq_pre_upgrade_cleanup: None,
            com_adobe_cq_cq_product_info_provider: None,
            com_adobe_cq_cq_rest_sites: None,
            com_adobe_cq_cq_security_hc: None,
            com_adobe_cq_dam_cq_dam_svg_handler: None,
            com_adobe_cq_dam_cq_scene7_imaging: None,
            com_adobe_cq_dtm_reactor_core: None,
            com_adobe_cq_dtm_reactor_ui: None,
            com_adobe_cq_exp_jspel_resolver: None,
            com_adobe_cq_inbox_cq_inbox: None,
            com_adobe_cq_json_schema_parser: None,
            com_adobe_cq_media_cq_media_publishing_dps_fp_core: None,
            com_adobe_cq_mobile_cq_mobile_caas: None,
            com_adobe_cq_mobile_cq_mobile_index_builder: None,
            com_adobe_cq_mobile_cq_mobile_phonegap_build: None,
            com_adobe_cq_myspell: None,
            com_adobe_cq_sample_we_retail_core: None,
            com_adobe_cq_screens_com_adobe_cq_screens_dcc: None,
            com_adobe_cq_screens_com_adobe_cq_screens_mq_core: None,
            com_adobe_cq_social_cq_social_as_provider: None,
            com_adobe_cq_social_cq_social_badging_basic_impl: None,
            com_adobe_cq_social_cq_social_badging_impl: None,
            com_adobe_cq_social_cq_social_calendar_impl: None,
            com_adobe_cq_social_cq_social_content_fragments_impl: None,
            com_adobe_cq_social_cq_social_enablement_impl: None,
            com_adobe_cq_social_cq_social_graph_impl: None,
            com_adobe_cq_social_cq_social_ideation_impl: None,
            com_adobe_cq_social_cq_social_jcr_provider: None,
            com_adobe_cq_social_cq_social_members_impl: None,
            com_adobe_cq_social_cq_social_ms_provider: None,
            com_adobe_cq_social_cq_social_notifications_channels_web: None,
            com_adobe_cq_social_cq_social_notifications_impl: None,
            com_adobe_cq_social_cq_social_rdb_provider: None,
            com_adobe_cq_social_cq_social_scf_impl: None,
            com_adobe_cq_social_cq_social_scoring_basic_impl: None,
            com_adobe_cq_social_cq_social_scoring_impl: None,
            com_adobe_cq_social_cq_social_serviceusers_impl: None,
            com_adobe_cq_social_cq_social_srp_impl: None,
            com_adobe_cq_social_cq_social_ugcbase_impl: None,
            com_adobe_dam_cq_dam_cfm_impl: None,
            com_adobe_forms_foundation_forms_foundation_base: None,
            com_adobe_granite_apicontroller: None,
            com_adobe_granite_asset_core: None,
            com_adobe_granite_auth_sso: None,
            com_adobe_granite_bundles_hc_impl: None,
            com_adobe_granite_compat_router: None,
            com_adobe_granite_conf: None,
            com_adobe_granite_conf_ui_core: None,
            com_adobe_granite_cors: None,
            com_adobe_granite_crx_explorer: None,
            com_adobe_granite_crxde_lite: None,
            com_adobe_granite_crypto_config: None,
            com_adobe_granite_crypto_extension: None,
            com_adobe_granite_crypto_file: None,
            com_adobe_granite_crypto_jcr: None,
            com_adobe_granite_csrf: None,
            com_adobe_granite_distribution_core: None,
            com_adobe_granite_dropwizard_metrics: None,
            com_adobe_granite_frags_impl: None,
            com_adobe_granite_gibson: None,
            com_adobe_granite_infocollector: None,
            com_adobe_granite_installer_factory_packages: None,
            com_adobe_granite_jetty_ssl: None,
            com_adobe_granite_jobs_async: None,
            com_adobe_granite_maintenance_oak: None,
            com_adobe_granite_monitoring_core: None,
            com_adobe_granite_queries: None,
            com_adobe_granite_replication_hc_impl: None,
            com_adobe_granite_repository_checker: None,
            com_adobe_granite_repository_hc_impl: None,
            com_adobe_granite_rest_assets: None,
            com_adobe_granite_security_ui: None,
            com_adobe_granite_startup: None,
            com_adobe_granite_tagsoup: None,
            com_adobe_granite_taskmanagement_core: None,
            com_adobe_granite_taskmanagement_workflow: None,
            com_adobe_granite_ui_clientlibs_compiler_less: None,
            com_adobe_granite_ui_clientlibs_processor_gcc: None,
            com_adobe_granite_webconsole_plugins: None,
            com_adobe_granite_workflow_console: None,
            com_adobe_xmp_worker_files_native_fragment_linux: None,
            com_adobe_xmp_worker_files_native_fragment_macosx: None,
            com_adobe_xmp_worker_files_native_fragment_win: None,
            com_day_commons_osgi_wrapper_simple_jndi: None,
            com_day_cq_cq_authhandler: None,
            com_day_cq_cq_compat_configupdate: None,
            com_day_cq_cq_licensebranding: None,
            com_day_cq_cq_notifcation_impl: None,
            com_day_cq_cq_replication_audit: None,
            com_day_cq_cq_search_ext: None,
            com_day_cq_dam_cq_dam_annotation_print: None,
            com_day_cq_dam_cq_dam_asset_usage: None,
            com_day_cq_dam_cq_dam_s7dam: None,
            com_day_cq_dam_cq_dam_similaritysearch: None,
            com_day_cq_dam_dam_webdav_support: None,
            com_day_cq_pre_upgrade_tasks: None,
            com_day_cq_replication_extensions: None,
            com_day_cq_wcm_cq_msm_core: None,
            com_day_cq_wcm_cq_wcm_translation: None,
            day_commons_jrawio: None,
            org_apache_aries_jmx_whiteboard: None,
            org_apache_felix_http_sslfilter: None,
            org_apache_felix_org_apache_felix_threaddump: None,
            org_apache_felix_webconsole_plugins_ds: None,
            org_apache_felix_webconsole_plugins_event: None,
            org_apache_felix_webconsole_plugins_memoryusage: None,
            org_apache_felix_webconsole_plugins_packageadmin: None,
            org_apache_jackrabbit_oak_auth_ldap: None,
            org_apache_jackrabbit_oak_segment_tar: None,
            org_apache_jackrabbit_oak_solr_osgi: None,
            org_apache_sling_bundleresource_impl: None,
            org_apache_sling_commons_fsclassloader: None,
            org_apache_sling_commons_log_webconsole: None,
            org_apache_sling_datasource: None,
            org_apache_sling_discovery_base: None,
            org_apache_sling_discovery_oak: None,
            org_apache_sling_discovery_support: None,
            org_apache_sling_distribution_api: None,
            org_apache_sling_distribution_core: None,
            org_apache_sling_extensions_webconsolesecurityprovider: None,
            org_apache_sling_hc_webconsole: None,
            org_apache_sling_installer_console: None,
            org_apache_sling_installer_provider_file: None,
            org_apache_sling_installer_provider_jcr: None,
            org_apache_sling_jcr_davex: None,
            org_apache_sling_jcr_resourcesecurity: None,
            org_apache_sling_jmx_provider: None,
            org_apache_sling_launchpad_installer: None,
            org_apache_sling_models_impl: None,
            org_apache_sling_repoinit_parser: None,
            org_apache_sling_resource_inventory: None,
            org_apache_sling_resourceresolver: None,
            org_apache_sling_scripting_javascript: None,
            org_apache_sling_scripting_jst: None,
            org_apache_sling_scripting_sightly_js_provider: None,
            org_apache_sling_scripting_sightly_models_provider: None,
            org_apache_sling_security: None,
            org_apache_sling_servlets_compat: None,
            org_apache_sling_servlets_get: None,
            org_apache_sling_startupfilter_disabler: None,
            org_apache_sling_tracer: None,
            we_retail_client_app_core: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties>,

}

impl ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo {
    pub fn new() -> ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo {
        ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties {
    pub fn new() -> ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties {
        ComAdobeGraniteAuthCertImplClientCertAuthHandlerProperties {
            path: None,
            service_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties>,

}

impl ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo {
    pub fn new() -> ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo {
        ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties {
    #[serde(rename = "oauth.provider.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_id: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties {
    pub fn new() -> ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties {
        ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionProperties {
            oauth_provider_id: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplProperties>,

}

impl ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplInfo {
    pub fn new() -> ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplInfo {
        ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplProperties {
    #[serde(rename = "auth.ims.client.secret")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_ims_client_secret: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "customizer.type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub customizer_type: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplProperties {
    pub fn new() -> ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplProperties {
        ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplProperties {
            auth_ims_client_secret: None,
            customizer_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties>,

}

impl ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo {
    pub fn new() -> ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo {
        ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
    #[serde(rename = "oauth.configmanager.ims.configid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_configmanager_ims_configid: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "ims.owningEntity")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ims_owning_entity: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "aem.instanceId")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub aem_instance_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "ims.serviceCode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ims_service_code: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
    pub fn new() -> ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
        ComAdobeGraniteAuthImsImplImsConfigProviderImplProperties {
            oauth_configmanager_ims_configid: None,
            ims_owning_entity: None,
            aem_instance_id: None,
            ims_service_code: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorProperties>,

}

impl ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorInfo {
    pub fn new() -> ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorInfo {
        ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorProperties {
    #[serde(rename = "oauth.provider.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_id: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorProperties {
    pub fn new() -> ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorProperties {
        ComAdobeGraniteAuthImsImplImsInstanceCredentialsValidatorProperties {
            oauth_provider_id: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplImsProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthImsImplImsProviderImplProperties>,

}

impl ComAdobeGraniteAuthImsImplImsProviderImplInfo {
    pub fn new() -> ComAdobeGraniteAuthImsImplImsProviderImplInfo {
        ComAdobeGraniteAuthImsImplImsProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplImsProviderImplProperties {
    #[serde(rename = "oauth.provider.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.ims.authorization.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_ims_authorization_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.ims.token.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_ims_token_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.ims.profile.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_ims_profile_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.ims.extended.details.urls")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_ims_extended_details_urls: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "oauth.provider.ims.validate.token.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_ims_validate_token_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.ims.session.property")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_ims_session_property: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.ims.service.token.client.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_ims_service_token_client_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.ims.service.token.client.secret")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_ims_service_token_client_secret: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.ims.service.token")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_ims_service_token: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "ims.org.ref")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ims_org_ref: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "ims.group.mapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ims_group_mapping: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "oauth.provider.ims.only.license.group")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_ims_only_license_group: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteAuthImsImplImsProviderImplProperties {
    pub fn new() -> ComAdobeGraniteAuthImsImplImsProviderImplProperties {
        ComAdobeGraniteAuthImsImplImsProviderImplProperties {
            oauth_provider_id: None,
            oauth_provider_ims_authorization_url: None,
            oauth_provider_ims_token_url: None,
            oauth_provider_ims_profile_url: None,
            oauth_provider_ims_extended_details_urls: None,
            oauth_provider_ims_validate_token_url: None,
            oauth_provider_ims_session_property: None,
            oauth_provider_ims_service_token_client_id: None,
            oauth_provider_ims_service_token_client_secret: None,
            oauth_provider_ims_service_token: None,
            ims_org_ref: None,
            ims_group_mapping: None,
            oauth_provider_ims_only_license_group: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthImsProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteAuthImsInfo {
    pub fn new() -> ComAdobeGraniteAuthImsInfo {
        ComAdobeGraniteAuthImsInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsProperties {
    #[serde(rename = "configid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub configid: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "scope")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scope: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthImsProperties {
    pub fn new() -> ComAdobeGraniteAuthImsProperties {
        ComAdobeGraniteAuthImsProperties {
            configid: None,
            scope: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthAccesstokenProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthOauthAccesstokenProviderProperties>,

}

impl ComAdobeGraniteAuthOauthAccesstokenProviderInfo {
    pub fn new() -> ComAdobeGraniteAuthOauthAccesstokenProviderInfo {
        ComAdobeGraniteAuthOauthAccesstokenProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.token.provider.title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_provider_title: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.token.provider.default.claims")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_provider_default_claims: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "auth.token.provider.endpoint")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_provider_endpoint: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.access.token.request")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_access_token_request: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.token.provider.keypair.alias")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_provider_keypair_alias: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.token.provider.conn.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_provider_conn_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "auth.token.provider.so.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_provider_so_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "auth.token.provider.client.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_provider_client_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.token.provider.scope")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_provider_scope: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.token.provider.reuse.access.token")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_provider_reuse_access_token: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "auth.token.provider.relaxed.ssl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_provider_relaxed_ssl: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "token.request.customizer.type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub token_request_customizer_type: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.token.validator.type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_validator_type: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    pub fn new() -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
        ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
            name: None,
            auth_token_provider_title: None,
            auth_token_provider_default_claims: None,
            auth_token_provider_endpoint: None,
            auth_access_token_request: None,
            auth_token_provider_keypair_alias: None,
            auth_token_provider_conn_timeout: None,
            auth_token_provider_so_timeout: None,
            auth_token_provider_client_id: None,
            auth_token_provider_scope: None,
            auth_token_provider_reuse_access_token: None,
            auth_token_provider_relaxed_ssl: None,
            token_request_customizer_type: None,
            auth_token_validator_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties>,

}

impl ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo {
    pub fn new() -> ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo {
        ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.clientIds.allowed")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_client_ids_allowed: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "auth.bearer.sync.ims")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_bearer_sync_ims: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "auth.tokenRequestParameter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_request_parameter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.bearer.configid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_bearer_configid: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.jwt.support")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_jwt_support: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
    pub fn new() -> ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
        ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
            path: None,
            oauth_client_ids_allowed: None,
            auth_bearer_sync_ims: None,
            auth_token_request_parameter: None,
            oauth_bearer_configid: None,
            oauth_jwt_support: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties>,

}

impl ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo {
    pub fn new() -> ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo {
        ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties {
    #[serde(rename = "auth.token.validator.type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_token_validator_type: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties {
    pub fn new() -> ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties {
        ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplProperties {
            auth_token_validator_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties>,

}

impl ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo {
    pub fn new() -> ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo {
        ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties {
    #[serde(rename = "oauth.provider.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_id: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties {
    pub fn new() -> ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties {
        ComAdobeGraniteAuthOauthImplFacebookProviderImplProperties {
            oauth_provider_id: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplGithubProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthOauthImplGithubProviderImplProperties>,

}

impl ComAdobeGraniteAuthOauthImplGithubProviderImplInfo {
    pub fn new() -> ComAdobeGraniteAuthOauthImplGithubProviderImplInfo {
        ComAdobeGraniteAuthOauthImplGithubProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplGithubProviderImplProperties {
    #[serde(rename = "oauth.provider.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.github.authorization.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_github_authorization_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.github.token.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_github_token_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.github.profile.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_github_profile_url: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthOauthImplGithubProviderImplProperties {
    pub fn new() -> ComAdobeGraniteAuthOauthImplGithubProviderImplProperties {
        ComAdobeGraniteAuthOauthImplGithubProviderImplProperties {
            oauth_provider_id: None,
            oauth_provider_github_authorization_url: None,
            oauth_provider_github_token_url: None,
            oauth_provider_github_profile_url: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplGraniteProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthOauthImplGraniteProviderProperties>,

}

impl ComAdobeGraniteAuthOauthImplGraniteProviderInfo {
    pub fn new() -> ComAdobeGraniteAuthOauthImplGraniteProviderInfo {
        ComAdobeGraniteAuthOauthImplGraniteProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplGraniteProviderProperties {
    #[serde(rename = "oauth.provider.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.granite.authorization.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_granite_authorization_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.granite.token.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_granite_token_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.granite.profile.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_granite_profile_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.provider.granite.extended.details.urls")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_granite_extended_details_urls: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthOauthImplGraniteProviderProperties {
    pub fn new() -> ComAdobeGraniteAuthOauthImplGraniteProviderProperties {
        ComAdobeGraniteAuthOauthImplGraniteProviderProperties {
            oauth_provider_id: None,
            oauth_provider_granite_authorization_url: None,
            oauth_provider_granite_token_url: None,
            oauth_provider_granite_profile_url: None,
            oauth_provider_granite_extended_details_urls: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo {
    pub fn new() -> ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo {
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties>,

}

impl ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo {
    pub fn new() -> ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo {
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties {
    #[serde(rename = "oauth.cookie.login.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_cookie_login_timeout: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.cookie.max.age")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_cookie_max_age: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties {
    pub fn new() -> ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties {
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalProperties {
            oauth_cookie_login_timeout: None,
            oauth_cookie_max_age: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties {
    #[serde(rename = "oauth.cookie.login.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_cookie_login_timeout: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.cookie.max.age")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_cookie_max_age: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties {
    pub fn new() -> ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties {
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerProperties {
            oauth_cookie_login_timeout: None,
            oauth_cookie_max_age: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties>,

}

impl ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo {
    pub fn new() -> ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo {
        ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties {
    pub fn new() -> ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties {
        ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerProperties {
            path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties>,

}

impl ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo {
    pub fn new() -> ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo {
        ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties {
    #[serde(rename = "oauth.provider.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_provider_id: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties {
    pub fn new() -> ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties {
        ComAdobeGraniteAuthOauthImplTwitterProviderImplProperties {
            oauth_provider_id: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthOauthProviderProperties>,

}

impl ComAdobeGraniteAuthOauthProviderInfo {
    pub fn new() -> ComAdobeGraniteAuthOauthProviderInfo {
        ComAdobeGraniteAuthOauthProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthProviderProperties {
    #[serde(rename = "oauth.config.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_config_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.client.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_client_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.client.secret")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_client_secret: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.scope")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_scope: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "oauth.config.provider.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_config_provider_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.create.users")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_create_users: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "oauth.userid.property")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_userid_property: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "force.strict.username.matching")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub force_strict_username_matching: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "oauth.encode.userids")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_encode_userids: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "oauth.hash.userids")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_hash_userids: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "oauth.callBackUrl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_call_back_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.access.token.persist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_access_token_persist: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "oauth.access.token.persist.cookie")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_access_token_persist_cookie: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "oauth.csrf.state.protection")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_csrf_state_protection: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "oauth.redirect.request.params")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_redirect_request_params: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "oauth.config.siblings.allow")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_config_siblings_allow: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteAuthOauthProviderProperties {
    pub fn new() -> ComAdobeGraniteAuthOauthProviderProperties {
        ComAdobeGraniteAuthOauthProviderProperties {
            oauth_config_id: None,
            oauth_client_id: None,
            oauth_client_secret: None,
            oauth_scope: None,
            oauth_config_provider_id: None,
            oauth_create_users: None,
            oauth_userid_property: None,
            force_strict_username_matching: None,
            oauth_encode_userids: None,
            oauth_hash_userids: None,
            oauth_call_back_url: None,
            oauth_access_token_persist: None,
            oauth_access_token_persist_cookie: None,
            oauth_csrf_state_protection: None,
            oauth_redirect_request_params: None,
            oauth_config_siblings_allow: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties>,

}

impl ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo {
    pub fn new() -> ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo {
        ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties {
    #[serde(rename = "supportedPaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub supported_paths: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties {
    pub fn new() -> ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties {
        ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerProperties {
            supported_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo {
    pub fn new() -> ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo {
        ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "idpUrl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub idp_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "idpCertAlias")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub idp_cert_alias: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "idpHttpRedirect")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub idp_http_redirect: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "serviceProviderEntityId")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_provider_entity_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "assertionConsumerServiceURL")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub assertion_consumer_service_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "spPrivateKeyAlias")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sp_private_key_alias: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "keyStorePassword")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub key_store_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "defaultRedirectUrl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_redirect_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "userIDAttribute")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_id_attribute: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "useEncryption")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub use_encryption: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "createUser")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub create_user: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "userIntermediatePath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_intermediate_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "addGroupMemberships")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub add_group_memberships: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "groupMembershipAttribute")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_membership_attribute: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "defaultGroups")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_groups: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "nameIdFormat")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name_id_format: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "synchronizeAttributes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub synchronize_attributes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "handleLogout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub handle_logout: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "logoutUrl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub logout_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "clockTolerance")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub clock_tolerance: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "digestMethod")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub digest_method: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "signatureMethod")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub signature_method: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "identitySyncType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub identity_sync_type: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "idpIdentifier")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub idp_identifier: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties {
    pub fn new() -> ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties {
        ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties {
            path: None,
            service_ranking: None,
            idp_url: None,
            idp_cert_alias: None,
            idp_http_redirect: None,
            service_provider_entity_id: None,
            assertion_consumer_service_url: None,
            sp_private_key_alias: None,
            key_store_password: None,
            default_redirect_url: None,
            user_id_attribute: None,
            use_encryption: None,
            create_user: None,
            user_intermediate_path: None,
            add_group_memberships: None,
            group_membership_attribute: None,
            default_groups: None,
            name_id_format: None,
            synchronize_attributes: None,
            handle_logout: None,
            logout_url: None,
            clock_tolerance: None,
            digest_method: None,
            signature_method: None,
            identity_sync_type: None,
            idp_identifier: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties>,

}

impl ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo {
    pub fn new() -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo {
        ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "jaas.controlFlag")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_control_flag: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jaas.realmName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_realm_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jaas.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "headers")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub headers: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cookies")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cookies: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "parameters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub parameters: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "usermap")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub usermap: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "format")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub format: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "trustedCredentialsAttribute")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub trusted_credentials_attribute: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
    pub fn new() -> ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
        ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerProperties {
            path: None,
            service_ranking: None,
            jaas_control_flag: None,
            jaas_realm_name: None,
            jaas_ranking: None,
            headers: None,
            cookies: None,
            parameters: None,
            usermap: None,
            format: None,
            trusted_credentials_attribute: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties>,

}

impl ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo {
        ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "minimum.code.cache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub minimum_code_cache_size: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties {
        ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckProperties {
            hc_tags: None,
            minimum_code_cache_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties>,

}

impl ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo {
        ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties {
        ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties>,

}

impl ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo {
        ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties {
        ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties>,

}

impl ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo {
        ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "ignored.bundles")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ignored_bundles: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties {
        ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckProperties {
            hc_tags: None,
            ignored_bundles: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties>,

}

impl ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo {
        ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "max.queued.jobs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_queued_jobs: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties {
        ComAdobeGraniteBundlesHcImplJobsHealthCheckProperties {
            hc_tags: None,
            max_queued_jobs: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties>,

}

impl ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo {
        ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties {
        ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties>,

}

impl ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo {
        ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties {
        ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties>,

}

impl ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo {
        ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties {
        ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties>,

}

impl ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo {
        ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties {
        ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties>,

}

impl ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo {
        ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties {
        ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties>,

}

impl ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo {
    pub fn new() -> ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo {
        ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties {
    #[serde(rename = "replicate.comment.resourceTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub replicate_comment_resource_types: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties {
    pub fn new() -> ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties {
        ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacProperties {
            replicate_comment_resource_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties>,

}

impl ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo {
    pub fn new() -> ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo {
        ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties {
    #[serde(rename = "compatgroups")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compatgroups: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties {
    pub fn new() -> ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties {
        ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplProperties {
            compatgroups: None,
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCompatrouterImplRoutingConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteCompatrouterImplRoutingConfigProperties>,

}

impl ComAdobeGraniteCompatrouterImplRoutingConfigInfo {
    pub fn new() -> ComAdobeGraniteCompatrouterImplRoutingConfigInfo {
        ComAdobeGraniteCompatrouterImplRoutingConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCompatrouterImplRoutingConfigProperties {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "compatPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compat_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "newPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub new_path: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteCompatrouterImplRoutingConfigProperties {
    pub fn new() -> ComAdobeGraniteCompatrouterImplRoutingConfigProperties {
        ComAdobeGraniteCompatrouterImplRoutingConfigProperties {
            id: None,
            compat_path: None,
            new_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties>,

}

impl ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo {
    pub fn new() -> ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo {
        ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties {
    #[serde(rename = "group")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "ids")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ids: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties {
    pub fn new() -> ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties {
        ComAdobeGraniteCompatrouterImplSwitchMappingConfigProperties {
            group: None,
            ids: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties>,

}

impl ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo {
    pub fn new() -> ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo {
        ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "fallbackPaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fallback_paths: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties {
    pub fn new() -> ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties {
        ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingProperties {
            enabled: None,
            fallback_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteContexthubImplContextHubImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteContexthubImplContextHubImplProperties>,

}

impl ComAdobeGraniteContexthubImplContextHubImplInfo {
    pub fn new() -> ComAdobeGraniteContexthubImplContextHubImplInfo {
        ComAdobeGraniteContexthubImplContextHubImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteContexthubImplContextHubImplProperties {
    #[serde(rename = "com.adobe.granite.contexthub.silent_mode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_contexthub_silent_mode: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "com.adobe.granite.contexthub.show_ui")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_contexthub_show_ui: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteContexthubImplContextHubImplProperties {
    pub fn new() -> ComAdobeGraniteContexthubImplContextHubImplProperties {
        ComAdobeGraniteContexthubImplContextHubImplProperties {
            com_adobe_granite_contexthub_silent_mode: None,
            com_adobe_granite_contexthub_show_ui: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCorsImplCorsPolicyImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteCorsImplCorsPolicyImplProperties>,

}

impl ComAdobeGraniteCorsImplCorsPolicyImplInfo {
    pub fn new() -> ComAdobeGraniteCorsImplCorsPolicyImplInfo {
        ComAdobeGraniteCorsImplCorsPolicyImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCorsImplCorsPolicyImplProperties {
    #[serde(rename = "alloworigin")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub alloworigin: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "alloworiginregexp")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub alloworiginregexp: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "allowedpaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allowedpaths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "exposedheaders")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub exposedheaders: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "maxage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub maxage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "supportedheaders")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub supportedheaders: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "supportedmethods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub supportedmethods: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "supportscredentials")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub supportscredentials: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteCorsImplCorsPolicyImplProperties {
    pub fn new() -> ComAdobeGraniteCorsImplCorsPolicyImplProperties {
        ComAdobeGraniteCorsImplCorsPolicyImplProperties {
            alloworigin: None,
            alloworiginregexp: None,
            allowedpaths: None,
            exposedheaders: None,
            maxage: None,
            supportedheaders: None,
            supportedmethods: None,
            supportscredentials: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCsrfImplCsrfFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteCsrfImplCsrfFilterProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteCsrfImplCsrfFilterInfo {
    pub fn new() -> ComAdobeGraniteCsrfImplCsrfFilterInfo {
        ComAdobeGraniteCsrfImplCsrfFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCsrfImplCsrfFilterProperties {
    #[serde(rename = "filter.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_methods: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "filter.enable.safe.user.agents")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_enable_safe_user_agents: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "filter.safe.user.agents")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_safe_user_agents: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "filter.excluded.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_excluded_paths: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteCsrfImplCsrfFilterProperties {
    pub fn new() -> ComAdobeGraniteCsrfImplCsrfFilterProperties {
        ComAdobeGraniteCsrfImplCsrfFilterProperties {
            filter_methods: None,
            filter_enable_safe_user_agents: None,
            filter_safe_user_agents: None,
            filter_excluded_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCsrfImplCsrfServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteCsrfImplCsrfServletProperties>,

}

impl ComAdobeGraniteCsrfImplCsrfServletInfo {
    pub fn new() -> ComAdobeGraniteCsrfImplCsrfServletInfo {
        ComAdobeGraniteCsrfImplCsrfServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteCsrfImplCsrfServletProperties {
    #[serde(rename = "csrf.token.expires.in")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub csrf_token_expires_in: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "sling.auth.requirements")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_auth_requirements: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteCsrfImplCsrfServletProperties {
    pub fn new() -> ComAdobeGraniteCsrfImplCsrfServletProperties {
        ComAdobeGraniteCsrfImplCsrfServletProperties {
            csrf_token_expires_in: None,
            sling_auth_requirements: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties>,

}

impl ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo {
        ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "username")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub username: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "encryptedPassword")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub encrypted_password: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties {
        ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeProperties {
            name: None,
            username: None,
            encrypted_password: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties>,

}

impl ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo {
        ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "agentName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub agent_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "diffPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub diff_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "observedPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub observed_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "propertyNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub property_names: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "distributionDelay")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub distribution_delay: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "serviceUser.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_user_target: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties {
        ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverProperties {
            enabled: None,
            agent_name: None,
            diff_path: None,
            observed_path: None,
            service_name: None,
            property_names: None,
            distribution_delay: None,
            service_user_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties>,

}

impl ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo {
        ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties {
    #[serde(rename = "diffPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub diff_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "serviceUser.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_user_target: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties {
        ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties {
            diff_path: None,
            service_name: None,
            service_user_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties>,

}

impl ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo {
        ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties {
    #[serde(rename = "importer.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub importer_name: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties {
        ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenProperties {
            importer_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties>,

}

impl ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo {
        ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties {
    #[serde(rename = "providerName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "forward.requests")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub forward_requests: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties {
        ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatProperties {
            provider_name: None,
            forward_requests: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties>,

}

impl ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo {
        ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties {
    #[serde(rename = "forward.requests")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub forward_requests: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties {
        ComAdobeGraniteDistributionCoreImplReplicationDistributionTransProperties {
            forward_requests: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties>,

}

impl ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo {
        ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "userId")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "accessTokenProvider.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub access_token_provider_target: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties {
    pub fn new() -> ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties {
        ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuProperties {
            name: None,
            service_name: None,
            user_id: None,
            access_token_provider_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties>,

}

impl ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo {
    pub fn new() -> ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo {
        ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties {
    #[serde(rename = "feature.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub feature_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "feature.description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub feature_description: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "http.header.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub http_header_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "http.header.valuepattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub http_header_valuepattern: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties {
    pub fn new() -> ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties {
        ComAdobeGraniteFragsImplCheckHttpHeaderFlagProperties {
            feature_name: None,
            feature_description: None,
            http_header_name: None,
            http_header_valuepattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteFragsImplRandomFeatureInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteFragsImplRandomFeatureProperties>,

}

impl ComAdobeGraniteFragsImplRandomFeatureInfo {
    pub fn new() -> ComAdobeGraniteFragsImplRandomFeatureInfo {
        ComAdobeGraniteFragsImplRandomFeatureInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteFragsImplRandomFeatureProperties {
    #[serde(rename = "feature.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub feature_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "feature.description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub feature_description: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "active.percentage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub active_percentage: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cookie.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cookie_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cookie.maxAge")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cookie_max_age: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteFragsImplRandomFeatureProperties {
    pub fn new() -> ComAdobeGraniteFragsImplRandomFeatureProperties {
        ComAdobeGraniteFragsImplRandomFeatureProperties {
            feature_name: None,
            feature_description: None,
            active_percentage: None,
            cookie_name: None,
            cookie_max_age: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteHttpcacheFileFileCacheStoreInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteHttpcacheFileFileCacheStoreProperties>,

}

impl ComAdobeGraniteHttpcacheFileFileCacheStoreInfo {
    pub fn new() -> ComAdobeGraniteHttpcacheFileFileCacheStoreInfo {
        ComAdobeGraniteHttpcacheFileFileCacheStoreInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteHttpcacheFileFileCacheStoreProperties {
    #[serde(rename = "com.adobe.granite.httpcache.file.documentRoot")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_httpcache_file_document_root: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.httpcache.file.includeHost")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_httpcache_file_include_host: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteHttpcacheFileFileCacheStoreProperties {
    pub fn new() -> ComAdobeGraniteHttpcacheFileFileCacheStoreProperties {
        ComAdobeGraniteHttpcacheFileFileCacheStoreProperties {
            com_adobe_granite_httpcache_file_document_root: None,
            com_adobe_granite_httpcache_file_include_host: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties>,

}

impl ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo {
    pub fn new() -> ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo {
        ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties {
    #[serde(rename = "com.adobe.granite.httpcache.url.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_httpcache_url_paths: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties {
    pub fn new() -> ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties {
        ComAdobeGraniteHttpcacheImplOuterCacheFilterProperties {
            com_adobe_granite_httpcache_url_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties>,

}

impl ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo {
    pub fn new() -> ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo {
        ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties {
    #[serde(rename = "pseudo.patterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pseudo_patterns: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties {
    pub fn new() -> ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties {
        ComAdobeGraniteI18nImplBundlePseudoTranslationsProperties {
            pseudo_patterns: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties>,

}

impl ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo {
    pub fn new() -> ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo {
        ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties {
    #[serde(rename = "security.preferences.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub security_preferences_name: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties {
    pub fn new() -> ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties {
        ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceProperties {
            security_preferences_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteInfocollectorInfoCollectorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteInfocollectorInfoCollectorProperties>,

}

impl ComAdobeGraniteInfocollectorInfoCollectorInfo {
    pub fn new() -> ComAdobeGraniteInfocollectorInfoCollectorInfo {
        ComAdobeGraniteInfocollectorInfoCollectorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteInfocollectorInfoCollectorProperties {
    #[serde(rename = "granite.infocollector.includeThreadDumps")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_infocollector_include_thread_dumps: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "granite.infocollector.includeHeapDump")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_infocollector_include_heap_dump: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteInfocollectorInfoCollectorProperties {
    pub fn new() -> ComAdobeGraniteInfocollectorInfoCollectorProperties {
        ComAdobeGraniteInfocollectorInfoCollectorProperties {
            granite_infocollector_include_thread_dumps: None,
            granite_infocollector_include_heap_dump: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo {
    pub fn new() -> ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo {
        ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties {
    #[serde(rename = "com.adobe.granite.jetty.ssl.port")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_jetty_ssl_port: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "com.adobe.granite.jetty.ssl.keystore.user")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_jetty_ssl_keystore_user: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.jetty.ssl.keystore.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_jetty_ssl_keystore_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "com.adobe.granite.jetty.ssl.ciphersuites.excluded")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_jetty_ssl_ciphersuites_excluded: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "com.adobe.granite.jetty.ssl.ciphersuites.included")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_jetty_ssl_ciphersuites_included: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "com.adobe.granite.jetty.ssl.client.certificate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_adobe_granite_jetty_ssl_client_certificate: Option<models::ConfigNodePropertyDropDown>,

}

impl ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties {
    pub fn new() -> ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties {
        ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties {
            com_adobe_granite_jetty_ssl_port: None,
            com_adobe_granite_jetty_ssl_keystore_user: None,
            com_adobe_granite_jetty_ssl_keystore_password: None,
            com_adobe_granite_jetty_ssl_ciphersuites_excluded: None,
            com_adobe_granite_jetty_ssl_ciphersuites_included: None,
            com_adobe_granite_jetty_ssl_client_certificate: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteLicenseImplLicenseCheckFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteLicenseImplLicenseCheckFilterProperties>,

}

impl ComAdobeGraniteLicenseImplLicenseCheckFilterInfo {
    pub fn new() -> ComAdobeGraniteLicenseImplLicenseCheckFilterInfo {
        ComAdobeGraniteLicenseImplLicenseCheckFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {
    #[serde(rename = "checkInternval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub check_internval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "excludeIds")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub exclude_ids: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "encryptPing")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub encrypt_ping: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {
    pub fn new() -> ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {
        ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {
            check_internval: None,
            exclude_ids: None,
            encrypt_ping: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteLoggingImplLogAnalyserImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteLoggingImplLogAnalyserImplProperties>,

}

impl ComAdobeGraniteLoggingImplLogAnalyserImplInfo {
    pub fn new() -> ComAdobeGraniteLoggingImplLogAnalyserImplInfo {
        ComAdobeGraniteLoggingImplLogAnalyserImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteLoggingImplLogAnalyserImplProperties {
    #[serde(rename = "messages.queue.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub messages_queue_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "logger.config")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub logger_config: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "messages.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub messages_size: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteLoggingImplLogAnalyserImplProperties {
    pub fn new() -> ComAdobeGraniteLoggingImplLogAnalyserImplProperties {
        ComAdobeGraniteLoggingImplLogAnalyserImplProperties {
            messages_queue_size: None,
            logger_config: None,
            messages_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties>,

}

impl ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo {
        ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties {
        ComAdobeGraniteLoggingImplLogErrorHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo {
    pub fn new() -> ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo {
        ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties {
    #[serde(rename = "granite.maintenance.mandatory")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_maintenance_mandatory: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "job.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_topics: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties {
    pub fn new() -> ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties {
        ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskProperties {
            granite_maintenance_mandatory: None,
            job_topics: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo {
    pub fn new() -> ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo {
        ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties {
    #[serde(rename = "job.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_topics: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties {
    pub fn new() -> ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties {
        ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskProperties {
            job_topics: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties>,

}

impl ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo {
    pub fn new() -> ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo {
        ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties {
    #[serde(rename = "full.gc.days")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub full_gc_days: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties {
    pub fn new() -> ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties {
        ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskProperties {
            full_gc_days: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteMonitoringImplScriptConfigImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteMonitoringImplScriptConfigImplProperties>,

}

impl ComAdobeGraniteMonitoringImplScriptConfigImplInfo {
    pub fn new() -> ComAdobeGraniteMonitoringImplScriptConfigImplInfo {
        ComAdobeGraniteMonitoringImplScriptConfigImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
    #[serde(rename = "script.filename")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub script_filename: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "script.display")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub script_display: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "script.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub script_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "script.platform")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub script_platform: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "jmxdomain")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jmxdomain: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
    pub fn new() -> ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
        ComAdobeGraniteMonitoringImplScriptConfigImplProperties {
            script_filename: None,
            script_display: None,
            script_path: None,
            script_platform: None,
            interval: None,
            jmxdomain: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties>,

}

impl ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo {
    pub fn new() -> ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo {
        ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jaas.controlFlag")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_control_flag: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jaas.realmName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_realm_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jaas.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "oauth.offline.validation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_offline_validation: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties {
    pub fn new() -> ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties {
        ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties {
            path: None,
            jaas_control_flag: None,
            jaas_realm_name: None,
            jaas_ranking: None,
            oauth_offline_validation: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties>,

}

impl ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo {
    pub fn new() -> ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo {
        ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties {
    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties {
    pub fn new() -> ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties {
        ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskProperties {
            scheduler_expression: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties>,

}

impl ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo {
    pub fn new() -> ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo {
        ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties {
    #[serde(rename = "oauth.client.revocation.active")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_client_revocation_active: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties {
    pub fn new() -> ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties {
        ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletProperties {
            oauth_client_revocation_active: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties>,

}

impl ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo {
    pub fn new() -> ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo {
        ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties {
    #[serde(rename = "sling.servlet.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_paths: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.revocation.active")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_revocation_active: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties {
    pub fn new() -> ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties {
        ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletProperties {
            sling_servlet_paths: None,
            oauth_revocation_active: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties>,

}

impl ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo {
    pub fn new() -> ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo {
        ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties {
    #[serde(rename = "oauth.issuer")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_issuer: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "oauth.access.token.expires.in")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_access_token_expires_in: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "osgi.http.whiteboard.servlet.pattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub osgi_http_whiteboard_servlet_pattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "osgi.http.whiteboard.context.select")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub osgi_http_whiteboard_context_select: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties {
    pub fn new() -> ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties {
        ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletProperties {
            oauth_issuer: None,
            oauth_access_token_expires_in: None,
            osgi_http_whiteboard_servlet_pattern: None,
            osgi_http_whiteboard_context_select: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties>,

}

impl ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo {
    pub fn new() -> ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo {
        ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties {
    #[serde(rename = "oauth.token.revocation.active")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_token_revocation_active: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties {
    pub fn new() -> ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties {
        ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletProperties {
            oauth_token_revocation_active: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties>,

}

impl ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo {
    pub fn new() -> ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo {
        ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties {
    #[serde(rename = "offloading.transporter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub offloading_transporter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "offloading.cleanup.payload")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub offloading_cleanup_payload: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties {
    pub fn new() -> ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties {
        ComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties {
            offloading_transporter: None,
            offloading_cleanup_payload: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo {
    pub fn new() -> ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo {
        ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties {
    #[serde(rename = "offloading.jobcloner.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub offloading_jobcloner_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties {
    pub fn new() -> ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties {
        ComAdobeGraniteOffloadingImplOffloadingJobClonerProperties {
            offloading_jobcloner_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo {
    pub fn new() -> ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo {
        ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties {
    #[serde(rename = "offloading.offloader.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub offloading_offloader_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties {
    pub fn new() -> ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties {
        ComAdobeGraniteOffloadingImplOffloadingJobOffloaderProperties {
            offloading_offloader_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo {
    pub fn new() -> ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo {
        ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties {
    #[serde(rename = "offloading.agentmanager.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub offloading_agentmanager_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties {
    pub fn new() -> ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties {
        ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerProperties {
            offloading_agentmanager_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo {
    pub fn new() -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo {
        ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
    #[serde(rename = "default.transport.agent-to-worker.prefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_transport_agent_to_worker_prefix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "default.transport.agent-to-master.prefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_transport_agent_to_master_prefix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "default.transport.input.package")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_transport_input_package: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "default.transport.output.package")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_transport_output_package: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "default.transport.replication.synchronous")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_transport_replication_synchronous: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "default.transport.contentpackage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_transport_contentpackage: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "offloading.transporter.default.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub offloading_transporter_default_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
    pub fn new() -> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
        ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties {
            default_transport_agent_to_worker_prefix: None,
            default_transport_agent_to_master_prefix: None,
            default_transport_input_package: None,
            default_transport_output_package: None,
            default_transport_replication_synchronous: None,
            default_transport_contentpackage: None,
            offloading_transporter_default_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties>,

}

impl ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo {
    pub fn new() -> ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo {
        ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties {
    #[serde(rename = "omnisearch.suggestion.requiretext.min")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub omnisearch_suggestion_requiretext_min: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "omnisearch.suggestion.spellcheck.require")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub omnisearch_suggestion_spellcheck_require: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties {
    pub fn new() -> ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties {
        ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplProperties {
            omnisearch_suggestion_requiretext_min: None,
            omnisearch_suggestion_spellcheck_require: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOptoutImplOptOutServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteOptoutImplOptOutServiceImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteOptoutImplOptOutServiceImplInfo {
    pub fn new() -> ComAdobeGraniteOptoutImplOptOutServiceImplInfo {
        ComAdobeGraniteOptoutImplOptOutServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteOptoutImplOptOutServiceImplProperties {
    #[serde(rename = "optout.cookies")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub optout_cookies: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "optout.headers")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub optout_headers: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "optout.whitelist.cookies")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub optout_whitelist_cookies: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteOptoutImplOptOutServiceImplProperties {
    pub fn new() -> ComAdobeGraniteOptoutImplOptOutServiceImplProperties {
        ComAdobeGraniteOptoutImplOptOutServiceImplProperties {
            optout_cookies: None,
            optout_headers: None,
            optout_whitelist_cookies: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties>,

}

impl ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo {
        ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties {
    #[serde(rename = "indexing.critical.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub indexing_critical_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "indexing.warn.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub indexing_warn_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties {
        ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties {
            indexing_critical_threshold: None,
            indexing_warn_threshold: None,
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties>,

}

impl ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo {
        ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties {
    #[serde(rename = "large.index.critical.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub large_index_critical_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "large.index.warn.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub large_index_warn_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties {
        ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckProperties {
            large_index_critical_threshold: None,
            large_index_warn_threshold: None,
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties>,

}

impl ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo {
        ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties {
        ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties>,

}

impl ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo {
    pub fn new() -> ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo {
        ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties {
    #[serde(rename = "getPeriod")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub get_period: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties {
    pub fn new() -> ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties {
        ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsProperties {
            get_period: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties>,

}

impl ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo {
        ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties {
        ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties>,

}

impl ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo {
        ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties {
    #[serde(rename = "number.of.retries.allowed")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub number_of_retries_allowed: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties {
        ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckProperties {
            number_of_retries_allowed: None,
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties>,

}

impl ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo {
    pub fn new() -> ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo {
        ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties {
    pub fn new() -> ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties {
        ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties>,

}

impl ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo {
        ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties {
        ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties>,

}

impl ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo {
        ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "exclude.search.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub exclude_search_path: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties {
        ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCProperties {
            hc_tags: None,
            exclude_search_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckProperties>,

}

impl ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckInfo {
        ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckProperties {
        ComAdobeGraniteRepositoryHcImplContinuousRgcHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties>,

}

impl ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo {
        ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties {
        ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties>,

}

impl ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo {
        ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "account.logins")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub account_logins: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "console.logins")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub console_logins: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties {
        ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckProperties {
            hc_tags: None,
            account_logins: None,
            console_logins: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties>,

}

impl ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo {
        ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "disk.space.warn.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disk_space_warn_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "disk.space.error.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disk_space_error_threshold: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties {
        ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckProperties {
            hc_tags: None,
            disk_space_warn_threshold: None,
            disk_space_error_threshold: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties>,

}

impl ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo {
        ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties {
    pub fn new() -> ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties {
        ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryImplCommitStatsConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRepositoryImplCommitStatsConfigProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteRepositoryImplCommitStatsConfigInfo {
    pub fn new() -> ComAdobeGraniteRepositoryImplCommitStatsConfigInfo {
        ComAdobeGraniteRepositoryImplCommitStatsConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "intervalSeconds")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub interval_seconds: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "commitsPerIntervalThreshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub commits_per_interval_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxLocationLength")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_location_length: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxDetailsShown")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_details_shown: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "minDetailsPercentage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub min_details_percentage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "threadMatchers")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub thread_matchers: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "maxGreedyDepth")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_greedy_depth: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "greedyStackMatchers")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub greedy_stack_matchers: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "stackFilters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub stack_filters: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "stackMatchers")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub stack_matchers: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "stackCategorizers")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub stack_categorizers: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "stackShorteners")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub stack_shorteners: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
    pub fn new() -> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
        ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {
            enabled: None,
            interval_seconds: None,
            commits_per_interval_threshold: None,
            max_location_length: None,
            max_details_shown: None,
            min_details_percentage: None,
            thread_matchers: None,
            max_greedy_depth: None,
            greedy_stack_matchers: None,
            stack_filters: None,
            stack_matchers: None,
            stack_categorizers: None,
            stack_shorteners: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryServiceUserConfigurationInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRepositoryServiceUserConfigurationProperties>,

}

impl ComAdobeGraniteRepositoryServiceUserConfigurationInfo {
    pub fn new() -> ComAdobeGraniteRepositoryServiceUserConfigurationInfo {
        ComAdobeGraniteRepositoryServiceUserConfigurationInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRepositoryServiceUserConfigurationProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "serviceusers.simpleSubjectPopulation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub serviceusers_simple_subject_population: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "serviceusers.list")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub serviceusers_list: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteRepositoryServiceUserConfigurationProperties {
    pub fn new() -> ComAdobeGraniteRepositoryServiceUserConfigurationProperties {
        ComAdobeGraniteRepositoryServiceUserConfigurationProperties {
            service_ranking: None,
            serviceusers_simple_subject_population: None,
            serviceusers_list: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties>,

}

impl ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo {
    pub fn new() -> ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo {
        ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties {
    pub fn new() -> ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties {
        ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties>,

}

impl ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo {
    pub fn new() -> ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo {
        ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub types: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties {
    pub fn new() -> ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties {
        ComAdobeGraniteResourcestatusImplCompositeStatusTypeProperties {
            name: None,
            types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties>,

}

impl ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo {
    pub fn new() -> ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo {
        ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties {
    #[serde(rename = "provider.root")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_root: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties {
    pub fn new() -> ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties {
        ComAdobeGraniteResourcestatusImplStatusResourceProviderImplProperties {
            provider_root: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties>,

}

impl ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo {
    pub fn new() -> ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo {
        ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties {
    #[serde(rename = "mime.allowEmpty")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mime_allow_empty: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "mime.allowed")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mime_allowed: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties {
    pub fn new() -> ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties {
        ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties {
            mime_allow_empty: None,
            mime_allowed: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties>,

}

impl ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo {
    pub fn new() -> ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo {
        ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties {
    #[serde(rename = "provider.roots")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_roots: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties {
    pub fn new() -> ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties {
        ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplProperties {
            provider_roots: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRestImplServletDefaultGetServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteRestImplServletDefaultGetServletProperties>,

}

impl ComAdobeGraniteRestImplServletDefaultGetServletInfo {
    pub fn new() -> ComAdobeGraniteRestImplServletDefaultGetServletInfo {
        ComAdobeGraniteRestImplServletDefaultGetServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteRestImplServletDefaultGetServletProperties {
    #[serde(rename = "default.limit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_limit: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "use.absolute.uri")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub use_absolute_uri: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteRestImplServletDefaultGetServletProperties {
    pub fn new() -> ComAdobeGraniteRestImplServletDefaultGetServletProperties {
        ComAdobeGraniteRestImplServletDefaultGetServletProperties {
            default_limit: None,
            use_absolute_uri: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSProperties>,

}

impl ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSInfo {
    pub fn new() -> ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSInfo {
        ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSProperties {
    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSProperties {
    pub fn new() -> ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSProperties {
        ComAdobeGraniteSecurityUserUiInternalServletsSslConfigurationSProperties {
            hc_tags: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteSecurityUserUserPropertiesServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteSecurityUserUserPropertiesServiceProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteSecurityUserUserPropertiesServiceInfo {
    pub fn new() -> ComAdobeGraniteSecurityUserUserPropertiesServiceInfo {
        ComAdobeGraniteSecurityUserUserPropertiesServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteSecurityUserUserPropertiesServiceProperties {
    #[serde(rename = "adapter.condition")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub adapter_condition: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "granite.userproperties.nodetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_userproperties_nodetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "granite.userproperties.resourcetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_userproperties_resourcetypes: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteSecurityUserUserPropertiesServiceProperties {
    pub fn new() -> ComAdobeGraniteSecurityUserUserPropertiesServiceProperties {
        ComAdobeGraniteSecurityUserUserPropertiesServiceProperties {
            adapter_condition: None,
            granite_userproperties_nodetypes: None,
            granite_userproperties_resourcetypes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties>,

}

impl ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo {
    pub fn new() -> ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo {
        ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
    #[serde(rename = "group2member.relationship.outgoing")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group2member_relationship_outgoing: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "group2member.excluded.outgoing")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group2member_excluded_outgoing: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "group2member.relationship.incoming")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group2member_relationship_incoming: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "group2member.excluded.incoming")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group2member_excluded_incoming: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
    pub fn new() -> ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
        ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplProperties {
            group2member_relationship_outgoing: None,
            group2member_excluded_outgoing: None,
            group2member_relationship_incoming: None,
            group2member_excluded_incoming: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties>,

}

impl ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo {
    pub fn new() -> ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo {
        ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties {
    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jmx.objectname")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jmx_objectname: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties {
    pub fn new() -> ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties {
        ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplProperties {
            scheduler_expression: None,
            jmx_objectname: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties>,

}

impl ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo {
    pub fn new() -> ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo {
        ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties {
    #[serde(rename = "adapter.condition")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub adapter_condition: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties {
    pub fn new() -> ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties {
        ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryProperties {
            adapter_condition: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties>,

}

impl ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo {
    pub fn new() -> ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo {
        ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties {
    #[serde(rename = "archiving.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub archiving_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "archive.since.days.completed")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub archive_since_days_completed: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties {
    pub fn new() -> ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties {
        ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties {
            archiving_enabled: None,
            scheduler_expression: None,
            archive_since_days_completed: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties>,

}

impl ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo {
    pub fn new() -> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo {
        ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
    #[serde(rename = "purgeCompleted")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub purge_completed: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "completedAge")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub completed_age: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "purgeActive")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub purge_active: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "activeAge")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub active_age: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "saveThreshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub save_threshold: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
    pub fn new() -> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
        ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
            purge_completed: None,
            completed_age: None,
            purge_active: None,
            active_age: None,
            save_threshold: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties>,

}

impl ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo {
    pub fn new() -> ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo {
        ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties {
    #[serde(rename = "adapter.condition")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub adapter_condition: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "taskmanager.admingroups")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub taskmanager_admingroups: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties {
    pub fn new() -> ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties {
        ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorProperties {
            adapter_condition: None,
            taskmanager_admingroups: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteThreaddumpThreadDumpCollectorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteThreaddumpThreadDumpCollectorProperties>,

}

impl ComAdobeGraniteThreaddumpThreadDumpCollectorInfo {
    pub fn new() -> ComAdobeGraniteThreaddumpThreadDumpCollectorInfo {
        ComAdobeGraniteThreaddumpThreadDumpCollectorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    #[serde(rename = "scheduler.period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_period: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "scheduler.runOn")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_run_on: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "granite.threaddump.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_threaddump_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "granite.threaddump.dumpsPerFile")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_threaddump_dumps_per_file: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "granite.threaddump.enableGzipCompression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_threaddump_enable_gzip_compression: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "granite.threaddump.enableDirectoriesCompression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_threaddump_enable_directories_compression: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "granite.threaddump.enableJStack")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_threaddump_enable_j_stack: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "granite.threaddump.maxBackupDays")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_threaddump_max_backup_days: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "granite.threaddump.backupCleanTrigger")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_threaddump_backup_clean_trigger: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    pub fn new() -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
        ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
            scheduler_period: None,
            scheduler_run_on: None,
            granite_threaddump_enabled: None,
            granite_threaddump_dumps_per_file: None,
            granite_threaddump_enable_gzip_compression: None,
            granite_threaddump_enable_directories_compression: None,
            granite_threaddump_enable_j_stack: None,
            granite_threaddump_max_backup_days: None,
            granite_threaddump_backup_clean_trigger: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties>,

}

impl ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo {
    pub fn new() -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo {
        ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    #[serde(rename = "translationFactory")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub translation_factory: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "defaultConnectorLabel")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_connector_label: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "defaultConnectorAttribution")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_connector_attribution: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "defaultConnectorWorkspaceId")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_connector_workspace_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "defaultConnectorSubscriptionKey")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_connector_subscription_key: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "languageMapLocation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub language_map_location: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "categoryMapLocation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub category_map_location: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "retryAttempts")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub retry_attempts: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "timeoutCount")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub timeout_count: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
    pub fn new() -> ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
        ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslProperties {
            translation_factory: None,
            default_connector_label: None,
            default_connector_attribution: None,
            default_connector_workspace_id: None,
            default_connector_subscription_key: None,
            language_map_location: None,
            category_map_location: None,
            retry_attempts: None,
            timeout_count: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties>,

}

impl ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo {
    pub fn new() -> ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo {
        ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties {
    #[serde(rename = "defaultConnectorName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_connector_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "defaultCategory")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_category: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties {
    pub fn new() -> ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties {
        ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties {
            default_connector_name: None,
            default_category: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo {
    pub fn new() -> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo {
        ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties {
    #[serde(rename = "htmllibmanager.timing")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_timing: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "htmllibmanager.debug.init.js")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_debug_init_js: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "htmllibmanager.minify")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_minify: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "htmllibmanager.debug")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_debug: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "htmllibmanager.gzip")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_gzip: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "htmllibmanager.maxDataUriSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_max_data_uri_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "htmllibmanager.maxage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_maxage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "htmllibmanager.forceCQUrlInfo")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_force_cq_url_info: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "htmllibmanager.defaultthemename")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_defaultthemename: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "htmllibmanager.defaultuserthemename")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_defaultuserthemename: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "htmllibmanager.clientmanager")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_clientmanager: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "htmllibmanager.path.list")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_path_list: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "htmllibmanager.excluded.path.list")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_excluded_path_list: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "htmllibmanager.processor.js")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_processor_js: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "htmllibmanager.processor.css")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_processor_css: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "htmllibmanager.longcache.patterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_longcache_patterns: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "htmllibmanager.longcache.format")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_longcache_format: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "htmllibmanager.useFileSystemOutputCache")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_use_file_system_output_cache: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "htmllibmanager.fileSystemOutputCacheLocation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_file_system_output_cache_location: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "htmllibmanager.disable.replacement")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_disable_replacement: Option<models::ConfigNodePropertyArray>,

}

impl ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties {
    pub fn new() -> ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties {
        ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties {
            htmllibmanager_timing: None,
            htmllibmanager_debug_init_js: None,
            htmllibmanager_minify: None,
            htmllibmanager_debug: None,
            htmllibmanager_gzip: None,
            htmllibmanager_max_data_uri_size: None,
            htmllibmanager_maxage: None,
            htmllibmanager_force_cq_url_info: None,
            htmllibmanager_defaultthemename: None,
            htmllibmanager_defaultuserthemename: None,
            htmllibmanager_clientmanager: None,
            htmllibmanager_path_list: None,
            htmllibmanager_excluded_path_list: None,
            htmllibmanager_processor_js: None,
            htmllibmanager_processor_css: None,
            htmllibmanager_longcache_patterns: None,
            htmllibmanager_longcache_format: None,
            htmllibmanager_use_file_system_output_cache: None,
            htmllibmanager_file_system_output_cache_location: None,
            htmllibmanager_disable_replacement: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties>,

}

impl ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo {
    pub fn new() -> ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo {
        ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties {
    pub fn new() -> ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties {
        ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureProperties {
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties>,

}

impl ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo {
    pub fn new() -> ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo {
        ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties {
    #[serde(rename = "granite.workflow.WorkflowPublishEventService.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_workflow_workflow_publish_event_service_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties {
    pub fn new() -> ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties {
        ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceProperties {
            granite_workflow_workflow_publish_event_service_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties>,

}

impl ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo {
    pub fn new() -> ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo {
        ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties {
    #[serde(rename = "bucketSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bucket_size: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties {
    pub fn new() -> ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties {
        ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerProperties {
            bucket_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties>,

}

impl ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo {
    pub fn new() -> ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo {
        ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties {
    #[serde(rename = "default.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "max.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "default.period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_period: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties {
    pub fn new() -> ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties {
        ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerProperties {
            default_timeout: None,
            max_timeout: None,
            default_period: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreJobJobHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteWorkflowCoreJobJobHandlerProperties>,

}

impl ComAdobeGraniteWorkflowCoreJobJobHandlerInfo {
    pub fn new() -> ComAdobeGraniteWorkflowCoreJobJobHandlerInfo {
        ComAdobeGraniteWorkflowCoreJobJobHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreJobJobHandlerProperties {
    #[serde(rename = "job.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_topics: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "allow.self.process.termination")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allow_self_process_termination: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteWorkflowCoreJobJobHandlerProperties {
    pub fn new() -> ComAdobeGraniteWorkflowCoreJobJobHandlerProperties {
        ComAdobeGraniteWorkflowCoreJobJobHandlerProperties {
            job_topics: None,
            allow_self_process_termination: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties>,

}

impl ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo {
    pub fn new() -> ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo {
        ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties {
    #[serde(rename = "job.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_topics: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties {
    pub fn new() -> ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties {
        ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumProperties {
            job_topics: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCorePayloadMapCacheInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteWorkflowCorePayloadMapCacheProperties>,

}

impl ComAdobeGraniteWorkflowCorePayloadMapCacheInfo {
    pub fn new() -> ComAdobeGraniteWorkflowCorePayloadMapCacheInfo {
        ComAdobeGraniteWorkflowCorePayloadMapCacheInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCorePayloadMapCacheProperties {
    #[serde(rename = "getSystemWorkflowModels")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub get_system_workflow_models: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "getPackageRootPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub get_package_root_path: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeGraniteWorkflowCorePayloadMapCacheProperties {
    pub fn new() -> ComAdobeGraniteWorkflowCorePayloadMapCacheProperties {
        ComAdobeGraniteWorkflowCorePayloadMapCacheProperties {
            get_system_workflow_models: None,
            get_package_root_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties>,

}

impl ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo {
    pub fn new() -> ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo {
        ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties {
    #[serde(rename = "payload.move.white.list")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub payload_move_white_list: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "payload.move.handle.from.workflow.process")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub payload_move_handle_from_workflow_process: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties {
    pub fn new() -> ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties {
        ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties {
            payload_move_white_list: None,
            payload_move_handle_from_workflow_process: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreWorkflowConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteWorkflowCoreWorkflowConfigProperties>,

}

impl ComAdobeGraniteWorkflowCoreWorkflowConfigInfo {
    pub fn new() -> ComAdobeGraniteWorkflowCoreWorkflowConfigInfo {
        ComAdobeGraniteWorkflowCoreWorkflowConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreWorkflowConfigProperties {
    #[serde(rename = "cq.workflow.config.workflow.packages.root.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_workflow_config_workflow_packages_root_path: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.workflow.config.workflow.process.legacy.mode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_workflow_config_workflow_process_legacy_mode: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.workflow.config.allow.locking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_workflow_config_allow_locking: Option<models::ConfigNodePropertyBoolean>,

}

impl ComAdobeGraniteWorkflowCoreWorkflowConfigProperties {
    pub fn new() -> ComAdobeGraniteWorkflowCoreWorkflowConfigProperties {
        ComAdobeGraniteWorkflowCoreWorkflowConfigProperties {
            cq_workflow_config_workflow_packages_root_path: None,
            cq_workflow_config_workflow_process_legacy_mode: None,
            cq_workflow_config_allow_locking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties>,

}

impl ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo {
    pub fn new() -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo {
        ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    #[serde(rename = "granite.workflowinbox.sort.propertyName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_workflowinbox_sort_property_name: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "granite.workflowinbox.sort.order")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_workflowinbox_sort_order: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.workflow.job.retry")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_workflow_job_retry: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.workflow.superuser")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_workflow_superuser: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "granite.workflow.inboxQuerySize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_workflow_inbox_query_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "granite.workflow.adminUserGroupFilter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_workflow_admin_user_group_filter: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "granite.workflow.enforceWorkitemAssigneePermissions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_workflow_enforce_workitem_assignee_permissions: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "granite.workflow.enforceWorkflowInitiatorPermissions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_workflow_enforce_workflow_initiator_permissions: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "granite.workflow.injectTenantIdInJobTopics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_workflow_inject_tenant_id_in_job_topics: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "granite.workflow.maxPurgeSaveThreshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_workflow_max_purge_save_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "granite.workflow.maxPurgeQueryCount")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granite_workflow_max_purge_query_count: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
    pub fn new() -> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
        ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {
            granite_workflowinbox_sort_property_name: None,
            granite_workflowinbox_sort_order: None,
            cq_workflow_job_retry: None,
            cq_workflow_superuser: None,
            granite_workflow_inbox_query_size: None,
            granite_workflow_admin_user_group_filter: None,
            granite_workflow_enforce_workitem_assignee_permissions: None,
            granite_workflow_enforce_workflow_initiator_permissions: None,
            granite_workflow_inject_tenant_id_in_job_topics: None,
            granite_workflow_max_purge_save_threshold: None,
            granite_workflow_max_purge_query_count: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowPurgeSchedulerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeGraniteWorkflowPurgeSchedulerProperties>,

}

impl ComAdobeGraniteWorkflowPurgeSchedulerInfo {
    pub fn new() -> ComAdobeGraniteWorkflowPurgeSchedulerInfo {
        ComAdobeGraniteWorkflowPurgeSchedulerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowPurgeSchedulerProperties {
    #[serde(rename = "scheduledpurge.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "scheduledpurge.workflowStatus")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_workflow_status: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "scheduledpurge.modelIds")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_model_ids: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "scheduledpurge.daysold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduledpurge_daysold: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeGraniteWorkflowPurgeSchedulerProperties {
    pub fn new() -> ComAdobeGraniteWorkflowPurgeSchedulerProperties {
        ComAdobeGraniteWorkflowPurgeSchedulerProperties {
            scheduledpurge_name: None,
            scheduledpurge_workflow_status: None,
            scheduledpurge_model_ids: None,
            scheduledpurge_daysold: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeOctopusNcommBootstrapInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeOctopusNcommBootstrapProperties>,

}

impl ComAdobeOctopusNcommBootstrapInfo {
    pub fn new() -> ComAdobeOctopusNcommBootstrapInfo {
        ComAdobeOctopusNcommBootstrapInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeOctopusNcommBootstrapProperties {
    #[serde(rename = "maxConnections")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_connections: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxRequests")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_requests: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "requestTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "requestRetries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_retries: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "launchTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub launch_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl ComAdobeOctopusNcommBootstrapProperties {
    pub fn new() -> ComAdobeOctopusNcommBootstrapProperties {
        ComAdobeOctopusNcommBootstrapProperties {
            max_connections: None,
            max_requests: None,
            request_timeout: None,
            request_retries: None,
            launch_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties>,

}

impl ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo {
    pub fn new() -> ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo {
        ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties {
    #[serde(rename = "communities.integration.livefyre.sling.event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub communities_integration_livefyre_sling_event_filter: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties {
    pub fn new() -> ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties {
        ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSProperties {
            communities_integration_livefyre_sling_event_filter: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeXmpWorkerFilesNcommXmpFilesNCommInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComAdobeXmpWorkerFilesNcommXmpFilesNCommInfo {
    pub fn new() -> ComAdobeXmpWorkerFilesNcommXmpFilesNCommInfo {
        ComAdobeXmpWorkerFilesNcommXmpFilesNCommInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
    #[serde(rename = "maxConnections")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_connections: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "maxRequests")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_requests: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "requestTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_timeout: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "logDir")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub log_dir: Option<models::ConfigNodePropertyString>,

}

impl ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
    pub fn new() -> ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
        ComAdobeXmpWorkerFilesNcommXmpFilesNCommProperties {
            max_connections: None,
            max_requests: None,
            request_timeout: None,
            log_dir: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties>,

}

impl ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo {
    pub fn new() -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo {
        ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    #[serde(rename = "jdbc.driver.class")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jdbc_driver_class: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jdbc.connection.uri")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jdbc_connection_uri: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jdbc.username")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jdbc_username: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jdbc.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jdbc_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jdbc.validation.query")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jdbc_validation_query: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "default.readonly")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_readonly: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "default.autocommit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_autocommit: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "pool.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "pool.max.wait.msec")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pool_max_wait_msec: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "datasource.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub datasource_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "datasource.svc.properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub datasource_svc_properties: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    pub fn new() -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
        ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
            jdbc_driver_class: None,
            jdbc_connection_uri: None,
            jdbc_username: None,
            jdbc_password: None,
            jdbc_validation_query: None,
            default_readonly: None,
            default_autocommit: None,
            pool_size: None,
            pool_max_wait_msec: None,
            datasource_name: None,
            datasource_svc_properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCommonsHttpclientInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCommonsHttpclientProperties>,

}

impl ComDayCommonsHttpclientInfo {
    pub fn new() -> ComDayCommonsHttpclientInfo {
        ComDayCommonsHttpclientInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCommonsHttpclientProperties {
    #[serde(rename = "proxy.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "proxy.host")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_host: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "proxy.user")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_user: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "proxy.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "proxy.ntlm.host")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_ntlm_host: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "proxy.ntlm.domain")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_ntlm_domain: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "proxy.exceptions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_exceptions: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCommonsHttpclientProperties {
    pub fn new() -> ComDayCommonsHttpclientProperties {
        ComDayCommonsHttpclientProperties {
            proxy_enabled: None,
            proxy_host: None,
            proxy_user: None,
            proxy_password: None,
            proxy_ntlm_host: None,
            proxy_ntlm_domain: None,
            proxy_exceptions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties>,

}

impl ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo {
    pub fn new() -> ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo {
        ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties {
    #[serde(rename = "cq.store.listener.additionalStorePaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_store_listener_additional_store_paths: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties {
    pub fn new() -> ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties {
        ComDayCqAnalyticsImplStorePropertiesChangeListenerProperties {
            cq_store_listener_additional_store_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties>,

}

impl ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo {
    pub fn new() -> ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo {
        ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties {
    #[serde(rename = "allowed.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allowed_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.analytics.saint.exporter.pagesize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_saint_exporter_pagesize: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties {
    pub fn new() -> ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties {
        ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties {
            allowed_paths: None,
            cq_analytics_saint_exporter_pagesize: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties>,

}

impl ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo {
    pub fn new() -> ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo {
        ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties {
    #[serde(rename = "report.fetch.attempts")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub report_fetch_attempts: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "report.fetch.delay")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub report_fetch_delay: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties {
    pub fn new() -> ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties {
        ComDayCqAnalyticsSitecatalystImplImporterReportImporterProperties {
            report_fetch_attempts: None,
            report_fetch_delay: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties>,

}

impl ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo {
    pub fn new() -> ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo {
        ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties {
    #[serde(rename = "cq.analytics.adapterfactory.contextstores")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_adapterfactory_contextstores: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties {
    pub fn new() -> ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties {
        ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryProperties {
            cq_analytics_adapterfactory_contextstores: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo {
    pub fn new() -> ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo {
        ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
    #[serde(rename = "cq.analytics.sitecatalyst.service.datacenter.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_sitecatalyst_service_datacenter_url: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "devhostnamepatterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub devhostnamepatterns: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "connection.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connection_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "socket.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub socket_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
    pub fn new() -> ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
        ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplProperties {
            cq_analytics_sitecatalyst_service_datacenter_url: None,
            devhostnamepatterns: None,
            connection_timeout: None,
            socket_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties>,

}

impl ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo {
        ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties {
    #[serde(rename = "cq.analytics.testandtarget.accountoptionsupdater.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_testandtarget_accountoptionsupdater_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties {
        ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterProperties {
            cq_analytics_testandtarget_accountoptionsupdater_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties>,

}

impl ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo {
        ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties {
    #[serde(rename = "cq.analytics.testandtarget.deleteauthoractivitylistener.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_testandtarget_deleteauthoractivitylistener_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties {
        ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerProperties {
            cq_analytics_testandtarget_deleteauthoractivitylistener_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo {
        ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties {
    #[serde(rename = "cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties {
        ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerProperties {
            cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties>,

}

impl ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo {
        ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties {
    #[serde(rename = "cq.analytics.testandtarget.segmentimporter.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_testandtarget_segmentimporter_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties {
        ComDayCqAnalyticsTestandtargetImplSegmentImporterProperties {
            cq_analytics_testandtarget_segmentimporter_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties>,

}

impl ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo {
        ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties {
    #[serde(rename = "endpointUri")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub endpoint_uri: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "connectionTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connection_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "socketTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub socket_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties {
        ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplProperties {
            endpoint_uri: None,
            connection_timeout: None,
            socket_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties>,

}

impl ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo {
        ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties {
    #[serde(rename = "testandtarget.endpoint.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub testandtarget_endpoint_url: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties {
        ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletProperties {
            testandtarget_endpoint_url: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties>,

}

impl ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo {
        ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties {
    #[serde(rename = "cq.analytics.testandtarget.api.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_testandtarget_api_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.analytics.testandtarget.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_testandtarget_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.analytics.testandtarget.sockettimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_testandtarget_sockettimeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.analytics.testandtarget.recommendations.url.replace")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_testandtarget_recommendations_url_replace: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.analytics.testandtarget.recommendations.url.replacewith")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_analytics_testandtarget_recommendations_url_replacewith: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties {
    pub fn new() -> ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties {
        ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplProperties {
            cq_analytics_testandtarget_api_url: None,
            cq_analytics_testandtarget_timeout: None,
            cq_analytics_testandtarget_sockettimeout: None,
            cq_analytics_testandtarget_recommendations_url_replace: None,
            cq_analytics_testandtarget_recommendations_url_replacewith: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAuthImplCugCugSupportImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAuthImplCugCugSupportImplProperties>,

}

impl ComDayCqAuthImplCugCugSupportImplInfo {
    pub fn new() -> ComDayCqAuthImplCugCugSupportImplInfo {
        ComDayCqAuthImplCugCugSupportImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAuthImplCugCugSupportImplProperties {
    #[serde(rename = "cug.exempted.principals")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cug_exempted_principals: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cug.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cug_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cug.principals.regex")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cug_principals_regex: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cug.principals.replacement")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cug_principals_replacement: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqAuthImplCugCugSupportImplProperties {
    pub fn new() -> ComDayCqAuthImplCugCugSupportImplProperties {
        ComDayCqAuthImplCugCugSupportImplProperties {
            cug_exempted_principals: None,
            cug_enabled: None,
            cug_principals_regex: None,
            cug_principals_replacement: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAuthImplLoginSelectorHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqAuthImplLoginSelectorHandlerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqAuthImplLoginSelectorHandlerInfo {
    pub fn new() -> ComDayCqAuthImplLoginSelectorHandlerInfo {
        ComDayCqAuthImplLoginSelectorHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqAuthImplLoginSelectorHandlerProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "auth.loginselector.mappings")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_loginselector_mappings: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "auth.loginselector.changepw.mappings")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_loginselector_changepw_mappings: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "auth.loginselector.defaultloginpage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_loginselector_defaultloginpage: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.loginselector.defaultchangepwpage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_loginselector_defaultchangepwpage: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.loginselector.handle")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_loginselector_handle: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "auth.loginselector.handle.all.extensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_loginselector_handle_all_extensions: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqAuthImplLoginSelectorHandlerProperties {
    pub fn new() -> ComDayCqAuthImplLoginSelectorHandlerProperties {
        ComDayCqAuthImplLoginSelectorHandlerProperties {
            path: None,
            service_ranking: None,
            auth_loginselector_mappings: None,
            auth_loginselector_changepw_mappings: None,
            auth_loginselector_defaultloginpage: None,
            auth_loginselector_defaultchangepwpage: None,
            auth_loginselector_handle: None,
            auth_loginselector_handle_all_extensions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqCommonsImplExternalizerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqCommonsImplExternalizerImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqCommonsImplExternalizerImplInfo {
    pub fn new() -> ComDayCqCommonsImplExternalizerImplInfo {
        ComDayCqCommonsImplExternalizerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqCommonsImplExternalizerImplProperties {
    #[serde(rename = "externalizer.domains")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub externalizer_domains: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "externalizer.host")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub externalizer_host: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "externalizer.contextpath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub externalizer_contextpath: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "externalizer.encodedpath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub externalizer_encodedpath: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqCommonsImplExternalizerImplProperties {
    pub fn new() -> ComDayCqCommonsImplExternalizerImplProperties {
        ComDayCqCommonsImplExternalizerImplProperties {
            externalizer_domains: None,
            externalizer_host: None,
            externalizer_contextpath: None,
            externalizer_encodedpath: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqCommonsServletsRootMappingServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqCommonsServletsRootMappingServletProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqCommonsServletsRootMappingServletInfo {
    pub fn new() -> ComDayCqCommonsServletsRootMappingServletInfo {
        ComDayCqCommonsServletsRootMappingServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqCommonsServletsRootMappingServletProperties {
    #[serde(rename = "rootmapping.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub rootmapping_target: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqCommonsServletsRootMappingServletProperties {
    pub fn new() -> ComDayCqCommonsServletsRootMappingServletProperties {
        ComDayCqCommonsServletsRootMappingServletProperties {
            rootmapping_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties>,

}

impl ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo {
    pub fn new() -> ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo {
        ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties {
    #[serde(rename = "codeupgradetasks")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub codeupgradetasks: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "codeupgradetaskfilters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub codeupgradetaskfilters: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties {
    pub fn new() -> ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties {
        ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties {
            codeupgradetasks: None,
            codeupgradetaskfilters: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties>,

}

impl ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo {
    pub fn new() -> ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo {
        ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties {
    #[serde(rename = "upgradeTaskIgnoreList")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub upgrade_task_ignore_list: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties {
    pub fn new() -> ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties {
        ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListProperties {
            upgrade_task_ignore_list: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties>,

}

impl ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo {
    pub fn new() -> ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo {
        ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties {
    #[serde(rename = "effectiveBundleListPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub effective_bundle_list_path: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties {
    pub fn new() -> ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties {
        ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistProperties {
            effective_bundle_list_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqContentsyncImplContentSyncManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqContentsyncImplContentSyncManagerImplProperties>,

}

impl ComDayCqContentsyncImplContentSyncManagerImplInfo {
    pub fn new() -> ComDayCqContentsyncImplContentSyncManagerImplInfo {
        ComDayCqContentsyncImplContentSyncManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqContentsyncImplContentSyncManagerImplProperties {
    #[serde(rename = "contentsync.fallback.authorizable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub contentsync_fallback_authorizable: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "contentsync.fallback.updateuser")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub contentsync_fallback_updateuser: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqContentsyncImplContentSyncManagerImplProperties {
    pub fn new() -> ComDayCqContentsyncImplContentSyncManagerImplProperties {
        ComDayCqContentsyncImplContentSyncManagerImplProperties {
            contentsync_fallback_authorizable: None,
            contentsync_fallback_updateuser: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCommonsHandlerStandardImageHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCommonsHandlerStandardImageHandlerProperties>,

}

impl ComDayCqDamCommonsHandlerStandardImageHandlerInfo {
    pub fn new() -> ComDayCqDamCommonsHandlerStandardImageHandlerInfo {
        ComDayCqDamCommonsHandlerStandardImageHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCommonsHandlerStandardImageHandlerProperties {
    #[serde(rename = "large_file_threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub large_file_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "large_comment_threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub large_comment_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.enable.ext.meta.extraction")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_enable_ext_meta_extraction: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCommonsHandlerStandardImageHandlerProperties {
    pub fn new() -> ComDayCqDamCommonsHandlerStandardImageHandlerProperties {
        ComDayCqDamCommonsHandlerStandardImageHandlerProperties {
            large_file_threshold: None,
            large_comment_threshold: None,
            cq_dam_enable_ext_meta_extraction: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties>,

}

impl ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo {
    pub fn new() -> ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo {
        ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
    #[serde(rename = "xmp.filter.apply_whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub xmp_filter_apply_whitelist: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "xmp.filter.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub xmp_filter_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "xmp.filter.apply_blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub xmp_filter_apply_blacklist: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "xmp.filter.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub xmp_filter_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
    pub fn new() -> ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
        ComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties {
            xmp_filter_apply_whitelist: None,
            xmp_filter_whitelist: None,
            xmp_filter_apply_blacklist: None,
            xmp_filter_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCommonsUtilImplAssetCacheImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCommonsUtilImplAssetCacheImplProperties>,

}

impl ComDayCqDamCommonsUtilImplAssetCacheImplInfo {
    pub fn new() -> ComDayCqDamCommonsUtilImplAssetCacheImplInfo {
        ComDayCqDamCommonsUtilImplAssetCacheImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCommonsUtilImplAssetCacheImplProperties {
    #[serde(rename = "large.file.min")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub large_file_min: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.apply")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_apply: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "mime.types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mime_types: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamCommonsUtilImplAssetCacheImplProperties {
    pub fn new() -> ComDayCqDamCommonsUtilImplAssetCacheImplProperties {
        ComDayCqDamCommonsUtilImplAssetCacheImplProperties {
            large_file_min: None,
            cache_apply: None,
            mime_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties>,

}

impl ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo {
    pub fn new() -> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo {
        ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties {
    #[serde(rename = "cq.dam.config.annotation.pdf.document.width")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_document_width: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.config.annotation.pdf.document.height")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_document_height: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.config.annotation.pdf.document.padding.horizontal")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_document_padding_horizontal: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.config.annotation.pdf.document.padding.vertical")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_document_padding_vertical: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.config.annotation.pdf.font.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_font_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.config.annotation.pdf.font.color")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_font_color: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.config.annotation.pdf.font.family")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_font_family: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.config.annotation.pdf.font.light")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_font_light: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.config.annotation.pdf.marginTextImage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_margin_text_image: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.config.annotation.pdf.minImageHeight")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_min_image_height: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.config.annotation.pdf.reviewStatus.width")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_review_status_width: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.config.annotation.pdf.reviewStatus.color.approved")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_review_status_color_approved: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.config.annotation.pdf.reviewStatus.color.rejected")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_review_status_color_rejected: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_review_status_color_changes_requested: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.config.annotation.pdf.annotationMarker.width")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_annotation_marker_width: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.config.annotation.pdf.asset.minheight")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_annotation_pdf_asset_minheight: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties {
    pub fn new() -> ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties {
        ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties {
            cq_dam_config_annotation_pdf_document_width: None,
            cq_dam_config_annotation_pdf_document_height: None,
            cq_dam_config_annotation_pdf_document_padding_horizontal: None,
            cq_dam_config_annotation_pdf_document_padding_vertical: None,
            cq_dam_config_annotation_pdf_font_size: None,
            cq_dam_config_annotation_pdf_font_color: None,
            cq_dam_config_annotation_pdf_font_family: None,
            cq_dam_config_annotation_pdf_font_light: None,
            cq_dam_config_annotation_pdf_margin_text_image: None,
            cq_dam_config_annotation_pdf_min_image_height: None,
            cq_dam_config_annotation_pdf_review_status_width: None,
            cq_dam_config_annotation_pdf_review_status_color_approved: None,
            cq_dam_config_annotation_pdf_review_status_color_rejected: None,
            cq_dam_config_annotation_pdf_review_status_color_changes_requested: None,
            cq_dam_config_annotation_pdf_annotation_marker_width: None,
            cq_dam_config_annotation_pdf_asset_minheight: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplAssetMoveListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplAssetMoveListenerProperties>,

}

impl ComDayCqDamCoreImplAssetMoveListenerInfo {
    pub fn new() -> ComDayCqDamCoreImplAssetMoveListenerInfo {
        ComDayCqDamCoreImplAssetMoveListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplAssetMoveListenerProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplAssetMoveListenerProperties {
    pub fn new() -> ComDayCqDamCoreImplAssetMoveListenerProperties {
        ComDayCqDamCoreImplAssetMoveListenerProperties {
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties>,

}

impl ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo {
    pub fn new() -> ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo {
        ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties {
    #[serde(rename = "isEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties {
    pub fn new() -> ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties {
        ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationProperties {
            is_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties>,

}

impl ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo {
    pub fn new() -> ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo {
        ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties {
    #[serde(rename = "cq.dam.adhoc.asset.share.prezip.maxcontentsize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_adhoc_asset_share_prezip_maxcontentsize: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties {
    pub fn new() -> ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties {
        ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletProperties {
            cq_dam_adhoc_asset_share_prezip_maxcontentsize: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplCacheCqBufferedImageCacheInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplCacheCqBufferedImageCacheProperties>,

}

impl ComDayCqDamCoreImplCacheCqBufferedImageCacheInfo {
    pub fn new() -> ComDayCqDamCoreImplCacheCqBufferedImageCacheInfo {
        ComDayCqDamCoreImplCacheCqBufferedImageCacheInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplCacheCqBufferedImageCacheProperties {
    #[serde(rename = "cq.dam.image.cache.max.memory")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_image_cache_max_memory: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.image.cache.max.age")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_image_cache_max_age: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.image.cache.max.dimension")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_image_cache_max_dimension: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamCoreImplCacheCqBufferedImageCacheProperties {
    pub fn new() -> ComDayCqDamCoreImplCacheCqBufferedImageCacheProperties {
        ComDayCqDamCoreImplCacheCqBufferedImageCacheProperties {
            cq_dam_image_cache_max_memory: None,
            cq_dam_image_cache_max_age: None,
            cq_dam_image_cache_max_dimension: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplDamChangeEventListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplDamChangeEventListenerProperties>,

}

impl ComDayCqDamCoreImplDamChangeEventListenerInfo {
    pub fn new() -> ComDayCqDamCoreImplDamChangeEventListenerInfo {
        ComDayCqDamCoreImplDamChangeEventListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplDamChangeEventListenerProperties {
    #[serde(rename = "changeeventlistener.observed.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub changeeventlistener_observed_paths: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamCoreImplDamChangeEventListenerProperties {
    pub fn new() -> ComDayCqDamCoreImplDamChangeEventListenerProperties {
        ComDayCqDamCoreImplDamChangeEventListenerProperties {
            changeeventlistener_observed_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplDamEventPurgeServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplDamEventPurgeServiceProperties>,

}

impl ComDayCqDamCoreImplDamEventPurgeServiceInfo {
    pub fn new() -> ComDayCqDamCoreImplDamEventPurgeServiceInfo {
        ComDayCqDamCoreImplDamEventPurgeServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplDamEventPurgeServiceProperties {
    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "maxSavedActivities")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_saved_activities: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "saveInterval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub save_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "enableActivityPurge")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_activity_purge: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "eventTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_types: Option<models::ConfigNodePropertyDropDown>,

}

impl ComDayCqDamCoreImplDamEventPurgeServiceProperties {
    pub fn new() -> ComDayCqDamCoreImplDamEventPurgeServiceProperties {
        ComDayCqDamCoreImplDamEventPurgeServiceProperties {
            scheduler_expression: None,
            max_saved_activities: None,
            save_interval: None,
            enable_activity_purge: None,
            event_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplDamEventRecorderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplDamEventRecorderImplProperties>,

}

impl ComDayCqDamCoreImplDamEventRecorderImplInfo {
    pub fn new() -> ComDayCqDamCoreImplDamEventRecorderImplInfo {
        ComDayCqDamCoreImplDamEventRecorderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplDamEventRecorderImplProperties {
    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "event.queue.length")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_queue_length: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "eventrecorder.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub eventrecorder_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "eventrecorder.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub eventrecorder_blacklist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "eventrecorder.eventtypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub eventrecorder_eventtypes: Option<models::ConfigNodePropertyDropDown>,

}

impl ComDayCqDamCoreImplDamEventRecorderImplProperties {
    pub fn new() -> ComDayCqDamCoreImplDamEventRecorderImplProperties {
        ComDayCqDamCoreImplDamEventRecorderImplProperties {
            event_filter: None,
            event_queue_length: None,
            eventrecorder_enabled: None,
            eventrecorder_blacklist: None,
            eventrecorder_eventtypes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplEventDamEventAuditListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplEventDamEventAuditListenerProperties>,

}

impl ComDayCqDamCoreImplEventDamEventAuditListenerInfo {
    pub fn new() -> ComDayCqDamCoreImplEventDamEventAuditListenerInfo {
        ComDayCqDamCoreImplEventDamEventAuditListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplEventDamEventAuditListenerProperties {
    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplEventDamEventAuditListenerProperties {
    pub fn new() -> ComDayCqDamCoreImplEventDamEventAuditListenerProperties {
        ComDayCqDamCoreImplEventDamEventAuditListenerProperties {
            event_filter: None,
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplExpiryNotificationJobImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplExpiryNotificationJobImplProperties>,

}

impl ComDayCqDamCoreImplExpiryNotificationJobImplInfo {
    pub fn new() -> ComDayCqDamCoreImplExpiryNotificationJobImplInfo {
        ComDayCqDamCoreImplExpiryNotificationJobImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
    #[serde(rename = "cq.dam.expiry.notification.scheduler.istimebased")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_expiry_notification_scheduler_istimebased: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.dam.expiry.notification.scheduler.timebased.rule")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_expiry_notification_scheduler_timebased_rule: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.expiry.notification.scheduler.period.rule")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_expiry_notification_scheduler_period_rule: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "send_email")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub send_email: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "asset_expired_limit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub asset_expired_limit: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "prior_notification_seconds")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub prior_notification_seconds: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.expiry.notification.url.protocol")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_expiry_notification_url_protocol: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
    pub fn new() -> ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
        ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
            cq_dam_expiry_notification_scheduler_istimebased: None,
            cq_dam_expiry_notification_scheduler_timebased_rule: None,
            cq_dam_expiry_notification_scheduler_period_rule: None,
            send_email: None,
            asset_expired_limit: None,
            prior_notification_seconds: None,
            cq_dam_expiry_notification_url_protocol: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties>,

}

impl ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo {
    pub fn new() -> ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo {
        ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties {
    #[serde(rename = "isEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties {
    pub fn new() -> ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties {
        ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatProperties {
            is_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplGfxCommonsGfxRendererInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplGfxCommonsGfxRendererProperties>,

}

impl ComDayCqDamCoreImplGfxCommonsGfxRendererInfo {
    pub fn new() -> ComDayCqDamCoreImplGfxCommonsGfxRendererInfo {
        ComDayCqDamCoreImplGfxCommonsGfxRendererInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplGfxCommonsGfxRendererProperties {
    #[serde(rename = "skip.bufferedcache")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub skip_bufferedcache: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplGfxCommonsGfxRendererProperties {
    pub fn new() -> ComDayCqDamCoreImplGfxCommonsGfxRendererProperties {
        ComDayCqDamCoreImplGfxCommonsGfxRendererProperties {
            skip_bufferedcache: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplHandlerEpsFormatHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplHandlerEpsFormatHandlerProperties>,

}

impl ComDayCqDamCoreImplHandlerEpsFormatHandlerInfo {
    pub fn new() -> ComDayCqDamCoreImplHandlerEpsFormatHandlerInfo {
        ComDayCqDamCoreImplHandlerEpsFormatHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplHandlerEpsFormatHandlerProperties {
    #[serde(rename = "mimetype")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mimetype: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamCoreImplHandlerEpsFormatHandlerProperties {
    pub fn new() -> ComDayCqDamCoreImplHandlerEpsFormatHandlerProperties {
        ComDayCqDamCoreImplHandlerEpsFormatHandlerProperties {
            mimetype: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties>,

}

impl ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo {
    pub fn new() -> ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo {
        ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties {
    #[serde(rename = "mimetype")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mimetype: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties {
    pub fn new() -> ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties {
        ComDayCqDamCoreImplHandlerIndesignFormatHandlerProperties {
            mimetype: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplHandlerJpegHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplHandlerJpegHandlerProperties>,

}

impl ComDayCqDamCoreImplHandlerJpegHandlerInfo {
    pub fn new() -> ComDayCqDamCoreImplHandlerJpegHandlerInfo {
        ComDayCqDamCoreImplHandlerJpegHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplHandlerJpegHandlerProperties {
    #[serde(rename = "cq.dam.enable.ext.meta.extraction")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_enable_ext_meta_extraction: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "large_file_threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub large_file_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "large_comment_threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub large_comment_threshold: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamCoreImplHandlerJpegHandlerProperties {
    pub fn new() -> ComDayCqDamCoreImplHandlerJpegHandlerProperties {
        ComDayCqDamCoreImplHandlerJpegHandlerProperties {
            cq_dam_enable_ext_meta_extraction: None,
            large_file_threshold: None,
            large_comment_threshold: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerProperties>,

}

impl ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerInfo {
    pub fn new() -> ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerInfo {
        ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerProperties {
    #[serde(rename = "xmphandler.cq.formats")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub xmphandler_cq_formats: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerProperties {
    pub fn new() -> ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerProperties {
        ComDayCqDamCoreImplHandlerXmpNCommXmpHandlerProperties {
            xmphandler_cq_formats: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties>,

}

impl ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo {
    pub fn new() -> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo {
        ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties {
    #[serde(rename = "jmx.objectname")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jmx_objectname: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "property.measure.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub property_measure_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "property.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub property_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "property.max.wait.ms")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub property_max_wait_ms: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "property.max.rate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub property_max_rate: Option<models::ConfigNodePropertyFloat>,

    #[serde(rename = "fulltext.measure.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fulltext_measure_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "fulltext.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fulltext_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "fulltext.max.wait.ms")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fulltext_max_wait_ms: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "fulltext.max.rate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fulltext_max_rate: Option<models::ConfigNodePropertyFloat>,

}

impl ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties {
    pub fn new() -> ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties {
        ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties {
            jmx_objectname: None,
            property_measure_enabled: None,
            property_name: None,
            property_max_wait_ms: None,
            property_max_rate: None,
            fulltext_measure_enabled: None,
            fulltext_name: None,
            fulltext_max_wait_ms: None,
            fulltext_max_rate: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo {
    pub fn new() -> ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo {
        ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties {
    #[serde(rename = "jmx.objectname")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jmx_objectname: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties {
    pub fn new() -> ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties {
        ComDayCqDamCoreImplJmxAssetMigrationMBeanImplProperties {
            jmx_objectname: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties>,

}

impl ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo {
    pub fn new() -> ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo {
        ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties {
    #[serde(rename = "jmx.objectname")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jmx_objectname: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "active")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub active: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties {
    pub fn new() -> ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties {
        ComDayCqDamCoreImplJmxAssetUpdateMonitorImplProperties {
            jmx_objectname: None,
            active: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties>,

}

impl ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo {
    pub fn new() -> ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo {
        ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties {
    #[serde(rename = "operation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub operation: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "emailEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties {
    pub fn new() -> ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties {
        ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigProperties {
            operation: None,
            email_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties>,

}

impl ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo {
    pub fn new() -> ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo {
        ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties {
    #[serde(rename = "operation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub operation: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "operationIcon")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub operation_icon: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "topicName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub topic_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "emailEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties {
    pub fn new() -> ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties {
        ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigProperties {
            operation: None,
            operation_icon: None,
            topic_name: None,
            email_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplLightboxLightboxServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplLightboxLightboxServletProperties>,

}

impl ComDayCqDamCoreImplLightboxLightboxServletInfo {
    pub fn new() -> ComDayCqDamCoreImplLightboxLightboxServletInfo {
        ComDayCqDamCoreImplLightboxLightboxServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplLightboxLightboxServletProperties {
    #[serde(rename = "sling.servlet.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_paths: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_methods: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.dam.enable.anonymous")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_enable_anonymous: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplLightboxLightboxServletProperties {
    pub fn new() -> ComDayCqDamCoreImplLightboxLightboxServletProperties {
        ComDayCqDamCoreImplLightboxLightboxServletProperties {
            sling_servlet_paths: None,
            sling_servlet_methods: None,
            cq_dam_enable_anonymous: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties>,

}

impl ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo {
    pub fn new() -> ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo {
        ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties {
    #[serde(rename = "granite:data")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub granitedata: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties {
    pub fn new() -> ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties {
        ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerProperties {
            granitedata: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties>,

}

impl ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo {
    pub fn new() -> ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo {
        ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties {
    #[serde(rename = "cq.dam.allow.all.mime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_allow_all_mime: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.dam.allowed.asset.mimes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_allowed_asset_mimes: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties {
    pub fn new() -> ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties {
        ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties {
            cq_dam_allow_all_mime: None,
            cq_dam_allowed_asset_mimes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties>,

}

impl ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo {
    pub fn new() -> ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo {
        ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties {
    #[serde(rename = "cq.dam.detect.asset.mime.from.content")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_detect_asset_mime_from_content: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties {
    pub fn new() -> ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties {
        ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties {
            cq_dam_detect_asset_mime_from_content: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplMissingMetadataNotificationJobInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplMissingMetadataNotificationJobProperties>,

}

impl ComDayCqDamCoreImplMissingMetadataNotificationJobInfo {
    pub fn new() -> ComDayCqDamCoreImplMissingMetadataNotificationJobInfo {
        ComDayCqDamCoreImplMissingMetadataNotificationJobInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplMissingMetadataNotificationJobProperties {
    #[serde(rename = "cq.dam.missingmetadata.notification.scheduler.istimebased")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_missingmetadata_notification_scheduler_istimebased: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.dam.missingmetadata.notification.scheduler.timebased.rule")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_missingmetadata_notification_scheduler_timebased_rule: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.missingmetadata.notification.scheduler.period.rule")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_missingmetadata_notification_scheduler_period_rule: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.missingmetadata.notification.recipient")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_missingmetadata_notification_recipient: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamCoreImplMissingMetadataNotificationJobProperties {
    pub fn new() -> ComDayCqDamCoreImplMissingMetadataNotificationJobProperties {
        ComDayCqDamCoreImplMissingMetadataNotificationJobProperties {
            cq_dam_missingmetadata_notification_scheduler_istimebased: None,
            cq_dam_missingmetadata_notification_scheduler_timebased_rule: None,
            cq_dam_missingmetadata_notification_scheduler_period_rule: None,
            cq_dam_missingmetadata_notification_recipient: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties>,

}

impl ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo {
    pub fn new() -> ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo {
        ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties {
    #[serde(rename = "process.label")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub process_label: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "Notify on Complete")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub notify_on_complete: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties {
    pub fn new() -> ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties {
        ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrProperties {
            process_label: None,
            notify_on_complete: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplProcessTextExtractionProcessInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplProcessTextExtractionProcessProperties>,

}

impl ComDayCqDamCoreImplProcessTextExtractionProcessInfo {
    pub fn new() -> ComDayCqDamCoreImplProcessTextExtractionProcessInfo {
        ComDayCqDamCoreImplProcessTextExtractionProcessInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplProcessTextExtractionProcessProperties {
    #[serde(rename = "mimeTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mime_types: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "maxExtract")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_extract: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamCoreImplProcessTextExtractionProcessProperties {
    pub fn new() -> ComDayCqDamCoreImplProcessTextExtractionProcessProperties {
        ComDayCqDamCoreImplProcessTextExtractionProcessProperties {
            mime_types: None,
            max_extract: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplRenditionMakerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplRenditionMakerImplProperties>,

}

impl ComDayCqDamCoreImplRenditionMakerImplInfo {
    pub fn new() -> ComDayCqDamCoreImplRenditionMakerImplInfo {
        ComDayCqDamCoreImplRenditionMakerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplRenditionMakerImplProperties {
    #[serde(rename = "xmp.propagate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub xmp_propagate: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "xmp.excludes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub xmp_excludes: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamCoreImplRenditionMakerImplProperties {
    pub fn new() -> ComDayCqDamCoreImplRenditionMakerImplProperties {
        ComDayCqDamCoreImplRenditionMakerImplProperties {
            xmp_propagate: None,
            xmp_excludes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplReportsReportExportServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplReportsReportExportServiceProperties>,

}

impl ComDayCqDamCoreImplReportsReportExportServiceInfo {
    pub fn new() -> ComDayCqDamCoreImplReportsReportExportServiceInfo {
        ComDayCqDamCoreImplReportsReportExportServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplReportsReportExportServiceProperties {
    #[serde(rename = "queryBatchSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub query_batch_size: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamCoreImplReportsReportExportServiceProperties {
    pub fn new() -> ComDayCqDamCoreImplReportsReportExportServiceProperties {
        ComDayCqDamCoreImplReportsReportExportServiceProperties {
            query_batch_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplReportsReportPurgeServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplReportsReportPurgeServiceProperties>,

}

impl ComDayCqDamCoreImplReportsReportPurgeServiceInfo {
    pub fn new() -> ComDayCqDamCoreImplReportsReportPurgeServiceInfo {
        ComDayCqDamCoreImplReportsReportPurgeServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "maxSavedReports")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_saved_reports: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "timeDuration")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub time_duration: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "enableReportPurge")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_report_purge: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
    pub fn new() -> ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
        ComDayCqDamCoreImplReportsReportPurgeServiceProperties {
            scheduler_expression: None,
            max_saved_reports: None,
            time_duration: None,
            enable_report_purge: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletAssetDownloadServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletAssetDownloadServletProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqDamCoreImplServletAssetDownloadServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletAssetDownloadServletInfo {
        ComDayCqDamCoreImplServletAssetDownloadServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletAssetDownloadServletProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplServletAssetDownloadServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletAssetDownloadServletProperties {
        ComDayCqDamCoreImplServletAssetDownloadServletProperties {
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletAssetStatusServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletAssetStatusServletProperties>,

}

impl ComDayCqDamCoreImplServletAssetStatusServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletAssetStatusServletInfo {
        ComDayCqDamCoreImplServletAssetStatusServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletAssetStatusServletProperties {
    #[serde(rename = "cq.dam.batch.status.maxassets")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_batch_status_maxassets: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamCoreImplServletAssetStatusServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletAssetStatusServletProperties {
        ComDayCqDamCoreImplServletAssetStatusServletProperties {
            cq_dam_batch_status_maxassets: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletAssetXmpSearchServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletAssetXmpSearchServletProperties>,

}

impl ComDayCqDamCoreImplServletAssetXmpSearchServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletAssetXmpSearchServletInfo {
        ComDayCqDamCoreImplServletAssetXmpSearchServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletAssetXmpSearchServletProperties {
    #[serde(rename = "cq.dam.batch.indesign.maxassets")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_batch_indesign_maxassets: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamCoreImplServletAssetXmpSearchServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletAssetXmpSearchServletProperties {
        ComDayCqDamCoreImplServletAssetXmpSearchServletProperties {
            cq_dam_batch_indesign_maxassets: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletBatchMetadataServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletBatchMetadataServletProperties>,

}

impl ComDayCqDamCoreImplServletBatchMetadataServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletBatchMetadataServletInfo {
        ComDayCqDamCoreImplServletBatchMetadataServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletBatchMetadataServletProperties {
    #[serde(rename = "cq.dam.batch.metadata.asset.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_batch_metadata_asset_default: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.dam.batch.metadata.collection.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_batch_metadata_collection_default: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.dam.batch.metadata.maxresources")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_batch_metadata_maxresources: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamCoreImplServletBatchMetadataServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletBatchMetadataServletProperties {
        ComDayCqDamCoreImplServletBatchMetadataServletProperties {
            cq_dam_batch_metadata_asset_default: None,
            cq_dam_batch_metadata_collection_default: None,
            cq_dam_batch_metadata_maxresources: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletBinaryProviderServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletBinaryProviderServletProperties>,

}

impl ComDayCqDamCoreImplServletBinaryProviderServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletBinaryProviderServletInfo {
        ComDayCqDamCoreImplServletBinaryProviderServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletBinaryProviderServletProperties {
    #[serde(rename = "sling.servlet.resourceTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_resource_types: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sling.servlet.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_methods: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.dam.drm.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_drm_enable: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplServletBinaryProviderServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletBinaryProviderServletProperties {
        ComDayCqDamCoreImplServletBinaryProviderServletProperties {
            sling_servlet_resource_types: None,
            sling_servlet_methods: None,
            cq_dam_drm_enable: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletCollectionServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletCollectionServletProperties>,

}

impl ComDayCqDamCoreImplServletCollectionServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletCollectionServletInfo {
        ComDayCqDamCoreImplServletCollectionServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletCollectionServletProperties {
    #[serde(rename = "cq.dam.batch.collection.properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_batch_collection_properties: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.dam.batch.collection.maxcollections")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_batch_collection_maxcollections: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamCoreImplServletCollectionServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletCollectionServletProperties {
        ComDayCqDamCoreImplServletCollectionServletProperties {
            cq_dam_batch_collection_properties: None,
            cq_dam_batch_collection_maxcollections: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletCollectionsServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletCollectionsServletProperties>,

}

impl ComDayCqDamCoreImplServletCollectionsServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletCollectionsServletInfo {
        ComDayCqDamCoreImplServletCollectionsServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletCollectionsServletProperties {
    #[serde(rename = "cq.dam.batch.collections.properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_batch_collections_properties: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.dam.batch.collections.limit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_batch_collections_limit: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamCoreImplServletCollectionsServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletCollectionsServletProperties {
        ComDayCqDamCoreImplServletCollectionsServletProperties {
            cq_dam_batch_collections_properties: None,
            cq_dam_batch_collections_limit: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletCompanionServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletCompanionServletProperties>,

}

impl ComDayCqDamCoreImplServletCompanionServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletCompanionServletInfo {
        ComDayCqDamCoreImplServletCompanionServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletCompanionServletProperties {
    #[serde(rename = "More Info")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub more_info: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mntoverlaydamguicontentassetsmoreinfo_htmlpath: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamCoreImplServletCompanionServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletCompanionServletProperties {
        ComDayCqDamCoreImplServletCompanionServletProperties {
            more_info: None,
            mntoverlaydamguicontentassetsmoreinfo_htmlpath: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletCreateAssetServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletCreateAssetServletProperties>,

}

impl ComDayCqDamCoreImplServletCreateAssetServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletCreateAssetServletInfo {
        ComDayCqDamCoreImplServletCreateAssetServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletCreateAssetServletProperties {
    #[serde(rename = "detect_duplicate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub detect_duplicate: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplServletCreateAssetServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletCreateAssetServletProperties {
        ComDayCqDamCoreImplServletCreateAssetServletProperties {
            detect_duplicate: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletDamContentDispositionFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletDamContentDispositionFilterProperties>,

}

impl ComDayCqDamCoreImplServletDamContentDispositionFilterInfo {
    pub fn new() -> ComDayCqDamCoreImplServletDamContentDispositionFilterInfo {
        ComDayCqDamCoreImplServletDamContentDispositionFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletDamContentDispositionFilterProperties {
    #[serde(rename = "cq.mime.type.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_mime_type_blacklist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.dam.empty.mime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_empty_mime: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplServletDamContentDispositionFilterProperties {
    pub fn new() -> ComDayCqDamCoreImplServletDamContentDispositionFilterProperties {
        ComDayCqDamCoreImplServletDamContentDispositionFilterProperties {
            cq_mime_type_blacklist: None,
            cq_dam_empty_mime: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletGuidLookupFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletGuidLookupFilterProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqDamCoreImplServletGuidLookupFilterInfo {
    pub fn new() -> ComDayCqDamCoreImplServletGuidLookupFilterInfo {
        ComDayCqDamCoreImplServletGuidLookupFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletGuidLookupFilterProperties {
    #[serde(rename = "cq.dam.core.guidlookupfilter.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_core_guidlookupfilter_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplServletGuidLookupFilterProperties {
    pub fn new() -> ComDayCqDamCoreImplServletGuidLookupFilterProperties {
        ComDayCqDamCoreImplServletGuidLookupFilterProperties {
            cq_dam_core_guidlookupfilter_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletHealthCheckServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletHealthCheckServletProperties>,

}

impl ComDayCqDamCoreImplServletHealthCheckServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletHealthCheckServletInfo {
        ComDayCqDamCoreImplServletHealthCheckServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletHealthCheckServletProperties {
    #[serde(rename = "cq.dam.sync.workflow.id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_sync_workflow_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.sync.folder.types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_sync_folder_types: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamCoreImplServletHealthCheckServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletHealthCheckServletProperties {
        ComDayCqDamCoreImplServletHealthCheckServletProperties {
            cq_dam_sync_workflow_id: None,
            cq_dam_sync_folder_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletMetadataGetServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletMetadataGetServletProperties>,

}

impl ComDayCqDamCoreImplServletMetadataGetServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletMetadataGetServletInfo {
        ComDayCqDamCoreImplServletMetadataGetServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletMetadataGetServletProperties {
    #[serde(rename = "sling.servlet.resourceTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_resource_types: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_methods: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.extensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_extensions: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.selectors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_selectors: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamCoreImplServletMetadataGetServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletMetadataGetServletProperties {
        ComDayCqDamCoreImplServletMetadataGetServletProperties {
            sling_servlet_resource_types: None,
            sling_servlet_methods: None,
            sling_servlet_extensions: None,
            sling_servlet_selectors: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties>,

}

impl ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo {
        ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties {
    #[serde(rename = "cq.dam.drm.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_drm_enable: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties {
        ComDayCqDamCoreImplServletMultipleLicenseAcceptServletProperties {
            cq_dam_drm_enable: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletResourceCollectionServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplServletResourceCollectionServletProperties>,

}

impl ComDayCqDamCoreImplServletResourceCollectionServletInfo {
    pub fn new() -> ComDayCqDamCoreImplServletResourceCollectionServletInfo {
        ComDayCqDamCoreImplServletResourceCollectionServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplServletResourceCollectionServletProperties {
    #[serde(rename = "sling.servlet.resourceTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_resource_types: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sling.servlet.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_methods: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.selectors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_selectors: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "download.config")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub download_config: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "view.selector")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub view_selector: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "send_email")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub send_email: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreImplServletResourceCollectionServletProperties {
    pub fn new() -> ComDayCqDamCoreImplServletResourceCollectionServletProperties {
        ComDayCqDamCoreImplServletResourceCollectionServletProperties {
            sling_servlet_resource_types: None,
            sling_servlet_methods: None,
            sling_servlet_selectors: None,
            download_config: None,
            view_selector: None,
            send_email: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties>,

}

impl ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo {
    pub fn new() -> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo {
        ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
    #[serde(rename = "createPreviewEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub create_preview_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "updatePreviewEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub update_preview_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "queueSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "folderPreviewRenditionRegex")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub folder_preview_rendition_regex: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
    pub fn new() -> ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
        ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties {
            create_preview_enabled: None,
            update_preview_enabled: None,
            queue_size: None,
            folder_preview_rendition_regex: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplUnzipUnzipConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreImplUnzipUnzipConfigProperties>,

}

impl ComDayCqDamCoreImplUnzipUnzipConfigInfo {
    pub fn new() -> ComDayCqDamCoreImplUnzipUnzipConfigInfo {
        ComDayCqDamCoreImplUnzipUnzipConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplUnzipUnzipConfigProperties {
    #[serde(rename = "cq.dam.config.unzip.maxuncompressedsize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_unzip_maxuncompressedsize: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.config.unzip.encoding")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_config_unzip_encoding: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamCoreImplUnzipUnzipConfigProperties {
    pub fn new() -> ComDayCqDamCoreImplUnzipUnzipConfigProperties {
        ComDayCqDamCoreImplUnzipUnzipConfigProperties {
            cq_dam_config_unzip_maxuncompressedsize: None,
            cq_dam_config_unzip_encoding: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties>,

}

impl ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo {
    pub fn new() -> ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo {
        ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties {
    #[serde(rename = "process.label")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub process_label: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.enable.sha1")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_enable_sha1: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties {
    pub fn new() -> ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties {
        ComDayCqDamCoreProcessExifToolExtractMetadataProcessProperties {
            process_label: None,
            cq_dam_enable_sha1: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreProcessExtractMetadataProcessInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreProcessExtractMetadataProcessProperties>,

}

impl ComDayCqDamCoreProcessExtractMetadataProcessInfo {
    pub fn new() -> ComDayCqDamCoreProcessExtractMetadataProcessInfo {
        ComDayCqDamCoreProcessExtractMetadataProcessInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreProcessExtractMetadataProcessProperties {
    #[serde(rename = "process.label")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub process_label: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.enable.sha1")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_enable_sha1: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamCoreProcessExtractMetadataProcessProperties {
    pub fn new() -> ComDayCqDamCoreProcessExtractMetadataProcessProperties {
        ComDayCqDamCoreProcessExtractMetadataProcessProperties {
            process_label: None,
            cq_dam_enable_sha1: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreProcessMetadataProcessorProcessInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamCoreProcessMetadataProcessorProcessProperties>,

}

impl ComDayCqDamCoreProcessMetadataProcessorProcessInfo {
    pub fn new() -> ComDayCqDamCoreProcessMetadataProcessorProcessInfo {
        ComDayCqDamCoreProcessMetadataProcessorProcessInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamCoreProcessMetadataProcessorProcessProperties {
    #[serde(rename = "process.label")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub process_label: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.enable.sha1")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_enable_sha1: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.dam.metadata.xssprotected.properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_metadata_xssprotected_properties: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamCoreProcessMetadataProcessorProcessProperties {
    pub fn new() -> ComDayCqDamCoreProcessMetadataProcessorProcessProperties {
        ComDayCqDamCoreProcessMetadataProcessorProcessProperties {
            process_label: None,
            cq_dam_enable_sha1: None,
            cq_dam_metadata_xssprotected_properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamHandlerFfmpegLocatorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamHandlerFfmpegLocatorImplProperties>,

}

impl ComDayCqDamHandlerFfmpegLocatorImplInfo {
    pub fn new() -> ComDayCqDamHandlerFfmpegLocatorImplInfo {
        ComDayCqDamHandlerFfmpegLocatorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamHandlerFfmpegLocatorImplProperties {
    #[serde(rename = "executable.searchpath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub executable_searchpath: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamHandlerFfmpegLocatorImplProperties {
    pub fn new() -> ComDayCqDamHandlerFfmpegLocatorImplProperties {
        ComDayCqDamHandlerFfmpegLocatorImplProperties {
            executable_searchpath: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties>,

}

impl ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo {
    pub fn new() -> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo {
        ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "fontmgr.system.font.dir")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fontmgr_system_font_dir: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "fontmgr.adobe.font.dir")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fontmgr_adobe_font_dir: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "fontmgr.customer.font.dir")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fontmgr_customer_font_dir: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
    pub fn new() -> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
        ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
            event_filter: None,
            fontmgr_system_font_dir: None,
            fontmgr_adobe_font_dir: None,
            fontmgr_customer_font_dir: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamHandlerStandardPdfPdfHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamHandlerStandardPdfPdfHandlerProperties>,

}

impl ComDayCqDamHandlerStandardPdfPdfHandlerInfo {
    pub fn new() -> ComDayCqDamHandlerStandardPdfPdfHandlerInfo {
        ComDayCqDamHandlerStandardPdfPdfHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamHandlerStandardPdfPdfHandlerProperties {
    #[serde(rename = "raster.annotation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub raster_annotation: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamHandlerStandardPdfPdfHandlerProperties {
    pub fn new() -> ComDayCqDamHandlerStandardPdfPdfHandlerProperties {
        ComDayCqDamHandlerStandardPdfPdfHandlerProperties {
            raster_annotation: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamHandlerStandardPsPostScriptHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamHandlerStandardPsPostScriptHandlerProperties>,

}

impl ComDayCqDamHandlerStandardPsPostScriptHandlerInfo {
    pub fn new() -> ComDayCqDamHandlerStandardPsPostScriptHandlerInfo {
        ComDayCqDamHandlerStandardPsPostScriptHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamHandlerStandardPsPostScriptHandlerProperties {
    #[serde(rename = "raster.annotation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub raster_annotation: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamHandlerStandardPsPostScriptHandlerProperties {
    pub fn new() -> ComDayCqDamHandlerStandardPsPostScriptHandlerProperties {
        ComDayCqDamHandlerStandardPsPostScriptHandlerProperties {
            raster_annotation: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamHandlerStandardPsdPsdHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamHandlerStandardPsdPsdHandlerProperties>,

}

impl ComDayCqDamHandlerStandardPsdPsdHandlerInfo {
    pub fn new() -> ComDayCqDamHandlerStandardPsdPsdHandlerInfo {
        ComDayCqDamHandlerStandardPsdPsdHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamHandlerStandardPsdPsdHandlerProperties {
    #[serde(rename = "large_file_threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub large_file_threshold: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamHandlerStandardPsdPsdHandlerProperties {
    pub fn new() -> ComDayCqDamHandlerStandardPsdPsdHandlerProperties {
        ComDayCqDamHandlerStandardPsdPsdHandlerProperties {
            large_file_threshold: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamIdsImplIdsJobProcessorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamIdsImplIdsJobProcessorProperties>,

}

impl ComDayCqDamIdsImplIdsJobProcessorInfo {
    pub fn new() -> ComDayCqDamIdsImplIdsJobProcessorInfo {
        ComDayCqDamIdsImplIdsJobProcessorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamIdsImplIdsJobProcessorProperties {
    #[serde(rename = "enable.multisession")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_multisession: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "ids.cc.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ids_cc_enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "enable.retry")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_retry: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "enable.retry.scripterror")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_retry_scripterror: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "externalizer.domain.cqhost")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub externalizer_domain_cqhost: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "externalizer.domain.http")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub externalizer_domain_http: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamIdsImplIdsJobProcessorProperties {
    pub fn new() -> ComDayCqDamIdsImplIdsJobProcessorProperties {
        ComDayCqDamIdsImplIdsJobProcessorProperties {
            enable_multisession: None,
            ids_cc_enable: None,
            enable_retry: None,
            enable_retry_scripterror: None,
            externalizer_domain_cqhost: None,
            externalizer_domain_http: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamIdsImplIdsPoolManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamIdsImplIdsPoolManagerImplProperties>,

}

impl ComDayCqDamIdsImplIdsPoolManagerImplInfo {
    pub fn new() -> ComDayCqDamIdsImplIdsPoolManagerImplInfo {
        ComDayCqDamIdsImplIdsPoolManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamIdsImplIdsPoolManagerImplProperties {
    #[serde(rename = "max.errors.to.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_errors_to_blacklist: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "retry.interval.to.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub retry_interval_to_whitelist: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "connect.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connect_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "socket.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub socket_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "process.label")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub process_label: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "connection.use.max")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connection_use_max: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamIdsImplIdsPoolManagerImplProperties {
    pub fn new() -> ComDayCqDamIdsImplIdsPoolManagerImplProperties {
        ComDayCqDamIdsImplIdsPoolManagerImplProperties {
            max_errors_to_blacklist: None,
            retry_interval_to_whitelist: None,
            connect_timeout: None,
            socket_timeout: None,
            process_label: None,
            connection_use_max: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamInddImplHandlerIndesignXmpHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamInddImplHandlerIndesignXmpHandlerProperties>,

}

impl ComDayCqDamInddImplHandlerIndesignXmpHandlerInfo {
    pub fn new() -> ComDayCqDamInddImplHandlerIndesignXmpHandlerInfo {
        ComDayCqDamInddImplHandlerIndesignXmpHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamInddImplHandlerIndesignXmpHandlerProperties {
    #[serde(rename = "process.label")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub process_label: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "extract.pages")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub extract_pages: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamInddImplHandlerIndesignXmpHandlerProperties {
    pub fn new() -> ComDayCqDamInddImplHandlerIndesignXmpHandlerProperties {
        ComDayCqDamInddImplHandlerIndesignXmpHandlerProperties {
            process_label: None,
            extract_pages: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamInddImplServletSnippetCreationServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamInddImplServletSnippetCreationServletProperties>,

}

impl ComDayCqDamInddImplServletSnippetCreationServletInfo {
    pub fn new() -> ComDayCqDamInddImplServletSnippetCreationServletInfo {
        ComDayCqDamInddImplServletSnippetCreationServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamInddImplServletSnippetCreationServletProperties {
    #[serde(rename = "snippetcreation.maxcollections")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub snippetcreation_maxcollections: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamInddImplServletSnippetCreationServletProperties {
    pub fn new() -> ComDayCqDamInddImplServletSnippetCreationServletProperties {
        ComDayCqDamInddImplServletSnippetCreationServletProperties {
            snippetcreation_maxcollections: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamInddProcessInddMediaExtractProcessInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamInddProcessInddMediaExtractProcessProperties>,

}

impl ComDayCqDamInddProcessInddMediaExtractProcessInfo {
    pub fn new() -> ComDayCqDamInddProcessInddMediaExtractProcessInfo {
        ComDayCqDamInddProcessInddMediaExtractProcessInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamInddProcessInddMediaExtractProcessProperties {
    #[serde(rename = "process.label")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub process_label: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.dam.indd.pages.regex")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_indd_pages_regex: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "ids.job.decoupled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ids_job_decoupled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "ids.job.workflow.model")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ids_job_workflow_model: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamInddProcessInddMediaExtractProcessProperties {
    pub fn new() -> ComDayCqDamInddProcessInddMediaExtractProcessProperties {
        ComDayCqDamInddProcessInddMediaExtractProcessProperties {
            process_label: None,
            cq_dam_indd_pages_regex: None,
            ids_job_decoupled: None,
            ids_job_workflow_model: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties>,

}

impl ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo {
    pub fn new() -> ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo {
        ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties {
    #[serde(rename = "batch.commit.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub batch_commit_size: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties {
    pub fn new() -> ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties {
        ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplProperties {
            batch_commit_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties>,

}

impl ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo {
    pub fn new() -> ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo {
        ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties {
    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties {
    pub fn new() -> ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties {
        ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobProperties {
            scheduler_expression: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties>,

}

impl ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo {
    pub fn new() -> ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo {
        ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties {
    #[serde(rename = "delete.zip.file")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub delete_zip_file: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties {
    pub fn new() -> ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties {
        ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProProperties {
            delete_zip_file: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties>,

}

impl ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo {
    pub fn new() -> ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo {
        ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties {
    #[serde(rename = "cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties {
    pub fn new() -> ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties {
        ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenProperties {
            cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties>,

}

impl ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo {
    pub fn new() -> ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo {
        ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties {
    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "scheduler.concurrent")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_concurrent: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties {
    pub fn new() -> ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties {
        ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerProperties {
            scheduler_expression: None,
            scheduler_concurrent: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties>,

}

impl ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo {
    pub fn new() -> ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo {
        ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties {
    #[serde(rename = "sling.post.operation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_post_operation: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_methods: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties {
    pub fn new() -> ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties {
        ComDayCqDamS7damCommonPostServletsSetCreateHandlerProperties {
            sling_post_operation: None,
            sling_servlet_methods: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties>,

}

impl ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo {
    pub fn new() -> ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo {
        ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties {
    #[serde(rename = "sling.post.operation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_post_operation: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_methods: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties {
    pub fn new() -> ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties {
        ComDayCqDamS7damCommonPostServletsSetModifyHandlerProperties {
            sling_post_operation: None,
            sling_servlet_methods: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties>,

}

impl ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo {
    pub fn new() -> ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo {
        ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties {
    #[serde(rename = "process.label")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub process_label: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties {
    pub fn new() -> ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties {
        ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessProperties {
            process_label: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties>,

}

impl ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo {
    pub fn new() -> ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo {
        ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties {
    #[serde(rename = "cq.dam.s7dam.damchangeeventlistener.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_s7dam_damchangeeventlistener_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties {
    pub fn new() -> ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties {
        ComDayCqDamS7damCommonS7damDamChangeEventListenerProperties {
            cq_dam_s7dam_damchangeeventlistener_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties>,

}

impl ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo {
    pub fn new() -> ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo {
        ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties {
    #[serde(rename = "sling.servlet.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_paths: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_methods: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties {
    pub fn new() -> ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties {
        ComDayCqDamS7damCommonServletsS7damProductInfoServletProperties {
            sling_servlet_paths: None,
            sling_servlet_methods: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties>,

}

impl ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo {
    pub fn new() -> ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo {
        ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties {
    #[serde(rename = "cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties {
    pub fn new() -> ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties {
        ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplProperties {
            cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name: None,
            cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name: None,
            cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name: None,
            cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name: None,
            cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name: None,
            cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name: None,
            cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7ApiClientImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamScene7ImplScene7ApiClientImplProperties>,

}

impl ComDayCqDamScene7ImplScene7ApiClientImplInfo {
    pub fn new() -> ComDayCqDamScene7ImplScene7ApiClientImplInfo {
        ComDayCqDamScene7ImplScene7ApiClientImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7ApiClientImplProperties {
    #[serde(rename = "cq.dam.scene7.apiclient.recordsperpage.nofilter.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_scene7_apiclient_recordsperpage_nofilter_name: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.scene7.apiclient.recordsperpage.withfilter.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_scene7_apiclient_recordsperpage_withfilter_name: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamScene7ImplScene7ApiClientImplProperties {
    pub fn new() -> ComDayCqDamScene7ImplScene7ApiClientImplProperties {
        ComDayCqDamScene7ImplScene7ApiClientImplProperties {
            cq_dam_scene7_apiclient_recordsperpage_nofilter_name: None,
            cq_dam_scene7_apiclient_recordsperpage_withfilter_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties>,

}

impl ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo {
    pub fn new() -> ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo {
        ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties {
    #[serde(rename = "cq.dam.scene7.assetmimetypeservice.mapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_scene7_assetmimetypeservice_mapping: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties {
    pub fn new() -> ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties {
        ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplProperties {
            cq_dam_scene7_assetmimetypeservice_mapping: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo {
    pub fn new() -> ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo {
        ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties {
    #[serde(rename = "cq.dam.scene7.configurationeventlistener.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_scene7_configurationeventlistener_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties {
    pub fn new() -> ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties {
        ComDayCqDamScene7ImplScene7ConfigurationEventListenerProperties {
            cq_dam_scene7_configurationeventlistener_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo {
    pub fn new() -> ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo {
        ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties {
    #[serde(rename = "cq.dam.scene7.damchangeeventlistener.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_scene7_damchangeeventlistener_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.dam.scene7.damchangeeventlistener.observed.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_scene7_damchangeeventlistener_observed_paths: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties {
    pub fn new() -> ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties {
        ComDayCqDamScene7ImplScene7DamChangeEventListenerProperties {
            cq_dam_scene7_damchangeeventlistener_enabled: None,
            cq_dam_scene7_damchangeeventlistener_observed_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties>,

}

impl ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo {
    pub fn new() -> ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo {
        ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties {
    #[serde(rename = "scene7FlashTemplates.rti")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scene7_flash_templates_rti: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "scene7FlashTemplates.rsi")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scene7_flash_templates_rsi: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "scene7FlashTemplates.rb")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scene7_flash_templates_rb: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "scene7FlashTemplates.rurl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scene7_flash_templates_rurl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "scene7FlashTemplate.urlFormatParameter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scene7_flash_template_url_format_parameter: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties {
    pub fn new() -> ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties {
        ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplProperties {
            scene7_flash_templates_rti: None,
            scene7_flash_templates_rsi: None,
            scene7_flash_templates_rb: None,
            scene7_flash_templates_rurl: None,
            scene7_flash_template_url_format_parameter: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7UploadServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamScene7ImplScene7UploadServiceImplProperties>,

}

impl ComDayCqDamScene7ImplScene7UploadServiceImplInfo {
    pub fn new() -> ComDayCqDamScene7ImplScene7UploadServiceImplInfo {
        ComDayCqDamScene7ImplScene7UploadServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamScene7ImplScene7UploadServiceImplProperties {
    #[serde(rename = "cq.dam.scene7.uploadservice.activejobtimeout.label")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_scene7_uploadservice_activejobtimeout_label: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.dam.scene7.uploadservice.connectionmaxperroute.label")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_dam_scene7_uploadservice_connectionmaxperroute_label: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamScene7ImplScene7UploadServiceImplProperties {
    pub fn new() -> ComDayCqDamScene7ImplScene7UploadServiceImplProperties {
        ComDayCqDamScene7ImplScene7UploadServiceImplProperties {
            cq_dam_scene7_uploadservice_activejobtimeout_label: None,
            cq_dam_scene7_uploadservice_connectionmaxperroute_label: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties>,

}

impl ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo {
    pub fn new() -> ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo {
        ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties {
    #[serde(rename = "getCacheExpirationUnit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub get_cache_expiration_unit: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "getCacheExpirationValue")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub get_cache_expiration_value: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties {
    pub fn new() -> ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties {
        ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerProperties {
            get_cache_expiration_unit: None,
            get_cache_expiration_value: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties>,

}

impl ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo {
    pub fn new() -> ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo {
        ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "locale")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub locale: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "imsConfig")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ims_config: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties {
    pub fn new() -> ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties {
        ComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties {
            name: None,
            locale: None,
            ims_config: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamVideoImplServletVideoTestServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqDamVideoImplServletVideoTestServletProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqDamVideoImplServletVideoTestServletInfo {
    pub fn new() -> ComDayCqDamVideoImplServletVideoTestServletInfo {
        ComDayCqDamVideoImplServletVideoTestServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqDamVideoImplServletVideoTestServletProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqDamVideoImplServletVideoTestServletProperties {
    pub fn new() -> ComDayCqDamVideoImplServletVideoTestServletProperties {
        ComDayCqDamVideoImplServletVideoTestServletProperties {
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqExtwidgetServletsImageSpriteServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqExtwidgetServletsImageSpriteServletProperties>,

}

impl ComDayCqExtwidgetServletsImageSpriteServletInfo {
    pub fn new() -> ComDayCqExtwidgetServletsImageSpriteServletInfo {
        ComDayCqExtwidgetServletsImageSpriteServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqExtwidgetServletsImageSpriteServletProperties {
    #[serde(rename = "maxWidth")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_width: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxHeight")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_height: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqExtwidgetServletsImageSpriteServletProperties {
    pub fn new() -> ComDayCqExtwidgetServletsImageSpriteServletProperties {
        ComDayCqExtwidgetServletsImageSpriteServletProperties {
            max_width: None,
            max_height: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqImageInternalFontFontHelperInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqImageInternalFontFontHelperProperties>,

}

impl ComDayCqImageInternalFontFontHelperInfo {
    pub fn new() -> ComDayCqImageInternalFontFontHelperInfo {
        ComDayCqImageInternalFontFontHelperInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqImageInternalFontFontHelperProperties {
    #[serde(rename = "fontpath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fontpath: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "oversamplingFactor")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub oversampling_factor: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqImageInternalFontFontHelperProperties {
    pub fn new() -> ComDayCqImageInternalFontFontHelperProperties {
        ComDayCqImageInternalFontFontHelperProperties {
            fontpath: None,
            oversampling_factor: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqJcrclustersupportClusterStartLevelControllerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqJcrclustersupportClusterStartLevelControllerProperties>,

}

impl ComDayCqJcrclustersupportClusterStartLevelControllerInfo {
    pub fn new() -> ComDayCqJcrclustersupportClusterStartLevelControllerInfo {
        ComDayCqJcrclustersupportClusterStartLevelControllerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqJcrclustersupportClusterStartLevelControllerProperties {
    #[serde(rename = "cluster.level.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_level_enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cluster.master.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_master_level: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cluster.slave.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_slave_level: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqJcrclustersupportClusterStartLevelControllerProperties {
    pub fn new() -> ComDayCqJcrclustersupportClusterStartLevelControllerProperties {
        ComDayCqJcrclustersupportClusterStartLevelControllerProperties {
            cluster_level_enable: None,
            cluster_master_level: None,
            cluster_slave_level: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMailerDefaultMailServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMailerDefaultMailServiceProperties>,

}

impl ComDayCqMailerDefaultMailServiceInfo {
    pub fn new() -> ComDayCqMailerDefaultMailServiceInfo {
        ComDayCqMailerDefaultMailServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMailerDefaultMailServiceProperties {
    #[serde(rename = "smtp.host")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub smtp_host: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "smtp.port")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub smtp_port: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "smtp.user")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub smtp_user: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "smtp.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub smtp_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "from.address")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub from_address: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "smtp.ssl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub smtp_ssl: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "smtp.starttls")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub smtp_starttls: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "debug.email")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub debug_email: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqMailerDefaultMailServiceProperties {
    pub fn new() -> ComDayCqMailerDefaultMailServiceProperties {
        ComDayCqMailerDefaultMailServiceProperties {
            smtp_host: None,
            smtp_port: None,
            smtp_user: None,
            smtp_password: None,
            from_address: None,
            smtp_ssl: None,
            smtp_starttls: None,
            debug_email: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMailerImplCqMailingServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMailerImplCqMailingServiceProperties>,

}

impl ComDayCqMailerImplCqMailingServiceInfo {
    pub fn new() -> ComDayCqMailerImplCqMailingServiceInfo {
        ComDayCqMailerImplCqMailingServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMailerImplCqMailingServiceProperties {
    #[serde(rename = "max.recipient.count")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_recipient_count: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqMailerImplCqMailingServiceProperties {
    pub fn new() -> ComDayCqMailerImplCqMailingServiceProperties {
        ComDayCqMailerImplCqMailingServiceProperties {
            max_recipient_count: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties>,

}

impl ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo {
    pub fn new() -> ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo {
        ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties {
    #[serde(rename = "mailer.email.charset")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mailer_email_charset: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties {
    pub fn new() -> ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties {
        ComDayCqMailerImplEmailCqEmailTemplateFactoryProperties {
            mailer_email_charset: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties>,

}

impl ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo {
    pub fn new() -> ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo {
        ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties {
    #[serde(rename = "mailer.email.embed")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mailer_email_embed: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "mailer.email.charset")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mailer_email_charset: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "mailer.email.retrieverUserID")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mailer_email_retriever_user_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "mailer.email.retrieverUserPWD")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mailer_email_retriever_user_pwd: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties {
    pub fn new() -> ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties {
        ComDayCqMailerImplEmailCqRetrieverTemplateFactoryProperties {
            mailer_email_embed: None,
            mailer_email_charset: None,
            mailer_email_retriever_user_id: None,
            mailer_email_retriever_user_pwd: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmCampaignImplIntegrationConfigImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMcmCampaignImplIntegrationConfigImplProperties>,

}

impl ComDayCqMcmCampaignImplIntegrationConfigImplInfo {
    pub fn new() -> ComDayCqMcmCampaignImplIntegrationConfigImplInfo {
        ComDayCqMcmCampaignImplIntegrationConfigImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmCampaignImplIntegrationConfigImplProperties {
    #[serde(rename = "aem.mcm.campaign.formConstraints")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub aem_mcm_campaign_form_constraints: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "aem.mcm.campaign.publicUrl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub aem_mcm_campaign_public_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "aem.mcm.campaign.relaxedSSL")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub aem_mcm_campaign_relaxed_ssl: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqMcmCampaignImplIntegrationConfigImplProperties {
    pub fn new() -> ComDayCqMcmCampaignImplIntegrationConfigImplProperties {
        ComDayCqMcmCampaignImplIntegrationConfigImplProperties {
            aem_mcm_campaign_form_constraints: None,
            aem_mcm_campaign_public_url: None,
            aem_mcm_campaign_relaxed_ssl: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties>,

}

impl ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo {
    pub fn new() -> ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo {
        ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties {
    pub fn new() -> ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties {
        ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties>,

}

impl ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo {
    pub fn new() -> ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo {
        ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties {
    #[serde(rename = "from.address")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub from_address: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sender.host")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sender_host: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "max.bounce.count")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_bounce_count: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties {
    pub fn new() -> ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties {
        ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplProperties {
            from_address: None,
            sender_host: None,
            max_bounce_count: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmImplMcmConfigurationInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMcmImplMcmConfigurationProperties>,

}

impl ComDayCqMcmImplMcmConfigurationInfo {
    pub fn new() -> ComDayCqMcmImplMcmConfigurationInfo {
        ComDayCqMcmImplMcmConfigurationInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmImplMcmConfigurationProperties {
    #[serde(rename = "experience.indirection")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub experience_indirection: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "touchpoint.indirection")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub touchpoint_indirection: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqMcmImplMcmConfigurationProperties {
    pub fn new() -> ComDayCqMcmImplMcmConfigurationProperties {
        ComDayCqMcmImplMcmConfigurationProperties {
            experience_indirection: None,
            touchpoint_indirection: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties>,

}

impl ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo {
    pub fn new() -> ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo {
        ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "component.resourceType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub component_resource_type: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties {
    pub fn new() -> ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties {
        ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenProperties {
            service_ranking: None,
            tagpattern: None,
            component_resource_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties>,

}

impl ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo {
    pub fn new() -> ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo {
        ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "component.resourceType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub component_resource_type: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties {
    pub fn new() -> ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties {
        ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougProperties {
            service_ranking: None,
            tagpattern: None,
            component_resource_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentProperties>,

}

impl ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentInfo {
    pub fn new() -> ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentInfo {
        ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentProperties {
    pub fn new() -> ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentProperties {
        ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCtaComponentProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties>,

}

impl ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo {
    pub fn new() -> ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo {
        ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties {
    pub fn new() -> ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties {
        ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties>,

}

impl ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo {
    pub fn new() -> ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo {
        ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "component.resourceType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub component_resource_type: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties {
    pub fn new() -> ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties {
        ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHProperties {
            service_ranking: None,
            tagpattern: None,
            component_resource_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqNotificationImplNotificationServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqNotificationImplNotificationServiceImplProperties>,

}

impl ComDayCqNotificationImplNotificationServiceImplInfo {
    pub fn new() -> ComDayCqNotificationImplNotificationServiceImplInfo {
        ComDayCqNotificationImplNotificationServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqNotificationImplNotificationServiceImplProperties {
    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqNotificationImplNotificationServiceImplProperties {
    pub fn new() -> ComDayCqNotificationImplNotificationServiceImplProperties {
        ComDayCqNotificationImplNotificationServiceImplProperties {
            event_filter: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties>,

}

impl ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo {
    pub fn new() -> ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo {
        ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties {
    #[serde(rename = "forcelocation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub forcelocation: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties {
    pub fn new() -> ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties {
        ComDayCqPersonalizationImplServletsTargetingConfigurationServletProperties {
            forcelocation: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqPollingImporterImplManagedPollConfigImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqPollingImporterImplManagedPollConfigImplProperties>,

}

impl ComDayCqPollingImporterImplManagedPollConfigImplInfo {
    pub fn new() -> ComDayCqPollingImporterImplManagedPollConfigImplInfo {
        ComDayCqPollingImporterImplManagedPollConfigImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    #[serde(rename = "id")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "reference")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub reference: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "source")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub source: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "login")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub login: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqPollingImporterImplManagedPollConfigImplProperties {
    pub fn new() -> ComDayCqPollingImporterImplManagedPollConfigImplProperties {
        ComDayCqPollingImporterImplManagedPollConfigImplProperties {
            id: None,
            enabled: None,
            reference: None,
            interval: None,
            expression: None,
            source: None,
            target: None,
            login: None,
            password: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqPollingImporterImplManagedPollingImporterImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqPollingImporterImplManagedPollingImporterImplProperties>,

}

impl ComDayCqPollingImporterImplManagedPollingImporterImplInfo {
    pub fn new() -> ComDayCqPollingImporterImplManagedPollingImporterImplInfo {
        ComDayCqPollingImporterImplManagedPollingImporterImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqPollingImporterImplManagedPollingImporterImplProperties {
    #[serde(rename = "importer.user")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub importer_user: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqPollingImporterImplManagedPollingImporterImplProperties {
    pub fn new() -> ComDayCqPollingImporterImplManagedPollingImporterImplProperties {
        ComDayCqPollingImporterImplManagedPollingImporterImplProperties {
            importer_user: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqPollingImporterImplPollingImporterImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqPollingImporterImplPollingImporterImplProperties>,

}

impl ComDayCqPollingImporterImplPollingImporterImplInfo {
    pub fn new() -> ComDayCqPollingImporterImplPollingImporterImplInfo {
        ComDayCqPollingImporterImplPollingImporterImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqPollingImporterImplPollingImporterImplProperties {
    #[serde(rename = "importer.min.interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub importer_min_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "importer.user")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub importer_user: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "exclude.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub exclude_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "include.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub include_paths: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqPollingImporterImplPollingImporterImplProperties {
    pub fn new() -> ComDayCqPollingImporterImplPollingImporterImplProperties {
        ComDayCqPollingImporterImplPollingImporterImplProperties {
            importer_min_interval: None,
            importer_user: None,
            exclude_paths: None,
            include_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationAuditReplicationEventListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReplicationAuditReplicationEventListenerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqReplicationAuditReplicationEventListenerInfo {
    pub fn new() -> ComDayCqReplicationAuditReplicationEventListenerInfo {
        ComDayCqReplicationAuditReplicationEventListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationAuditReplicationEventListenerProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqReplicationAuditReplicationEventListenerProperties {
    pub fn new() -> ComDayCqReplicationAuditReplicationEventListenerProperties {
        ComDayCqReplicationAuditReplicationEventListenerProperties {
            service_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationContentStaticContentBuilderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReplicationContentStaticContentBuilderProperties>,

}

impl ComDayCqReplicationContentStaticContentBuilderInfo {
    pub fn new() -> ComDayCqReplicationContentStaticContentBuilderInfo {
        ComDayCqReplicationContentStaticContentBuilderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationContentStaticContentBuilderProperties {
    #[serde(rename = "host")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub host: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "port")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub port: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqReplicationContentStaticContentBuilderProperties {
    pub fn new() -> ComDayCqReplicationContentStaticContentBuilderProperties {
        ComDayCqReplicationContentStaticContentBuilderProperties {
            host: None,
            port: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplAgentManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReplicationImplAgentManagerImplProperties>,

}

impl ComDayCqReplicationImplAgentManagerImplInfo {
    pub fn new() -> ComDayCqReplicationImplAgentManagerImplInfo {
        ComDayCqReplicationImplAgentManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplAgentManagerImplProperties {
    #[serde(rename = "job.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_topics: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "serviceUser.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_user_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "agentProvider.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub agent_provider_target: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqReplicationImplAgentManagerImplProperties {
    pub fn new() -> ComDayCqReplicationImplAgentManagerImplProperties {
        ComDayCqReplicationImplAgentManagerImplProperties {
            job_topics: None,
            service_user_target: None,
            agent_provider_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties>,

}

impl ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo {
    pub fn new() -> ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo {
        ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties {
    #[serde(rename = "binary.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub binary_threshold: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties {
    pub fn new() -> ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties {
        ComDayCqReplicationImplContentDurboBinaryLessContentBuilderProperties {
            binary_threshold: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties>,

}

impl ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo {
    pub fn new() -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo {
        ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    #[serde(rename = "preserve.hierarchy.nodes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub preserve_hierarchy_nodes: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "ignore.versioning")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ignore_versioning: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "import.acl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub import_acl: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "save.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub save_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "preserve.user.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub preserve_user_paths: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "preserve.uuid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub preserve_uuid: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "preserve.uuid.nodetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub preserve_uuid_nodetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "preserve.uuid.subtrees")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub preserve_uuid_subtrees: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "auto.commit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auto_commit: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
    pub fn new() -> ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
        ComDayCqReplicationImplContentDurboDurboImportConfigurationProvProperties {
            preserve_hierarchy_nodes: None,
            ignore_versioning: None,
            import_acl: None,
            save_threshold: None,
            preserve_user_paths: None,
            preserve_uuid: None,
            preserve_uuid_nodetypes: None,
            preserve_uuid_subtrees: None,
            auto_commit: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo {
    pub fn new() -> ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo {
        ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties {
    #[serde(rename = "replication.content.useFileStorage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub replication_content_use_file_storage: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "replication.content.maxCommitAttempts")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub replication_content_max_commit_attempts: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties {
    pub fn new() -> ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties {
        ComDayCqReplicationImplReplicationContentFactoryProviderImplProperties {
            replication_content_use_file_storage: None,
            replication_content_max_commit_attempts: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplReplicationReceiverImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReplicationImplReplicationReceiverImplProperties>,

}

impl ComDayCqReplicationImplReplicationReceiverImplInfo {
    pub fn new() -> ComDayCqReplicationImplReplicationReceiverImplInfo {
        ComDayCqReplicationImplReplicationReceiverImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplReplicationReceiverImplProperties {
    #[serde(rename = "receiver.tmpfile.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub receiver_tmpfile_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "receiver.packages.use.install")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub receiver_packages_use_install: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqReplicationImplReplicationReceiverImplProperties {
    pub fn new() -> ComDayCqReplicationImplReplicationReceiverImplProperties {
        ComDayCqReplicationImplReplicationReceiverImplProperties {
            receiver_tmpfile_threshold: None,
            receiver_packages_use_install: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplReplicatorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReplicationImplReplicatorImplProperties>,

}

impl ComDayCqReplicationImplReplicatorImplInfo {
    pub fn new() -> ComDayCqReplicationImplReplicatorImplInfo {
        ComDayCqReplicationImplReplicatorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplReplicatorImplProperties {
    #[serde(rename = "distribute_events")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub distribute_events: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqReplicationImplReplicatorImplProperties {
    pub fn new() -> ComDayCqReplicationImplReplicatorImplProperties {
        ComDayCqReplicationImplReplicatorImplProperties {
            distribute_events: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplReverseReplicatorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReplicationImplReverseReplicatorProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqReplicationImplReverseReplicatorInfo {
    pub fn new() -> ComDayCqReplicationImplReverseReplicatorInfo {
        ComDayCqReplicationImplReverseReplicatorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplReverseReplicatorProperties {
    #[serde(rename = "scheduler.period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_period: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqReplicationImplReverseReplicatorProperties {
    pub fn new() -> ComDayCqReplicationImplReverseReplicatorProperties {
        ComDayCqReplicationImplReverseReplicatorProperties {
            scheduler_period: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties>,

}

impl ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo {
    pub fn new() -> ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo {
        ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties {
    #[serde(rename = "disabled.cipher.suites")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disabled_cipher_suites: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "enabled.cipher.suites")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled_cipher_suites: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties {
    pub fn new() -> ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties {
        ComDayCqReplicationImplTransportBinaryLessTransportHandlerProperties {
            disabled_cipher_suites: None,
            enabled_cipher_suites: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplTransportHttpInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReplicationImplTransportHttpProperties>,

}

impl ComDayCqReplicationImplTransportHttpInfo {
    pub fn new() -> ComDayCqReplicationImplTransportHttpInfo {
        ComDayCqReplicationImplTransportHttpInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplTransportHttpProperties {
    #[serde(rename = "disabled.cipher.suites")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disabled_cipher_suites: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "enabled.cipher.suites")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled_cipher_suites: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqReplicationImplTransportHttpProperties {
    pub fn new() -> ComDayCqReplicationImplTransportHttpProperties {
        ComDayCqReplicationImplTransportHttpProperties {
            disabled_cipher_suites: None,
            enabled_cipher_suites: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReportingImplCacheCacheImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReportingImplCacheCacheImplProperties>,

}

impl ComDayCqReportingImplCacheCacheImplInfo {
    pub fn new() -> ComDayCqReportingImplCacheCacheImplInfo {
        ComDayCqReportingImplCacheCacheImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReportingImplCacheCacheImplProperties {
    #[serde(rename = "repcache.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repcache_enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "repcache.ttl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repcache_ttl: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "repcache.max")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repcache_max: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqReportingImplCacheCacheImplProperties {
    pub fn new() -> ComDayCqReportingImplCacheCacheImplProperties {
        ComDayCqReportingImplCacheCacheImplProperties {
            repcache_enable: None,
            repcache_ttl: None,
            repcache_max: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReportingImplConfigServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReportingImplConfigServiceImplProperties>,

}

impl ComDayCqReportingImplConfigServiceImplInfo {
    pub fn new() -> ComDayCqReportingImplConfigServiceImplInfo {
        ComDayCqReportingImplConfigServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReportingImplConfigServiceImplProperties {
    #[serde(rename = "repconf.timezone")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repconf_timezone: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "repconf.locale")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repconf_locale: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "repconf.snapshots")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repconf_snapshots: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "repconf.repdir")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repconf_repdir: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "repconf.hourofday")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repconf_hourofday: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "repconf.minofhour")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repconf_minofhour: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "repconf.maxrows")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repconf_maxrows: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "repconf.fakedata")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repconf_fakedata: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "repconf.snapshotuser")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repconf_snapshotuser: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "repconf.enforcesnapshotuser")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repconf_enforcesnapshotuser: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqReportingImplConfigServiceImplProperties {
    pub fn new() -> ComDayCqReportingImplConfigServiceImplProperties {
        ComDayCqReportingImplConfigServiceImplProperties {
            repconf_timezone: None,
            repconf_locale: None,
            repconf_snapshots: None,
            repconf_repdir: None,
            repconf_hourofday: None,
            repconf_minofhour: None,
            repconf_maxrows: None,
            repconf_fakedata: None,
            repconf_snapshotuser: None,
            repconf_enforcesnapshotuser: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReportingImplRLogAnalyzerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqReportingImplRLogAnalyzerProperties>,

}

impl ComDayCqReportingImplRLogAnalyzerInfo {
    pub fn new() -> ComDayCqReportingImplRLogAnalyzerInfo {
        ComDayCqReportingImplRLogAnalyzerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqReportingImplRLogAnalyzerProperties {
    #[serde(rename = "request.log.output")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_log_output: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqReportingImplRLogAnalyzerProperties {
    pub fn new() -> ComDayCqReportingImplRLogAnalyzerProperties {
        ComDayCqReportingImplRLogAnalyzerProperties {
            request_log_output: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo {
    pub fn new() -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo {
        ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
    #[serde(rename = "scheduler.period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_period: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "scheduler.concurrent")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_concurrent: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "service.bad_link_tolerance_interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_bad_link_tolerance_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "service.check_override_patterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_check_override_patterns: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "service.cache_broken_internal_links")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_cache_broken_internal_links: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "service.special_link_prefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_special_link_prefix: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "service.special_link_patterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_special_link_patterns: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
    pub fn new() -> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
        ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties {
            scheduler_period: None,
            scheduler_concurrent: None,
            service_bad_link_tolerance_interval: None,
            service_check_override_patterns: None,
            service_cache_broken_internal_links: None,
            service_special_link_prefix: None,
            service_special_link_patterns: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties>,

}

impl ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo {
    pub fn new() -> ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo {
        ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties {
    #[serde(rename = "scheduler.period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_period: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "scheduler.concurrent")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_concurrent: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "good_link_test_interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub good_link_test_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "bad_link_test_interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bad_link_test_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "link_unused_interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub link_unused_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "connection.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connection_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties {
    pub fn new() -> ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties {
        ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties {
            scheduler_period: None,
            scheduler_concurrent: None,
            good_link_test_interval: None,
            bad_link_test_interval: None,
            link_unused_interval: None,
            connection_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties>,

}

impl ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo {
    pub fn new() -> ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo {
        ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties {
    #[serde(rename = "linkcheckertransformer.disableRewriting")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub linkcheckertransformer_disable_rewriting: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "linkcheckertransformer.disableChecking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub linkcheckertransformer_disable_checking: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "linkcheckertransformer.mapCacheSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub linkcheckertransformer_map_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "linkcheckertransformer.strictExtensionCheck")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub linkcheckertransformer_strict_extension_check: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "linkcheckertransformer.stripHtmltExtension")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub linkcheckertransformer_strip_htmlt_extension: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "linkcheckertransformer.rewriteElements")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub linkcheckertransformer_rewrite_elements: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "linkcheckertransformer.stripExtensionPathBlacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub linkcheckertransformer_strip_extension_path_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties {
    pub fn new() -> ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties {
        ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties {
            linkcheckertransformer_disable_rewriting: None,
            linkcheckertransformer_disable_checking: None,
            linkcheckertransformer_map_cache_size: None,
            linkcheckertransformer_strict_extension_check: None,
            linkcheckertransformer_strip_htmlt_extension: None,
            linkcheckertransformer_rewrite_elements: None,
            linkcheckertransformer_strip_extension_path_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo {
    pub fn new() -> ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo {
        ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties {
    #[serde(rename = "service.max_links_per_host")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_max_links_per_host: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "service.save_external_link_references")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_save_external_link_references: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties {
    pub fn new() -> ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties {
        ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplProperties {
            service_max_links_per_host: None,
            service_save_external_link_references: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqRewriterProcessorImplHtmlParserFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqRewriterProcessorImplHtmlParserFactoryProperties>,

}

impl ComDayCqRewriterProcessorImplHtmlParserFactoryInfo {
    pub fn new() -> ComDayCqRewriterProcessorImplHtmlParserFactoryInfo {
        ComDayCqRewriterProcessorImplHtmlParserFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqRewriterProcessorImplHtmlParserFactoryProperties {
    #[serde(rename = "htmlparser.processTags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmlparser_process_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "htmlparser.preserveCamelCase")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmlparser_preserve_camel_case: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqRewriterProcessorImplHtmlParserFactoryProperties {
    pub fn new() -> ComDayCqRewriterProcessorImplHtmlParserFactoryProperties {
        ComDayCqRewriterProcessorImplHtmlParserFactoryProperties {
            htmlparser_process_tags: None,
            htmlparser_preserve_camel_case: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqSearchImplBuilderQueryBuilderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqSearchImplBuilderQueryBuilderImplProperties>,

}

impl ComDayCqSearchImplBuilderQueryBuilderImplInfo {
    pub fn new() -> ComDayCqSearchImplBuilderQueryBuilderImplInfo {
        ComDayCqSearchImplBuilderQueryBuilderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqSearchImplBuilderQueryBuilderImplProperties {
    #[serde(rename = "excerpt.properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub excerpt_properties: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cache.max.entries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_max_entries: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cache.entry.lifetime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_entry_lifetime: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "xpath.union")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub xpath_union: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqSearchImplBuilderQueryBuilderImplProperties {
    pub fn new() -> ComDayCqSearchImplBuilderQueryBuilderImplProperties {
        ComDayCqSearchImplBuilderQueryBuilderImplProperties {
            excerpt_properties: None,
            cache_max_entries: None,
            cache_entry_lifetime: None,
            xpath_union: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties>,

}

impl ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo {
    pub fn new() -> ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo {
        ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties {
    #[serde(rename = "pathBuilder.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path_builder_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "suggest.basepath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub suggest_basepath: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties {
    pub fn new() -> ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties {
        ComDayCqSearchSuggestImplSuggestionIndexManagerImplProperties {
            path_builder_target: None,
            suggest_basepath: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo {
    pub fn new() -> ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo {
        ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties {
    #[serde(rename = "cq.searchpromote.confighandler.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_searchpromote_confighandler_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties {
    pub fn new() -> ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties {
        ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerProperties {
            cq_searchpromote_confighandler_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo {
    pub fn new() -> ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo {
        ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
    #[serde(rename = "cq.searchpromote.configuration.server.uri")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_searchpromote_configuration_server_uri: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.searchpromote.configuration.environment")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_searchpromote_configuration_environment: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "connection.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connection_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "socket.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub socket_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
    pub fn new() -> ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
        ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties {
            cq_searchpromote_configuration_server_uri: None,
            cq_searchpromote_configuration_environment: None,
            connection_timeout: None,
            socket_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqSecurityAclSetupInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqSecurityAclSetupProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqSecurityAclSetupInfo {
    pub fn new() -> ComDayCqSecurityAclSetupInfo {
        ComDayCqSecurityAclSetupInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqSecurityAclSetupProperties {
    #[serde(rename = "cq.aclsetup.rules")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_aclsetup_rules: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqSecurityAclSetupProperties {
    pub fn new() -> ComDayCqSecurityAclSetupProperties {
        ComDayCqSecurityAclSetupProperties {
            cq_aclsetup_rules: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqStatisticsImplStatisticsServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqStatisticsImplStatisticsServiceImplProperties>,

}

impl ComDayCqStatisticsImplStatisticsServiceImplInfo {
    pub fn new() -> ComDayCqStatisticsImplStatisticsServiceImplInfo {
        ComDayCqStatisticsImplStatisticsServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqStatisticsImplStatisticsServiceImplProperties {
    #[serde(rename = "scheduler.period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_period: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "scheduler.concurrent")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_concurrent: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "workspace")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub workspace: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "keywordsPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub keywords_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "asyncEntries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub async_entries: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqStatisticsImplStatisticsServiceImplProperties {
    pub fn new() -> ComDayCqStatisticsImplStatisticsServiceImplProperties {
        ComDayCqStatisticsImplStatisticsServiceImplProperties {
            scheduler_period: None,
            scheduler_concurrent: None,
            path: None,
            workspace: None,
            keywords_path: None,
            async_entries: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqTaggingImplJcrTagManagerFactoryImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqTaggingImplJcrTagManagerFactoryImplProperties>,

}

impl ComDayCqTaggingImplJcrTagManagerFactoryImplInfo {
    pub fn new() -> ComDayCqTaggingImplJcrTagManagerFactoryImplInfo {
        ComDayCqTaggingImplJcrTagManagerFactoryImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqTaggingImplJcrTagManagerFactoryImplProperties {
    #[serde(rename = "validation.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub validation_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqTaggingImplJcrTagManagerFactoryImplProperties {
    pub fn new() -> ComDayCqTaggingImplJcrTagManagerFactoryImplProperties {
        ComDayCqTaggingImplJcrTagManagerFactoryImplProperties {
            validation_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties>,

}

impl ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo {
    pub fn new() -> ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo {
        ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties {
    #[serde(rename = "ignore_path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ignore_path: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties {
    pub fn new() -> ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties {
        ComDayCqTaggingImplSearchTagPredicateEvaluatorProperties {
            ignore_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqTaggingImplTagGarbageCollectorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqTaggingImplTagGarbageCollectorProperties>,

}

impl ComDayCqTaggingImplTagGarbageCollectorInfo {
    pub fn new() -> ComDayCqTaggingImplTagGarbageCollectorInfo {
        ComDayCqTaggingImplTagGarbageCollectorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqTaggingImplTagGarbageCollectorProperties {
    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqTaggingImplTagGarbageCollectorProperties {
    pub fn new() -> ComDayCqTaggingImplTagGarbageCollectorProperties {
        ComDayCqTaggingImplTagGarbageCollectorProperties {
            scheduler_expression: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties>,

}

impl ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo {
    pub fn new() -> ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo {
        ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties {
    #[serde(rename = "cq.pagesupdatehandler.imageresourcetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_pagesupdatehandler_imageresourcetypes: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties {
    pub fn new() -> ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties {
        ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerProperties {
            cq_pagesupdatehandler_imageresourcetypes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties>,

}

impl ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo {
    pub fn new() -> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo {
        ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
    #[serde(rename = "cq.contentsync.pathrewritertransformer.mapping.links")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_contentsync_pathrewritertransformer_mapping_links: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.contentsync.pathrewritertransformer.mapping.clientlibs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_contentsync_pathrewritertransformer_mapping_clientlibs: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.contentsync.pathrewritertransformer.mapping.images")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_contentsync_pathrewritertransformer_mapping_images: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.contentsync.pathrewritertransformer.attribute.pattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_contentsync_pathrewritertransformer_attribute_pattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.contentsync.pathrewritertransformer.clientlibrary.pattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_contentsync_pathrewritertransformer_clientlibrary_pattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.contentsync.pathrewritertransformer.clientlibrary.replace")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_contentsync_pathrewritertransformer_clientlibrary_replace: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
    pub fn new() -> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
        ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties {
            cq_contentsync_pathrewritertransformer_mapping_links: None,
            cq_contentsync_pathrewritertransformer_mapping_clientlibs: None,
            cq_contentsync_pathrewritertransformer_mapping_images: None,
            cq_contentsync_pathrewritertransformer_attribute_pattern: None,
            cq_contentsync_pathrewritertransformer_clientlibrary_pattern: None,
            cq_contentsync_pathrewritertransformer_clientlibrary_replace: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplAuthoringUiModeServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplAuthoringUiModeServiceImplProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmCoreImplAuthoringUiModeServiceImplInfo {
    pub fn new() -> ComDayCqWcmCoreImplAuthoringUiModeServiceImplInfo {
        ComDayCqWcmCoreImplAuthoringUiModeServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplAuthoringUiModeServiceImplProperties {
    #[serde(rename = "authoringUIModeService.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub authoring_ui_mode_service_default: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmCoreImplAuthoringUiModeServiceImplProperties {
    pub fn new() -> ComDayCqWcmCoreImplAuthoringUiModeServiceImplProperties {
        ComDayCqWcmCoreImplAuthoringUiModeServiceImplProperties {
            authoring_ui_mode_service_default: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplCommandsWcmCommandServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplCommandsWcmCommandServletProperties>,

}

impl ComDayCqWcmCoreImplCommandsWcmCommandServletInfo {
    pub fn new() -> ComDayCqWcmCoreImplCommandsWcmCommandServletInfo {
        ComDayCqWcmCoreImplCommandsWcmCommandServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplCommandsWcmCommandServletProperties {
    #[serde(rename = "wcmcommandservlet.delete_whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub wcmcommandservlet_delete_whitelist: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmCoreImplCommandsWcmCommandServletProperties {
    pub fn new() -> ComDayCqWcmCoreImplCommandsWcmCommandServletProperties {
        ComDayCqWcmCoreImplCommandsWcmCommandServletProperties {
            wcmcommandservlet_delete_whitelist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties>,

}

impl ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo {
    pub fn new() -> ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo {
        ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties {
    #[serde(rename = "dim.default.mode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dim_default_mode: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "dim.appcache.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dim_appcache_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties {
    pub fn new() -> ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties {
        ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties {
            dim_default_mode: None,
            dim_appcache_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplEventPageEventAuditListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplEventPageEventAuditListenerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmCoreImplEventPageEventAuditListenerInfo {
    pub fn new() -> ComDayCqWcmCoreImplEventPageEventAuditListenerInfo {
        ComDayCqWcmCoreImplEventPageEventAuditListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplEventPageEventAuditListenerProperties {
    #[serde(rename = "configured")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub configured: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmCoreImplEventPageEventAuditListenerProperties {
    pub fn new() -> ComDayCqWcmCoreImplEventPageEventAuditListenerProperties {
        ComDayCqWcmCoreImplEventPageEventAuditListenerProperties {
            configured: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplEventPagePostProcessorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplEventPagePostProcessorProperties>,

}

impl ComDayCqWcmCoreImplEventPagePostProcessorInfo {
    pub fn new() -> ComDayCqWcmCoreImplEventPagePostProcessorInfo {
        ComDayCqWcmCoreImplEventPagePostProcessorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplEventPagePostProcessorProperties {
    #[serde(rename = "paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub paths: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmCoreImplEventPagePostProcessorProperties {
    pub fn new() -> ComDayCqWcmCoreImplEventPagePostProcessorProperties {
        ComDayCqWcmCoreImplEventPagePostProcessorProperties {
            paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties>,

}

impl ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo {
    pub fn new() -> ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo {
        ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties {
    #[serde(rename = "paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "excludedPaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub excluded_paths: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties {
    pub fn new() -> ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties {
        ComDayCqWcmCoreImplEventRepositoryChangeEventListenerProperties {
            paths: None,
            excluded_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplEventTemplatePostProcessorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplEventTemplatePostProcessorProperties>,

}

impl ComDayCqWcmCoreImplEventTemplatePostProcessorInfo {
    pub fn new() -> ComDayCqWcmCoreImplEventTemplatePostProcessorInfo {
        ComDayCqWcmCoreImplEventTemplatePostProcessorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplEventTemplatePostProcessorProperties {
    #[serde(rename = "paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub paths: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmCoreImplEventTemplatePostProcessorProperties {
    pub fn new() -> ComDayCqWcmCoreImplEventTemplatePostProcessorProperties {
        ComDayCqWcmCoreImplEventTemplatePostProcessorProperties {
            paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplLanguageManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplLanguageManagerImplProperties>,

}

impl ComDayCqWcmCoreImplLanguageManagerImplInfo {
    pub fn new() -> ComDayCqWcmCoreImplLanguageManagerImplInfo {
        ComDayCqWcmCoreImplLanguageManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplLanguageManagerImplProperties {
    #[serde(rename = "langmgr.list.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub langmgr_list_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "langmgr.country.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub langmgr_country_default: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmCoreImplLanguageManagerImplProperties {
    pub fn new() -> ComDayCqWcmCoreImplLanguageManagerImplProperties {
        ComDayCqWcmCoreImplLanguageManagerImplProperties {
            langmgr_list_path: None,
            langmgr_country_default: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties>,

}

impl ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo {
    pub fn new() -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo {
        ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    #[serde(rename = "link.expired.prefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub link_expired_prefix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "link.expired.remove")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub link_expired_remove: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "link.expired.suffix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub link_expired_suffix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "link.invalid.prefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub link_invalid_prefix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "link.invalid.remove")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub link_invalid_remove: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "link.invalid.suffix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub link_invalid_suffix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "link.predated.prefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub link_predated_prefix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "link.predated.remove")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub link_predated_remove: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "link.predated.suffix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub link_predated_suffix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "link.wcmmodes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub link_wcmmodes: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
    pub fn new() -> ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
        ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplProperties {
            link_expired_prefix: None,
            link_expired_remove: None,
            link_expired_suffix: None,
            link_invalid_prefix: None,
            link_invalid_remove: None,
            link_invalid_suffix: None,
            link_predated_prefix: None,
            link_predated_remove: None,
            link_predated_suffix: None,
            link_wcmmodes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties>,

}

impl ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo {
    pub fn new() -> ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo {
        ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties {
    #[serde(rename = "page.info.provider.property.regex.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub page_info_provider_property_regex_default: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "page.info.provider.property.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub page_info_provider_property_name: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties {
    pub fn new() -> ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties {
        ComDayCqWcmCoreImplPagePageInfoAggregatorImplProperties {
            page_info_provider_property_regex_default: None,
            page_info_provider_property_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties>,

}

impl ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo {
    pub fn new() -> ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo {
        ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties {
    #[serde(rename = "illegalCharMapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub illegal_char_mapping: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pageSubTreeActivationCheck")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub page_sub_tree_activation_check: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties {
    pub fn new() -> ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties {
        ComDayCqWcmCoreImplPagePageManagerFactoryImplProperties {
            illegal_char_mapping: None,
            page_sub_tree_activation_check: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties>,

}

impl ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo {
    pub fn new() -> ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo {
        ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties {
    #[serde(rename = "contentReferenceConfig.resourceTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub content_reference_config_resource_types: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties {
    pub fn new() -> ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties {
        ComDayCqWcmCoreImplReferencesContentContentReferenceConfigProperties {
            content_reference_config_resource_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties>,

}

impl ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo {
    pub fn new() -> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo {
        ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
    #[serde(rename = "dam.showexpired")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dam_showexpired: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "dam.showhidden")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dam_showhidden: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "tagTitleSearch")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tag_title_search: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "guessTotal")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub guess_total: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "dam.expiryProperty")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dam_expiry_property: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
    pub fn new() -> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
        ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
            dam_showexpired: None,
            dam_showhidden: None,
            tag_title_search: None,
            guess_total: None,
            dam_expiry_property: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties>,

}

impl ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo {
    pub fn new() -> ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo {
        ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties {
    #[serde(rename = "item.resource.types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub item_resource_types: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties {
    pub fn new() -> ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties {
        ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieProperties {
            item_resource_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties>,

}

impl ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo {
    pub fn new() -> ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo {
        ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties {
    #[serde(rename = "guessTotal")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub guess_total: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "tagTitleSearch")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tag_title_search: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties {
    pub fn new() -> ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties {
        ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerProperties {
            guess_total: None,
            tag_title_search: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsFindReplaceServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplServletsFindReplaceServletProperties>,

}

impl ComDayCqWcmCoreImplServletsFindReplaceServletInfo {
    pub fn new() -> ComDayCqWcmCoreImplServletsFindReplaceServletInfo {
        ComDayCqWcmCoreImplServletsFindReplaceServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsFindReplaceServletProperties {
    #[serde(rename = "scope")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scope: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmCoreImplServletsFindReplaceServletProperties {
    pub fn new() -> ComDayCqWcmCoreImplServletsFindReplaceServletProperties {
        ComDayCqWcmCoreImplServletsFindReplaceServletProperties {
            scope: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsReferenceSearchServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplServletsReferenceSearchServletProperties>,

}

impl ComDayCqWcmCoreImplServletsReferenceSearchServletInfo {
    pub fn new() -> ComDayCqWcmCoreImplServletsReferenceSearchServletInfo {
        ComDayCqWcmCoreImplServletsReferenceSearchServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsReferenceSearchServletProperties {
    #[serde(rename = "referencesearchservlet.maxReferencesPerPage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub referencesearchservlet_max_references_per_page: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "referencesearchservlet.maxPages")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub referencesearchservlet_max_pages: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqWcmCoreImplServletsReferenceSearchServletProperties {
    pub fn new() -> ComDayCqWcmCoreImplServletsReferenceSearchServletProperties {
        ComDayCqWcmCoreImplServletsReferenceSearchServletProperties {
            referencesearchservlet_max_references_per_page: None,
            referencesearchservlet_max_pages: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsThumbnailServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplServletsThumbnailServletProperties>,

}

impl ComDayCqWcmCoreImplServletsThumbnailServletInfo {
    pub fn new() -> ComDayCqWcmCoreImplServletsThumbnailServletInfo {
        ComDayCqWcmCoreImplServletsThumbnailServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsThumbnailServletProperties {
    #[serde(rename = "workspace")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub workspace: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "dimensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dimensions: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmCoreImplServletsThumbnailServletProperties {
    pub fn new() -> ComDayCqWcmCoreImplServletsThumbnailServletProperties {
        ComDayCqWcmCoreImplServletsThumbnailServletProperties {
            workspace: None,
            dimensions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties>,

}

impl ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo {
    pub fn new() -> ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo {
        ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties {
    #[serde(rename = "nonValidChars")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub non_valid_chars: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties {
    pub fn new() -> ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties {
        ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorProperties {
            non_valid_chars: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo {
    pub fn new() -> ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo {
        ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties {
    #[serde(rename = "default.externalizer.domain")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_externalizer_domain: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties {
    pub fn new() -> ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties {
        ComDayCqWcmCoreImplVariantsPageVariantsProviderImplProperties {
            default_externalizer_domain: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplVersionManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplVersionManagerImplProperties>,

}

impl ComDayCqWcmCoreImplVersionManagerImplInfo {
    pub fn new() -> ComDayCqWcmCoreImplVersionManagerImplInfo {
        ComDayCqWcmCoreImplVersionManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplVersionManagerImplProperties {
    #[serde(rename = "versionmanager.createVersionOnActivation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionmanager_create_version_on_activation: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "versionmanager.purgingEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionmanager_purging_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "versionmanager.purgePaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionmanager_purge_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "versionmanager.ivPaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionmanager_iv_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "versionmanager.maxAgeDays")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionmanager_max_age_days: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "versionmanager.maxNumberVersions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionmanager_max_number_versions: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "versionmanager.minNumberVersions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionmanager_min_number_versions: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqWcmCoreImplVersionManagerImplProperties {
    pub fn new() -> ComDayCqWcmCoreImplVersionManagerImplProperties {
        ComDayCqWcmCoreImplVersionManagerImplProperties {
            versionmanager_create_version_on_activation: None,
            versionmanager_purging_enabled: None,
            versionmanager_purge_paths: None,
            versionmanager_iv_paths: None,
            versionmanager_max_age_days: None,
            versionmanager_max_number_versions: None,
            versionmanager_min_number_versions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplVersionPurgeTaskInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplVersionPurgeTaskProperties>,

}

impl ComDayCqWcmCoreImplVersionPurgeTaskInfo {
    pub fn new() -> ComDayCqWcmCoreImplVersionPurgeTaskInfo {
        ComDayCqWcmCoreImplVersionPurgeTaskInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplVersionPurgeTaskProperties {
    #[serde(rename = "versionpurge.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionpurge_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "versionpurge.recursive")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionpurge_recursive: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "versionpurge.maxVersions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionpurge_max_versions: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "versionpurge.minVersions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionpurge_min_versions: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "versionpurge.maxAgeDays")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub versionpurge_max_age_days: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqWcmCoreImplVersionPurgeTaskProperties {
    pub fn new() -> ComDayCqWcmCoreImplVersionPurgeTaskProperties {
        ComDayCqWcmCoreImplVersionPurgeTaskProperties {
            versionpurge_paths: None,
            versionpurge_recursive: None,
            versionpurge_max_versions: None,
            versionpurge_min_versions: None,
            versionpurge_max_age_days: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplWarpTimeWarpFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplWarpTimeWarpFilterProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmCoreImplWarpTimeWarpFilterInfo {
    pub fn new() -> ComDayCqWcmCoreImplWarpTimeWarpFilterInfo {
        ComDayCqWcmCoreImplWarpTimeWarpFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplWarpTimeWarpFilterProperties {
    #[serde(rename = "filter.order")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_order: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "filter.scope")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_scope: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmCoreImplWarpTimeWarpFilterProperties {
    pub fn new() -> ComDayCqWcmCoreImplWarpTimeWarpFilterProperties {
        ComDayCqWcmCoreImplWarpTimeWarpFilterProperties {
            filter_order: None,
            filter_scope: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplWcmDebugFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplWcmDebugFilterProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmCoreImplWcmDebugFilterInfo {
    pub fn new() -> ComDayCqWcmCoreImplWcmDebugFilterInfo {
        ComDayCqWcmCoreImplWcmDebugFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplWcmDebugFilterProperties {
    #[serde(rename = "wcmdbgfilter.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub wcmdbgfilter_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "wcmdbgfilter.jspDebug")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub wcmdbgfilter_jsp_debug: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmCoreImplWcmDebugFilterProperties {
    pub fn new() -> ComDayCqWcmCoreImplWcmDebugFilterProperties {
        ComDayCqWcmCoreImplWcmDebugFilterProperties {
            wcmdbgfilter_enabled: None,
            wcmdbgfilter_jsp_debug: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplWcmDeveloperModeFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreImplWcmDeveloperModeFilterProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmCoreImplWcmDeveloperModeFilterInfo {
    pub fn new() -> ComDayCqWcmCoreImplWcmDeveloperModeFilterInfo {
        ComDayCqWcmCoreImplWcmDeveloperModeFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplWcmDeveloperModeFilterProperties {
    #[serde(rename = "wcmdevmodefilter.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub wcmdevmodefilter_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmCoreImplWcmDeveloperModeFilterProperties {
    pub fn new() -> ComDayCqWcmCoreImplWcmDeveloperModeFilterProperties {
        ComDayCqWcmCoreImplWcmDeveloperModeFilterProperties {
            wcmdevmodefilter_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreMvtMvtStatisticsImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreMvtMvtStatisticsImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmCoreMvtMvtStatisticsImplInfo {
    pub fn new() -> ComDayCqWcmCoreMvtMvtStatisticsImplInfo {
        ComDayCqWcmCoreMvtMvtStatisticsImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreMvtMvtStatisticsImplProperties {
    #[serde(rename = "mvtstatistics.trackingurl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mvtstatistics_trackingurl: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmCoreMvtMvtStatisticsImplProperties {
    pub fn new() -> ComDayCqWcmCoreMvtMvtStatisticsImplProperties {
        ComDayCqWcmCoreMvtMvtStatisticsImplProperties {
            mvtstatistics_trackingurl: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreStatsPageViewStatisticsImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreStatsPageViewStatisticsImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmCoreStatsPageViewStatisticsImplInfo {
    pub fn new() -> ComDayCqWcmCoreStatsPageViewStatisticsImplInfo {
        ComDayCqWcmCoreStatsPageViewStatisticsImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreStatsPageViewStatisticsImplProperties {
    #[serde(rename = "pageviewstatistics.trackingurl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pageviewstatistics_trackingurl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pageviewstatistics.trackingscript.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pageviewstatistics_trackingscript_enabled: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmCoreStatsPageViewStatisticsImplProperties {
    pub fn new() -> ComDayCqWcmCoreStatsPageViewStatisticsImplProperties {
        ComDayCqWcmCoreStatsPageViewStatisticsImplProperties {
            pageviewstatistics_trackingurl: None,
            pageviewstatistics_trackingscript_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreWcmRequestFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmCoreWcmRequestFilterProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmCoreWcmRequestFilterInfo {
    pub fn new() -> ComDayCqWcmCoreWcmRequestFilterInfo {
        ComDayCqWcmCoreWcmRequestFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreWcmRequestFilterProperties {
    #[serde(rename = "wcmfilter.mode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub wcmfilter_mode: Option<models::ConfigNodePropertyDropDown>,

}

impl ComDayCqWcmCoreWcmRequestFilterProperties {
    pub fn new() -> ComDayCqWcmCoreWcmRequestFilterProperties {
        ComDayCqWcmCoreWcmRequestFilterProperties {
            wcmfilter_mode: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterDesignPackageImporterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterDesignPackageImporterProperties>,

}

impl ComDayCqWcmDesignimporterDesignPackageImporterInfo {
    pub fn new() -> ComDayCqWcmDesignimporterDesignPackageImporterInfo {
        ComDayCqWcmDesignimporterDesignPackageImporterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterDesignPackageImporterProperties {
    #[serde(rename = "extract.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub extract_filter: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmDesignimporterDesignPackageImporterProperties {
    pub fn new() -> ComDayCqWcmDesignimporterDesignPackageImporterProperties {
        ComDayCqWcmDesignimporterDesignPackageImporterProperties {
            extract_filter: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties>,

}

impl ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo {
    pub fn new() -> ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo {
        ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
    #[serde(rename = "filepattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filepattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "build.page.nodes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub build_page_nodes: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "build.client.libs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub build_client_libs: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "build.canvas.component")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub build_canvas_component: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
    pub fn new() -> ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
        ComDayCqWcmDesignimporterImplCanvasBuilderImplProperties {
            filepattern: None,
            build_page_nodes: None,
            build_client_libs: None,
            build_canvas_component: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties>,

}

impl ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo {
    pub fn new() -> ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo {
        ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties {
    #[serde(rename = "minThreadPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub min_thread_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxThreadPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_thread_pool_size: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties {
    pub fn new() -> ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties {
        ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties {
            min_thread_pool_size: None,
            max_thread_pool_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties>,

}

impl ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo {
    pub fn new() -> ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo {
        ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties {
    #[serde(rename = "search.pattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub search_pattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "replace.pattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub replace_pattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties {
    pub fn new() -> ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties {
        ComDayCqWcmDesignimporterImplEntryPreprocessorImplProperties {
            search_pattern: None,
            replace_pattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties>,

}

impl ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo {
    pub fn new() -> ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo {
        ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties {
    #[serde(rename = "filepattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filepattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "device.groups")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub device_groups: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "build.page.nodes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub build_page_nodes: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "build.client.libs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub build_client_libs: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "build.canvas.component")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub build_canvas_component: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties {
    pub fn new() -> ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties {
        ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplProperties {
            filepattern: None,
            device_groups: None,
            build_page_nodes: None,
            build_client_libs: None,
            build_canvas_component: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "component.resourceType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub component_resource_type: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenProperties {
            service_ranking: None,
            tagpattern: None,
            component_resource_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "component.resourceType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub component_resource_type: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeProperties {
            service_ranking: None,
            tagpattern: None,
            component_resource_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "component.resourceType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub component_resource_type: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentProperties {
            service_ranking: None,
            tagpattern: None,
            component_resource_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "component.resourceType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub component_resource_type: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenProperties {
            service_ranking: None,
            tagpattern: None,
            component_resource_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "tagpattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tagpattern: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties {
    pub fn new() -> ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties {
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlProperties {
            service_ranking: None,
            tagpattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationFormsImplFormChooserServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmFoundationFormsImplFormChooserServletProperties>,

}

impl ComDayCqWcmFoundationFormsImplFormChooserServletInfo {
    pub fn new() -> ComDayCqWcmFoundationFormsImplFormChooserServletInfo {
        ComDayCqWcmFoundationFormsImplFormChooserServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationFormsImplFormChooserServletProperties {
    #[serde(rename = "service.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.resourceTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_resource_types: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.selectors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_selectors: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_methods: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "forms.formchooserservlet.advansesearch.require")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub forms_formchooserservlet_advansesearch_require: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmFoundationFormsImplFormChooserServletProperties {
    pub fn new() -> ComDayCqWcmFoundationFormsImplFormChooserServletProperties {
        ComDayCqWcmFoundationFormsImplFormChooserServletProperties {
            service_name: None,
            sling_servlet_resource_types: None,
            sling_servlet_selectors: None,
            sling_servlet_methods: None,
            forms_formchooserservlet_advansesearch_require: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties>,

}

impl ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo {
    pub fn new() -> ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo {
        ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties {
    #[serde(rename = "forms.formparagraphpostprocessor.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub forms_formparagraphpostprocessor_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "forms.formparagraphpostprocessor.formresourcetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub forms_formparagraphpostprocessor_formresourcetypes: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties {
    pub fn new() -> ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties {
        ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorProperties {
            forms_formparagraphpostprocessor_enabled: None,
            forms_formparagraphpostprocessor_formresourcetypes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties>,

}

impl ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo {
    pub fn new() -> ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo {
        ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties {
    #[serde(rename = "name.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name_whitelist: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "allow.expressions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allow_expressions: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties {
    pub fn new() -> ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties {
        ComDayCqWcmFoundationFormsImplFormsHandlingServletProperties {
            name_whitelist: None,
            allow_expressions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationFormsImplMailServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmFoundationFormsImplMailServletProperties>,

}

impl ComDayCqWcmFoundationFormsImplMailServletInfo {
    pub fn new() -> ComDayCqWcmFoundationFormsImplMailServletInfo {
        ComDayCqWcmFoundationFormsImplMailServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationFormsImplMailServletProperties {
    #[serde(rename = "sling.servlet.resourceTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_resource_types: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.servlet.selectors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_selectors: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "resource.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "resource.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_blacklist: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmFoundationFormsImplMailServletProperties {
    pub fn new() -> ComDayCqWcmFoundationFormsImplMailServletProperties {
        ComDayCqWcmFoundationFormsImplMailServletProperties {
            sling_servlet_resource_types: None,
            sling_servlet_selectors: None,
            resource_whitelist: None,
            resource_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties>,

}

impl ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo {
    pub fn new() -> ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo {
        ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties {
    #[serde(rename = "adapt.supported.widths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub adapt_supported_widths: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties {
    pub fn new() -> ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties {
        ComDayCqWcmFoundationImplAdaptiveImageComponentServletProperties {
            adapt_supported_widths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationImplHttpAuthHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmFoundationImplHttpAuthHandlerProperties>,

}

impl ComDayCqWcmFoundationImplHttpAuthHandlerInfo {
    pub fn new() -> ComDayCqWcmFoundationImplHttpAuthHandlerInfo {
        ComDayCqWcmFoundationImplHttpAuthHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationImplHttpAuthHandlerProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.http.nologin")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_http_nologin: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "auth.http.realm")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_http_realm: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.default.loginpage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_default_loginpage: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.cred.form")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_cred_form: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "auth.cred.utf8")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_cred_utf8: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmFoundationImplHttpAuthHandlerProperties {
    pub fn new() -> ComDayCqWcmFoundationImplHttpAuthHandlerProperties {
        ComDayCqWcmFoundationImplHttpAuthHandlerProperties {
            path: None,
            auth_http_nologin: None,
            auth_http_realm: None,
            auth_default_loginpage: None,
            auth_cred_form: None,
            auth_cred_utf8: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationImplPageImpressionsTrackerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmFoundationImplPageImpressionsTrackerProperties>,

}

impl ComDayCqWcmFoundationImplPageImpressionsTrackerInfo {
    pub fn new() -> ComDayCqWcmFoundationImplPageImpressionsTrackerInfo {
        ComDayCqWcmFoundationImplPageImpressionsTrackerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationImplPageImpressionsTrackerProperties {
    #[serde(rename = "sling.auth.requirements")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_auth_requirements: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmFoundationImplPageImpressionsTrackerProperties {
    pub fn new() -> ComDayCqWcmFoundationImplPageImpressionsTrackerProperties {
        ComDayCqWcmFoundationImplPageImpressionsTrackerProperties {
            sling_auth_requirements: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationImplPageRedirectServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmFoundationImplPageRedirectServletProperties>,

}

impl ComDayCqWcmFoundationImplPageRedirectServletInfo {
    pub fn new() -> ComDayCqWcmFoundationImplPageRedirectServletInfo {
        ComDayCqWcmFoundationImplPageRedirectServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationImplPageRedirectServletProperties {
    #[serde(rename = "excluded.resource.types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub excluded_resource_types: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmFoundationImplPageRedirectServletProperties {
    pub fn new() -> ComDayCqWcmFoundationImplPageRedirectServletProperties {
        ComDayCqWcmFoundationImplPageRedirectServletProperties {
            excluded_resource_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties>,

}

impl ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo {
    pub fn new() -> ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo {
        ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties {
    #[serde(rename = "default.attachment.type.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "baseline.attachment.type.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub baseline_attachment_type_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties {
    pub fn new() -> ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties {
        ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistProperties {
            default_attachment_type_blacklist: None,
            baseline_attachment_type_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo {
    pub fn new() -> ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo {
        ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties {
    #[serde(rename = "parameter.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub parameter_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "parameter.whitelist.prefixes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub parameter_whitelist_prefixes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "binary.parameter.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub binary_parameter_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "modifier.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub modifier_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "operation.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub operation_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "operation.whitelist.prefixes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub operation_whitelist_prefixes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "typehint.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub typehint_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "resourcetype.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resourcetype_whitelist: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties {
    pub fn new() -> ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties {
        ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplProperties {
            parameter_whitelist: None,
            parameter_whitelist_prefixes: None,
            binary_parameter_whitelist: None,
            modifier_whitelist: None,
            operation_whitelist: None,
            operation_whitelist_prefixes: None,
            typehint_whitelist: None,
            resourcetype_whitelist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo {
    pub fn new() -> ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo {
        ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties {
    #[serde(rename = "device.info.transformer.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub device_info_transformer_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "device.info.transformer.css.style")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub device_info_transformer_css_style: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties {
    pub fn new() -> ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties {
        ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryProperties {
            device_info_transformer_enabled: None,
            device_info_transformer_css_style: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo {
    pub fn new() -> ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo {
        ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties {
    #[serde(rename = "redirect.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub redirect_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "redirect.stats.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub redirect_stats_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "redirect.extensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub redirect_extensions: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "redirect.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub redirect_paths: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties {
    pub fn new() -> ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties {
        ComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties {
            redirect_enabled: None,
            redirect_stats_enabled: None,
            redirect_extensions: None,
            redirect_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo {
    pub fn new() -> ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo {
        ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties {
    #[serde(rename = "cq.wcm.msm.action.excludednodetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludednodetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedparagraphitems")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedparagraphitems: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedprops")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedprops: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "contentcopyaction.order.style")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub contentcopyaction_order_style: Option<models::ConfigNodePropertyDropDown>,

}

impl ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties {
    pub fn new() -> ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties {
        ComDayCqWcmMsmImplActionsContentCopyActionFactoryProperties {
            cq_wcm_msm_action_excludednodetypes: None,
            cq_wcm_msm_action_excludedparagraphitems: None,
            cq_wcm_msm_action_excludedprops: None,
            contentcopyaction_order_style: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo {
    pub fn new() -> ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo {
        ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties {
    #[serde(rename = "cq.wcm.msm.action.excludednodetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludednodetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedparagraphitems")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedparagraphitems: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedprops")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedprops: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties {
    pub fn new() -> ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties {
        ComDayCqWcmMsmImplActionsContentDeleteActionFactoryProperties {
            cq_wcm_msm_action_excludednodetypes: None,
            cq_wcm_msm_action_excludedparagraphitems: None,
            cq_wcm_msm_action_excludedprops: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo {
    pub fn new() -> ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo {
        ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties {
    #[serde(rename = "cq.wcm.msm.action.excludednodetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludednodetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedparagraphitems")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedparagraphitems: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedprops")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedprops: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.ignoredMixin")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_ignored_mixin: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties {
    pub fn new() -> ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties {
        ComDayCqWcmMsmImplActionsContentUpdateActionFactoryProperties {
            cq_wcm_msm_action_excludednodetypes: None,
            cq_wcm_msm_action_excludedparagraphitems: None,
            cq_wcm_msm_action_excludedprops: None,
            cq_wcm_msm_action_ignored_mixin: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo {
    pub fn new() -> ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo {
        ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties {
    #[serde(rename = "cq.wcm.msm.action.excludednodetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludednodetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedparagraphitems")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedparagraphitems: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedprops")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedprops: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties {
    pub fn new() -> ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties {
        ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryProperties {
            cq_wcm_msm_action_excludednodetypes: None,
            cq_wcm_msm_action_excludedparagraphitems: None,
            cq_wcm_msm_action_excludedprops: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties>,

}

impl ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo {
    pub fn new() -> ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo {
        ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties {
    #[serde(rename = "cq.wcm.msm.action.excludednodetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludednodetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedparagraphitems")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedparagraphitems: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedprops")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedprops: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_impl_actions_pagemove_prop_reference_update: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties {
    pub fn new() -> ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties {
        ComDayCqWcmMsmImplActionsPageMoveActionFactoryProperties {
            cq_wcm_msm_action_excludednodetypes: None,
            cq_wcm_msm_action_excludedparagraphitems: None,
            cq_wcm_msm_action_excludedprops: None,
            cq_wcm_msm_impl_actions_pagemove_prop_reference_update: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo {
    pub fn new() -> ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo {
        ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties {
    #[serde(rename = "cq.wcm.msm.action.excludednodetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludednodetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedparagraphitems")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedparagraphitems: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedprops")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedprops: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.impl.action.referencesupdate.prop_updateNested")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_impl_action_referencesupdate_prop_update_nested: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties {
    pub fn new() -> ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties {
        ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryProperties {
            cq_wcm_msm_action_excludednodetypes: None,
            cq_wcm_msm_action_excludedparagraphitems: None,
            cq_wcm_msm_action_excludedprops: None,
            cq_wcm_msm_impl_action_referencesupdate_prop_update_nested: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo {
    pub fn new() -> ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo {
        ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties {
    #[serde(rename = "cq.wcm.msm.action.excludednodetypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludednodetypes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedparagraphitems")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedparagraphitems: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.msm.action.excludedprops")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_msm_action_excludedprops: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties {
    pub fn new() -> ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties {
        ComDayCqWcmMsmImplActionsVersionCopyActionFactoryProperties {
            cq_wcm_msm_action_excludednodetypes: None,
            cq_wcm_msm_action_excludedparagraphitems: None,
            cq_wcm_msm_action_excludedprops: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties>,

}

impl ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo {
    pub fn new() -> ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo {
        ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties {
    #[serde(rename = "liverelationshipmgr.relationsconfig.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub liverelationshipmgr_relationsconfig_default: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties {
    pub fn new() -> ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties {
        ComDayCqWcmMsmImplLiveRelationshipManagerImplProperties {
            liverelationshipmgr_relationsconfig_default: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplRolloutManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMsmImplRolloutManagerImplProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmMsmImplRolloutManagerImplInfo {
    pub fn new() -> ComDayCqWcmMsmImplRolloutManagerImplInfo {
        ComDayCqWcmMsmImplRolloutManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplRolloutManagerImplProperties {
    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "rolloutmgr.excludedprops.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub rolloutmgr_excludedprops_default: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "rolloutmgr.excludedparagraphprops.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub rolloutmgr_excludedparagraphprops_default: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "rolloutmgr.excludednodetypes.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub rolloutmgr_excludednodetypes_default: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "rolloutmgr.threadpool.maxsize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub rolloutmgr_threadpool_maxsize: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "rolloutmgr.threadpool.maxshutdowntime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub rolloutmgr_threadpool_maxshutdowntime: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "rolloutmgr.threadpool.priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub rolloutmgr_threadpool_priority: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "rolloutmgr.commit.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub rolloutmgr_commit_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "rolloutmgr.conflicthandling.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub rolloutmgr_conflicthandling_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWcmMsmImplRolloutManagerImplProperties {
    pub fn new() -> ComDayCqWcmMsmImplRolloutManagerImplProperties {
        ComDayCqWcmMsmImplRolloutManagerImplProperties {
            event_filter: None,
            rolloutmgr_excludedprops_default: None,
            rolloutmgr_excludedparagraphprops_default: None,
            rolloutmgr_excludednodetypes_default: None,
            rolloutmgr_threadpool_maxsize: None,
            rolloutmgr_threadpool_maxshutdowntime: None,
            rolloutmgr_threadpool_priority: None,
            rolloutmgr_commit_size: None,
            rolloutmgr_conflicthandling_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplServletsAuditLogServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmMsmImplServletsAuditLogServletProperties>,

}

impl ComDayCqWcmMsmImplServletsAuditLogServletInfo {
    pub fn new() -> ComDayCqWcmMsmImplServletsAuditLogServletInfo {
        ComDayCqWcmMsmImplServletsAuditLogServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmMsmImplServletsAuditLogServletProperties {
    #[serde(rename = "auditlogservlet.default.events.count")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlogservlet_default_events_count: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "auditlogservlet.default.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auditlogservlet_default_path: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmMsmImplServletsAuditLogServletProperties {
    pub fn new() -> ComDayCqWcmMsmImplServletsAuditLogServletProperties {
        ComDayCqWcmMsmImplServletsAuditLogServletProperties {
            auditlogservlet_default_events_count: None,
            auditlogservlet_default_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmNotificationEmailImplEmailChannelInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmNotificationEmailImplEmailChannelProperties>,

}

impl ComDayCqWcmNotificationEmailImplEmailChannelInfo {
    pub fn new() -> ComDayCqWcmNotificationEmailImplEmailChannelInfo {
        ComDayCqWcmNotificationEmailImplEmailChannelInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmNotificationEmailImplEmailChannelProperties {
    #[serde(rename = "email.from")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub email_from: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmNotificationEmailImplEmailChannelProperties {
    pub fn new() -> ComDayCqWcmNotificationEmailImplEmailChannelProperties {
        ComDayCqWcmNotificationEmailImplEmailChannelProperties {
            email_from: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmNotificationImplNotificationManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmNotificationImplNotificationManagerImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmNotificationImplNotificationManagerImplInfo {
    pub fn new() -> ComDayCqWcmNotificationImplNotificationManagerImplInfo {
        ComDayCqWcmNotificationImplNotificationManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmNotificationImplNotificationManagerImplProperties {
    #[serde(rename = "event.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_topics: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmNotificationImplNotificationManagerImplProperties {
    pub fn new() -> ComDayCqWcmNotificationImplNotificationManagerImplProperties {
        ComDayCqWcmNotificationImplNotificationManagerImplProperties {
            event_topics: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmScriptingImplBvpManagerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmScriptingImplBvpManagerProperties>,

}

impl ComDayCqWcmScriptingImplBvpManagerInfo {
    pub fn new() -> ComDayCqWcmScriptingImplBvpManagerInfo {
        ComDayCqWcmScriptingImplBvpManagerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmScriptingImplBvpManagerProperties {
    #[serde(rename = "com.day.cq.wcm.scripting.bvp.script.engines")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub com_day_cq_wcm_scripting_bvp_script_engines: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmScriptingImplBvpManagerProperties {
    pub fn new() -> ComDayCqWcmScriptingImplBvpManagerProperties {
        ComDayCqWcmScriptingImplBvpManagerProperties {
            com_day_cq_wcm_scripting_bvp_script_engines: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmUndoUndoConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmUndoUndoConfigProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWcmUndoUndoConfigInfo {
    pub fn new() -> ComDayCqWcmUndoUndoConfigInfo {
        ComDayCqWcmUndoUndoConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmUndoUndoConfigProperties {
    #[serde(rename = "cq.wcm.undo.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_undo_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.wcm.undo.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_undo_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.wcm.undo.validity")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_undo_validity: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.wcm.undo.steps")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_undo_steps: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.wcm.undo.persistence")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_undo_persistence: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.wcm.undo.persistence.mode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_undo_persistence_mode: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.wcm.undo.markermode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_undo_markermode: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "cq.wcm.undo.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_undo_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cq.wcm.undo.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_undo_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmUndoUndoConfigProperties {
    pub fn new() -> ComDayCqWcmUndoUndoConfigProperties {
        ComDayCqWcmUndoUndoConfigProperties {
            cq_wcm_undo_enabled: None,
            cq_wcm_undo_path: None,
            cq_wcm_undo_validity: None,
            cq_wcm_undo_steps: None,
            cq_wcm_undo_persistence: None,
            cq_wcm_undo_persistence_mode: None,
            cq_wcm_undo_markermode: None,
            cq_wcm_undo_whitelist: None,
            cq_wcm_undo_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties>,

}

impl ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo {
    pub fn new() -> ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo {
        ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties {
    #[serde(rename = "Flush agents")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub flush_agents: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties {
    pub fn new() -> ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties {
        ComDayCqWcmWebservicesupportImplReplicationEventListenerProperties {
            flush_agents: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties>,

}

impl ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo {
    pub fn new() -> ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo {
        ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
    #[serde(rename = "event.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub event_filter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "minThreadPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub min_thread_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxThreadPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_thread_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cq.wcm.workflow.terminate.on.activate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_workflow_terminate_on_activate: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cq.wcm.worklfow.terminate.exclusion.list")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cq_wcm_worklfow_terminate_exclusion_list: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
    pub fn new() -> ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
        ComDayCqWcmWorkflowImplWcmWorkflowServiceImplProperties {
            event_filter: None,
            min_thread_pool_size: None,
            max_thread_pool_size: None,
            cq_wcm_workflow_terminate_on_activate: None,
            cq_wcm_worklfow_terminate_exclusion_list: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties>,

}

impl ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo {
    pub fn new() -> ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo {
        ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties {
    #[serde(rename = "workflowpackageinfoprovider.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub workflowpackageinfoprovider_filter: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "workflowpackageinfoprovider.filter.rootpath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub workflowpackageinfoprovider_filter_rootpath: Option<models::ConfigNodePropertyString>,

}

impl ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties {
    pub fn new() -> ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties {
        ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderProperties {
            workflowpackageinfoprovider_filter: None,
            workflowpackageinfoprovider_filter_rootpath: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWidgetImplHtmlLibraryManagerImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWidgetImplHtmlLibraryManagerImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWidgetImplHtmlLibraryManagerImplInfo {
    pub fn new() -> ComDayCqWidgetImplHtmlLibraryManagerImplInfo {
        ComDayCqWidgetImplHtmlLibraryManagerImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWidgetImplHtmlLibraryManagerImplProperties {
    #[serde(rename = "htmllibmanager.clientmanager")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_clientmanager: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "htmllibmanager.debug")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_debug: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "htmllibmanager.debug.console")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_debug_console: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "htmllibmanager.debug.init.js")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_debug_init_js: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "htmllibmanager.defaultthemename")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_defaultthemename: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "htmllibmanager.defaultuserthemename")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_defaultuserthemename: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "htmllibmanager.firebuglite.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_firebuglite_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "htmllibmanager.forceCQUrlInfo")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_force_cq_url_info: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "htmllibmanager.gzip")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_gzip: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "htmllibmanager.maxage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_maxage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "htmllibmanager.maxDataUriSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_max_data_uri_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "htmllibmanager.minify")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_minify: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "htmllibmanager.path.list")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_path_list: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "htmllibmanager.timing")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub htmllibmanager_timing: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWidgetImplHtmlLibraryManagerImplProperties {
    pub fn new() -> ComDayCqWidgetImplHtmlLibraryManagerImplProperties {
        ComDayCqWidgetImplHtmlLibraryManagerImplProperties {
            htmllibmanager_clientmanager: None,
            htmllibmanager_debug: None,
            htmllibmanager_debug_console: None,
            htmllibmanager_debug_init_js: None,
            htmllibmanager_defaultthemename: None,
            htmllibmanager_defaultuserthemename: None,
            htmllibmanager_firebuglite_path: None,
            htmllibmanager_force_cq_url_info: None,
            htmllibmanager_gzip: None,
            htmllibmanager_maxage: None,
            htmllibmanager_max_data_uri_size: None,
            htmllibmanager_minify: None,
            htmllibmanager_path_list: None,
            htmllibmanager_timing: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWidgetImplWidgetExtensionProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWidgetImplWidgetExtensionProviderImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCqWidgetImplWidgetExtensionProviderImplInfo {
    pub fn new() -> ComDayCqWidgetImplWidgetExtensionProviderImplInfo {
        ComDayCqWidgetImplWidgetExtensionProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWidgetImplWidgetExtensionProviderImplProperties {
    #[serde(rename = "extendable.widgets")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub extendable_widgets: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "widgetextensionprovider.debug")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub widgetextensionprovider_debug: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWidgetImplWidgetExtensionProviderImplProperties {
    pub fn new() -> ComDayCqWidgetImplWidgetExtensionProviderImplProperties {
        ComDayCqWidgetImplWidgetExtensionProviderImplProperties {
            extendable_widgets: None,
            widgetextensionprovider_debug: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWorkflowImplEmailEMailNotificationServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWorkflowImplEmailEMailNotificationServiceProperties>,

}

impl ComDayCqWorkflowImplEmailEMailNotificationServiceInfo {
    pub fn new() -> ComDayCqWorkflowImplEmailEMailNotificationServiceInfo {
        ComDayCqWorkflowImplEmailEMailNotificationServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWorkflowImplEmailEMailNotificationServiceProperties {
    #[serde(rename = "from.address")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub from_address: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "host.prefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub host_prefix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "notify.onabort")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub notify_onabort: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "notify.oncomplete")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub notify_oncomplete: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "notify.oncontainercomplete")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub notify_oncontainercomplete: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "notify.useronly")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub notify_useronly: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWorkflowImplEmailEMailNotificationServiceProperties {
    pub fn new() -> ComDayCqWorkflowImplEmailEMailNotificationServiceProperties {
        ComDayCqWorkflowImplEmailEMailNotificationServiceProperties {
            from_address: None,
            host_prefix: None,
            notify_onabort: None,
            notify_oncomplete: None,
            notify_oncontainercomplete: None,
            notify_useronly: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties>,

}

impl ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo {
    pub fn new() -> ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo {
        ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties {
    #[serde(rename = "notify.onupdate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub notify_onupdate: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "notify.oncomplete")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub notify_oncomplete: Option<models::ConfigNodePropertyBoolean>,

}

impl ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties {
    pub fn new() -> ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties {
        ComDayCqWorkflowImplEmailTaskEMailNotificationServiceProperties {
            notify_onupdate: None,
            notify_oncomplete: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo {
    pub fn new() -> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo {
        ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "token.required.attr")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub token_required_attr: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "token.alternate.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub token_alternate_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "token.encapsulated")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub token_encapsulated: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "skip.token.refresh")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub skip_token_refresh: Option<models::ConfigNodePropertyArray>,

}

impl ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
    pub fn new() -> ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
        ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerProperties {
            path: None,
            token_required_attr: None,
            token_alternate_url: None,
            token_encapsulated: None,
            skip_token_refresh: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCrxSecurityTokenImplTokenCleanupTaskInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::ComDayCrxSecurityTokenImplTokenCleanupTaskProperties>,

}

impl ComDayCrxSecurityTokenImplTokenCleanupTaskInfo {
    pub fn new() -> ComDayCrxSecurityTokenImplTokenCleanupTaskInfo {
        ComDayCrxSecurityTokenImplTokenCleanupTaskInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {
    #[serde(rename = "enable.token.cleanup.task")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_token_cleanup_task: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "batch.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub batch_size: Option<models::ConfigNodePropertyInteger>,

}

impl ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {
    pub fn new() -> ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {
        ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {
            enable_token_cleanup_task: None,
            scheduler_expression: None,
            batch_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ConfigNodePropertyArray {
    /// property name
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<String>,

    /// True if optional
    #[serde(rename = "optional")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub optional: Option<bool>,

    /// True if property is set
    #[serde(rename = "is_set")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_set: Option<bool>,

    /// Property type, 1=String, 2=Long, 3=Integer, 7=Float, 11=Boolean, 12=Secrets(String)
    #[serde(rename = "type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub _type: Option<i32>,

    /// Property value
    #[serde(rename = "values")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub values: Option<Vec<String>>,

    /// Property description
    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

}

impl ConfigNodePropertyArray {
    pub fn new() -> ConfigNodePropertyArray {
        ConfigNodePropertyArray {
            name: None,
            optional: None,
            is_set: None,
            _type: None,
            values: None,
            description: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ConfigNodePropertyBoolean {
    /// property name
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<String>,

    /// True if optional
    #[serde(rename = "optional")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub optional: Option<bool>,

    /// True if property is set
    #[serde(rename = "is_set")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_set: Option<bool>,

    /// Property type, 1=String, 2=Long, 3=Integer, 7=Float, 11=Boolean, 12=Secrets(String)
    #[serde(rename = "type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub _type: Option<i32>,

    /// Property value
    #[serde(rename = "value")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub value: Option<bool>,

    /// Property description
    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

}

impl ConfigNodePropertyBoolean {
    pub fn new() -> ConfigNodePropertyBoolean {
        ConfigNodePropertyBoolean {
            name: None,
            optional: None,
            is_set: None,
            _type: None,
            value: None,
            description: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ConfigNodePropertyDropDown {
    /// property name
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<String>,

    /// True if optional
    #[serde(rename = "optional")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub optional: Option<bool>,

    /// True if property is set
    #[serde(rename = "is_set")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_set: Option<bool>,

    #[serde(rename = "type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub _type: Option<models::ConfigNodePropertyDropDownType>,

    /// Property value
    #[serde(rename = "value")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub value: Option<Object>,

    /// Property description
    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

}

impl ConfigNodePropertyDropDown {
    pub fn new() -> ConfigNodePropertyDropDown {
        ConfigNodePropertyDropDown {
            name: None,
            optional: None,
            is_set: None,
            _type: None,
            value: None,
            description: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ConfigNodePropertyDropDownType {
    /// Drop Down label
    #[serde(rename = "labels")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub labels: Option<Object>,

    /// Drown Down value
    #[serde(rename = "values")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub values: Option<Object>,

}

impl ConfigNodePropertyDropDownType {
    pub fn new() -> ConfigNodePropertyDropDownType {
        ConfigNodePropertyDropDownType {
            labels: None,
            values: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ConfigNodePropertyFloat {
    /// property name
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<String>,

    /// True if optional
    #[serde(rename = "optional")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub optional: Option<bool>,

    /// True if property is set
    #[serde(rename = "is_set")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_set: Option<bool>,

    /// Property type, 1=String, 2=Long, 3=Integer, 7=Float, 11=Boolean, 12=Secrets(String)
    #[serde(rename = "type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub _type: Option<i32>,

    /// Property value
    #[serde(rename = "value")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub value: Option<f64>,

    /// Property description
    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

}

impl ConfigNodePropertyFloat {
    pub fn new() -> ConfigNodePropertyFloat {
        ConfigNodePropertyFloat {
            name: None,
            optional: None,
            is_set: None,
            _type: None,
            value: None,
            description: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ConfigNodePropertyInteger {
    /// property name
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<String>,

    /// True if optional
    #[serde(rename = "optional")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub optional: Option<bool>,

    /// True if property is set
    #[serde(rename = "is_set")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_set: Option<bool>,

    /// Property type, 1=String, 2=Long, 3=Integer, 7=Float, 11=Boolean, 12=Secrets(String)
    #[serde(rename = "type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub _type: Option<i32>,

    /// Property value
    #[serde(rename = "value")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub value: Option<i32>,

    /// Property description
    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

}

impl ConfigNodePropertyInteger {
    pub fn new() -> ConfigNodePropertyInteger {
        ConfigNodePropertyInteger {
            name: None,
            optional: None,
            is_set: None,
            _type: None,
            value: None,
            description: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ConfigNodePropertyString {
    /// property name
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<String>,

    /// True if optional
    #[serde(rename = "optional")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub optional: Option<bool>,

    /// True if property is set
    #[serde(rename = "is_set")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub is_set: Option<bool>,

    /// Property type, 1=String, 2=Long, 3=Integer, 7=Float, 11=Boolean, 12=Secrets(String)
    #[serde(rename = "type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub _type: Option<i32>,

    /// Property value
    #[serde(rename = "value")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub value: Option<String>,

    /// Property description
    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

}

impl ConfigNodePropertyString {
    pub fn new() -> ConfigNodePropertyString {
        ConfigNodePropertyString {
            name: None,
            optional: None,
            is_set: None,
            _type: None,
            value: None,
            description: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct GuideLocalizationServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::GuideLocalizationServiceProperties>,

}

impl GuideLocalizationServiceInfo {
    pub fn new() -> GuideLocalizationServiceInfo {
        GuideLocalizationServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct GuideLocalizationServiceProperties {
    #[serde(rename = "supportedLocales")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub supported_locales: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "Localizable Properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub localizable_properties: Option<models::ConfigNodePropertyArray>,

}

impl GuideLocalizationServiceProperties {
    pub fn new() -> GuideLocalizationServiceProperties {
        GuideLocalizationServiceProperties {
            supported_locales: None,
            localizable_properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct MessagingUserComponentFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::MessagingUserComponentFactoryProperties>,

}

impl MessagingUserComponentFactoryInfo {
    pub fn new() -> MessagingUserComponentFactoryInfo {
        MessagingUserComponentFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct MessagingUserComponentFactoryProperties {
    #[serde(rename = "priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority: Option<models::ConfigNodePropertyInteger>,

}

impl MessagingUserComponentFactoryProperties {
    pub fn new() -> MessagingUserComponentFactoryProperties {
        MessagingUserComponentFactoryProperties {
            priority: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheAriesJmxFrameworkStateConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheAriesJmxFrameworkStateConfigProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheAriesJmxFrameworkStateConfigInfo {
    pub fn new() -> OrgApacheAriesJmxFrameworkStateConfigInfo {
        OrgApacheAriesJmxFrameworkStateConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheAriesJmxFrameworkStateConfigProperties {
    #[serde(rename = "attributeChangeNotificationEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attribute_change_notification_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheAriesJmxFrameworkStateConfigProperties {
    pub fn new() -> OrgApacheAriesJmxFrameworkStateConfigProperties {
        OrgApacheAriesJmxFrameworkStateConfigProperties {
            attribute_change_notification_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixEventadminImplEventAdminInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixEventadminImplEventAdminProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheFelixEventadminImplEventAdminInfo {
    pub fn new() -> OrgApacheFelixEventadminImplEventAdminInfo {
        OrgApacheFelixEventadminImplEventAdminInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixEventadminImplEventAdminProperties {
    #[serde(rename = "org.apache.felix.eventadmin.ThreadPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_eventadmin_thread_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.eventadmin.AsyncToSyncThreadRatio")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_eventadmin_async_to_sync_thread_ratio: Option<models::ConfigNodePropertyFloat>,

    #[serde(rename = "org.apache.felix.eventadmin.Timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_eventadmin_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.eventadmin.RequireTopic")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_eventadmin_require_topic: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.apache.felix.eventadmin.IgnoreTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_eventadmin_ignore_timeout: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.eventadmin.IgnoreTopic")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_eventadmin_ignore_topic: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheFelixEventadminImplEventAdminProperties {
    pub fn new() -> OrgApacheFelixEventadminImplEventAdminProperties {
        OrgApacheFelixEventadminImplEventAdminProperties {
            org_apache_felix_eventadmin_thread_pool_size: None,
            org_apache_felix_eventadmin_async_to_sync_thread_ratio: None,
            org_apache_felix_eventadmin_timeout: None,
            org_apache_felix_eventadmin_require_topic: None,
            org_apache_felix_eventadmin_ignore_timeout: None,
            org_apache_felix_eventadmin_ignore_topic: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixHttpInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixHttpProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheFelixHttpInfo {
    pub fn new() -> OrgApacheFelixHttpInfo {
        OrgApacheFelixHttpInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixHttpProperties {
    #[serde(rename = "org.apache.felix.http.host")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_host: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.http.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.osgi.service.http.port")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_osgi_service_http_port: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.http.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.https.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.osgi.service.http.port.secure")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_osgi_service_http_port_secure: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.https.keystore")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_keystore: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.https.keystore.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_keystore_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.https.keystore.key.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_keystore_key_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.https.truststore")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_truststore: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.https.truststore.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_truststore_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.https.clientcertificate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_clientcertificate: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "org.apache.felix.http.context_path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_context_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.http.mbeans")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_mbeans: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.apache.felix.http.session.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_session_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.http.jetty.threadpool.max")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_jetty_threadpool_max: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.http.jetty.acceptors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_jetty_acceptors: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.http.jetty.selectors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_jetty_selectors: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.http.jetty.headerBufferSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_jetty_header_buffer_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.http.jetty.requestBufferSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_jetty_request_buffer_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.http.jetty.responseBufferSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_jetty_response_buffer_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.http.jetty.maxFormSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_jetty_max_form_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.http.path_exclusions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_path_exclusions: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.https.jetty.ciphersuites.excluded")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_jetty_ciphersuites_excluded: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.https.jetty.ciphersuites.included")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_jetty_ciphersuites_included: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.http.jetty.sendServerHeader")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_jetty_send_server_header: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.apache.felix.https.jetty.protocols.included")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_jetty_protocols_included: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.https.jetty.protocols.excluded")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_jetty_protocols_excluded: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.proxy.load.balancer.connection.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_proxy_load_balancer_connection_enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.apache.felix.https.jetty.renegotiateAllowed")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_jetty_renegotiate_allowed: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.apache.felix.https.jetty.session.cookie.httpOnly")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_jetty_session_cookie_http_only: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.apache.felix.https.jetty.session.cookie.secure")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_https_jetty_session_cookie_secure: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.eclipse.jetty.servlet.SessionIdPathParameterName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_eclipse_jetty_servlet_session_id_path_parameter_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_eclipse_jetty_servlet_checking_remote_session_id_encoding: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.eclipse.jetty.servlet.SessionCookie")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_eclipse_jetty_servlet_session_cookie: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.eclipse.jetty.servlet.SessionDomain")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_eclipse_jetty_servlet_session_domain: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.eclipse.jetty.servlet.SessionPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_eclipse_jetty_servlet_session_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.eclipse.jetty.servlet.MaxAge")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_eclipse_jetty_servlet_max_age: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.http.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.felix.jetty.gziphandler.enable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gziphandler_enable: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.apache.felix.jetty.gzip.minGzipSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gzip_min_gzip_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.jetty.gzip.compressionLevel")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gzip_compression_level: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.jetty.gzip.inflateBufferSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gzip_inflate_buffer_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.felix.jetty.gzip.syncFlush")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gzip_sync_flush: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.apache.felix.jetty.gzip.excludedUserAgents")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gzip_excluded_user_agents: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.jetty.gzip.includedMethods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gzip_included_methods: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.jetty.gzip.excludedMethods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gzip_excluded_methods: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.jetty.gzip.includedPaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gzip_included_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.jetty.gzip.excludedPaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gzip_excluded_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.jetty.gzip.includedMimeTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gzip_included_mime_types: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.jetty.gzip.excludedMimeTypes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_jetty_gzip_excluded_mime_types: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.felix.http.session.invalidate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_session_invalidate: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.apache.felix.http.session.uniqueid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_felix_http_session_uniqueid: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheFelixHttpProperties {
    pub fn new() -> OrgApacheFelixHttpProperties {
        OrgApacheFelixHttpProperties {
            org_apache_felix_http_host: None,
            org_apache_felix_http_enable: None,
            org_osgi_service_http_port: None,
            org_apache_felix_http_timeout: None,
            org_apache_felix_https_enable: None,
            org_osgi_service_http_port_secure: None,
            org_apache_felix_https_keystore: None,
            org_apache_felix_https_keystore_password: None,
            org_apache_felix_https_keystore_key_password: None,
            org_apache_felix_https_truststore: None,
            org_apache_felix_https_truststore_password: None,
            org_apache_felix_https_clientcertificate: None,
            org_apache_felix_http_context_path: None,
            org_apache_felix_http_mbeans: None,
            org_apache_felix_http_session_timeout: None,
            org_apache_felix_http_jetty_threadpool_max: None,
            org_apache_felix_http_jetty_acceptors: None,
            org_apache_felix_http_jetty_selectors: None,
            org_apache_felix_http_jetty_header_buffer_size: None,
            org_apache_felix_http_jetty_request_buffer_size: None,
            org_apache_felix_http_jetty_response_buffer_size: None,
            org_apache_felix_http_jetty_max_form_size: None,
            org_apache_felix_http_path_exclusions: None,
            org_apache_felix_https_jetty_ciphersuites_excluded: None,
            org_apache_felix_https_jetty_ciphersuites_included: None,
            org_apache_felix_http_jetty_send_server_header: None,
            org_apache_felix_https_jetty_protocols_included: None,
            org_apache_felix_https_jetty_protocols_excluded: None,
            org_apache_felix_proxy_load_balancer_connection_enable: None,
            org_apache_felix_https_jetty_renegotiate_allowed: None,
            org_apache_felix_https_jetty_session_cookie_http_only: None,
            org_apache_felix_https_jetty_session_cookie_secure: None,
            org_eclipse_jetty_servlet_session_id_path_parameter_name: None,
            org_eclipse_jetty_servlet_checking_remote_session_id_encoding: None,
            org_eclipse_jetty_servlet_session_cookie: None,
            org_eclipse_jetty_servlet_session_domain: None,
            org_eclipse_jetty_servlet_session_path: None,
            org_eclipse_jetty_servlet_max_age: None,
            org_apache_felix_http_name: None,
            org_apache_felix_jetty_gziphandler_enable: None,
            org_apache_felix_jetty_gzip_min_gzip_size: None,
            org_apache_felix_jetty_gzip_compression_level: None,
            org_apache_felix_jetty_gzip_inflate_buffer_size: None,
            org_apache_felix_jetty_gzip_sync_flush: None,
            org_apache_felix_jetty_gzip_excluded_user_agents: None,
            org_apache_felix_jetty_gzip_included_methods: None,
            org_apache_felix_jetty_gzip_excluded_methods: None,
            org_apache_felix_jetty_gzip_included_paths: None,
            org_apache_felix_jetty_gzip_excluded_paths: None,
            org_apache_felix_jetty_gzip_included_mime_types: None,
            org_apache_felix_jetty_gzip_excluded_mime_types: None,
            org_apache_felix_http_session_invalidate: None,
            org_apache_felix_http_session_uniqueid: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixHttpSslfilterSslFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixHttpSslfilterSslFilterProperties>,

}

impl OrgApacheFelixHttpSslfilterSslFilterInfo {
    pub fn new() -> OrgApacheFelixHttpSslfilterSslFilterInfo {
        OrgApacheFelixHttpSslfilterSslFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixHttpSslfilterSslFilterProperties {
    #[serde(rename = "ssl-forward.header")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ssl_forward_header: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "ssl-forward.value")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ssl_forward_value: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "ssl-forward-cert.header")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ssl_forward_cert_header: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "rewrite.absolute.urls")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub rewrite_absolute_urls: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheFelixHttpSslfilterSslFilterProperties {
    pub fn new() -> OrgApacheFelixHttpSslfilterSslFilterProperties {
        OrgApacheFelixHttpSslfilterSslFilterProperties {
            ssl_forward_header: None,
            ssl_forward_value: None,
            ssl_forward_cert_header: None,
            rewrite_absolute_urls: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixJaasConfigurationFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixJaasConfigurationFactoryProperties>,

}

impl OrgApacheFelixJaasConfigurationFactoryInfo {
    pub fn new() -> OrgApacheFelixJaasConfigurationFactoryInfo {
        OrgApacheFelixJaasConfigurationFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixJaasConfigurationFactoryProperties {
    #[serde(rename = "jaas.controlFlag")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_control_flag: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "jaas.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "jaas.realmName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_realm_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jaas.classname")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_classname: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jaas.options")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_options: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheFelixJaasConfigurationFactoryProperties {
    pub fn new() -> OrgApacheFelixJaasConfigurationFactoryProperties {
        OrgApacheFelixJaasConfigurationFactoryProperties {
            jaas_control_flag: None,
            jaas_ranking: None,
            jaas_realm_name: None,
            jaas_classname: None,
            jaas_options: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixJaasConfigurationSpiInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixJaasConfigurationSpiProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheFelixJaasConfigurationSpiInfo {
    pub fn new() -> OrgApacheFelixJaasConfigurationSpiInfo {
        OrgApacheFelixJaasConfigurationSpiInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixJaasConfigurationSpiProperties {
    #[serde(rename = "jaas.defaultRealmName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_default_realm_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jaas.configProviderName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_config_provider_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jaas.globalConfigPolicy")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_global_config_policy: Option<models::ConfigNodePropertyDropDown>,

}

impl OrgApacheFelixJaasConfigurationSpiProperties {
    pub fn new() -> OrgApacheFelixJaasConfigurationSpiProperties {
        OrgApacheFelixJaasConfigurationSpiProperties {
            jaas_default_realm_name: None,
            jaas_config_provider_name: None,
            jaas_global_config_policy: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixScrScrServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixScrScrServiceProperties>,

}

impl OrgApacheFelixScrScrServiceInfo {
    pub fn new() -> OrgApacheFelixScrScrServiceInfo {
        OrgApacheFelixScrScrServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixScrScrServiceProperties {
    #[serde(rename = "ds.loglevel")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ds_loglevel: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "ds.factory.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ds_factory_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "ds.delayed.keepInstances")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ds_delayed_keep_instances: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "ds.lock.timeout.milliseconds")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ds_lock_timeout_milliseconds: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "ds.stop.timeout.milliseconds")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ds_stop_timeout_milliseconds: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "ds.global.extender")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ds_global_extender: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheFelixScrScrServiceProperties {
    pub fn new() -> OrgApacheFelixScrScrServiceProperties {
        OrgApacheFelixScrScrServiceProperties {
            ds_loglevel: None,
            ds_factory_enabled: None,
            ds_delayed_keep_instances: None,
            ds_lock_timeout_milliseconds: None,
            ds_stop_timeout_milliseconds: None,
            ds_global_extender: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadyImplComponentsCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixSystemreadyImplComponentsCheckProperties>,

}

impl OrgApacheFelixSystemreadyImplComponentsCheckInfo {
    pub fn new() -> OrgApacheFelixSystemreadyImplComponentsCheckInfo {
        OrgApacheFelixSystemreadyImplComponentsCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadyImplComponentsCheckProperties {
    #[serde(rename = "components.list")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub components_list: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub _type: Option<models::ConfigNodePropertyDropDown>,

}

impl OrgApacheFelixSystemreadyImplComponentsCheckProperties {
    pub fn new() -> OrgApacheFelixSystemreadyImplComponentsCheckProperties {
        OrgApacheFelixSystemreadyImplComponentsCheckProperties {
            components_list: None,
            _type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties>,

}

impl OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo {
    pub fn new() -> OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo {
        OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
    #[serde(rename = "timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "target.start.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub target_start_level: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "target.start.level.prop.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub target_start_level_prop_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub _type: Option<models::ConfigNodePropertyDropDown>,

}

impl OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
    pub fn new() -> OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
        OrgApacheFelixSystemreadyImplFrameworkStartCheckProperties {
            timeout: None,
            target_start_level: None,
            target_start_level_prop_name: None,
            _type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadyImplServicesCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixSystemreadyImplServicesCheckProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheFelixSystemreadyImplServicesCheckInfo {
    pub fn new() -> OrgApacheFelixSystemreadyImplServicesCheckInfo {
        OrgApacheFelixSystemreadyImplServicesCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadyImplServicesCheckProperties {
    #[serde(rename = "services.list")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub services_list: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub _type: Option<models::ConfigNodePropertyDropDown>,

}

impl OrgApacheFelixSystemreadyImplServicesCheckProperties {
    pub fn new() -> OrgApacheFelixSystemreadyImplServicesCheckProperties {
        OrgApacheFelixSystemreadyImplServicesCheckProperties {
            services_list: None,
            _type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo {
    pub fn new() -> OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo {
        OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties {
    #[serde(rename = "osgi.http.whiteboard.servlet.pattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub osgi_http_whiteboard_servlet_pattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "osgi.http.whiteboard.context.select")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub osgi_http_whiteboard_context_select: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties {
    pub fn new() -> OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties {
        OrgApacheFelixSystemreadyImplServletSystemAliveServletProperties {
            osgi_http_whiteboard_servlet_pattern: None,
            osgi_http_whiteboard_context_select: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo {
    pub fn new() -> OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo {
        OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties {
    #[serde(rename = "osgi.http.whiteboard.servlet.pattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub osgi_http_whiteboard_servlet_pattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "osgi.http.whiteboard.context.select")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub osgi_http_whiteboard_context_select: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties {
    pub fn new() -> OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties {
        OrgApacheFelixSystemreadyImplServletSystemReadyServletProperties {
            osgi_http_whiteboard_servlet_pattern: None,
            osgi_http_whiteboard_context_select: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadySystemReadyMonitorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixSystemreadySystemReadyMonitorProperties>,

}

impl OrgApacheFelixSystemreadySystemReadyMonitorInfo {
    pub fn new() -> OrgApacheFelixSystemreadySystemReadyMonitorInfo {
        OrgApacheFelixSystemreadySystemReadyMonitorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixSystemreadySystemReadyMonitorProperties {
    #[serde(rename = "poll.interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub poll_interval: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheFelixSystemreadySystemReadyMonitorProperties {
    pub fn new() -> OrgApacheFelixSystemreadySystemReadyMonitorProperties {
        OrgApacheFelixSystemreadySystemReadyMonitorProperties {
            poll_interval: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties>,

}

impl OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo {
    pub fn new() -> OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo {
        OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    #[serde(rename = "manager.root")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub manager_root: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "http.service.filter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub http_service_filter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "default.render")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_render: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "realm")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub realm: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "username")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub username: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "category")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub category: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "locale")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub locale: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "loglevel")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub loglevel: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "plugins")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub plugins: Option<models::ConfigNodePropertyDropDown>,

}

impl OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
    pub fn new() -> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
        OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties {
            manager_root: None,
            http_service_filter: None,
            default_render: None,
            realm: None,
            username: None,
            password: None,
            category: None,
            locale: None,
            loglevel: None,
            plugins: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties>,

}

impl OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo {
    pub fn new() -> OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo {
        OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties {
    #[serde(rename = "max.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_size: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties {
    pub fn new() -> OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties {
        OrgApacheFelixWebconsolePluginsEventInternalPluginServletProperties {
            max_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties>,

}

impl OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo {
    pub fn new() -> OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo {
        OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties {
    #[serde(rename = "felix.memoryusage.dump.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub felix_memoryusage_dump_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "felix.memoryusage.dump.interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub felix_memoryusage_dump_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "felix.memoryusage.dump.location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub felix_memoryusage_dump_location: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties {
    pub fn new() -> OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties {
        OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoProperties {
            felix_memoryusage_dump_threshold: None,
            felix_memoryusage_dump_interval: None,
            felix_memoryusage_dump_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheHttpProxyconfiguratorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheHttpProxyconfiguratorProperties>,

}

impl OrgApacheHttpProxyconfiguratorInfo {
    pub fn new() -> OrgApacheHttpProxyconfiguratorInfo {
        OrgApacheHttpProxyconfiguratorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheHttpProxyconfiguratorProperties {
    #[serde(rename = "proxy.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "proxy.host")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_host: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "proxy.port")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_port: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "proxy.user")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_user: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "proxy.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "proxy.exceptions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub proxy_exceptions: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheHttpProxyconfiguratorProperties {
    pub fn new() -> OrgApacheHttpProxyconfiguratorProperties {
        OrgApacheHttpProxyconfiguratorProperties {
            proxy_enabled: None,
            proxy_host: None,
            proxy_port: None,
            proxy_user: None,
            proxy_password: None,
            proxy_exceptions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties>,

}

impl OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo {
        OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties {
    #[serde(rename = "dir")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dir: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties {
        OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderProperties {
            dir: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo {
        OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties {
        OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreProperties {
            path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties>,

}

impl OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo {
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo {
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties {
    #[serde(rename = "persistentCacheIncludes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub persistent_cache_includes: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties {
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreProperties {
            persistent_cache_includes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    #[serde(rename = "mongouri")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mongouri: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "db")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub db: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "socketKeepAlive")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub socket_keep_alive: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cache")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "nodeCachePercentage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub node_cache_percentage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "prevDocCachePercentage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub prev_doc_cache_percentage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "childrenCachePercentage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub children_cache_percentage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "diffCachePercentage")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub diff_cache_percentage: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cacheSegmentCount")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_segment_count: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cacheStackMoveDistance")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_stack_move_distance: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "blobCacheSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub blob_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "persistentCache")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub persistent_cache: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "journalCache")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub journal_cache: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "customBlobStore")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub custom_blob_store: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "journalGCInterval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub journal_gc_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "journalGCMaxAge")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub journal_gc_max_age: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "prefetchExternalChanges")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub prefetch_external_changes: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "role")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub role: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "versionGcMaxAgeInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub version_gc_max_age_in_secs: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "versionGCExpression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub version_gc_expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "versionGCTimeLimitInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub version_gc_time_limit_in_secs: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "blobGcMaxAgeInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub blob_gc_max_age_in_secs: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "blobTrackSnapshotIntervalInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub blob_track_snapshot_interval_in_secs: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "repository.home")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repository_home: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "maxReplicationLagInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_replication_lag_in_secs: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "documentStoreType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub document_store_type: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "bundlingDisabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundling_disabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "updateLimit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub update_limit: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "persistentCacheIncludes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub persistent_cache_includes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "leaseCheckMode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub lease_check_mode: Option<models::ConfigNodePropertyDropDown>,

}

impl OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
            mongouri: None,
            db: None,
            socket_keep_alive: None,
            cache: None,
            node_cache_percentage: None,
            prev_doc_cache_percentage: None,
            children_cache_percentage: None,
            diff_cache_percentage: None,
            cache_segment_count: None,
            cache_stack_move_distance: None,
            blob_cache_size: None,
            persistent_cache: None,
            journal_cache: None,
            custom_blob_store: None,
            journal_gc_interval: None,
            journal_gc_max_age: None,
            prefetch_external_changes: None,
            role: None,
            version_gc_max_age_in_secs: None,
            version_gc_expression: None,
            version_gc_time_limit_in_secs: None,
            blob_gc_max_age_in_secs: None,
            blob_track_snapshot_interval_in_secs: None,
            repository_home: None,
            max_replication_lag_in_secs: None,
            document_store_type: None,
            bundling_disabled: None,
            update_limit: None,
            persistent_cache_includes: None,
            lease_check_mode: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties>,

}

impl OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo {
        OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties {
    #[serde(rename = "includedPaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub included_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "enableAsyncObserver")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_async_observer: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "observerQueueSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub observer_queue_size: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties {
        OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties {
            included_paths: None,
            enable_async_observer: None,
            observer_queue_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo {
        OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
    #[serde(rename = "asyncConfigs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub async_configs: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "leaseTimeOutMinutes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub lease_time_out_minutes: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "failingIndexTimeoutSeconds")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub failing_index_timeout_seconds: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "errorWarnIntervalSeconds")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub error_warn_interval_seconds: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
        OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceProperties {
            async_configs: None,
            lease_time_out_minutes: None,
            failing_index_timeout_seconds: None,
            error_warn_interval_seconds: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo {
        OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    #[serde(rename = "disabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "debug")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub debug: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "localIndexDir")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub local_index_dir: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enableOpenIndexAsync")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_open_index_async: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "threadPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub thread_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "prefetchIndexFiles")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub prefetch_index_files: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "extractedTextCacheSizeInMB")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub extracted_text_cache_size_in_mb: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "extractedTextCacheExpiryInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub extracted_text_cache_expiry_in_secs: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "alwaysUsePreExtractedCache")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub always_use_pre_extracted_cache: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "booleanClauseLimit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub boolean_clause_limit: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "enableHybridIndexing")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_hybrid_indexing: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "hybridQueueSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hybrid_queue_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "disableStoredIndexDefinition")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disable_stored_index_definition: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "deletedBlobsCollectionEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub deleted_blobs_collection_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "propIndexCleanerIntervalInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub prop_index_cleaner_interval_in_secs: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "enableSingleBlobIndexFiles")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_single_blob_index_files: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
        OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties {
            disabled: None,
            debug: None,
            local_index_dir: None,
            enable_open_index_async: None,
            thread_pool_size: None,
            prefetch_index_files: None,
            extracted_text_cache_size_in_mb: None,
            extracted_text_cache_expiry_in_secs: None,
            always_use_pre_extracted_cache: None,
            boolean_clause_limit: None,
            enable_hybrid_indexing: None,
            hybrid_queue_size: None,
            disable_stored_index_definition: None,
            deleted_blobs_collection_enabled: None,
            prop_index_cleaner_interval_in_secs: None,
            enable_single_blob_index_files: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties {
    #[serde(rename = "solr.home.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_home_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "solr.core.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_core_name: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoProperties {
            solr_home_path: None,
            solr_core_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersProperties {
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    #[serde(rename = "path.desc.field")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path_desc_field: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "path.child.field")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path_child_field: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "path.parent.field")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path_parent_field: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "path.exact.field")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path_exact_field: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "catch.all.field")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub catch_all_field: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "collapsed.path.field")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub collapsed_path_field: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "path.depth.field")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path_depth_field: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "commit.policy")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub commit_policy: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "rows")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub rows: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "path.restrictions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path_restrictions: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "property.restrictions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub property_restrictions: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "primarytypes.restrictions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub primarytypes_restrictions: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "ignored.properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ignored_properties: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "used.properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub used_properties: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "type.mappings")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub type_mappings: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "property.mappings")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub property_mappings: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "collapse.jcrcontent.nodes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub collapse_jcrcontent_nodes: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {
            path_desc_field: None,
            path_child_field: None,
            path_parent_field: None,
            path_exact_field: None,
            catch_all_field: None,
            collapsed_path_field: None,
            path_depth_field: None,
            commit_policy: None,
            rows: None,
            path_restrictions: None,
            property_restrictions: None,
            primarytypes_restrictions: None,
            ignored_properties: None,
            used_properties: None,
            type_mappings: None,
            property_mappings: None,
            collapse_jcrcontent_nodes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
    #[serde(rename = "solr.http.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_http_url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "solr.zk.host")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_zk_host: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "solr.collection")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_collection: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "solr.socket.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_socket_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "solr.connection.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_connection_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "solr.shards.no")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_shards_no: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "solr.replication.factor")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_replication_factor: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "solr.conf.dir")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub solr_conf_dir: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {
            solr_http_url: None,
            solr_zk_host: None,
            solr_collection: None,
            solr_socket_timeout: None,
            solr_connection_timeout: None,
            solr_shards_no: None,
            solr_replication_factor: None,
            solr_conf_dir: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties {
    #[serde(rename = "query.aggregation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub query_aggregation: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidProperties {
            query_aggregation: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties {
    #[serde(rename = "server.type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub server_type: Option<models::ConfigNodePropertyDropDown>,

}

impl OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties {
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeProperties {
            server_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties>,

}

impl OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo {
        OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties {
    #[serde(rename = "providerType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_type: Option<models::ConfigNodePropertyDropDown>,

}

impl OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties {
        OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryProperties {
            provider_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo {
    pub fn new() -> OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo {
        OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties {
    #[serde(rename = "maxItems")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_items: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxPathDepth")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_path_depth: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties {
    pub fn new() -> OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties {
        OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties {
            max_items: None,
            max_path_depth: None,
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties>,

}

impl OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo {
    pub fn new() -> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo {
        OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
    #[serde(rename = "queryLimitInMemory")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub query_limit_in_memory: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "queryLimitReads")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub query_limit_reads: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "queryFailTraversal")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub query_fail_traversal: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "fastQuerySize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fast_query_size: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
    pub fn new() -> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
        OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties {
            query_limit_in_memory: None,
            query_limit_reads: None,
            query_fail_traversal: None,
            fast_query_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties>,

}

impl OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo {
    pub fn new() -> OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo {
        OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties {
    #[serde(rename = "org.apache.jackrabbit.oak.authentication.appName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_jackrabbit_oak_authentication_app_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.jackrabbit.oak.authentication.configSpiName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_jackrabbit_oak_authentication_config_spi_name: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties {
    pub fn new() -> OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties {
        OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigProperties {
            org_apache_jackrabbit_oak_authentication_app_name: None,
            org_apache_jackrabbit_oak_authentication_config_spi_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties>,

}

impl OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo {
    pub fn new() -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo {
        OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    #[serde(rename = "provider.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "host.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub host_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "host.port")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub host_port: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "host.ssl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub host_ssl: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "host.tls")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub host_tls: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "host.noCertCheck")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub host_no_cert_check: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "bind.dn")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bind_dn: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "bind.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bind_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "searchTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub search_timeout: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "adminPool.maxActive")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub admin_pool_max_active: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "adminPool.lookupOnValidate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub admin_pool_lookup_on_validate: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "userPool.maxActive")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_pool_max_active: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "userPool.lookupOnValidate")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_pool_lookup_on_validate: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "user.baseDN")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_base_dn: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "user.objectclass")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_objectclass: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "user.idAttribute")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_id_attribute: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "user.extraFilter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_extra_filter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "user.makeDnPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_make_dn_path: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "group.baseDN")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_base_dn: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "group.objectclass")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_objectclass: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "group.nameAttribute")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_name_attribute: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "group.extraFilter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_extra_filter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "group.makeDnPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_make_dn_path: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "group.memberAttribute")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_member_attribute: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "useUidForExtId")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub use_uid_for_ext_id: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "customattributes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub customattributes: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
    pub fn new() -> OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
        OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties {
            provider_name: None,
            host_name: None,
            host_port: None,
            host_ssl: None,
            host_tls: None,
            host_no_cert_check: None,
            bind_dn: None,
            bind_password: None,
            search_timeout: None,
            admin_pool_max_active: None,
            admin_pool_lookup_on_validate: None,
            user_pool_max_active: None,
            user_pool_lookup_on_validate: None,
            user_base_dn: None,
            user_objectclass: None,
            user_id_attribute: None,
            user_extra_filter: None,
            user_make_dn_path: None,
            group_base_dn: None,
            group_objectclass: None,
            group_name_attribute: None,
            group_extra_filter: None,
            group_make_dn_path: None,
            group_member_attribute: None,
            use_uid_for_ext_id: None,
            customattributes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo {
    pub fn new() -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo {
        OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
    #[serde(rename = "tokenExpiration")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub token_expiration: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "tokenLength")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub token_length: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "tokenRefresh")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub token_refresh: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "tokenCleanupThreshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub token_cleanup_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "passwordHashAlgorithm")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password_hash_algorithm: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "passwordHashIterations")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password_hash_iterations: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "passwordSaltSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password_salt_size: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
    pub fn new() -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
        OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
            token_expiration: None,
            token_length: None,
            token_refresh: None,
            token_cleanup_threshold: None,
            password_hash_algorithm: None,
            password_hash_iterations: None,
            password_salt_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo {
    pub fn new() -> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo {
        OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
    #[serde(rename = "permissionsJr2")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub permissions_jr2: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "importBehavior")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub import_behavior: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "readPaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub read_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "administrativePrincipals")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub administrative_principals: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "configurationRanking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub configuration_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
    pub fn new() -> OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
        OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {
            permissions_jr2: None,
            import_behavior: None,
            read_paths: None,
            administrative_principals: None,
            configuration_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo {
    pub fn new() -> OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo {
        OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties {
    #[serde(rename = "requiredServicePids")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub required_service_pids: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "authorizationCompositionType")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub authorization_composition_type: Option<models::ConfigNodePropertyDropDown>,

}

impl OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties {
    pub fn new() -> OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties {
        OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties {
            required_service_pids: None,
            authorization_composition_type: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo {
    pub fn new() -> OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo {
        OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties {
    #[serde(rename = "length")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub length: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties {
    pub fn new() -> OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties {
        OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameProperties {
            length: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo {
    pub fn new() -> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo {
        OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties {
    #[serde(rename = "usersPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub users_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "groupsPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub groups_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "systemRelativePath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub system_relative_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "defaultDepth")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_depth: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "importBehavior")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub import_behavior: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "passwordHashAlgorithm")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password_hash_algorithm: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "passwordHashIterations")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password_hash_iterations: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "passwordSaltSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password_salt_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "omitAdminPw")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub omit_admin_pw: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "supportAutoSave")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub support_auto_save: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "passwordMaxAge")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password_max_age: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "initialPasswordChange")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub initial_password_change: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "passwordHistorySize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password_history_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "passwordExpiryForAdmin")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password_expiry_for_admin: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cacheExpiration")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cache_expiration: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "enableRFC7613UsercaseMappedProfile")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_rfc7613_usercase_mapped_profile: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties {
    pub fn new() -> OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties {
        OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties {
            users_path: None,
            groups_path: None,
            system_relative_path: None,
            default_depth: None,
            import_behavior: None,
            password_hash_algorithm: None,
            password_hash_iterations: None,
            password_salt_size: None,
            omit_admin_pw: None,
            support_auto_save: None,
            password_max_age: None,
            initial_password_change: None,
            password_history_size: None,
            password_expiry_for_admin: None,
            cache_expiration: None,
            enable_rfc7613_usercase_mapped_profile: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties>,

}

impl OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo {
    pub fn new() -> OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo {
        OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties {
    #[serde(rename = "accountName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub account_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "containerName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub container_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "accessKey")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub access_key: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "rootPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub root_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "connectionURL")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connection_url: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties {
    pub fn new() -> OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties {
        OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceProperties {
            account_name: None,
            container_name: None,
            access_key: None,
            root_path: None,
            connection_url: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties>,

}

impl OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo {
    pub fn new() -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo {
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties {
    #[serde(rename = "repository.home")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repository_home: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "tarmk.mode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tarmk_mode: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "tarmk.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tarmk_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "segmentCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub segment_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "stringCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub string_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "templateCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub template_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "stringDeduplicationCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub string_deduplication_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "templateDeduplicationCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub template_deduplication_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "nodeDeduplicationCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub node_deduplication_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "pauseCompaction")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pause_compaction: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "compaction.retryCount")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_retry_count: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "compaction.force.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_force_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "compaction.sizeDeltaEstimation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_size_delta_estimation: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "compaction.disableEstimation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_disable_estimation: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "compaction.retainedGenerations")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_retained_generations: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "compaction.memoryThreshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_memory_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "compaction.progressLog")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_progress_log: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "standby")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub standby: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "customBlobStore")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub custom_blob_store: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "customSegmentStore")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub custom_segment_store: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "splitPersistence")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub split_persistence: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "repository.backup.dir")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repository_backup_dir: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "blobGcMaxAgeInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub blob_gc_max_age_in_secs: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "blobTrackSnapshotIntervalInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub blob_track_snapshot_interval_in_secs: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "role")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub role: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "registerDescriptors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub register_descriptors: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "dispatchChanges")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dispatch_changes: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties {
    pub fn new() -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties {
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryProperties {
            repository_home: None,
            tarmk_mode: None,
            tarmk_size: None,
            segment_cache_size: None,
            string_cache_size: None,
            template_cache_size: None,
            string_deduplication_cache_size: None,
            template_deduplication_cache_size: None,
            node_deduplication_cache_size: None,
            pause_compaction: None,
            compaction_retry_count: None,
            compaction_force_timeout: None,
            compaction_size_delta_estimation: None,
            compaction_disable_estimation: None,
            compaction_retained_generations: None,
            compaction_memory_threshold: None,
            compaction_progress_log: None,
            standby: None,
            custom_blob_store: None,
            custom_segment_store: None,
            split_persistence: None,
            repository_backup_dir: None,
            blob_gc_max_age_in_secs: None,
            blob_track_snapshot_interval_in_secs: None,
            role: None,
            register_descriptors: None,
            dispatch_changes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo {
    pub fn new() -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo {
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties {
    #[serde(rename = "commitsTrackerWriterGroups")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub commits_tracker_writer_groups: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties {
    pub fn new() -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties {
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceProperties {
            commits_tracker_writer_groups: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo {
    pub fn new() -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo {
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    #[serde(rename = "repository.home")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repository_home: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "tarmk.mode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tarmk_mode: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "tarmk.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tarmk_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "segmentCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub segment_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "stringCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub string_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "templateCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub template_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "stringDeduplicationCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub string_deduplication_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "templateDeduplicationCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub template_deduplication_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "nodeDeduplicationCache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub node_deduplication_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "pauseCompaction")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pause_compaction: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "compaction.retryCount")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_retry_count: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "compaction.force.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_force_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "compaction.sizeDeltaEstimation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_size_delta_estimation: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "compaction.disableEstimation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_disable_estimation: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "compaction.retainedGenerations")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_retained_generations: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "compaction.memoryThreshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_memory_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "compaction.progressLog")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compaction_progress_log: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "standby")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub standby: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "customBlobStore")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub custom_blob_store: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "customSegmentStore")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub custom_segment_store: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "splitPersistence")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub split_persistence: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "repository.backup.dir")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub repository_backup_dir: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "blobGcMaxAgeInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub blob_gc_max_age_in_secs: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "blobTrackSnapshotIntervalInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub blob_track_snapshot_interval_in_secs: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
    pub fn new() -> OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceProperties {
            repository_home: None,
            tarmk_mode: None,
            tarmk_size: None,
            segment_cache_size: None,
            string_cache_size: None,
            template_cache_size: None,
            string_deduplication_cache_size: None,
            template_deduplication_cache_size: None,
            node_deduplication_cache_size: None,
            pause_compaction: None,
            compaction_retry_count: None,
            compaction_force_timeout: None,
            compaction_size_delta_estimation: None,
            compaction_disable_estimation: None,
            compaction_retained_generations: None,
            compaction_memory_threshold: None,
            compaction_progress_log: None,
            standby: None,
            custom_blob_store: None,
            custom_segment_store: None,
            split_persistence: None,
            repository_backup_dir: None,
            blob_gc_max_age_in_secs: None,
            blob_track_snapshot_interval_in_secs: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties>,

}

impl OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo {
    pub fn new() -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo {
        OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    #[serde(rename = "org.apache.sling.installer.configuration.persist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_installer_configuration_persist: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "mode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mode: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "port")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub port: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "primary.host")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub primary_host: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "interval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "primary.allowed-client-ip-ranges")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub primary_allowed_client_ip_ranges: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "secure")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub secure: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "standby.readtimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub standby_readtimeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "standby.autoclean")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub standby_autoclean: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
    pub fn new() -> OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
        OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties {
            org_apache_sling_installer_configuration_persist: None,
            mode: None,
            port: None,
            primary_host: None,
            interval: None,
            primary_allowed_client_ip_ranges: None,
            secure: None,
            standby_readtimeout: None,
            standby_autoclean: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties>,

}

impl OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo {
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    #[serde(rename = "handler.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub handler_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "user.expirationTime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_expiration_time: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "user.autoMembership")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_auto_membership: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "user.propertyMapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_property_mapping: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "user.pathPrefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_path_prefix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "user.membershipExpTime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_membership_exp_time: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "user.membershipNestingDepth")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_membership_nesting_depth: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "user.dynamicMembership")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_dynamic_membership: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "user.disableMissing")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_disable_missing: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "group.expirationTime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_expiration_time: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "group.autoMembership")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_auto_membership: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "group.propertyMapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_property_mapping: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "group.pathPrefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_path_prefix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enableRFC7613UsercaseMappedProfile")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_rfc7613_usercase_mapped_profile: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {
            handler_name: None,
            user_expiration_time: None,
            user_auto_membership: None,
            user_property_mapping: None,
            user_path_prefix: None,
            user_membership_exp_time: None,
            user_membership_nesting_depth: None,
            user_dynamic_membership: None,
            user_disable_missing: None,
            group_expiration_time: None,
            group_auto_membership: None,
            group_property_mapping: None,
            group_path_prefix: None,
            enable_rfc7613_usercase_mapped_profile: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties>,

}

impl OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo {
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
    #[serde(rename = "jaas.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "jaas.controlFlag")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_control_flag: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jaas.realmName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jaas_realm_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "idp.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub idp_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sync.handlerName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sync_handler_name: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExProperties {
            jaas_ranking: None,
            jaas_control_flag: None,
            jaas_realm_name: None,
            idp_name: None,
            sync_handler_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties>,

}

impl OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo {
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties {
    #[serde(rename = "protectExternalId")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub protect_external_id: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties {
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrProperties {
            protect_external_id: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo {
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties {
    #[serde(rename = "cugSupportedPaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cug_supported_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "cugEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cug_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "configurationRanking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub configuration_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties {
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiProperties {
            cug_supported_paths: None,
            cug_enabled: None,
            configuration_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties>,

}

impl OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo {
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties {
    #[serde(rename = "principalNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub principal_names: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties {
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluProperties {
            principal_names: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo {
        OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
    #[serde(rename = "enabledActions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled_actions: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "userPrivilegeNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_privilege_names: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "groupPrivilegeNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub group_privilege_names: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "constraint")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub constraint: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
    pub fn new() -> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
        OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
            enabled_actions: None,
            user_privilege_names: None,
            group_privilege_names: None,
            constraint: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties>,

}

impl OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo {
    pub fn new() -> OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo {
        OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties {
    #[serde(rename = "packageRoots")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_roots: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties {
    pub fn new() -> OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties {
        OrgApacheJackrabbitVaultPackagingImplPackagingImplProperties {
            package_roots: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryProperties>,

}

impl OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryInfo {
    pub fn new() -> OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryInfo {
        OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryProperties {
    #[serde(rename = "homePath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub home_path: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryProperties {
    pub fn new() -> OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryProperties {
        OrgApacheJackrabbitVaultPackagingRegistryImplFsPackageRegistryProperties {
            home_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingAuthCoreImplLogoutServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingAuthCoreImplLogoutServletProperties>,

}

impl OrgApacheSlingAuthCoreImplLogoutServletInfo {
    pub fn new() -> OrgApacheSlingAuthCoreImplLogoutServletInfo {
        OrgApacheSlingAuthCoreImplLogoutServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingAuthCoreImplLogoutServletProperties {
    #[serde(rename = "sling.servlet.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_methods: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sling.servlet.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_paths: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingAuthCoreImplLogoutServletProperties {
    pub fn new() -> OrgApacheSlingAuthCoreImplLogoutServletProperties {
        OrgApacheSlingAuthCoreImplLogoutServletProperties {
            sling_servlet_methods: None,
            sling_servlet_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties>,

}

impl OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo {
    pub fn new() -> OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo {
        OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties {
    pub fn new() -> OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties {
        OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderProperties {
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplConfigurationResolverImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCaconfigImplConfigurationResolverImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingCaconfigImplConfigurationResolverImplInfo {
    pub fn new() -> OrgApacheSlingCaconfigImplConfigurationResolverImplInfo {
        OrgApacheSlingCaconfigImplConfigurationResolverImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplConfigurationResolverImplProperties {
    #[serde(rename = "configBucketNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub config_bucket_names: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingCaconfigImplConfigurationResolverImplProperties {
    pub fn new() -> OrgApacheSlingCaconfigImplConfigurationResolverImplProperties {
        OrgApacheSlingCaconfigImplConfigurationResolverImplProperties {
            config_bucket_names: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties>,

}

impl OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo {
    pub fn new() -> OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo {
        OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "configPropertyInheritancePropertyNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub config_property_inheritance_property_names: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties {
    pub fn new() -> OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties {
        OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraProperties {
            enabled: None,
            config_property_inheritance_property_names: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties>,

}

impl OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo {
    pub fn new() -> OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo {
        OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties {
    pub fn new() -> OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties {
        OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraProperties {
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties>,

}

impl OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo {
    pub fn new() -> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo {
        OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "overrides")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub overrides: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
    pub fn new() -> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
        OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
            description: None,
            overrides: None,
            enabled: None,
            service_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties>,

}

impl OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo {
    pub fn new() -> OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo {
        OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties {
    pub fn new() -> OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties {
        OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveProperties {
            enabled: None,
            service_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo {
    pub fn new() -> OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo {
        OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties {
    #[serde(rename = "ignorePropertyNameRegex")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ignore_property_name_regex: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "configCollectionPropertiesResourceNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub config_collection_properties_resource_names: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties {
    pub fn new() -> OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties {
        OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties {
            ignore_property_name_regex: None,
            config_collection_properties_resource_names: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo {
    pub fn new() -> OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo {
        OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "configPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub config_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "fallbackPaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub fallback_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "configCollectionInheritancePropertyNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub config_collection_inheritance_property_names: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties {
    pub fn new() -> OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties {
        OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourProperties {
            enabled: None,
            config_path: None,
            fallback_paths: None,
            config_collection_inheritance_property_names: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo {
    pub fn new() -> OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo {
        OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties {
    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "configRefResourceNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub config_ref_resource_names: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "configRefPropertyNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub config_ref_property_names: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties {
    pub fn new() -> OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties {
        OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties {
            enabled: None,
            config_ref_resource_names: None,
            config_ref_property_names: None,
            service_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties>,

}

impl OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo {
    pub fn new() -> OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo {
        OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties {
    #[serde(rename = "parser.features")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub parser_features: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties {
    pub fn new() -> OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties {
        OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserProperties {
            parser_features: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties>,

}

impl OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo {
    pub fn new() -> OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo {
        OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
    #[serde(rename = "org.apache.sling.commons.log.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_level: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "org.apache.sling.commons.log.file")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_file: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.commons.log.pattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_pattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.commons.log.names")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_names: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.sling.commons.log.additiv")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_additiv: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
    pub fn new() -> OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
        OrgApacheSlingCommonsLogLogManagerFactoryConfigProperties {
            org_apache_sling_commons_log_level: None,
            org_apache_sling_commons_log_file: None,
            org_apache_sling_commons_log_pattern: None,
            org_apache_sling_commons_log_names: None,
            org_apache_sling_commons_log_additiv: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties>,

}

impl OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo {
    pub fn new() -> OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo {
        OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties {
    #[serde(rename = "org.apache.sling.commons.log.file")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_file: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.commons.log.file.number")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_file_number: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.sling.commons.log.file.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_file_size: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.commons.log.file.buffered")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_file_buffered: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties {
    pub fn new() -> OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties {
        OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties {
            org_apache_sling_commons_log_file: None,
            org_apache_sling_commons_log_file_number: None,
            org_apache_sling_commons_log_file_size: None,
            org_apache_sling_commons_log_file_buffered: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsLogLogManagerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCommonsLogLogManagerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingCommonsLogLogManagerInfo {
    pub fn new() -> OrgApacheSlingCommonsLogLogManagerInfo {
        OrgApacheSlingCommonsLogLogManagerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsLogLogManagerProperties {
    #[serde(rename = "org.apache.sling.commons.log.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_level: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "org.apache.sling.commons.log.file")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_file: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.commons.log.file.number")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_file_number: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.sling.commons.log.file.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_file_size: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.commons.log.pattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_pattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.commons.log.configurationFile")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_configuration_file: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.commons.log.packagingDataEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_packaging_data_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "org.apache.sling.commons.log.maxCallerDataDepth")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_max_caller_data_depth: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.sling.commons.log.maxOldFileCountInDump")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_max_old_file_count_in_dump: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.sling.commons.log.numOfLines")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_commons_log_num_of_lines: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingCommonsLogLogManagerProperties {
    pub fn new() -> OrgApacheSlingCommonsLogLogManagerProperties {
        OrgApacheSlingCommonsLogLogManagerProperties {
            org_apache_sling_commons_log_level: None,
            org_apache_sling_commons_log_file: None,
            org_apache_sling_commons_log_file_number: None,
            org_apache_sling_commons_log_file_size: None,
            org_apache_sling_commons_log_pattern: None,
            org_apache_sling_commons_log_configuration_file: None,
            org_apache_sling_commons_log_packaging_data_enabled: None,
            org_apache_sling_commons_log_max_caller_data_depth: None,
            org_apache_sling_commons_log_max_old_file_count_in_dump: None,
            org_apache_sling_commons_log_num_of_lines: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsMetricsInternalLogReporterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCommonsMetricsInternalLogReporterProperties>,

}

impl OrgApacheSlingCommonsMetricsInternalLogReporterInfo {
    pub fn new() -> OrgApacheSlingCommonsMetricsInternalLogReporterInfo {
        OrgApacheSlingCommonsMetricsInternalLogReporterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
    #[serde(rename = "period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub period: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "timeUnit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub time_unit: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub level: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "loggerName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub logger_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "prefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub prefix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "pattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pattern: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "registryName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub registry_name: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
    pub fn new() -> OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
        OrgApacheSlingCommonsMetricsInternalLogReporterProperties {
            period: None,
            time_unit: None,
            level: None,
            logger_name: None,
            prefix: None,
            pattern: None,
            registry_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo {
    pub fn new() -> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo {
        OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
    #[serde(rename = "datasources")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub datasources: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "step")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub step: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "archives")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub archives: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
    pub fn new() -> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
        OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties {
            datasources: None,
            step: None,
            archives: None,
            path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo {
    pub fn new() -> OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo {
        OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties {
    #[serde(rename = "mime.types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mime_types: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties {
    pub fn new() -> OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties {
        OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplProperties {
            mime_types: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo {
    pub fn new() -> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo {
        OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
    #[serde(rename = "poolName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pool_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "allowedPoolNames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allowed_pool_names: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "scheduler.useleaderforsingle")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_useleaderforsingle: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "metrics.filters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub metrics_filters: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "slowThresholdMillis")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub slow_threshold_millis: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
    pub fn new() -> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
        OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties {
            pool_name: None,
            allowed_pool_names: None,
            scheduler_useleaderforsingle: None,
            metrics_filters: None,
            slow_threshold_millis: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties>,

}

impl OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo {
    pub fn new() -> OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo {
        OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties {
    #[serde(rename = "max.quartzJob.duration.acceptable")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_quartz_job_duration_acceptable: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties {
    pub fn new() -> OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties {
        OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckProperties {
            max_quartz_job_duration_acceptable: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties>,

}

impl OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo {
    pub fn new() -> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo {
        OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "minPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub min_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "queueSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxThreadAge")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_thread_age: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "keepAliveTime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub keep_alive_time: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "blockPolicy")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub block_policy: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "shutdownGraceful")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub shutdown_graceful: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "daemon")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub daemon: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "shutdownWaitTime")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub shutdown_wait_time: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority: Option<models::ConfigNodePropertyDropDown>,

}

impl OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties {
    pub fn new() -> OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties {
        OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties {
            name: None,
            min_pool_size: None,
            max_pool_size: None,
            queue_size: None,
            max_thread_age: None,
            keep_alive_time: None,
            block_policy: None,
            shutdown_graceful: None,
            daemon: None,
            shutdown_wait_time: None,
            priority: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDatasourceDataSourceFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDatasourceDataSourceFactoryProperties>,

}

impl OrgApacheSlingDatasourceDataSourceFactoryInfo {
    pub fn new() -> OrgApacheSlingDatasourceDataSourceFactoryInfo {
        OrgApacheSlingDatasourceDataSourceFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDatasourceDataSourceFactoryProperties {
    #[serde(rename = "datasource.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub datasource_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "datasource.svc.prop.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub datasource_svc_prop_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "driverClassName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub driver_class_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub url: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "username")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub username: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "defaultAutoCommit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_auto_commit: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "defaultReadOnly")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_read_only: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "defaultTransactionIsolation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_transaction_isolation: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "defaultCatalog")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_catalog: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "maxActive")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_active: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxIdle")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_idle: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "minIdle")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub min_idle: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "initialSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub initial_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxWait")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_wait: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxAge")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_age: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "testOnBorrow")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub test_on_borrow: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "testOnReturn")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub test_on_return: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "testWhileIdle")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub test_while_idle: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "validationQuery")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub validation_query: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "validationQueryTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub validation_query_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "timeBetweenEvictionRunsMillis")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub time_between_eviction_runs_millis: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "minEvictableIdleTimeMillis")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub min_evictable_idle_time_millis: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "connectionProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connection_properties: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "initSQL")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub init_sql: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jdbcInterceptors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jdbc_interceptors: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "validationInterval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub validation_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "logValidationErrors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub log_validation_errors: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "datasource.svc.properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub datasource_svc_properties: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingDatasourceDataSourceFactoryProperties {
    pub fn new() -> OrgApacheSlingDatasourceDataSourceFactoryProperties {
        OrgApacheSlingDatasourceDataSourceFactoryProperties {
            datasource_name: None,
            datasource_svc_prop_name: None,
            driver_class_name: None,
            url: None,
            username: None,
            password: None,
            default_auto_commit: None,
            default_read_only: None,
            default_transaction_isolation: None,
            default_catalog: None,
            max_active: None,
            max_idle: None,
            min_idle: None,
            initial_size: None,
            max_wait: None,
            max_age: None,
            test_on_borrow: None,
            test_on_return: None,
            test_while_idle: None,
            validation_query: None,
            validation_query_timeout: None,
            time_between_eviction_runs_millis: None,
            min_evictable_idle_time_millis: None,
            connection_properties: None,
            init_sql: None,
            jdbc_interceptors: None,
            validation_interval: None,
            log_validation_errors: None,
            datasource_svc_properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDatasourceJndiDataSourceFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDatasourceJndiDataSourceFactoryProperties>,

}

impl OrgApacheSlingDatasourceJndiDataSourceFactoryInfo {
    pub fn new() -> OrgApacheSlingDatasourceJndiDataSourceFactoryInfo {
        OrgApacheSlingDatasourceJndiDataSourceFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
    #[serde(rename = "datasource.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub datasource_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "datasource.svc.prop.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub datasource_svc_prop_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "datasource.jndi.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub datasource_jndi_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jndi.properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jndi_properties: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
    pub fn new() -> OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
        OrgApacheSlingDatasourceJndiDataSourceFactoryProperties {
            datasource_name: None,
            datasource_svc_prop_name: None,
            datasource_jndi_name: None,
            jndi_properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDiscoveryOakConfigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDiscoveryOakConfigProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingDiscoveryOakConfigInfo {
    pub fn new() -> OrgApacheSlingDiscoveryOakConfigInfo {
        OrgApacheSlingDiscoveryOakConfigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDiscoveryOakConfigProperties {
    #[serde(rename = "connectorPingTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connector_ping_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "connectorPingInterval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub connector_ping_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "discoveryLiteCheckInterval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub discovery_lite_check_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "clusterSyncServiceTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_sync_service_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "clusterSyncServiceInterval")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cluster_sync_service_interval: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "enableSyncToken")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_sync_token: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "minEventDelay")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub min_event_delay: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "socketConnectTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub socket_connect_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "soTimeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub so_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "topologyConnectorUrls")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub topology_connector_urls: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "topologyConnectorWhitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub topology_connector_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "autoStopLocalLoopEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auto_stop_local_loop_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "gzipConnectorRequestsEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub gzip_connector_requests_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "hmacEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hmac_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "enableEncryption")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_encryption: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "sharedKey")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub shared_key: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "hmacSharedKeyTTL")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hmac_shared_key_ttl: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "backoffStandbyFactor")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub backoff_standby_factor: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "backoffStableFactor")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub backoff_stable_factor: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDiscoveryOakConfigProperties {
    pub fn new() -> OrgApacheSlingDiscoveryOakConfigProperties {
        OrgApacheSlingDiscoveryOakConfigProperties {
            connector_ping_timeout: None,
            connector_ping_interval: None,
            discovery_lite_check_interval: None,
            cluster_sync_service_timeout: None,
            cluster_sync_service_interval: None,
            enable_sync_token: None,
            min_event_delay: None,
            socket_connect_timeout: None,
            so_timeout: None,
            topology_connector_urls: None,
            topology_connector_whitelist: None,
            auto_stop_local_loop_enabled: None,
            gzip_connector_requests_enabled: None,
            hmac_enabled: None,
            enable_encryption: None,
            shared_key: None,
            hmac_shared_key_ttl: None,
            backoff_standby_factor: None,
            backoff_stable_factor: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties>,

}

impl OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo {
    pub fn new() -> OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo {
        OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties {
    #[serde(rename = "hc.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "hc.mbean.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_mbean_name: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties {
    pub fn new() -> OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties {
        OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckProperties {
            hc_name: None,
            hc_tags: None,
            hc_mbean_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties>,

}

impl OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo {
    pub fn new() -> OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo {
        OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "details")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub details: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "log.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub log_level: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "allowed.roots")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allowed_roots: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "queue.processing.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_processing_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "packageImporter.endpoints")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_importer_endpoints: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "passiveQueues")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub passive_queues: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "priorityQueues")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority_queues: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "retry.strategy")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub retry_strategy: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "retry.attempts")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub retry_attempts: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "requestAuthorizationStrategy.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_authorization_strategy_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "transportSecretProvider.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub transport_secret_provider_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "packageBuilder.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_builder_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "triggers.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub triggers_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "queue.provider")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_provider: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "async.delivery")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub async_delivery: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "http.conn.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub http_conn_timeout: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties {
    pub fn new() -> OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties {
        OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties {
            name: None,
            title: None,
            details: None,
            enabled: None,
            service_name: None,
            log_level: None,
            allowed_roots: None,
            queue_processing_enabled: None,
            package_importer_endpoints: None,
            passive_queues: None,
            priority_queues: None,
            retry_strategy: None,
            retry_attempts: None,
            request_authorization_strategy_target: None,
            transport_secret_provider_target: None,
            package_builder_target: None,
            triggers_target: None,
            queue_provider: None,
            async_delivery: None,
            http_conn_timeout: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties>,

}

impl OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo {
    pub fn new() -> OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo {
        OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jcrPrivilege")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jcr_privilege: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties {
    pub fn new() -> OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties {
        OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAProperties {
            name: None,
            jcr_privilege: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties>,

}

impl OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo {
    pub fn new() -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo {
        OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "details")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub details: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "log.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub log_level: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "allowed.roots")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allowed_roots: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "requestAuthorizationStrategy.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_authorization_strategy_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "queueProviderFactory.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_provider_factory_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "packageBuilder.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_builder_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "triggers.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub triggers_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "priorityQueues")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub priority_queues: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
    pub fn new() -> OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
        OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties {
            name: None,
            title: None,
            details: None,
            enabled: None,
            service_name: None,
            log_level: None,
            allowed_roots: None,
            request_authorization_strategy_target: None,
            queue_provider_factory_target: None,
            package_builder_target: None,
            triggers_target: None,
            priority_queues: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties>,

}

impl OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo {
    pub fn new() -> OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo {
        OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "details")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub details: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "log.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub log_level: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "queue.processing.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_processing_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "packageExporter.endpoints")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_exporter_endpoints: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "pull.items")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pull_items: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "http.conn.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub http_conn_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "requestAuthorizationStrategy.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_authorization_strategy_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "transportSecretProvider.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub transport_secret_provider_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "packageBuilder.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_builder_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "triggers.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub triggers_target: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties {
    pub fn new() -> OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties {
        OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties {
            name: None,
            title: None,
            details: None,
            enabled: None,
            service_name: None,
            log_level: None,
            queue_processing_enabled: None,
            package_exporter_endpoints: None,
            pull_items: None,
            http_conn_timeout: None,
            request_authorization_strategy_target: None,
            transport_secret_provider_target: None,
            package_builder_target: None,
            triggers_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties>,

}

impl OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo {
    pub fn new() -> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo {
        OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "details")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub details: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "log.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub log_level: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "queue.processing.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_processing_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "packageExporter.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_exporter_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "packageImporter.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_importer_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "requestAuthorizationStrategy.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_authorization_strategy_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "triggers.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub triggers_target: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties {
    pub fn new() -> OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties {
        OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorProperties {
            name: None,
            title: None,
            details: None,
            enabled: None,
            service_name: None,
            log_level: None,
            queue_processing_enabled: None,
            package_exporter_target: None,
            package_importer_target: None,
            request_authorization_strategy_target: None,
            triggers_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties>,

}

impl OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo {
    pub fn new() -> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo {
        OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "details")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub details: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "log.level")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub log_level: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "queue.processing.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_processing_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "passiveQueues")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub passive_queues: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "packageExporter.endpoints")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_exporter_endpoints: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "packageImporter.endpoints")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_importer_endpoints: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "retry.strategy")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub retry_strategy: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "retry.attempts")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub retry_attempts: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "pull.items")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pull_items: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "http.conn.timeout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub http_conn_timeout: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "requestAuthorizationStrategy.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_authorization_strategy_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "transportSecretProvider.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub transport_secret_provider_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "packageBuilder.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_builder_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "triggers.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub triggers_target: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties {
    pub fn new() -> OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties {
        OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryProperties {
            name: None,
            title: None,
            details: None,
            enabled: None,
            service_name: None,
            log_level: None,
            queue_processing_enabled: None,
            passive_queues: None,
            package_exporter_endpoints: None,
            package_importer_endpoints: None,
            retry_strategy: None,
            retry_attempts: None,
            pull_items: None,
            http_conn_timeout: None,
            request_authorization_strategy_target: None,
            transport_secret_provider_target: None,
            package_builder_target: None,
            triggers_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties>,

}

impl OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo {
    pub fn new() -> OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo {
        OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties {
    #[serde(rename = "hc.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "hc.mbean.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_mbean_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "numberOfRetriesAllowed")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub number_of_retries_allowed: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties {
    pub fn new() -> OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties {
        OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckProperties {
            hc_name: None,
            hc_tags: None,
            hc_mbean_name: None,
            number_of_retries_allowed: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties>,

}

impl OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo {
        OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "queue")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "drop.invalid.items")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub drop_invalid_items: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "agent.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub agent_target: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
        OrgApacheSlingDistributionPackagingImplExporterAgentDistributioProperties {
            name: None,
            queue: None,
            drop_invalid_items: None,
            agent_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties>,

}

impl OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo {
        OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "packageBuilder.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_builder_target: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties {
        OrgApacheSlingDistributionPackagingImplExporterLocalDistributioProperties {
            name: None,
            package_builder_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties>,

}

impl OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo {
        OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "endpoints")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub endpoints: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "pull.items")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pull_items: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "packageBuilder.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_builder_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "transportSecretProvider.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub transport_secret_provider_target: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
        OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties {
            name: None,
            endpoints: None,
            pull_items: None,
            package_builder_target: None,
            transport_secret_provider_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties>,

}

impl OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo {
        OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "packageBuilder.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_builder_target: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties {
        OrgApacheSlingDistributionPackagingImplImporterLocalDistributioProperties {
            name: None,
            package_builder_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties>,

}

impl OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo {
        OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "endpoints")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub endpoints: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "transportSecretProvider.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub transport_secret_provider_target: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties {
        OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiProperties {
            name: None,
            endpoints: None,
            transport_secret_provider_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties>,

}

impl OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo {
        OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "service.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "privilege.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub privilege_name: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties {
    pub fn new() -> OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties {
        OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriProperties {
            name: None,
            service_name: None,
            path: None,
            privilege_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties>,

}

impl OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo {
    pub fn new() -> OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo {
        OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties {
    #[serde(rename = "provider.roots")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_roots: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "kind")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub kind: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties {
    pub fn new() -> OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties {
        OrgApacheSlingDistributionResourcesImplDistributionConfigurationProperties {
            provider_roots: None,
            kind: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties>,

}

impl OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo {
    pub fn new() -> OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo {
        OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties {
    #[serde(rename = "provider.roots")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_roots: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "kind")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub kind: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties {
    pub fn new() -> OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties {
        OrgApacheSlingDistributionResourcesImplDistributionServiceResourProperties {
            provider_roots: None,
            kind: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties>,

}

impl OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo {
    pub fn new() -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo {
        OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub _type: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "format.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub format_target: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "tempFsFolder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub temp_fs_folder: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "fileThreshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub file_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "memoryUnit")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub memory_unit: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "useOffHeapMemory")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub use_off_heap_memory: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "digestAlgorithm")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub digest_algorithm: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "monitoringQueueSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub monitoring_queue_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cleanupDelay")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cleanup_delay: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "package.filters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_filters: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "property.filters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub property_filters: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
    pub fn new() -> OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
        OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties {
            name: None,
            _type: None,
            format_target: None,
            temp_fs_folder: None,
            file_threshold: None,
            memory_unit: None,
            use_off_heap_memory: None,
            digest_algorithm: None,
            monitoring_queue_size: None,
            cleanup_delay: None,
            package_filters: None,
            property_filters: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties>,

}

impl OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo {
    pub fn new() -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo {
        OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub _type: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "importMode")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub import_mode: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "aclHandling")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub acl_handling: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "package.roots")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_roots: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "package.filters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub package_filters: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "property.filters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub property_filters: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "tempFsFolder")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub temp_fs_folder: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "useBinaryReferences")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub use_binary_references: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "autoSaveThreshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auto_save_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cleanupDelay")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cleanup_delay: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "fileThreshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub file_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "MEGA_BYTES")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mega_bytes: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "useOffHeapMemory")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub use_off_heap_memory: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "digestAlgorithm")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub digest_algorithm: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "monitoringQueueSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub monitoring_queue_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "pathsMapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub paths_mapping: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "strictImport")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub strict_import: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
    pub fn new() -> OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
        OrgApacheSlingDistributionSerializationImplVltVaultDistributionProperties {
            name: None,
            _type: None,
            import_mode: None,
            acl_handling: None,
            package_roots: None,
            package_filters: None,
            property_filters: None,
            temp_fs_folder: None,
            use_binary_references: None,
            auto_save_threshold: None,
            cleanup_delay: None,
            file_threshold: None,
            mega_bytes: None,
            use_off_heap_memory: None,
            digest_algorithm: None,
            monitoring_queue_size: None,
            paths_mapping: None,
            strict_import: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties>,

}

impl OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo {
    pub fn new() -> OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo {
        OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "username")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub username: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub password: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties {
    pub fn new() -> OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties {
        OrgApacheSlingDistributionTransportImplUserCredentialsDistributiProperties {
            name: None,
            username: None,
            password: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties>,

}

impl OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo {
        OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties {
        OrgApacheSlingDistributionTriggerImplDistributionEventDistributeProperties {
            name: None,
            path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties>,

}

impl OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo {
        OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "ignoredPathsPatterns")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ignored_paths_patterns: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "deep")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub deep: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
        OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerProperties {
            name: None,
            path: None,
            ignored_paths_patterns: None,
            service_name: None,
            deep: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties>,

}

impl OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo {
        OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "nuggetsPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub nuggets_path: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties {
        OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiProperties {
            name: None,
            path: None,
            service_name: None,
            nuggets_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties>,

}

impl OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo {
        OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "endpoint")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub endpoint: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "transportSecretProvider.target")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub transport_secret_provider_target: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties {
        OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigProperties {
            name: None,
            endpoint: None,
            transport_secret_provider_target: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties>,

}

impl OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo {
        OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties {
        OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrProperties {
            name: None,
            path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties>,

}

impl OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo {
        OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "seconds")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub seconds: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "serviceName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_name: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties {
    pub fn new() -> OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties {
        OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties {
            name: None,
            path: None,
            seconds: None,
            service_name: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo {
    pub fn new() -> OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo {
        OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    #[serde(rename = "osgi.http.whiteboard.context.select")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub osgi_http_whiteboard_context_select: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "osgi.http.whiteboard.listener")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub osgi_http_whiteboard_listener: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.sudo.cookie")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_sudo_cookie: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.sudo.parameter")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_sudo_parameter: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.annonymous")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_annonymous: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "sling.auth.requirements")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_auth_requirements: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sling.auth.anonymous.user")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_auth_anonymous_user: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.auth.anonymous.password")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_auth_anonymous_password: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.http")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_http: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "auth.http.realm")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_http_realm: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "auth.uri.suffix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub auth_uri_suffix: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
    pub fn new() -> OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
        OrgApacheSlingEngineImplAuthSlingAuthenticatorProperties {
            osgi_http_whiteboard_context_select: None,
            osgi_http_whiteboard_listener: None,
            auth_sudo_cookie: None,
            auth_sudo_parameter: None,
            auth_annonymous: None,
            sling_auth_requirements: None,
            sling_auth_anonymous_user: None,
            sling_auth_anonymous_password: None,
            auth_http: None,
            auth_http_realm: None,
            auth_uri_suffix: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties>,

}

impl OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo {
    pub fn new() -> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo {
        OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
    #[serde(rename = "extensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub extensions: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "minDurationMs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub min_duration_ms: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "maxDurationMs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_duration_ms: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "compactLogFormat")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub compact_log_format: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
    pub fn new() -> OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
        OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties {
            extensions: None,
            min_duration_ms: None,
            max_duration_ms: None,
            compact_log_format: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplLogRequestLoggerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingEngineImplLogRequestLoggerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingEngineImplLogRequestLoggerInfo {
    pub fn new() -> OrgApacheSlingEngineImplLogRequestLoggerInfo {
        OrgApacheSlingEngineImplLogRequestLoggerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplLogRequestLoggerProperties {
    #[serde(rename = "request.log.output")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_log_output: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "request.log.outputtype")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_log_outputtype: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "request.log.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_log_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "access.log.output")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub access_log_output: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "access.log.outputtype")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub access_log_outputtype: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "access.log.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub access_log_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingEngineImplLogRequestLoggerProperties {
    pub fn new() -> OrgApacheSlingEngineImplLogRequestLoggerProperties {
        OrgApacheSlingEngineImplLogRequestLoggerProperties {
            request_log_output: None,
            request_log_outputtype: None,
            request_log_enabled: None,
            access_log_output: None,
            access_log_outputtype: None,
            access_log_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplLogRequestLoggerServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingEngineImplLogRequestLoggerServiceProperties>,

}

impl OrgApacheSlingEngineImplLogRequestLoggerServiceInfo {
    pub fn new() -> OrgApacheSlingEngineImplLogRequestLoggerServiceInfo {
        OrgApacheSlingEngineImplLogRequestLoggerServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
    #[serde(rename = "request.log.service.format")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_log_service_format: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "request.log.service.output")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_log_service_output: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "request.log.service.outputtype")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_log_service_outputtype: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "request.log.service.onentry")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_log_service_onentry: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
    pub fn new() -> OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
        OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
            request_log_service_format: None,
            request_log_service_output: None,
            request_log_service_outputtype: None,
            request_log_service_onentry: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplSlingMainServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingEngineImplSlingMainServletProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingEngineImplSlingMainServletInfo {
    pub fn new() -> OrgApacheSlingEngineImplSlingMainServletInfo {
        OrgApacheSlingEngineImplSlingMainServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplSlingMainServletProperties {
    #[serde(rename = "sling.max.calls")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_max_calls: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "sling.max.inclusions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_max_inclusions: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "sling.trace.allow")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_trace_allow: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "sling.max.record.requests")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_max_record_requests: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "sling.store.pattern.requests")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_store_pattern_requests: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sling.serverinfo")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_serverinfo: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.additional.response.headers")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_additional_response_headers: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingEngineImplSlingMainServletProperties {
    pub fn new() -> OrgApacheSlingEngineImplSlingMainServletProperties {
        OrgApacheSlingEngineImplSlingMainServletProperties {
            sling_max_calls: None,
            sling_max_inclusions: None,
            sling_trace_allow: None,
            sling_max_record_requests: None,
            sling_store_pattern_requests: None,
            sling_serverinfo: None,
            sling_additional_response_headers: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineParametersInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingEngineParametersProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingEngineParametersInfo {
    pub fn new() -> OrgApacheSlingEngineParametersInfo {
        OrgApacheSlingEngineParametersInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineParametersProperties {
    #[serde(rename = "sling.default.parameter.encoding")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_default_parameter_encoding: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.default.max.parameters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_default_max_parameters: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "file.location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub file_location: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "file.threshold")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub file_threshold: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "file.max")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub file_max: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "request.max")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub request_max: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "sling.default.parameter.checkForAdditionalContainerParameters")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_default_parameter_check_for_additional_container_parameters: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingEngineParametersProperties {
    pub fn new() -> OrgApacheSlingEngineParametersProperties {
        OrgApacheSlingEngineParametersProperties {
            sling_default_parameter_encoding: None,
            sling_default_max_parameters: None,
            file_location: None,
            file_threshold: None,
            file_max: None,
            request_max: None,
            sling_default_parameter_check_for_additional_container_parameters: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEventImplEventingThreadPoolInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingEventImplEventingThreadPoolProperties>,

}

impl OrgApacheSlingEventImplEventingThreadPoolInfo {
    pub fn new() -> OrgApacheSlingEventImplEventingThreadPoolInfo {
        OrgApacheSlingEventImplEventingThreadPoolInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEventImplEventingThreadPoolProperties {
    #[serde(rename = "minPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub min_pool_size: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingEventImplEventingThreadPoolProperties {
    pub fn new() -> OrgApacheSlingEventImplEventingThreadPoolProperties {
        OrgApacheSlingEventImplEventingThreadPoolProperties {
            min_pool_size: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEventImplJobsDefaultJobManagerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingEventImplJobsDefaultJobManagerProperties>,

}

impl OrgApacheSlingEventImplJobsDefaultJobManagerInfo {
    pub fn new() -> OrgApacheSlingEventImplJobsDefaultJobManagerInfo {
        OrgApacheSlingEventImplJobsDefaultJobManagerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEventImplJobsDefaultJobManagerProperties {
    #[serde(rename = "queue.priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_priority: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "queue.retries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_retries: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "queue.retrydelay")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_retrydelay: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "queue.maxparallel")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_maxparallel: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingEventImplJobsDefaultJobManagerProperties {
    pub fn new() -> OrgApacheSlingEventImplJobsDefaultJobManagerProperties {
        OrgApacheSlingEventImplJobsDefaultJobManagerProperties {
            queue_priority: None,
            queue_retries: None,
            queue_retrydelay: None,
            queue_maxparallel: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo {
    pub fn new() -> OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo {
        OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties {
    #[serde(rename = "job.consumermanager.disableDistribution")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_consumermanager_disable_distribution: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "startup.delay")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub startup_delay: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cleanup.period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cleanup_period: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties {
    pub fn new() -> OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties {
        OrgApacheSlingEventImplJobsJcrPersistenceHandlerProperties {
            job_consumermanager_disable_distribution: None,
            startup_delay: None,
            cleanup_period: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEventImplJobsJobConsumerManagerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingEventImplJobsJobConsumerManagerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingEventImplJobsJobConsumerManagerInfo {
    pub fn new() -> OrgApacheSlingEventImplJobsJobConsumerManagerInfo {
        OrgApacheSlingEventImplJobsJobConsumerManagerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEventImplJobsJobConsumerManagerProperties {
    #[serde(rename = "org.apache.sling.installer.configuration.persist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_installer_configuration_persist: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "job.consumermanager.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_consumermanager_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "job.consumermanager.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub job_consumermanager_blacklist: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingEventImplJobsJobConsumerManagerProperties {
    pub fn new() -> OrgApacheSlingEventImplJobsJobConsumerManagerProperties {
        OrgApacheSlingEventImplJobsJobConsumerManagerProperties {
            org_apache_sling_installer_configuration_persist: None,
            job_consumermanager_whitelist: None,
            job_consumermanager_blacklist: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEventJobsQueueConfigurationInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingEventJobsQueueConfigurationProperties>,

}

impl OrgApacheSlingEventJobsQueueConfigurationInfo {
    pub fn new() -> OrgApacheSlingEventJobsQueueConfigurationInfo {
        OrgApacheSlingEventJobsQueueConfigurationInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingEventJobsQueueConfigurationProperties {
    #[serde(rename = "queue.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "queue.topics")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_topics: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "queue.type")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_type: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "queue.priority")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_priority: Option<models::ConfigNodePropertyDropDown>,

    #[serde(rename = "queue.retries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_retries: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "queue.retrydelay")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_retrydelay: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "queue.maxparallel")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_maxparallel: Option<models::ConfigNodePropertyFloat>,

    #[serde(rename = "queue.keepJobs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_keep_jobs: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "queue.preferRunOnCreationInstance")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_prefer_run_on_creation_instance: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "queue.threadPoolSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub queue_thread_pool_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingEventJobsQueueConfigurationProperties {
    pub fn new() -> OrgApacheSlingEventJobsQueueConfigurationProperties {
        OrgApacheSlingEventJobsQueueConfigurationProperties {
            queue_name: None,
            queue_topics: None,
            queue_type: None,
            queue_priority: None,
            queue_retries: None,
            queue_retrydelay: None,
            queue_maxparallel: None,
            queue_keep_jobs: None,
            queue_prefer_run_on_creation_instance: None,
            queue_thread_pool_size: None,
            service_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties>,

}

impl OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo {
    pub fn new() -> OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo {
        OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties {
    #[serde(rename = "users")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub users: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "groups")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub groups: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties {
    pub fn new() -> OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties {
        OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWProperties {
            users: None,
            groups: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingFeatureflagsFeatureInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingFeatureflagsFeatureProperties>,

}

impl OrgApacheSlingFeatureflagsFeatureInfo {
    pub fn new() -> OrgApacheSlingFeatureflagsFeatureInfo {
        OrgApacheSlingFeatureflagsFeatureInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingFeatureflagsFeatureProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingFeatureflagsFeatureProperties {
    pub fn new() -> OrgApacheSlingFeatureflagsFeatureProperties {
        OrgApacheSlingFeatureflagsFeatureProperties {
            name: None,
            description: None,
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties>,

}

impl OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo {
    pub fn new() -> OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo {
        OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties {
    #[serde(rename = "name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties {
    pub fn new() -> OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties {
        OrgApacheSlingFeatureflagsImplConfiguredFeatureProperties {
            name: None,
            description: None,
            enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHapiImplHApiUtilImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingHapiImplHApiUtilImplProperties>,

}

impl OrgApacheSlingHapiImplHApiUtilImplInfo {
    pub fn new() -> OrgApacheSlingHapiImplHApiUtilImplInfo {
        OrgApacheSlingHapiImplHApiUtilImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHapiImplHApiUtilImplProperties {
    #[serde(rename = "org.apache.sling.hapi.tools.resourcetype")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_hapi_tools_resourcetype: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.hapi.tools.collectionresourcetype")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_hapi_tools_collectionresourcetype: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.hapi.tools.searchpaths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_hapi_tools_searchpaths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "org.apache.sling.hapi.tools.externalurl")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_hapi_tools_externalurl: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "org.apache.sling.hapi.tools.enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_hapi_tools_enabled: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingHapiImplHApiUtilImplProperties {
    pub fn new() -> OrgApacheSlingHapiImplHApiUtilImplProperties {
        OrgApacheSlingHapiImplHApiUtilImplProperties {
            org_apache_sling_hapi_tools_resourcetype: None,
            org_apache_sling_hapi_tools_collectionresourcetype: None,
            org_apache_sling_hapi_tools_searchpaths: None,
            org_apache_sling_hapi_tools_externalurl: None,
            org_apache_sling_hapi_tools_enabled: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplCompositeHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingHcCoreImplCompositeHealthCheckProperties>,

}

impl OrgApacheSlingHcCoreImplCompositeHealthCheckInfo {
    pub fn new() -> OrgApacheSlingHcCoreImplCompositeHealthCheckInfo {
        OrgApacheSlingHcCoreImplCompositeHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplCompositeHealthCheckProperties {
    #[serde(rename = "hc.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "hc.mbean.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_mbean_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "filter.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "filter.combineTagsWithOr")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_combine_tags_with_or: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingHcCoreImplCompositeHealthCheckProperties {
    pub fn new() -> OrgApacheSlingHcCoreImplCompositeHealthCheckProperties {
        OrgApacheSlingHcCoreImplCompositeHealthCheckProperties {
            hc_name: None,
            hc_tags: None,
            hc_mbean_name: None,
            filter_tags: None,
            filter_combine_tags_with_or: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties>,

}

impl OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo {
    pub fn new() -> OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo {
        OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties {
    #[serde(rename = "timeoutInMs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub timeout_in_ms: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "longRunningFutureThresholdForCriticalMs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub long_running_future_threshold_for_critical_ms: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "resultCacheTtlInMs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub result_cache_ttl_in_ms: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties {
    pub fn new() -> OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties {
        OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplProperties {
            timeout_in_ms: None,
            long_running_future_threshold_for_critical_ms: None,
            result_cache_ttl_in_ms: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties>,

}

impl OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo {
    pub fn new() -> OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo {
        OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
    #[serde(rename = "hc.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "hc.mbean.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_mbean_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "mbean.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub mbean_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "attribute.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attribute_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "attribute.value.constraint")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub attribute_value_constraint: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
    pub fn new() -> OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
        OrgApacheSlingHcCoreImplJmxAttributeHealthCheckProperties {
            hc_name: None,
            hc_tags: None,
            hc_mbean_name: None,
            mbean_name: None,
            attribute_name: None,
            attribute_value_constraint: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplScriptableHealthCheckInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingHcCoreImplScriptableHealthCheckProperties>,

}

impl OrgApacheSlingHcCoreImplScriptableHealthCheckInfo {
    pub fn new() -> OrgApacheSlingHcCoreImplScriptableHealthCheckInfo {
        OrgApacheSlingHcCoreImplScriptableHealthCheckInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplScriptableHealthCheckProperties {
    #[serde(rename = "hc.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "hc.tags")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_tags: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "hc.mbean.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub hc_mbean_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "language.extension")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub language_extension: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingHcCoreImplScriptableHealthCheckProperties {
    pub fn new() -> OrgApacheSlingHcCoreImplScriptableHealthCheckProperties {
        OrgApacheSlingHcCoreImplScriptableHealthCheckProperties {
            hc_name: None,
            hc_tags: None,
            hc_mbean_name: None,
            expression: None,
            language_extension: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties>,

}

impl OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo {
    pub fn new() -> OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo {
        OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {
    #[serde(rename = "servletPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servlet_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "disabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub disabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "cors.accessControlAllowOrigin")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cors_access_control_allow_origin: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {
    pub fn new() -> OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {
        OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {
            servlet_path: None,
            disabled: None,
            cors_access_control_allow_origin: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties>,

}

impl OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo {
    pub fn new() -> OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo {
        OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties {
    #[serde(rename = "totalWidth")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub total_width: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "colWidthName")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub col_width_name: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "colWidthResult")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub col_width_result: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "colWidthTiming")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub col_width_timing: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties {
    pub fn new() -> OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties {
        OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties {
            total_width: None,
            col_width_name: None,
            col_width_result: None,
            col_width_timing: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingI18nImplI18NFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingI18nImplI18NFilterProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingI18nImplI18NFilterInfo {
    pub fn new() -> OrgApacheSlingI18nImplI18NFilterInfo {
        OrgApacheSlingI18nImplI18NFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingI18nImplI18NFilterProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "sling.filter.scope")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_filter_scope: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingI18nImplI18NFilterProperties {
    pub fn new() -> OrgApacheSlingI18nImplI18NFilterProperties {
        OrgApacheSlingI18nImplI18NFilterProperties {
            service_ranking: None,
            sling_filter_scope: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingI18nImplJcrResourceBundleProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingI18nImplJcrResourceBundleProviderProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingI18nImplJcrResourceBundleProviderInfo {
    pub fn new() -> OrgApacheSlingI18nImplJcrResourceBundleProviderInfo {
        OrgApacheSlingI18nImplJcrResourceBundleProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {
    #[serde(rename = "locale.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub locale_default: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "preload.bundles")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub preload_bundles: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "invalidation.delay")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub invalidation_delay: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {
    pub fn new() -> OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {
        OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {
            locale_default: None,
            preload_bundles: None,
            invalidation_delay: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo {
    pub fn new() -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo {
        OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
    #[serde(rename = "handler.schemes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub handler_schemes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sling.jcrinstall.folder.name.regexp")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_jcrinstall_folder_name_regexp: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.jcrinstall.folder.max.depth")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_jcrinstall_folder_max_depth: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "sling.jcrinstall.search.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_jcrinstall_search_path: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sling.jcrinstall.new.config.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_jcrinstall_new_config_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.jcrinstall.signal.path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_jcrinstall_signal_path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.jcrinstall.enable.writeback")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_jcrinstall_enable_writeback: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
    pub fn new() -> OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
        OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {
            handler_schemes: None,
            sling_jcrinstall_folder_name_regexp: None,
            sling_jcrinstall_folder_max_depth: None,
            sling_jcrinstall_search_path: None,
            sling_jcrinstall_new_config_path: None,
            sling_jcrinstall_signal_path: None,
            sling_jcrinstall_enable_writeback: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties>,

}

impl OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo {
    pub fn new() -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo {
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties {
    #[serde(rename = "whitelist.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub whitelist_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "whitelist.bundles")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub whitelist_bundles: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties {
    pub fn new() -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties {
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties {
            whitelist_name: None,
            whitelist_bundles: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties>,

}

impl OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo {
    pub fn new() -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo {
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties {
    #[serde(rename = "whitelist.bypass")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub whitelist_bypass: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "whitelist.bundles.regexp")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub whitelist_bundles_regexp: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties {
    pub fn new() -> OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties {
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties {
            whitelist_bypass: None,
            whitelist_bundles_regexp: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties>,

}

impl OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo {
    pub fn new() -> OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo {
        OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties {
    #[serde(rename = "alias")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub alias: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "dav.create-absolute-uri")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dav_create_absolute_uri: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "dav.protectedhandlers")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dav_protectedhandlers: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties {
    pub fn new() -> OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties {
        OrgApacheSlingJcrDavexImplServletsSlingDavExServletProperties {
            alias: None,
            dav_create_absolute_uri: None,
            dav_protectedhandlers: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties>,

}

impl OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo {
    pub fn new() -> OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo {
        OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties {
    #[serde(rename = "java.naming.factory.initial")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub java_naming_factory_initial: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "java.naming.provider.url")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub java_naming_provider_url: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties {
    pub fn new() -> OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties {
        OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportProperties {
            java_naming_factory_initial: None,
            java_naming_provider_url: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties>,

}

impl OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo {
    pub fn new() -> OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo {
        OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties {
    #[serde(rename = "port")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub port: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties {
    pub fn new() -> OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties {
        OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportProperties {
            port: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo {
    pub fn new() -> OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo {
        OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties {
    #[serde(rename = "references")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub references: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties {
    pub fn new() -> OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties {
        OrgApacheSlingJcrRepoinitImplRepositoryInitializerProperties {
            references: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrRepoinitRepositoryInitializerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrRepoinitRepositoryInitializerProperties>,

}

impl OrgApacheSlingJcrRepoinitRepositoryInitializerInfo {
    pub fn new() -> OrgApacheSlingJcrRepoinitRepositoryInitializerInfo {
        OrgApacheSlingJcrRepoinitRepositoryInitializerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrRepoinitRepositoryInitializerProperties {
    #[serde(rename = "references")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub references: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "scripts")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scripts: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingJcrRepoinitRepositoryInitializerProperties {
    pub fn new() -> OrgApacheSlingJcrRepoinitRepositoryInitializerProperties {
        OrgApacheSlingJcrRepoinitRepositoryInitializerProperties {
            references: None,
            scripts: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo {
    pub fn new() -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo {
        OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    #[serde(rename = "resource.resolver.searchpath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_searchpath: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "resource.resolver.manglenamespaces")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_manglenamespaces: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "resource.resolver.allowDirect")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_allow_direct: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "resource.resolver.required.providers")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_required_providers: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "resource.resolver.required.providernames")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_required_providernames: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "resource.resolver.virtual")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_virtual: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "resource.resolver.mapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_mapping: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "resource.resolver.map.location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_map_location: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "resource.resolver.map.observation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_map_observation: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "resource.resolver.default.vanity.redirect.status")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_default_vanity_redirect_status: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "resource.resolver.enable.vanitypath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_enable_vanitypath: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "resource.resolver.vanitypath.maxEntries")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_vanitypath_max_entries: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "resource.resolver.vanitypath.maxEntries.startup")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_vanitypath_max_entries_startup: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "resource.resolver.vanitypath.bloomfilter.maxBytes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_vanitypath_bloomfilter_max_bytes: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "resource.resolver.optimize.alias.resolution")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_optimize_alias_resolution: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "resource.resolver.vanitypath.whitelist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_vanitypath_whitelist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "resource.resolver.vanitypath.blacklist")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_vanitypath_blacklist: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "resource.resolver.vanity.precedence")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_vanity_precedence: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "resource.resolver.providerhandling.paranoid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_providerhandling_paranoid: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "resource.resolver.log.closing")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_log_closing: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "resource.resolver.log.unclosed")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub resource_resolver_log_unclosed: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    pub fn new() -> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
        OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
            resource_resolver_searchpath: None,
            resource_resolver_manglenamespaces: None,
            resource_resolver_allow_direct: None,
            resource_resolver_required_providers: None,
            resource_resolver_required_providernames: None,
            resource_resolver_virtual: None,
            resource_resolver_mapping: None,
            resource_resolver_map_location: None,
            resource_resolver_map_observation: None,
            resource_resolver_default_vanity_redirect_status: None,
            resource_resolver_enable_vanitypath: None,
            resource_resolver_vanitypath_max_entries: None,
            resource_resolver_vanitypath_max_entries_startup: None,
            resource_resolver_vanitypath_bloomfilter_max_bytes: None,
            resource_resolver_optimize_alias_resolution: None,
            resource_resolver_vanitypath_whitelist: None,
            resource_resolver_vanitypath_blacklist: None,
            resource_resolver_vanity_precedence: None,
            resource_resolver_providerhandling_paranoid: None,
            resource_resolver_log_closing: None,
            resource_resolver_log_unclosed: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties>,

}

impl OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo {
    pub fn new() -> OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo {
        OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties {
    #[serde(rename = "allow.only.system.user")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allow_only_system_user: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties {
    pub fn new() -> OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties {
        OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorProperties {
            allow_only_system_user: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties>,

}

impl OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo {
    pub fn new() -> OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo {
        OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties {
    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "checkpath.prefix")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub checkpath_prefix: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jcrPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jcr_path: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties {
    pub fn new() -> OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties {
        OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties {
            path: None,
            checkpath_prefix: None,
            jcr_path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties>,

}

impl OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo {
    pub fn new() -> OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo {
        OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "type.collections")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub type_collections: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "type.noncollections")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub type_noncollections: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "type.content")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub type_content: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties {
    pub fn new() -> OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties {
        OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceProperties {
            service_ranking: None,
            type_collections: None,
            type_noncollections: None,
            type_content: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties>,

}

impl OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo {
    pub fn new() -> OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo {
        OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties {
    pub fn new() -> OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties {
        OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicProperties {
            service_ranking: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo {
    pub fn new() -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo {
        OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    #[serde(rename = "dav.root")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dav_root: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "dav.create-absolute-uri")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dav_create_absolute_uri: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "dav.realm")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub dav_realm: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "collection.types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub collection_types: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "filter.prefixes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_prefixes: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "filter.types")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_types: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "filter.uris")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_uris: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "type.collections")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub type_collections: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "type.noncollections")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub type_noncollections: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "type.content")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub type_content: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
    pub fn new() -> OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
        OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties {
            dav_root: None,
            dav_create_absolute_uri: None,
            dav_realm: None,
            collection_types: None,
            filter_prefixes: None,
            filter_types: None,
            filter_uris: None,
            type_collections: None,
            type_noncollections: None,
            type_content: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJmxProviderImplJmxResourceProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingJmxProviderImplJmxResourceProviderProperties>,

}

impl OrgApacheSlingJmxProviderImplJmxResourceProviderInfo {
    pub fn new() -> OrgApacheSlingJmxProviderImplJmxResourceProviderInfo {
        OrgApacheSlingJmxProviderImplJmxResourceProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingJmxProviderImplJmxResourceProviderProperties {
    #[serde(rename = "provider.roots")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub provider_roots: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingJmxProviderImplJmxResourceProviderProperties {
    pub fn new() -> OrgApacheSlingJmxProviderImplJmxResourceProviderProperties {
        OrgApacheSlingJmxProviderImplJmxResourceProviderProperties {
            provider_roots: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingModelsImplModelAdapterFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingModelsImplModelAdapterFactoryProperties>,

}

impl OrgApacheSlingModelsImplModelAdapterFactoryInfo {
    pub fn new() -> OrgApacheSlingModelsImplModelAdapterFactoryInfo {
        OrgApacheSlingModelsImplModelAdapterFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingModelsImplModelAdapterFactoryProperties {
    #[serde(rename = "osgi.http.whiteboard.listener")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub osgi_http_whiteboard_listener: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "osgi.http.whiteboard.context.select")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub osgi_http_whiteboard_context_select: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "max.recursion.depth")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_recursion_depth: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "cleanup.job.period")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub cleanup_job_period: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingModelsImplModelAdapterFactoryProperties {
    pub fn new() -> OrgApacheSlingModelsImplModelAdapterFactoryProperties {
        OrgApacheSlingModelsImplModelAdapterFactoryProperties {
            osgi_http_whiteboard_listener: None,
            osgi_http_whiteboard_context_select: None,
            max_recursion_depth: None,
            cleanup_job_period: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties>,

}

impl OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo {
    pub fn new() -> OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo {
        OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties {
    #[serde(rename = "max.recursion.levels")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub max_recursion_levels: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties {
    pub fn new() -> OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties {
        OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderProperties {
            max_recursion_levels: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties>,

}

impl OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo {
    pub fn new() -> OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo {
        OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties {
    #[serde(rename = "felix.inventory.printer.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub felix_inventory_printer_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "felix.inventory.printer.title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub felix_inventory_printer_title: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "path")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub path: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties {
    pub fn new() -> OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties {
        OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoProperties {
            felix_inventory_printer_name: None,
            felix_inventory_printer_title: None,
            path: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties>,

}

impl OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo {
    pub fn new() -> OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo {
        OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties {
    #[serde(rename = "merge.root")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub merge_root: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "merge.readOnly")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub merge_read_only: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties {
    pub fn new() -> OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties {
        OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryProperties {
            merge_root: None,
            merge_read_only: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingResourcemergerPickerOverridingInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingResourcemergerPickerOverridingProperties>,

    #[serde(rename = "additionalProperties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub additional_properties: Option<String>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingResourcemergerPickerOverridingInfo {
    pub fn new() -> OrgApacheSlingResourcemergerPickerOverridingInfo {
        OrgApacheSlingResourcemergerPickerOverridingInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            additional_properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingResourcemergerPickerOverridingProperties {
    #[serde(rename = "merge.root")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub merge_root: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "merge.readOnly")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub merge_read_only: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingResourcemergerPickerOverridingProperties {
    pub fn new() -> OrgApacheSlingResourcemergerPickerOverridingProperties {
        OrgApacheSlingResourcemergerPickerOverridingProperties {
            merge_root: None,
            merge_read_only: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingCoreImplScriptCacheImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingScriptingCoreImplScriptCacheImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingScriptingCoreImplScriptCacheImplInfo {
    pub fn new() -> OrgApacheSlingScriptingCoreImplScriptCacheImplInfo {
        OrgApacheSlingScriptingCoreImplScriptCacheImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingCoreImplScriptCacheImplProperties {
    #[serde(rename = "org.apache.sling.scripting.cache.size")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_scripting_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "org.apache.sling.scripting.cache.additional_extensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_scripting_cache_additional_extensions: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingScriptingCoreImplScriptCacheImplProperties {
    pub fn new() -> OrgApacheSlingScriptingCoreImplScriptCacheImplProperties {
        OrgApacheSlingScriptingCoreImplScriptCacheImplProperties {
            org_apache_sling_scripting_cache_size: None,
            org_apache_sling_scripting_cache_additional_extensions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties>,

}

impl OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo {
    pub fn new() -> OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo {
        OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties {
    #[serde(rename = "log.stacktrace.onclose")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub log_stacktrace_onclose: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties {
    pub fn new() -> OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties {
        OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderProperties {
            log_stacktrace_onclose: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo {
    pub fn new() -> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo {
        OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
    #[serde(rename = "java.classdebuginfo")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub java_classdebuginfo: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "java.javaEncoding")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub java_java_encoding: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "java.compilerSourceVM")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub java_compiler_source_vm: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "java.compilerTargetVM")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub java_compiler_target_vm: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
    pub fn new() -> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
        OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties {
            java_classdebuginfo: None,
            java_java_encoding: None,
            java_compiler_source_vm: None,
            java_compiler_target_vm: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties>,

}

impl OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo {
    pub fn new() -> OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo {
        OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties {
    #[serde(rename = "org.apache.sling.scripting.javascript.rhino.optLevel")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_scripting_javascript_rhino_opt_level: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties {
    pub fn new() -> OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties {
        OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaProperties {
            org_apache_sling_scripting_javascript_rhino_opt_level: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo {
    pub fn new() -> OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo {
        OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties {
    #[serde(rename = "jasper.compilerTargetVM")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jasper_compiler_target_vm: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jasper.compilerSourceVM")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jasper_compiler_source_vm: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jasper.classdebuginfo")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jasper_classdebuginfo: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "jasper.enablePooling")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jasper_enable_pooling: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "jasper.ieClassId")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jasper_ie_class_id: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "jasper.genStringAsCharArray")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jasper_gen_string_as_char_array: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "jasper.keepgenerated")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jasper_keepgenerated: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "jasper.mappedfile")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jasper_mappedfile: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "jasper.trimSpaces")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jasper_trim_spaces: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "jasper.displaySourceFragments")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub jasper_display_source_fragments: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "default.is.session")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_is_session: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties {
    pub fn new() -> OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties {
        OrgApacheSlingScriptingJspJspScriptEngineFactoryProperties {
            jasper_compiler_target_vm: None,
            jasper_compiler_source_vm: None,
            jasper_classdebuginfo: None,
            jasper_enable_pooling: None,
            jasper_ie_class_id: None,
            jasper_gen_string_as_char_array: None,
            jasper_keepgenerated: None,
            jasper_mappedfile: None,
            jasper_trim_spaces: None,
            jasper_display_source_fragments: None,
            default_is_session: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo {
    pub fn new() -> OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo {
        OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties {
    #[serde(rename = "org.apache.sling.scripting.sightly.js.bindings")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub org_apache_sling_scripting_sightly_js_bindings: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties {
    pub fn new() -> OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties {
        OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvProperties {
            org_apache_sling_scripting_sightly_js_bindings: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingSecurityImplContentDispositionFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingSecurityImplContentDispositionFilterProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingSecurityImplContentDispositionFilterInfo {
    pub fn new() -> OrgApacheSlingSecurityImplContentDispositionFilterInfo {
        OrgApacheSlingSecurityImplContentDispositionFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingSecurityImplContentDispositionFilterProperties {
    #[serde(rename = "sling.content.disposition.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_content_disposition_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sling.content.disposition.excluded.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_content_disposition_excluded_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "sling.content.disposition.all.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_content_disposition_all_paths: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingSecurityImplContentDispositionFilterProperties {
    pub fn new() -> OrgApacheSlingSecurityImplContentDispositionFilterProperties {
        OrgApacheSlingSecurityImplContentDispositionFilterProperties {
            sling_content_disposition_paths: None,
            sling_content_disposition_excluded_paths: None,
            sling_content_disposition_all_paths: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingSecurityImplReferrerFilterInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingSecurityImplReferrerFilterProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingSecurityImplReferrerFilterInfo {
    pub fn new() -> OrgApacheSlingSecurityImplReferrerFilterInfo {
        OrgApacheSlingSecurityImplReferrerFilterInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingSecurityImplReferrerFilterProperties {
    #[serde(rename = "allow.empty")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allow_empty: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "allow.hosts")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allow_hosts: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "allow.hosts.regexp")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub allow_hosts_regexp: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "filter.methods")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub filter_methods: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "exclude.agents.regexp")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub exclude_agents_regexp: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingSecurityImplReferrerFilterProperties {
    pub fn new() -> OrgApacheSlingSecurityImplReferrerFilterProperties {
        OrgApacheSlingSecurityImplReferrerFilterProperties {
            allow_empty: None,
            allow_hosts: None,
            allow_hosts_regexp: None,
            filter_methods: None,
            exclude_agents_regexp: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties>,

}

impl OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo {
    pub fn new() -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo {
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties {
    #[serde(rename = "service.ranking")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_ranking: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "user.mapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_mapping: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties {
    pub fn new() -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties {
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedProperties {
            service_ranking: None,
            user_mapping: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo {
    pub fn new() -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo {
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
    #[serde(rename = "user.mapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_mapping: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "user.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_default: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "user.enable.default.mapping")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_enable_default_mapping: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "require.validation")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub require_validation: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
    pub fn new() -> OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplProperties {
            user_mapping: None,
            user_default: None,
            user_enable_default_mapping: None,
            require_validation: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsGetDefaultGetServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingServletsGetDefaultGetServletProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingServletsGetDefaultGetServletInfo {
    pub fn new() -> OrgApacheSlingServletsGetDefaultGetServletInfo {
        OrgApacheSlingServletsGetDefaultGetServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsGetDefaultGetServletProperties {
    #[serde(rename = "aliases")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub aliases: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "index")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub index: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "index.files")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub index_files: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "enable.html")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_html: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "enable.json")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_json: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "enable.txt")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_txt: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "enable.xml")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enable_xml: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "json.maximumresults")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub json_maximumresults: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "ecmaSuport")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ecma_suport: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingServletsGetDefaultGetServletProperties {
    pub fn new() -> OrgApacheSlingServletsGetDefaultGetServletProperties {
        OrgApacheSlingServletsGetDefaultGetServletProperties {
            aliases: None,
            index: None,
            index_files: None,
            enable_html: None,
            enable_json: None,
            enable_txt: None,
            enable_xml: None,
            json_maximumresults: None,
            ecma_suport: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties>,

}

impl OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo {
    pub fn new() -> OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo {
        OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties {
    #[serde(rename = "sling.servlet.selectors")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_servlet_selectors: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "ecmaSuport")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub ecma_suport: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties {
    pub fn new() -> OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties {
        OrgApacheSlingServletsGetImplVersionVersionInfoServletProperties {
            sling_servlet_selectors: None,
            ecma_suport: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties>,

}

impl OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo {
    pub fn new() -> OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo {
        OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties {
    #[serde(rename = "scheduler.expression")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_expression: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "scheduler.concurrent")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub scheduler_concurrent: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "chunk.cleanup.age")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub chunk_cleanup_age: Option<models::ConfigNodePropertyInteger>,

}

impl OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties {
    pub fn new() -> OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties {
        OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskProperties {
            scheduler_expression: None,
            scheduler_concurrent: None,
            chunk_cleanup_age: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsPostImplSlingPostServletInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingServletsPostImplSlingPostServletProperties>,

}

impl OrgApacheSlingServletsPostImplSlingPostServletInfo {
    pub fn new() -> OrgApacheSlingServletsPostImplSlingPostServletInfo {
        OrgApacheSlingServletsPostImplSlingPostServletInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsPostImplSlingPostServletProperties {
    #[serde(rename = "servlet.post.dateFormats")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servlet_post_date_formats: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "servlet.post.nodeNameHints")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servlet_post_node_name_hints: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "servlet.post.nodeNameMaxLength")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servlet_post_node_name_max_length: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "servlet.post.checkinNewVersionableNodes")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servlet_post_checkin_new_versionable_nodes: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "servlet.post.autoCheckout")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servlet_post_auto_checkout: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "servlet.post.autoCheckin")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servlet_post_auto_checkin: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "servlet.post.ignorePattern")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servlet_post_ignore_pattern: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingServletsPostImplSlingPostServletProperties {
    pub fn new() -> OrgApacheSlingServletsPostImplSlingPostServletProperties {
        OrgApacheSlingServletsPostImplSlingPostServletProperties {
            servlet_post_date_formats: None,
            servlet_post_node_name_hints: None,
            servlet_post_node_name_max_length: None,
            servlet_post_checkin_new_versionable_nodes: None,
            servlet_post_auto_checkout: None,
            servlet_post_auto_checkin: None,
            servlet_post_ignore_pattern: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsResolverSlingServletResolverInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingServletsResolverSlingServletResolverProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingServletsResolverSlingServletResolverInfo {
    pub fn new() -> OrgApacheSlingServletsResolverSlingServletResolverInfo {
        OrgApacheSlingServletsResolverSlingServletResolverInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingServletsResolverSlingServletResolverProperties {
    #[serde(rename = "servletresolver.servletRoot")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servletresolver_servlet_root: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "servletresolver.cacheSize")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servletresolver_cache_size: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "servletresolver.paths")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servletresolver_paths: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "servletresolver.defaultExtensions")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servletresolver_default_extensions: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingServletsResolverSlingServletResolverProperties {
    pub fn new() -> OrgApacheSlingServletsResolverSlingServletResolverProperties {
        OrgApacheSlingServletsResolverSlingServletResolverProperties {
            servletresolver_servlet_root: None,
            servletresolver_cache_size: None,
            servletresolver_paths: None,
            servletresolver_default_extensions: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties>,

}

impl OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo {
    pub fn new() -> OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo {
        OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties {
    #[serde(rename = "sling.name")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_name: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "sling.description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub sling_description: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties {
    pub fn new() -> OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties {
        OrgApacheSlingSettingsImplSlingSettingsServiceImplProperties {
            sling_name: None,
            sling_description: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingStartupfilterImplStartupFilterImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingStartupfilterImplStartupFilterImplProperties>,

}

impl OrgApacheSlingStartupfilterImplStartupFilterImplInfo {
    pub fn new() -> OrgApacheSlingStartupfilterImplStartupFilterImplInfo {
        OrgApacheSlingStartupfilterImplStartupFilterImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingStartupfilterImplStartupFilterImplProperties {
    #[serde(rename = "active.by.default")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub active_by_default: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "default.message")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub default_message: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingStartupfilterImplStartupFilterImplProperties {
    pub fn new() -> OrgApacheSlingStartupfilterImplStartupFilterImplProperties {
        OrgApacheSlingStartupfilterImplStartupFilterImplProperties {
            active_by_default: None,
            default_message: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingTenantInternalTenantProviderImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingTenantInternalTenantProviderImplProperties>,

}

impl OrgApacheSlingTenantInternalTenantProviderImplInfo {
    pub fn new() -> OrgApacheSlingTenantInternalTenantProviderImplInfo {
        OrgApacheSlingTenantInternalTenantProviderImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingTenantInternalTenantProviderImplProperties {
    #[serde(rename = "tenant.root")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tenant_root: Option<models::ConfigNodePropertyString>,

    #[serde(rename = "tenant.path.matcher")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tenant_path_matcher: Option<models::ConfigNodePropertyArray>,

}

impl OrgApacheSlingTenantInternalTenantProviderImplProperties {
    pub fn new() -> OrgApacheSlingTenantInternalTenantProviderImplProperties {
        OrgApacheSlingTenantInternalTenantProviderImplProperties {
            tenant_root: None,
            tenant_path_matcher: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingTracerInternalLogTracerInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingTracerInternalLogTracerProperties>,

}

impl OrgApacheSlingTracerInternalLogTracerInfo {
    pub fn new() -> OrgApacheSlingTracerInternalLogTracerInfo {
        OrgApacheSlingTracerInternalLogTracerInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingTracerInternalLogTracerProperties {
    #[serde(rename = "tracerSets")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub tracer_sets: Option<models::ConfigNodePropertyArray>,

    #[serde(rename = "enabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "servletEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub servlet_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "recordingCacheSizeInMB")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub recording_cache_size_in_mb: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "recordingCacheDurationInSecs")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub recording_cache_duration_in_secs: Option<models::ConfigNodePropertyInteger>,

    #[serde(rename = "recordingCompressionEnabled")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub recording_compression_enabled: Option<models::ConfigNodePropertyBoolean>,

    #[serde(rename = "gzipResponse")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub gzip_response: Option<models::ConfigNodePropertyBoolean>,

}

impl OrgApacheSlingTracerInternalLogTracerProperties {
    pub fn new() -> OrgApacheSlingTracerInternalLogTracerProperties {
        OrgApacheSlingTracerInternalLogTracerProperties {
            tracer_sets: None,
            enabled: None,
            servlet_enabled: None,
            recording_cache_size_in_mb: None,
            recording_cache_duration_in_secs: None,
            recording_compression_enabled: None,
            gzip_response: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingXssImplXssFilterImplInfo {
    #[serde(rename = "pid")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub pid: Option<String>,

    #[serde(rename = "title")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub title: Option<String>,

    #[serde(rename = "description")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub description: Option<String>,

    #[serde(rename = "properties")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub properties: Option<models::OrgApacheSlingXssImplXssFilterImplProperties>,

    #[serde(rename = "bundle_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub bundle_location: Option<String>,

    #[serde(rename = "service_location")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub service_location: Option<String>,

}

impl OrgApacheSlingXssImplXssFilterImplInfo {
    pub fn new() -> OrgApacheSlingXssImplXssFilterImplInfo {
        OrgApacheSlingXssImplXssFilterImplInfo {
            pid: None,
            title: None,
            description: None,
            properties: None,
            bundle_location: None,
            service_location: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct OrgApacheSlingXssImplXssFilterImplProperties {
    #[serde(rename = "policyPath")]
    #[serde(skip_serializing_if="Option::is_none")]
    pub policy_path: Option<models::ConfigNodePropertyString>,

}

impl OrgApacheSlingXssImplXssFilterImplProperties {
    pub fn new() -> OrgApacheSlingXssImplXssFilterImplProperties {
        OrgApacheSlingXssImplXssFilterImplProperties {
            policy_path: None,
        }
    }
}
