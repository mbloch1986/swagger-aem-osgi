/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplDamChangeEventListenerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplDamChangeEventListenerProperties::OAIComDayCqDamCoreImplDamChangeEventListenerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqDamCoreImplDamChangeEventListenerProperties::OAIComDayCqDamCoreImplDamChangeEventListenerProperties() {
    init();
}

OAIComDayCqDamCoreImplDamChangeEventListenerProperties::~OAIComDayCqDamCoreImplDamChangeEventListenerProperties() {
    this->cleanup();
}

void
OAIComDayCqDamCoreImplDamChangeEventListenerProperties::init() {
    changeeventlistener_observed_paths = new OAIConfigNodePropertyArray();
    m_changeeventlistener_observed_paths_isSet = false;
}

void
OAIComDayCqDamCoreImplDamChangeEventListenerProperties::cleanup() {
    if(changeeventlistener_observed_paths != nullptr) { 
        delete changeeventlistener_observed_paths;
    }
}

OAIComDayCqDamCoreImplDamChangeEventListenerProperties*
OAIComDayCqDamCoreImplDamChangeEventListenerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqDamCoreImplDamChangeEventListenerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&changeeventlistener_observed_paths, pJson["changeeventlistener.observed.paths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComDayCqDamCoreImplDamChangeEventListenerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplDamChangeEventListenerProperties::asJsonObject() {
    QJsonObject obj;
    if((changeeventlistener_observed_paths != nullptr) && (changeeventlistener_observed_paths->isSet())){
        toJsonValue(QString("changeeventlistener.observed.paths"), changeeventlistener_observed_paths, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComDayCqDamCoreImplDamChangeEventListenerProperties::getChangeeventlistenerObservedPaths() {
    return changeeventlistener_observed_paths;
}
void
OAIComDayCqDamCoreImplDamChangeEventListenerProperties::setChangeeventlistenerObservedPaths(OAIConfigNodePropertyArray* changeeventlistener_observed_paths) {
    this->changeeventlistener_observed_paths = changeeventlistener_observed_paths;
    this->m_changeeventlistener_observed_paths_isSet = true;
}


bool
OAIComDayCqDamCoreImplDamChangeEventListenerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(changeeventlistener_observed_paths != nullptr && changeeventlistener_observed_paths->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

