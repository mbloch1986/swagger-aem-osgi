/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties()
{
    m_Solr_http_urlIsSet = false;
    m_Solr_zk_hostIsSet = false;
    m_Solr_collectionIsSet = false;
    m_Solr_socket_timeoutIsSet = false;
    m_Solr_connection_timeoutIsSet = false;
    m_Solr_shards_noIsSet = false;
    m_Solr_replication_factorIsSet = false;
    m_Solr_conf_dirIsSet = false;
    
}

OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::~OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties()
{
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Solr_http_urlIsSet)
    {
        val["solr.http.url"] = ModelBase::toJson(m_Solr_http_url);
    }
    if(m_Solr_zk_hostIsSet)
    {
        val["solr.zk.host"] = ModelBase::toJson(m_Solr_zk_host);
    }
    if(m_Solr_collectionIsSet)
    {
        val["solr.collection"] = ModelBase::toJson(m_Solr_collection);
    }
    if(m_Solr_socket_timeoutIsSet)
    {
        val["solr.socket.timeout"] = ModelBase::toJson(m_Solr_socket_timeout);
    }
    if(m_Solr_connection_timeoutIsSet)
    {
        val["solr.connection.timeout"] = ModelBase::toJson(m_Solr_connection_timeout);
    }
    if(m_Solr_shards_noIsSet)
    {
        val["solr.shards.no"] = ModelBase::toJson(m_Solr_shards_no);
    }
    if(m_Solr_replication_factorIsSet)
    {
        val["solr.replication.factor"] = ModelBase::toJson(m_Solr_replication_factor);
    }
    if(m_Solr_conf_dirIsSet)
    {
        val["solr.conf.dir"] = ModelBase::toJson(m_Solr_conf_dir);
    }
    

    return val;
}

void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::fromJson(nlohmann::json& val)
{
    if(val.find("solr.http.url") != val.end())
    {
        if(!val["solr.http.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["solr.http.url"]);
            setSolrHttpUrl( newItem );
        }
        
    }
    if(val.find("solr.zk.host") != val.end())
    {
        if(!val["solr.zk.host"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["solr.zk.host"]);
            setSolrZkHost( newItem );
        }
        
    }
    if(val.find("solr.collection") != val.end())
    {
        if(!val["solr.collection"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["solr.collection"]);
            setSolrCollection( newItem );
        }
        
    }
    if(val.find("solr.socket.timeout") != val.end())
    {
        if(!val["solr.socket.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["solr.socket.timeout"]);
            setSolrSocketTimeout( newItem );
        }
        
    }
    if(val.find("solr.connection.timeout") != val.end())
    {
        if(!val["solr.connection.timeout"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["solr.connection.timeout"]);
            setSolrConnectionTimeout( newItem );
        }
        
    }
    if(val.find("solr.shards.no") != val.end())
    {
        if(!val["solr.shards.no"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["solr.shards.no"]);
            setSolrShardsNo( newItem );
        }
        
    }
    if(val.find("solr.replication.factor") != val.end())
    {
        if(!val["solr.replication.factor"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["solr.replication.factor"]);
            setSolrReplicationFactor( newItem );
        }
        
    }
    if(val.find("solr.conf.dir") != val.end())
    {
        if(!val["solr.conf.dir"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["solr.conf.dir"]);
            setSolrConfDir( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrHttpUrl() const
{
    return m_Solr_http_url;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrHttpUrl(ConfigNodePropertyString const& value)
{
    m_Solr_http_url = value;
    m_Solr_http_urlIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrHttpUrlIsSet() const
{
    return m_Solr_http_urlIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_http_url()
{
    m_Solr_http_urlIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrZkHost() const
{
    return m_Solr_zk_host;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrZkHost(ConfigNodePropertyString const& value)
{
    m_Solr_zk_host = value;
    m_Solr_zk_hostIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrZkHostIsSet() const
{
    return m_Solr_zk_hostIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_zk_host()
{
    m_Solr_zk_hostIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrCollection() const
{
    return m_Solr_collection;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrCollection(ConfigNodePropertyString const& value)
{
    m_Solr_collection = value;
    m_Solr_collectionIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrCollectionIsSet() const
{
    return m_Solr_collectionIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_collection()
{
    m_Solr_collectionIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrSocketTimeout() const
{
    return m_Solr_socket_timeout;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrSocketTimeout(ConfigNodePropertyInteger const& value)
{
    m_Solr_socket_timeout = value;
    m_Solr_socket_timeoutIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrSocketTimeoutIsSet() const
{
    return m_Solr_socket_timeoutIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_socket_timeout()
{
    m_Solr_socket_timeoutIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrConnectionTimeout() const
{
    return m_Solr_connection_timeout;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrConnectionTimeout(ConfigNodePropertyInteger const& value)
{
    m_Solr_connection_timeout = value;
    m_Solr_connection_timeoutIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrConnectionTimeoutIsSet() const
{
    return m_Solr_connection_timeoutIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_connection_timeout()
{
    m_Solr_connection_timeoutIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrShardsNo() const
{
    return m_Solr_shards_no;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrShardsNo(ConfigNodePropertyInteger const& value)
{
    m_Solr_shards_no = value;
    m_Solr_shards_noIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrShardsNoIsSet() const
{
    return m_Solr_shards_noIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_shards_no()
{
    m_Solr_shards_noIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrReplicationFactor() const
{
    return m_Solr_replication_factor;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrReplicationFactor(ConfigNodePropertyInteger const& value)
{
    m_Solr_replication_factor = value;
    m_Solr_replication_factorIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrReplicationFactorIsSet() const
{
    return m_Solr_replication_factorIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_replication_factor()
{
    m_Solr_replication_factorIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::getSolrConfDir() const
{
    return m_Solr_conf_dir;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::setSolrConfDir(ConfigNodePropertyString const& value)
{
    m_Solr_conf_dir = value;
    m_Solr_conf_dirIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::solrConfDirIsSet() const
{
    return m_Solr_conf_dirIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties::unsetSolr_conf_dir()
{
    m_Solr_conf_dirIsSet = false;
}

}
}
}
}

