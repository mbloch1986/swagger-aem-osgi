/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties.h
 *
 * 
 */

#ifndef ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_
#define ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyFloat.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
    : public ModelBase
{
public:
    ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();
    virtual ~ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getServiceRanking() const;
    void setServiceRanking(ConfigNodePropertyInteger const& value);
    bool serviceRankingIsSet() const;
    void unsetService_ranking();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getGlobalSize() const;
    void setGlobalSize(ConfigNodePropertyInteger const& value);
    bool globalSizeIsSet() const;
    void unsetGlobal_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxDiskUsage() const;
    void setMaxDiskUsage(ConfigNodePropertyInteger const& value);
    bool maxDiskUsageIsSet() const;
    void unsetMax_disk_usage();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getPersistenceEnabled() const;
    void setPersistenceEnabled(ConfigNodePropertyBoolean const& value);
    bool persistenceEnabledIsSet() const;
    void unsetPersistence_enabled();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getThreadPoolMaxSize() const;
    void setThreadPoolMaxSize(ConfigNodePropertyInteger const& value);
    bool threadPoolMaxSizeIsSet() const;
    void unsetThread_pool_max_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getScheduledThreadPoolMaxSize() const;
    void setScheduledThreadPoolMaxSize(ConfigNodePropertyInteger const& value);
    bool scheduledThreadPoolMaxSizeIsSet() const;
    void unsetScheduled_thread_pool_max_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getGracefulShutdownTimeout() const;
    void setGracefulShutdownTimeout(ConfigNodePropertyInteger const& value);
    bool gracefulShutdownTimeoutIsSet() const;
    void unsetGraceful_shutdown_timeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getQueues() const;
    void setQueues(ConfigNodePropertyArray const& value);
    bool queuesIsSet() const;
    void unsetQueues();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getTopics() const;
    void setTopics(ConfigNodePropertyArray const& value);
    bool topicsIsSet() const;
    void unsetTopics();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getAddressesMaxDeliveryAttempts() const;
    void setAddressesMaxDeliveryAttempts(ConfigNodePropertyInteger const& value);
    bool addressesMaxDeliveryAttemptsIsSet() const;
    void unsetAddresses_max_delivery_attempts();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getAddressesExpiryDelay() const;
    void setAddressesExpiryDelay(ConfigNodePropertyInteger const& value);
    bool addressesExpiryDelayIsSet() const;
    void unsetAddresses_expiry_delay();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getAddressesAddressFullMessagePolicy() const;
    void setAddressesAddressFullMessagePolicy(ConfigNodePropertyDropDown const& value);
    bool addressesAddressFullMessagePolicyIsSet() const;
    void unsetAddresses_address_full_message_policy();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getAddressesMaxSizeBytes() const;
    void setAddressesMaxSizeBytes(ConfigNodePropertyInteger const& value);
    bool addressesMaxSizeBytesIsSet() const;
    void unsetAddresses_max_size_bytes();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getAddressesPageSizeBytes() const;
    void setAddressesPageSizeBytes(ConfigNodePropertyInteger const& value);
    bool addressesPageSizeBytesIsSet() const;
    void unsetAddresses_page_size_bytes();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getAddressesPageCacheMaxSize() const;
    void setAddressesPageCacheMaxSize(ConfigNodePropertyInteger const& value);
    bool addressesPageCacheMaxSizeIsSet() const;
    void unsetAddresses_page_cache_max_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getClusterUser() const;
    void setClusterUser(ConfigNodePropertyString const& value);
    bool clusterUserIsSet() const;
    void unsetCluster_user();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getClusterPassword() const;
    void setClusterPassword(ConfigNodePropertyString const& value);
    bool clusterPasswordIsSet() const;
    void unsetCluster_password();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterCallTimeout() const;
    void setClusterCallTimeout(ConfigNodePropertyInteger const& value);
    bool clusterCallTimeoutIsSet() const;
    void unsetCluster_call_timeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterCallFailoverTimeout() const;
    void setClusterCallFailoverTimeout(ConfigNodePropertyInteger const& value);
    bool clusterCallFailoverTimeoutIsSet() const;
    void unsetCluster_call_failover_timeout();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterClientFailureCheckPeriod() const;
    void setClusterClientFailureCheckPeriod(ConfigNodePropertyInteger const& value);
    bool clusterClientFailureCheckPeriodIsSet() const;
    void unsetCluster_client_failure_check_period();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterNotificationAttempts() const;
    void setClusterNotificationAttempts(ConfigNodePropertyInteger const& value);
    bool clusterNotificationAttemptsIsSet() const;
    void unsetCluster_notification_attempts();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterNotificationInterval() const;
    void setClusterNotificationInterval(ConfigNodePropertyInteger const& value);
    bool clusterNotificationIntervalIsSet() const;
    void unsetCluster_notification_interval();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getIdCacheSize() const;
    void setIdCacheSize(ConfigNodePropertyInteger const& value);
    bool idCacheSizeIsSet() const;
    void unsetId_cache_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterConfirmationWindowSize() const;
    void setClusterConfirmationWindowSize(ConfigNodePropertyInteger const& value);
    bool clusterConfirmationWindowSizeIsSet() const;
    void unsetCluster_confirmation_window_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterConnectionTtl() const;
    void setClusterConnectionTtl(ConfigNodePropertyInteger const& value);
    bool clusterConnectionTtlIsSet() const;
    void unsetCluster_connection_ttl();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getClusterDuplicateDetection() const;
    void setClusterDuplicateDetection(ConfigNodePropertyBoolean const& value);
    bool clusterDuplicateDetectionIsSet() const;
    void unsetCluster_duplicate_detection();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterInitialConnectAttempts() const;
    void setClusterInitialConnectAttempts(ConfigNodePropertyInteger const& value);
    bool clusterInitialConnectAttemptsIsSet() const;
    void unsetCluster_initial_connect_attempts();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterMaxRetryInterval() const;
    void setClusterMaxRetryInterval(ConfigNodePropertyInteger const& value);
    bool clusterMaxRetryIntervalIsSet() const;
    void unsetCluster_max_retry_interval();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterMinLargeMessageSize() const;
    void setClusterMinLargeMessageSize(ConfigNodePropertyInteger const& value);
    bool clusterMinLargeMessageSizeIsSet() const;
    void unsetCluster_min_large_message_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterProducerWindowSize() const;
    void setClusterProducerWindowSize(ConfigNodePropertyInteger const& value);
    bool clusterProducerWindowSizeIsSet() const;
    void unsetCluster_producer_window_size();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterReconnectAttempts() const;
    void setClusterReconnectAttempts(ConfigNodePropertyInteger const& value);
    bool clusterReconnectAttemptsIsSet() const;
    void unsetCluster_reconnect_attempts();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getClusterRetryInterval() const;
    void setClusterRetryInterval(ConfigNodePropertyInteger const& value);
    bool clusterRetryIntervalIsSet() const;
    void unsetCluster_retry_interval();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyFloat getClusterRetryIntervalMultiplier() const;
    void setClusterRetryIntervalMultiplier(ConfigNodePropertyFloat const& value);
    bool clusterRetryIntervalMultiplierIsSet() const;
    void unsetCluster_retry_interval_multiplier();

protected:
    ConfigNodePropertyInteger m_Service_ranking;
    bool m_Service_rankingIsSet;
    ConfigNodePropertyInteger m_Global_size;
    bool m_Global_sizeIsSet;
    ConfigNodePropertyInteger m_Max_disk_usage;
    bool m_Max_disk_usageIsSet;
    ConfigNodePropertyBoolean m_Persistence_enabled;
    bool m_Persistence_enabledIsSet;
    ConfigNodePropertyInteger m_Thread_pool_max_size;
    bool m_Thread_pool_max_sizeIsSet;
    ConfigNodePropertyInteger m_Scheduled_thread_pool_max_size;
    bool m_Scheduled_thread_pool_max_sizeIsSet;
    ConfigNodePropertyInteger m_Graceful_shutdown_timeout;
    bool m_Graceful_shutdown_timeoutIsSet;
    ConfigNodePropertyArray m_Queues;
    bool m_QueuesIsSet;
    ConfigNodePropertyArray m_Topics;
    bool m_TopicsIsSet;
    ConfigNodePropertyInteger m_Addresses_max_delivery_attempts;
    bool m_Addresses_max_delivery_attemptsIsSet;
    ConfigNodePropertyInteger m_Addresses_expiry_delay;
    bool m_Addresses_expiry_delayIsSet;
    ConfigNodePropertyDropDown m_Addresses_address_full_message_policy;
    bool m_Addresses_address_full_message_policyIsSet;
    ConfigNodePropertyInteger m_Addresses_max_size_bytes;
    bool m_Addresses_max_size_bytesIsSet;
    ConfigNodePropertyInteger m_Addresses_page_size_bytes;
    bool m_Addresses_page_size_bytesIsSet;
    ConfigNodePropertyInteger m_Addresses_page_cache_max_size;
    bool m_Addresses_page_cache_max_sizeIsSet;
    ConfigNodePropertyString m_Cluster_user;
    bool m_Cluster_userIsSet;
    ConfigNodePropertyString m_Cluster_password;
    bool m_Cluster_passwordIsSet;
    ConfigNodePropertyInteger m_Cluster_call_timeout;
    bool m_Cluster_call_timeoutIsSet;
    ConfigNodePropertyInteger m_Cluster_call_failover_timeout;
    bool m_Cluster_call_failover_timeoutIsSet;
    ConfigNodePropertyInteger m_Cluster_client_failure_check_period;
    bool m_Cluster_client_failure_check_periodIsSet;
    ConfigNodePropertyInteger m_Cluster_notification_attempts;
    bool m_Cluster_notification_attemptsIsSet;
    ConfigNodePropertyInteger m_Cluster_notification_interval;
    bool m_Cluster_notification_intervalIsSet;
    ConfigNodePropertyInteger m_Id_cache_size;
    bool m_Id_cache_sizeIsSet;
    ConfigNodePropertyInteger m_Cluster_confirmation_window_size;
    bool m_Cluster_confirmation_window_sizeIsSet;
    ConfigNodePropertyInteger m_Cluster_connection_ttl;
    bool m_Cluster_connection_ttlIsSet;
    ConfigNodePropertyBoolean m_Cluster_duplicate_detection;
    bool m_Cluster_duplicate_detectionIsSet;
    ConfigNodePropertyInteger m_Cluster_initial_connect_attempts;
    bool m_Cluster_initial_connect_attemptsIsSet;
    ConfigNodePropertyInteger m_Cluster_max_retry_interval;
    bool m_Cluster_max_retry_intervalIsSet;
    ConfigNodePropertyInteger m_Cluster_min_large_message_size;
    bool m_Cluster_min_large_message_sizeIsSet;
    ConfigNodePropertyInteger m_Cluster_producer_window_size;
    bool m_Cluster_producer_window_sizeIsSet;
    ConfigNodePropertyInteger m_Cluster_reconnect_attempts;
    bool m_Cluster_reconnect_attemptsIsSet;
    ConfigNodePropertyInteger m_Cluster_retry_interval;
    bool m_Cluster_retry_intervalIsSet;
    ConfigNodePropertyFloat m_Cluster_retry_interval_multiplier;
    bool m_Cluster_retry_interval_multiplierIsSet;
};

}
}
}
}

#endif /* ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties_H_ */
