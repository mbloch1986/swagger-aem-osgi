/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
  #[serde(rename = "jdbc.driver.class")]
  jdbc_driver_class: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "jdbc.connection.uri")]
  jdbc_connection_uri: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "jdbc.username")]
  jdbc_username: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "jdbc.password")]
  jdbc_password: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "jdbc.validation.query")]
  jdbc_validation_query: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "default.readonly")]
  default_readonly: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "default.autocommit")]
  default_autocommit: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "pool.size")]
  pool_size: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "pool.max.wait.msec")]
  pool_max_wait_msec: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "datasource.name")]
  datasource_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "datasource.svc.properties")]
  datasource_svc_properties: Option<::models::ConfigNodePropertyArray>
}

impl ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
  pub fn new() -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
      jdbc_driver_class: None,
      jdbc_connection_uri: None,
      jdbc_username: None,
      jdbc_password: None,
      jdbc_validation_query: None,
      default_readonly: None,
      default_autocommit: None,
      pool_size: None,
      pool_max_wait_msec: None,
      datasource_name: None,
      datasource_svc_properties: None
    }
  }

  pub fn set_jdbc_driver_class(&mut self, jdbc_driver_class: ::models::ConfigNodePropertyString) {
    self.jdbc_driver_class = Some(jdbc_driver_class);
  }

  pub fn with_jdbc_driver_class(mut self, jdbc_driver_class: ::models::ConfigNodePropertyString) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    self.jdbc_driver_class = Some(jdbc_driver_class);
    self
  }

  pub fn jdbc_driver_class(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jdbc_driver_class.as_ref()
  }

  pub fn reset_jdbc_driver_class(&mut self) {
    self.jdbc_driver_class = None;
  }

  pub fn set_jdbc_connection_uri(&mut self, jdbc_connection_uri: ::models::ConfigNodePropertyString) {
    self.jdbc_connection_uri = Some(jdbc_connection_uri);
  }

  pub fn with_jdbc_connection_uri(mut self, jdbc_connection_uri: ::models::ConfigNodePropertyString) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    self.jdbc_connection_uri = Some(jdbc_connection_uri);
    self
  }

  pub fn jdbc_connection_uri(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jdbc_connection_uri.as_ref()
  }

  pub fn reset_jdbc_connection_uri(&mut self) {
    self.jdbc_connection_uri = None;
  }

  pub fn set_jdbc_username(&mut self, jdbc_username: ::models::ConfigNodePropertyString) {
    self.jdbc_username = Some(jdbc_username);
  }

  pub fn with_jdbc_username(mut self, jdbc_username: ::models::ConfigNodePropertyString) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    self.jdbc_username = Some(jdbc_username);
    self
  }

  pub fn jdbc_username(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jdbc_username.as_ref()
  }

  pub fn reset_jdbc_username(&mut self) {
    self.jdbc_username = None;
  }

  pub fn set_jdbc_password(&mut self, jdbc_password: ::models::ConfigNodePropertyString) {
    self.jdbc_password = Some(jdbc_password);
  }

  pub fn with_jdbc_password(mut self, jdbc_password: ::models::ConfigNodePropertyString) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    self.jdbc_password = Some(jdbc_password);
    self
  }

  pub fn jdbc_password(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jdbc_password.as_ref()
  }

  pub fn reset_jdbc_password(&mut self) {
    self.jdbc_password = None;
  }

  pub fn set_jdbc_validation_query(&mut self, jdbc_validation_query: ::models::ConfigNodePropertyString) {
    self.jdbc_validation_query = Some(jdbc_validation_query);
  }

  pub fn with_jdbc_validation_query(mut self, jdbc_validation_query: ::models::ConfigNodePropertyString) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    self.jdbc_validation_query = Some(jdbc_validation_query);
    self
  }

  pub fn jdbc_validation_query(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jdbc_validation_query.as_ref()
  }

  pub fn reset_jdbc_validation_query(&mut self) {
    self.jdbc_validation_query = None;
  }

  pub fn set_default_readonly(&mut self, default_readonly: ::models::ConfigNodePropertyBoolean) {
    self.default_readonly = Some(default_readonly);
  }

  pub fn with_default_readonly(mut self, default_readonly: ::models::ConfigNodePropertyBoolean) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    self.default_readonly = Some(default_readonly);
    self
  }

  pub fn default_readonly(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.default_readonly.as_ref()
  }

  pub fn reset_default_readonly(&mut self) {
    self.default_readonly = None;
  }

  pub fn set_default_autocommit(&mut self, default_autocommit: ::models::ConfigNodePropertyBoolean) {
    self.default_autocommit = Some(default_autocommit);
  }

  pub fn with_default_autocommit(mut self, default_autocommit: ::models::ConfigNodePropertyBoolean) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    self.default_autocommit = Some(default_autocommit);
    self
  }

  pub fn default_autocommit(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.default_autocommit.as_ref()
  }

  pub fn reset_default_autocommit(&mut self) {
    self.default_autocommit = None;
  }

  pub fn set_pool_size(&mut self, pool_size: ::models::ConfigNodePropertyInteger) {
    self.pool_size = Some(pool_size);
  }

  pub fn with_pool_size(mut self, pool_size: ::models::ConfigNodePropertyInteger) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    self.pool_size = Some(pool_size);
    self
  }

  pub fn pool_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.pool_size.as_ref()
  }

  pub fn reset_pool_size(&mut self) {
    self.pool_size = None;
  }

  pub fn set_pool_max_wait_msec(&mut self, pool_max_wait_msec: ::models::ConfigNodePropertyInteger) {
    self.pool_max_wait_msec = Some(pool_max_wait_msec);
  }

  pub fn with_pool_max_wait_msec(mut self, pool_max_wait_msec: ::models::ConfigNodePropertyInteger) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    self.pool_max_wait_msec = Some(pool_max_wait_msec);
    self
  }

  pub fn pool_max_wait_msec(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.pool_max_wait_msec.as_ref()
  }

  pub fn reset_pool_max_wait_msec(&mut self) {
    self.pool_max_wait_msec = None;
  }

  pub fn set_datasource_name(&mut self, datasource_name: ::models::ConfigNodePropertyString) {
    self.datasource_name = Some(datasource_name);
  }

  pub fn with_datasource_name(mut self, datasource_name: ::models::ConfigNodePropertyString) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    self.datasource_name = Some(datasource_name);
    self
  }

  pub fn datasource_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.datasource_name.as_ref()
  }

  pub fn reset_datasource_name(&mut self) {
    self.datasource_name = None;
  }

  pub fn set_datasource_svc_properties(&mut self, datasource_svc_properties: ::models::ConfigNodePropertyArray) {
    self.datasource_svc_properties = Some(datasource_svc_properties);
  }

  pub fn with_datasource_svc_properties(mut self, datasource_svc_properties: ::models::ConfigNodePropertyArray) -> ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties {
    self.datasource_svc_properties = Some(datasource_svc_properties);
    self
  }

  pub fn datasource_svc_properties(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.datasource_svc_properties.as_ref()
  }

  pub fn reset_datasource_svc_properties(&mut self) {
    self.datasource_svc_properties = None;
  }

}



