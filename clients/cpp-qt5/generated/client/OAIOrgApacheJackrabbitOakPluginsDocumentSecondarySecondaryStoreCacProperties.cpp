/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties() {
    init();
}

OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::~OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::init() {
    included_paths = new OAIConfigNodePropertyArray();
    m_included_paths_isSet = false;
    enable_async_observer = new OAIConfigNodePropertyBoolean();
    m_enable_async_observer_isSet = false;
    observer_queue_size = new OAIConfigNodePropertyInteger();
    m_observer_queue_size_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::cleanup() {
    if(included_paths != nullptr) { 
        delete included_paths;
    }
    if(enable_async_observer != nullptr) { 
        delete enable_async_observer;
    }
    if(observer_queue_size != nullptr) { 
        delete observer_queue_size;
    }
}

OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties*
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&included_paths, pJson["includedPaths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&enable_async_observer, pJson["enableAsyncObserver"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&observer_queue_size, pJson["observerQueueSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::asJsonObject() {
    QJsonObject obj;
    if((included_paths != nullptr) && (included_paths->isSet())){
        toJsonValue(QString("includedPaths"), included_paths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((enable_async_observer != nullptr) && (enable_async_observer->isSet())){
        toJsonValue(QString("enableAsyncObserver"), enable_async_observer, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((observer_queue_size != nullptr) && (observer_queue_size->isSet())){
        toJsonValue(QString("observerQueueSize"), observer_queue_size, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::getIncludedPaths() {
    return included_paths;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::setIncludedPaths(OAIConfigNodePropertyArray* included_paths) {
    this->included_paths = included_paths;
    this->m_included_paths_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::getEnableAsyncObserver() {
    return enable_async_observer;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::setEnableAsyncObserver(OAIConfigNodePropertyBoolean* enable_async_observer) {
    this->enable_async_observer = enable_async_observer;
    this->m_enable_async_observer_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::getObserverQueueSize() {
    return observer_queue_size;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::setObserverQueueSize(OAIConfigNodePropertyInteger* observer_queue_size) {
    this->observer_queue_size = observer_queue_size;
    this->m_observer_queue_size_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(included_paths != nullptr && included_paths->isSet()){ isObjectUpdated = true; break;}
        if(enable_async_observer != nullptr && enable_async_observer->isSet()){ isObjectUpdated = true; break;}
        if(observer_queue_size != nullptr && observer_queue_size->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

