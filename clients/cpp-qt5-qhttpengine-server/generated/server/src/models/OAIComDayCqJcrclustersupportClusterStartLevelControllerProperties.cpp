/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties() {
    this->init();
}

OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::~OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties() {
    
}

void
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::init() {
    m_cluster_level_enable_isSet = false;
    m_cluster_master_level_isSet = false;
    m_cluster_slave_level_isSet = false;
}

void
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(cluster_level_enable, json[QString("cluster.level.enable")]);
    
    ::OpenAPI::fromJsonValue(cluster_master_level, json[QString("cluster.master.level")]);
    
    ::OpenAPI::fromJsonValue(cluster_slave_level, json[QString("cluster.slave.level")]);
    
}

QString
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::asJsonObject() const {
    QJsonObject obj;
	if(cluster_level_enable.isSet()){
        obj.insert(QString("cluster.level.enable"), ::OpenAPI::toJsonValue(cluster_level_enable));
    }
	if(cluster_master_level.isSet()){
        obj.insert(QString("cluster.master.level"), ::OpenAPI::toJsonValue(cluster_master_level));
    }
	if(cluster_slave_level.isSet()){
        obj.insert(QString("cluster.slave.level"), ::OpenAPI::toJsonValue(cluster_slave_level));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::getClusterLevelEnable() const {
    return cluster_level_enable;
}
void
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::setClusterLevelEnable(const OAIConfigNodePropertyBoolean &cluster_level_enable) {
    this->cluster_level_enable = cluster_level_enable;
    this->m_cluster_level_enable_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::getClusterMasterLevel() const {
    return cluster_master_level;
}
void
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::setClusterMasterLevel(const OAIConfigNodePropertyInteger &cluster_master_level) {
    this->cluster_master_level = cluster_master_level;
    this->m_cluster_master_level_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::getClusterSlaveLevel() const {
    return cluster_slave_level;
}
void
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::setClusterSlaveLevel(const OAIConfigNodePropertyInteger &cluster_slave_level) {
    this->cluster_slave_level = cluster_slave_level;
    this->m_cluster_slave_level_isSet = true;
}


bool
OAIComDayCqJcrclustersupportClusterStartLevelControllerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(cluster_level_enable.isSet()){ isObjectUpdated = true; break;}
    
        if(cluster_master_level.isSet()){ isObjectUpdated = true; break;}
    
        if(cluster_slave_level.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

