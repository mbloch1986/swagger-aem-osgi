/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingHcCoreImplScriptableHealthCheckProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::OrgApacheSlingHcCoreImplScriptableHealthCheckProperties()
{
    m_Hc_nameIsSet = false;
    m_Hc_tagsIsSet = false;
    m_Hc_mbean_nameIsSet = false;
    m_ExpressionIsSet = false;
    m_Language_extensionIsSet = false;
}

OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::~OrgApacheSlingHcCoreImplScriptableHealthCheckProperties()
{
}

void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Hc_nameIsSet)
    {
        val[utility::conversions::to_string_t("hc.name")] = ModelBase::toJson(m_Hc_name);
    }
    if(m_Hc_tagsIsSet)
    {
        val[utility::conversions::to_string_t("hc.tags")] = ModelBase::toJson(m_Hc_tags);
    }
    if(m_Hc_mbean_nameIsSet)
    {
        val[utility::conversions::to_string_t("hc.mbean.name")] = ModelBase::toJson(m_Hc_mbean_name);
    }
    if(m_ExpressionIsSet)
    {
        val[utility::conversions::to_string_t("expression")] = ModelBase::toJson(m_Expression);
    }
    if(m_Language_extensionIsSet)
    {
        val[utility::conversions::to_string_t("language.extension")] = ModelBase::toJson(m_Language_extension);
    }

    return val;
}

void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("hc.name")))
    {
        if(!val[utility::conversions::to_string_t("hc.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("hc.name")]);
            setHcName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hc.tags")))
    {
        if(!val[utility::conversions::to_string_t("hc.tags")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("hc.tags")]);
            setHcTags( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hc.mbean.name")))
    {
        if(!val[utility::conversions::to_string_t("hc.mbean.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("hc.mbean.name")]);
            setHcMbeanName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expression")))
    {
        if(!val[utility::conversions::to_string_t("expression")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("expression")]);
            setExpression( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("language.extension")))
    {
        if(!val[utility::conversions::to_string_t("language.extension")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("language.extension")]);
            setLanguageExtension( newItem );
        }
    }
}

void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Hc_nameIsSet)
    {
        if (m_Hc_name.get())
        {
            m_Hc_name->toMultipart(multipart, utility::conversions::to_string_t("hc.name."));
        }
    }
    if(m_Hc_tagsIsSet)
    {
        if (m_Hc_tags.get())
        {
            m_Hc_tags->toMultipart(multipart, utility::conversions::to_string_t("hc.tags."));
        }
    }
    if(m_Hc_mbean_nameIsSet)
    {
        if (m_Hc_mbean_name.get())
        {
            m_Hc_mbean_name->toMultipart(multipart, utility::conversions::to_string_t("hc.mbean.name."));
        }
    }
    if(m_ExpressionIsSet)
    {
        if (m_Expression.get())
        {
            m_Expression->toMultipart(multipart, utility::conversions::to_string_t("expression."));
        }
    }
    if(m_Language_extensionIsSet)
    {
        if (m_Language_extension.get())
        {
            m_Language_extension->toMultipart(multipart, utility::conversions::to_string_t("language.extension."));
        }
    }
}

void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("hc.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("hc.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("hc.name."));
            setHcName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hc.tags")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("hc.tags")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("hc.tags."));
            setHcTags( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hc.mbean.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("hc.mbean.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("hc.mbean.name."));
            setHcMbeanName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expression")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("expression")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("expression."));
            setExpression( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("language.extension")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("language.extension")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("language.extension."));
            setLanguageExtension( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::getHcName() const
{
    return m_Hc_name;
}


void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::setHcName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Hc_name = value;
    m_Hc_nameIsSet = true;
}
bool OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::hcNameIsSet() const
{
    return m_Hc_nameIsSet;
}

void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::unsetHc_name()
{
    m_Hc_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::getHcTags() const
{
    return m_Hc_tags;
}


void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::setHcTags(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Hc_tags = value;
    m_Hc_tagsIsSet = true;
}
bool OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::hcTagsIsSet() const
{
    return m_Hc_tagsIsSet;
}

void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::unsetHc_tags()
{
    m_Hc_tagsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::getHcMbeanName() const
{
    return m_Hc_mbean_name;
}


void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::setHcMbeanName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Hc_mbean_name = value;
    m_Hc_mbean_nameIsSet = true;
}
bool OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::hcMbeanNameIsSet() const
{
    return m_Hc_mbean_nameIsSet;
}

void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::unsetHc_mbean_name()
{
    m_Hc_mbean_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::getExpression() const
{
    return m_Expression;
}


void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::setExpression(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Expression = value;
    m_ExpressionIsSet = true;
}
bool OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::expressionIsSet() const
{
    return m_ExpressionIsSet;
}

void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::unsetExpression()
{
    m_ExpressionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::getLanguageExtension() const
{
    return m_Language_extension;
}


void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::setLanguageExtension(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Language_extension = value;
    m_Language_extensionIsSet = true;
}
bool OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::languageExtensionIsSet() const
{
    return m_Language_extensionIsSet;
}

void OrgApacheSlingHcCoreImplScriptableHealthCheckProperties::unsetLanguage_extension()
{
    m_Language_extensionIsSet = false;
}

}
}
}
}

