/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties()
{
    m_NameIsSet = false;
    m_TypeIsSet = false;
    m_Format_targetIsSet = false;
    m_TempFsFolderIsSet = false;
    m_FileThresholdIsSet = false;
    m_MemoryUnitIsSet = false;
    m_UseOffHeapMemoryIsSet = false;
    m_DigestAlgorithmIsSet = false;
    m_MonitoringQueueSizeIsSet = false;
    m_CleanupDelayIsSet = false;
    m_Package_filtersIsSet = false;
    m_Property_filtersIsSet = false;
    
}

OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::~OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties()
{
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val["type"] = ModelBase::toJson(m_Type);
    }
    if(m_Format_targetIsSet)
    {
        val["format.target"] = ModelBase::toJson(m_Format_target);
    }
    if(m_TempFsFolderIsSet)
    {
        val["tempFsFolder"] = ModelBase::toJson(m_TempFsFolder);
    }
    if(m_FileThresholdIsSet)
    {
        val["fileThreshold"] = ModelBase::toJson(m_FileThreshold);
    }
    if(m_MemoryUnitIsSet)
    {
        val["memoryUnit"] = ModelBase::toJson(m_MemoryUnit);
    }
    if(m_UseOffHeapMemoryIsSet)
    {
        val["useOffHeapMemory"] = ModelBase::toJson(m_UseOffHeapMemory);
    }
    if(m_DigestAlgorithmIsSet)
    {
        val["digestAlgorithm"] = ModelBase::toJson(m_DigestAlgorithm);
    }
    if(m_MonitoringQueueSizeIsSet)
    {
        val["monitoringQueueSize"] = ModelBase::toJson(m_MonitoringQueueSize);
    }
    if(m_CleanupDelayIsSet)
    {
        val["cleanupDelay"] = ModelBase::toJson(m_CleanupDelay);
    }
    if(m_Package_filtersIsSet)
    {
        val["package.filters"] = ModelBase::toJson(m_Package_filters);
    }
    if(m_Property_filtersIsSet)
    {
        val["property.filters"] = ModelBase::toJson(m_Property_filters);
    }
    

    return val;
}

void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("type") != val.end())
    {
        if(!val["type"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["type"]);
            setType( newItem );
        }
        
    }
    if(val.find("format.target") != val.end())
    {
        if(!val["format.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["format.target"]);
            setFormatTarget( newItem );
        }
        
    }
    if(val.find("tempFsFolder") != val.end())
    {
        if(!val["tempFsFolder"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["tempFsFolder"]);
            setTempFsFolder( newItem );
        }
        
    }
    if(val.find("fileThreshold") != val.end())
    {
        if(!val["fileThreshold"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["fileThreshold"]);
            setFileThreshold( newItem );
        }
        
    }
    if(val.find("memoryUnit") != val.end())
    {
        if(!val["memoryUnit"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["memoryUnit"]);
            setMemoryUnit( newItem );
        }
        
    }
    if(val.find("useOffHeapMemory") != val.end())
    {
        if(!val["useOffHeapMemory"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["useOffHeapMemory"]);
            setUseOffHeapMemory( newItem );
        }
        
    }
    if(val.find("digestAlgorithm") != val.end())
    {
        if(!val["digestAlgorithm"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["digestAlgorithm"]);
            setDigestAlgorithm( newItem );
        }
        
    }
    if(val.find("monitoringQueueSize") != val.end())
    {
        if(!val["monitoringQueueSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["monitoringQueueSize"]);
            setMonitoringQueueSize( newItem );
        }
        
    }
    if(val.find("cleanupDelay") != val.end())
    {
        if(!val["cleanupDelay"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cleanupDelay"]);
            setCleanupDelay( newItem );
        }
        
    }
    if(val.find("package.filters") != val.end())
    {
        if(!val["package.filters"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["package.filters"]);
            setPackageFilters( newItem );
        }
        
    }
    if(val.find("property.filters") != val.end())
    {
        if(!val["property.filters"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["property.filters"]);
            setPropertyFilters( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getName() const
{
    return m_Name;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setName(ConfigNodePropertyString const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::nameIsSet() const
{
    return m_NameIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetName()
{
    m_NameIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getType() const
{
    return m_Type;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setType(ConfigNodePropertyDropDown const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::typeIsSet() const
{
    return m_TypeIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetType()
{
    m_TypeIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getFormatTarget() const
{
    return m_Format_target;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setFormatTarget(ConfigNodePropertyString const& value)
{
    m_Format_target = value;
    m_Format_targetIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::formatTargetIsSet() const
{
    return m_Format_targetIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetFormat_target()
{
    m_Format_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getTempFsFolder() const
{
    return m_TempFsFolder;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setTempFsFolder(ConfigNodePropertyString const& value)
{
    m_TempFsFolder = value;
    m_TempFsFolderIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::tempFsFolderIsSet() const
{
    return m_TempFsFolderIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetTempFsFolder()
{
    m_TempFsFolderIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getFileThreshold() const
{
    return m_FileThreshold;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setFileThreshold(ConfigNodePropertyInteger const& value)
{
    m_FileThreshold = value;
    m_FileThresholdIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::fileThresholdIsSet() const
{
    return m_FileThresholdIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetFileThreshold()
{
    m_FileThresholdIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getMemoryUnit() const
{
    return m_MemoryUnit;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setMemoryUnit(ConfigNodePropertyDropDown const& value)
{
    m_MemoryUnit = value;
    m_MemoryUnitIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::memoryUnitIsSet() const
{
    return m_MemoryUnitIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetMemoryUnit()
{
    m_MemoryUnitIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getUseOffHeapMemory() const
{
    return m_UseOffHeapMemory;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setUseOffHeapMemory(ConfigNodePropertyBoolean const& value)
{
    m_UseOffHeapMemory = value;
    m_UseOffHeapMemoryIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::useOffHeapMemoryIsSet() const
{
    return m_UseOffHeapMemoryIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetUseOffHeapMemory()
{
    m_UseOffHeapMemoryIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getDigestAlgorithm() const
{
    return m_DigestAlgorithm;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setDigestAlgorithm(ConfigNodePropertyDropDown const& value)
{
    m_DigestAlgorithm = value;
    m_DigestAlgorithmIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::digestAlgorithmIsSet() const
{
    return m_DigestAlgorithmIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetDigestAlgorithm()
{
    m_DigestAlgorithmIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getMonitoringQueueSize() const
{
    return m_MonitoringQueueSize;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setMonitoringQueueSize(ConfigNodePropertyInteger const& value)
{
    m_MonitoringQueueSize = value;
    m_MonitoringQueueSizeIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::monitoringQueueSizeIsSet() const
{
    return m_MonitoringQueueSizeIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetMonitoringQueueSize()
{
    m_MonitoringQueueSizeIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getCleanupDelay() const
{
    return m_CleanupDelay;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setCleanupDelay(ConfigNodePropertyInteger const& value)
{
    m_CleanupDelay = value;
    m_CleanupDelayIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::cleanupDelayIsSet() const
{
    return m_CleanupDelayIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetCleanupDelay()
{
    m_CleanupDelayIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getPackageFilters() const
{
    return m_Package_filters;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setPackageFilters(ConfigNodePropertyArray const& value)
{
    m_Package_filters = value;
    m_Package_filtersIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::packageFiltersIsSet() const
{
    return m_Package_filtersIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetPackage_filters()
{
    m_Package_filtersIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::getPropertyFilters() const
{
    return m_Property_filters;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::setPropertyFilters(ConfigNodePropertyArray const& value)
{
    m_Property_filters = value;
    m_Property_filtersIsSet = true;
}
bool OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::propertyFiltersIsSet() const
{
    return m_Property_filtersIsSet;
}
void OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties::unsetProperty_filters()
{
    m_Property_filtersIsSet = false;
}

}
}
}
}

