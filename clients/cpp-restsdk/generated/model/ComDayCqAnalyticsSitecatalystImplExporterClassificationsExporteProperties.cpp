/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties()
{
    m_Allowed_pathsIsSet = false;
    m_Cq_analytics_saint_exporter_pagesizeIsSet = false;
}

ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::~ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties()
{
}

void ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Allowed_pathsIsSet)
    {
        val[utility::conversions::to_string_t("allowed.paths")] = ModelBase::toJson(m_Allowed_paths);
    }
    if(m_Cq_analytics_saint_exporter_pagesizeIsSet)
    {
        val[utility::conversions::to_string_t("cq.analytics.saint.exporter.pagesize")] = ModelBase::toJson(m_Cq_analytics_saint_exporter_pagesize);
    }

    return val;
}

void ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("allowed.paths")))
    {
        if(!val[utility::conversions::to_string_t("allowed.paths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("allowed.paths")]);
            setAllowedPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.analytics.saint.exporter.pagesize")))
    {
        if(!val[utility::conversions::to_string_t("cq.analytics.saint.exporter.pagesize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.analytics.saint.exporter.pagesize")]);
            setCqAnalyticsSaintExporterPagesize( newItem );
        }
    }
}

void ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Allowed_pathsIsSet)
    {
        if (m_Allowed_paths.get())
        {
            m_Allowed_paths->toMultipart(multipart, utility::conversions::to_string_t("allowed.paths."));
        }
    }
    if(m_Cq_analytics_saint_exporter_pagesizeIsSet)
    {
        if (m_Cq_analytics_saint_exporter_pagesize.get())
        {
            m_Cq_analytics_saint_exporter_pagesize->toMultipart(multipart, utility::conversions::to_string_t("cq.analytics.saint.exporter.pagesize."));
        }
    }
}

void ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("allowed.paths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("allowed.paths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("allowed.paths."));
            setAllowedPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.saint.exporter.pagesize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.analytics.saint.exporter.pagesize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.analytics.saint.exporter.pagesize."));
            setCqAnalyticsSaintExporterPagesize( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::getAllowedPaths() const
{
    return m_Allowed_paths;
}


void ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::setAllowedPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Allowed_paths = value;
    m_Allowed_pathsIsSet = true;
}
bool ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::allowedPathsIsSet() const
{
    return m_Allowed_pathsIsSet;
}

void ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::unsetAllowed_paths()
{
    m_Allowed_pathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::getCqAnalyticsSaintExporterPagesize() const
{
    return m_Cq_analytics_saint_exporter_pagesize;
}


void ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::setCqAnalyticsSaintExporterPagesize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_analytics_saint_exporter_pagesize = value;
    m_Cq_analytics_saint_exporter_pagesizeIsSet = true;
}
bool ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::cqAnalyticsSaintExporterPagesizeIsSet() const
{
    return m_Cq_analytics_saint_exporter_pagesizeIsSet;
}

void ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties::unsetCq_analytics_saint_exporter_pagesize()
{
    m_Cq_analytics_saint_exporter_pagesizeIsSet = false;
}

}
}
}
}

