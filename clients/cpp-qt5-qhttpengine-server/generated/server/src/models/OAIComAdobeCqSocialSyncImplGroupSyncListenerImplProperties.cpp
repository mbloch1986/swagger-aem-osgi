/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties() {
    this->init();
}

OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::~OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties() {
    
}

void
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::init() {
    m_nodetypes_isSet = false;
    m_ignorableprops_isSet = false;
    m_ignorablenodes_isSet = false;
    m_enabled_isSet = false;
    m_distfolders_isSet = false;
}

void
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(nodetypes, json[QString("nodetypes")]);
    
    ::OpenAPI::fromJsonValue(ignorableprops, json[QString("ignorableprops")]);
    
    ::OpenAPI::fromJsonValue(ignorablenodes, json[QString("ignorablenodes")]);
    
    ::OpenAPI::fromJsonValue(enabled, json[QString("enabled")]);
    
    ::OpenAPI::fromJsonValue(distfolders, json[QString("distfolders")]);
    
}

QString
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(nodetypes.isSet()){
        obj.insert(QString("nodetypes"), ::OpenAPI::toJsonValue(nodetypes));
    }
	if(ignorableprops.isSet()){
        obj.insert(QString("ignorableprops"), ::OpenAPI::toJsonValue(ignorableprops));
    }
	if(ignorablenodes.isSet()){
        obj.insert(QString("ignorablenodes"), ::OpenAPI::toJsonValue(ignorablenodes));
    }
	if(enabled.isSet()){
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(enabled));
    }
	if(distfolders.isSet()){
        obj.insert(QString("distfolders"), ::OpenAPI::toJsonValue(distfolders));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::getNodetypes() const {
    return nodetypes;
}
void
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::setNodetypes(const OAIConfigNodePropertyArray &nodetypes) {
    this->nodetypes = nodetypes;
    this->m_nodetypes_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::getIgnorableprops() const {
    return ignorableprops;
}
void
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::setIgnorableprops(const OAIConfigNodePropertyArray &ignorableprops) {
    this->ignorableprops = ignorableprops;
    this->m_ignorableprops_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::getIgnorablenodes() const {
    return ignorablenodes;
}
void
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::setIgnorablenodes(const OAIConfigNodePropertyString &ignorablenodes) {
    this->ignorablenodes = ignorablenodes;
    this->m_ignorablenodes_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::getEnabled() const {
    return enabled;
}
void
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::setEnabled(const OAIConfigNodePropertyBoolean &enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::getDistfolders() const {
    return distfolders;
}
void
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::setDistfolders(const OAIConfigNodePropertyString &distfolders) {
    this->distfolders = distfolders;
    this->m_distfolders_isSet = true;
}


bool
OAIComAdobeCqSocialSyncImplGroupSyncListenerImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(nodetypes.isSet()){ isObjectUpdated = true; break;}
    
        if(ignorableprops.isSet()){ isObjectUpdated = true; break;}
    
        if(ignorablenodes.isSet()){ isObjectUpdated = true; break;}
    
        if(enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(distfolders.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

