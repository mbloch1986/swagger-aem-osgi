/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqStatisticsImplStatisticsServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqStatisticsImplStatisticsServiceImplProperties::ComDayCqStatisticsImplStatisticsServiceImplProperties()
{
    m_Scheduler_periodIsSet = false;
    m_Scheduler_concurrentIsSet = false;
    m_PathIsSet = false;
    m_WorkspaceIsSet = false;
    m_KeywordsPathIsSet = false;
    m_AsyncEntriesIsSet = false;
}

ComDayCqStatisticsImplStatisticsServiceImplProperties::~ComDayCqStatisticsImplStatisticsServiceImplProperties()
{
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqStatisticsImplStatisticsServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Scheduler_periodIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.period")] = ModelBase::toJson(m_Scheduler_period);
    }
    if(m_Scheduler_concurrentIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.concurrent")] = ModelBase::toJson(m_Scheduler_concurrent);
    }
    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_WorkspaceIsSet)
    {
        val[utility::conversions::to_string_t("workspace")] = ModelBase::toJson(m_Workspace);
    }
    if(m_KeywordsPathIsSet)
    {
        val[utility::conversions::to_string_t("keywordsPath")] = ModelBase::toJson(m_KeywordsPath);
    }
    if(m_AsyncEntriesIsSet)
    {
        val[utility::conversions::to_string_t("asyncEntries")] = ModelBase::toJson(m_AsyncEntries);
    }

    return val;
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("scheduler.period")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.period")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.period")]);
            setSchedulerPeriod( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduler.concurrent")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.concurrent")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.concurrent")]);
            setSchedulerConcurrent( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        if(!val[utility::conversions::to_string_t("path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path")]);
            setPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspace")))
    {
        if(!val[utility::conversions::to_string_t("workspace")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("workspace")]);
            setWorkspace( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("keywordsPath")))
    {
        if(!val[utility::conversions::to_string_t("keywordsPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("keywordsPath")]);
            setKeywordsPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("asyncEntries")))
    {
        if(!val[utility::conversions::to_string_t("asyncEntries")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("asyncEntries")]);
            setAsyncEntries( newItem );
        }
    }
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Scheduler_periodIsSet)
    {
        if (m_Scheduler_period.get())
        {
            m_Scheduler_period->toMultipart(multipart, utility::conversions::to_string_t("scheduler.period."));
        }
    }
    if(m_Scheduler_concurrentIsSet)
    {
        if (m_Scheduler_concurrent.get())
        {
            m_Scheduler_concurrent->toMultipart(multipart, utility::conversions::to_string_t("scheduler.concurrent."));
        }
    }
    if(m_PathIsSet)
    {
        if (m_Path.get())
        {
            m_Path->toMultipart(multipart, utility::conversions::to_string_t("path."));
        }
    }
    if(m_WorkspaceIsSet)
    {
        if (m_Workspace.get())
        {
            m_Workspace->toMultipart(multipart, utility::conversions::to_string_t("workspace."));
        }
    }
    if(m_KeywordsPathIsSet)
    {
        if (m_KeywordsPath.get())
        {
            m_KeywordsPath->toMultipart(multipart, utility::conversions::to_string_t("keywordsPath."));
        }
    }
    if(m_AsyncEntriesIsSet)
    {
        if (m_AsyncEntries.get())
        {
            m_AsyncEntries->toMultipart(multipart, utility::conversions::to_string_t("asyncEntries."));
        }
    }
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.period")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.period")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.period."));
            setSchedulerPeriod( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.concurrent")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.concurrent")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.concurrent."));
            setSchedulerConcurrent( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path."));
            setPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspace")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("workspace")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("workspace."));
            setWorkspace( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("keywordsPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("keywordsPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("keywordsPath."));
            setKeywordsPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("asyncEntries")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("asyncEntries")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("asyncEntries."));
            setAsyncEntries( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqStatisticsImplStatisticsServiceImplProperties::getSchedulerPeriod() const
{
    return m_Scheduler_period;
}


void ComDayCqStatisticsImplStatisticsServiceImplProperties::setSchedulerPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Scheduler_period = value;
    m_Scheduler_periodIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::schedulerPeriodIsSet() const
{
    return m_Scheduler_periodIsSet;
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetScheduler_period()
{
    m_Scheduler_periodIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqStatisticsImplStatisticsServiceImplProperties::getSchedulerConcurrent() const
{
    return m_Scheduler_concurrent;
}


void ComDayCqStatisticsImplStatisticsServiceImplProperties::setSchedulerConcurrent(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Scheduler_concurrent = value;
    m_Scheduler_concurrentIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::schedulerConcurrentIsSet() const
{
    return m_Scheduler_concurrentIsSet;
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetScheduler_concurrent()
{
    m_Scheduler_concurrentIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqStatisticsImplStatisticsServiceImplProperties::getPath() const
{
    return m_Path;
}


void ComDayCqStatisticsImplStatisticsServiceImplProperties::setPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::pathIsSet() const
{
    return m_PathIsSet;
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetPath()
{
    m_PathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqStatisticsImplStatisticsServiceImplProperties::getWorkspace() const
{
    return m_Workspace;
}


void ComDayCqStatisticsImplStatisticsServiceImplProperties::setWorkspace(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Workspace = value;
    m_WorkspaceIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::workspaceIsSet() const
{
    return m_WorkspaceIsSet;
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetWorkspace()
{
    m_WorkspaceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqStatisticsImplStatisticsServiceImplProperties::getKeywordsPath() const
{
    return m_KeywordsPath;
}


void ComDayCqStatisticsImplStatisticsServiceImplProperties::setKeywordsPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_KeywordsPath = value;
    m_KeywordsPathIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::keywordsPathIsSet() const
{
    return m_KeywordsPathIsSet;
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetKeywordsPath()
{
    m_KeywordsPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqStatisticsImplStatisticsServiceImplProperties::getAsyncEntries() const
{
    return m_AsyncEntries;
}


void ComDayCqStatisticsImplStatisticsServiceImplProperties::setAsyncEntries(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_AsyncEntries = value;
    m_AsyncEntriesIsSet = true;
}
bool ComDayCqStatisticsImplStatisticsServiceImplProperties::asyncEntriesIsSet() const
{
    return m_AsyncEntriesIsSet;
}

void ComDayCqStatisticsImplStatisticsServiceImplProperties::unsetAsyncEntries()
{
    m_AsyncEntriesIsSet = false;
}

}
}
}
}

