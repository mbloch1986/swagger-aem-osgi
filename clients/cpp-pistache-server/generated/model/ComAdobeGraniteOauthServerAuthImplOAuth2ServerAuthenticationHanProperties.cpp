/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties()
{
    m_PathIsSet = false;
    m_Jaas_controlFlagIsSet = false;
    m_Jaas_realmNameIsSet = false;
    m_Jaas_rankingIsSet = false;
    m_Oauth_offline_validationIsSet = false;
    
}

ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::~ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties()
{
}

void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_Jaas_controlFlagIsSet)
    {
        val["jaas.controlFlag"] = ModelBase::toJson(m_Jaas_controlFlag);
    }
    if(m_Jaas_realmNameIsSet)
    {
        val["jaas.realmName"] = ModelBase::toJson(m_Jaas_realmName);
    }
    if(m_Jaas_rankingIsSet)
    {
        val["jaas.ranking"] = ModelBase::toJson(m_Jaas_ranking);
    }
    if(m_Oauth_offline_validationIsSet)
    {
        val["oauth.offline.validation"] = ModelBase::toJson(m_Oauth_offline_validation);
    }
    

    return val;
}

void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::fromJson(nlohmann::json& val)
{
    if(val.find("path") != val.end())
    {
        if(!val["path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path"]);
            setPath( newItem );
        }
        
    }
    if(val.find("jaas.controlFlag") != val.end())
    {
        if(!val["jaas.controlFlag"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["jaas.controlFlag"]);
            setJaasControlFlag( newItem );
        }
        
    }
    if(val.find("jaas.realmName") != val.end())
    {
        if(!val["jaas.realmName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["jaas.realmName"]);
            setJaasRealmName( newItem );
        }
        
    }
    if(val.find("jaas.ranking") != val.end())
    {
        if(!val["jaas.ranking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["jaas.ranking"]);
            setJaasRanking( newItem );
        }
        
    }
    if(val.find("oauth.offline.validation") != val.end())
    {
        if(!val["oauth.offline.validation"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["oauth.offline.validation"]);
            setOauthOfflineValidation( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::getPath() const
{
    return m_Path;
}
void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::setPath(ConfigNodePropertyString const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::pathIsSet() const
{
    return m_PathIsSet;
}
void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::unsetPath()
{
    m_PathIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::getJaasControlFlag() const
{
    return m_Jaas_controlFlag;
}
void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::setJaasControlFlag(ConfigNodePropertyString const& value)
{
    m_Jaas_controlFlag = value;
    m_Jaas_controlFlagIsSet = true;
}
bool ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::jaasControlFlagIsSet() const
{
    return m_Jaas_controlFlagIsSet;
}
void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::unsetJaas_controlFlag()
{
    m_Jaas_controlFlagIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::getJaasRealmName() const
{
    return m_Jaas_realmName;
}
void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::setJaasRealmName(ConfigNodePropertyString const& value)
{
    m_Jaas_realmName = value;
    m_Jaas_realmNameIsSet = true;
}
bool ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::jaasRealmNameIsSet() const
{
    return m_Jaas_realmNameIsSet;
}
void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::unsetJaas_realmName()
{
    m_Jaas_realmNameIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::getJaasRanking() const
{
    return m_Jaas_ranking;
}
void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::setJaasRanking(ConfigNodePropertyInteger const& value)
{
    m_Jaas_ranking = value;
    m_Jaas_rankingIsSet = true;
}
bool ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::jaasRankingIsSet() const
{
    return m_Jaas_rankingIsSet;
}
void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::unsetJaas_ranking()
{
    m_Jaas_rankingIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::getOauthOfflineValidation() const
{
    return m_Oauth_offline_validation;
}
void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::setOauthOfflineValidation(ConfigNodePropertyBoolean const& value)
{
    m_Oauth_offline_validation = value;
    m_Oauth_offline_validationIsSet = true;
}
bool ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::oauthOfflineValidationIsSet() const
{
    return m_Oauth_offline_validationIsSet;
}
void ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanProperties::unsetOauth_offline_validation()
{
    m_Oauth_offline_validationIsSet = false;
}

}
}
}
}

