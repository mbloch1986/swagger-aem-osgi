/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties()
{
    m_Com_adobe_cq_screens_analytics_impl_urlIsSet = false;
    m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet = false;
    m_Com_adobe_cq_screens_analytics_impl_projectIsSet = false;
    m_Com_adobe_cq_screens_analytics_impl_environmentIsSet = false;
    m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet = false;
}

ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::~ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties()
{
}

void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Com_adobe_cq_screens_analytics_impl_urlIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.url")] = ModelBase::toJson(m_Com_adobe_cq_screens_analytics_impl_url);
    }
    if(m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.apikey")] = ModelBase::toJson(m_Com_adobe_cq_screens_analytics_impl_apikey);
    }
    if(m_Com_adobe_cq_screens_analytics_impl_projectIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.project")] = ModelBase::toJson(m_Com_adobe_cq_screens_analytics_impl_project);
    }
    if(m_Com_adobe_cq_screens_analytics_impl_environmentIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.environment")] = ModelBase::toJson(m_Com_adobe_cq_screens_analytics_impl_environment);
    }
    if(m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.sendFrequency")] = ModelBase::toJson(m_Com_adobe_cq_screens_analytics_impl_sendFrequency);
    }

    return val;
}

void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.url")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.url")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.url")]);
            setComAdobeCqScreensAnalyticsImplUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.apikey")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.apikey")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.apikey")]);
            setComAdobeCqScreensAnalyticsImplApikey( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.project")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.project")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.project")]);
            setComAdobeCqScreensAnalyticsImplProject( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.environment")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.environment")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.environment")]);
            setComAdobeCqScreensAnalyticsImplEnvironment( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.sendFrequency")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.sendFrequency")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.sendFrequency")]);
            setComAdobeCqScreensAnalyticsImplSendFrequency( newItem );
        }
    }
}

void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Com_adobe_cq_screens_analytics_impl_urlIsSet)
    {
        if (m_Com_adobe_cq_screens_analytics_impl_url.get())
        {
            m_Com_adobe_cq_screens_analytics_impl_url->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.url."));
        }
    }
    if(m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet)
    {
        if (m_Com_adobe_cq_screens_analytics_impl_apikey.get())
        {
            m_Com_adobe_cq_screens_analytics_impl_apikey->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.apikey."));
        }
    }
    if(m_Com_adobe_cq_screens_analytics_impl_projectIsSet)
    {
        if (m_Com_adobe_cq_screens_analytics_impl_project.get())
        {
            m_Com_adobe_cq_screens_analytics_impl_project->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.project."));
        }
    }
    if(m_Com_adobe_cq_screens_analytics_impl_environmentIsSet)
    {
        if (m_Com_adobe_cq_screens_analytics_impl_environment.get())
        {
            m_Com_adobe_cq_screens_analytics_impl_environment->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.environment."));
        }
    }
    if(m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet)
    {
        if (m_Com_adobe_cq_screens_analytics_impl_sendFrequency.get())
        {
            m_Com_adobe_cq_screens_analytics_impl_sendFrequency->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.sendFrequency."));
        }
    }
}

void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.url")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.url")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.url."));
            setComAdobeCqScreensAnalyticsImplUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.apikey")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.apikey")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.apikey."));
            setComAdobeCqScreensAnalyticsImplApikey( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.project")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.project")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.project."));
            setComAdobeCqScreensAnalyticsImplProject( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.environment")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.environment")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.environment."));
            setComAdobeCqScreensAnalyticsImplEnvironment( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.sendFrequency")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.sendFrequency")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.analytics.impl.sendFrequency."));
            setComAdobeCqScreensAnalyticsImplSendFrequency( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::getComAdobeCqScreensAnalyticsImplUrl() const
{
    return m_Com_adobe_cq_screens_analytics_impl_url;
}


void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::setComAdobeCqScreensAnalyticsImplUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_screens_analytics_impl_url = value;
    m_Com_adobe_cq_screens_analytics_impl_urlIsSet = true;
}
bool ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::comAdobeCqScreensAnalyticsImplUrlIsSet() const
{
    return m_Com_adobe_cq_screens_analytics_impl_urlIsSet;
}

void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::unsetCom_adobe_cq_screens_analytics_impl_url()
{
    m_Com_adobe_cq_screens_analytics_impl_urlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::getComAdobeCqScreensAnalyticsImplApikey() const
{
    return m_Com_adobe_cq_screens_analytics_impl_apikey;
}


void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::setComAdobeCqScreensAnalyticsImplApikey(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_screens_analytics_impl_apikey = value;
    m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet = true;
}
bool ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::comAdobeCqScreensAnalyticsImplApikeyIsSet() const
{
    return m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet;
}

void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::unsetCom_adobe_cq_screens_analytics_impl_apikey()
{
    m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::getComAdobeCqScreensAnalyticsImplProject() const
{
    return m_Com_adobe_cq_screens_analytics_impl_project;
}


void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::setComAdobeCqScreensAnalyticsImplProject(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_screens_analytics_impl_project = value;
    m_Com_adobe_cq_screens_analytics_impl_projectIsSet = true;
}
bool ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::comAdobeCqScreensAnalyticsImplProjectIsSet() const
{
    return m_Com_adobe_cq_screens_analytics_impl_projectIsSet;
}

void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::unsetCom_adobe_cq_screens_analytics_impl_project()
{
    m_Com_adobe_cq_screens_analytics_impl_projectIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::getComAdobeCqScreensAnalyticsImplEnvironment() const
{
    return m_Com_adobe_cq_screens_analytics_impl_environment;
}


void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::setComAdobeCqScreensAnalyticsImplEnvironment(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Com_adobe_cq_screens_analytics_impl_environment = value;
    m_Com_adobe_cq_screens_analytics_impl_environmentIsSet = true;
}
bool ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::comAdobeCqScreensAnalyticsImplEnvironmentIsSet() const
{
    return m_Com_adobe_cq_screens_analytics_impl_environmentIsSet;
}

void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::unsetCom_adobe_cq_screens_analytics_impl_environment()
{
    m_Com_adobe_cq_screens_analytics_impl_environmentIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::getComAdobeCqScreensAnalyticsImplSendFrequency() const
{
    return m_Com_adobe_cq_screens_analytics_impl_sendFrequency;
}


void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::setComAdobeCqScreensAnalyticsImplSendFrequency(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Com_adobe_cq_screens_analytics_impl_sendFrequency = value;
    m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet = true;
}
bool ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::comAdobeCqScreensAnalyticsImplSendFrequencyIsSet() const
{
    return m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet;
}

void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::unsetCom_adobe_cq_screens_analytics_impl_sendFrequency()
{
    m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet = false;
}

}
}
}
}

