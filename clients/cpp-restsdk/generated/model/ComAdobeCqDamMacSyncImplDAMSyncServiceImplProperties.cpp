/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties()
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_pathsIsSet = false;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditionsIsSet = false;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_msIsSet = false;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_platformIsSet = false;
}

ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::~ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties()
{
}

void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_pathsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths")] = ModelBase::toJson(m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths);
    }
    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditionsIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions")] = ModelBase::toJson(m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions);
    }
    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_msIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms")] = ModelBase::toJson(m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms);
    }
    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_platformIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.platform")] = ModelBase::toJson(m_Com_adobe_cq_dam_mac_sync_damsyncservice_platform);
    }

    return val;
}

void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths")]);
            setComAdobeCqDamMacSyncDamsyncserviceRegisteredPaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions")]);
            setComAdobeCqDamMacSyncDamsyncserviceSyncRenditions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms")]);
            setComAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.platform")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.platform")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.platform")]);
            setComAdobeCqDamMacSyncDamsyncservicePlatform( newItem );
        }
    }
}

void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_pathsIsSet)
    {
        if (m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths.get())
        {
            m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths."));
        }
    }
    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditionsIsSet)
    {
        if (m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions.get())
        {
            m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions."));
        }
    }
    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_msIsSet)
    {
        if (m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms.get())
        {
            m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms."));
        }
    }
    if(m_Com_adobe_cq_dam_mac_sync_damsyncservice_platformIsSet)
    {
        if (m_Com_adobe_cq_dam_mac_sync_damsyncservice_platform.get())
        {
            m_Com_adobe_cq_dam_mac_sync_damsyncservice_platform->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.platform."));
        }
    }
}

void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths."));
            setComAdobeCqDamMacSyncDamsyncserviceRegisteredPaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions."));
            setComAdobeCqDamMacSyncDamsyncserviceSyncRenditions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms."));
            setComAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.platform")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.platform")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.dam.mac.sync.damsyncservice.platform."));
            setComAdobeCqDamMacSyncDamsyncservicePlatform( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::getComAdobeCqDamMacSyncDamsyncserviceRegisteredPaths() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths;
}


void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::setComAdobeCqDamMacSyncDamsyncserviceRegisteredPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths = value;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_pathsIsSet = true;
}
bool ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::comAdobeCqDamMacSyncDamsyncserviceRegisteredPathsIsSet() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_pathsIsSet;
}

void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::unsetCom_adobe_cq_dam_mac_sync_damsyncservice_registered_paths()
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_registered_pathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::getComAdobeCqDamMacSyncDamsyncserviceSyncRenditions() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions;
}


void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::setComAdobeCqDamMacSyncDamsyncserviceSyncRenditions(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions = value;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditionsIsSet = true;
}
bool ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::comAdobeCqDamMacSyncDamsyncserviceSyncRenditionsIsSet() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditionsIsSet;
}

void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::unsetCom_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions()
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::getComAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms;
}


void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::setComAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms = value;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_msIsSet = true;
}
bool ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMsIsSet() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_msIsSet;
}

void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::unsetCom_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms()
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_msIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::getComAdobeCqDamMacSyncDamsyncservicePlatform() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_platform;
}


void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::setComAdobeCqDamMacSyncDamsyncservicePlatform(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_platform = value;
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_platformIsSet = true;
}
bool ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::comAdobeCqDamMacSyncDamsyncservicePlatformIsSet() const
{
    return m_Com_adobe_cq_dam_mac_sync_damsyncservice_platformIsSet;
}

void ComAdobeCqDamMacSyncImplDAMSyncServiceImplProperties::unsetCom_adobe_cq_dam_mac_sync_damsyncservice_platform()
{
    m_Com_adobe_cq_dam_mac_sync_damsyncservice_platformIsSet = false;
}

}
}
}
}

