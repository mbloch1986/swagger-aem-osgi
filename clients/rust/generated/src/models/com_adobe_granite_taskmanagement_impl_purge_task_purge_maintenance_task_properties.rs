/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
  #[serde(rename = "purgeCompleted")]
  purge_completed: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "completedAge")]
  completed_age: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "purgeActive")]
  purge_active: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "activeAge")]
  active_age: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "saveThreshold")]
  save_threshold: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
  pub fn new() -> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
    ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
      purge_completed: None,
      completed_age: None,
      purge_active: None,
      active_age: None,
      save_threshold: None
    }
  }

  pub fn set_purge_completed(&mut self, purge_completed: ::models::ConfigNodePropertyBoolean) {
    self.purge_completed = Some(purge_completed);
  }

  pub fn with_purge_completed(mut self, purge_completed: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
    self.purge_completed = Some(purge_completed);
    self
  }

  pub fn purge_completed(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.purge_completed.as_ref()
  }

  pub fn reset_purge_completed(&mut self) {
    self.purge_completed = None;
  }

  pub fn set_completed_age(&mut self, completed_age: ::models::ConfigNodePropertyInteger) {
    self.completed_age = Some(completed_age);
  }

  pub fn with_completed_age(mut self, completed_age: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
    self.completed_age = Some(completed_age);
    self
  }

  pub fn completed_age(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.completed_age.as_ref()
  }

  pub fn reset_completed_age(&mut self) {
    self.completed_age = None;
  }

  pub fn set_purge_active(&mut self, purge_active: ::models::ConfigNodePropertyBoolean) {
    self.purge_active = Some(purge_active);
  }

  pub fn with_purge_active(mut self, purge_active: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
    self.purge_active = Some(purge_active);
    self
  }

  pub fn purge_active(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.purge_active.as_ref()
  }

  pub fn reset_purge_active(&mut self) {
    self.purge_active = None;
  }

  pub fn set_active_age(&mut self, active_age: ::models::ConfigNodePropertyInteger) {
    self.active_age = Some(active_age);
  }

  pub fn with_active_age(mut self, active_age: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
    self.active_age = Some(active_age);
    self
  }

  pub fn active_age(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.active_age.as_ref()
  }

  pub fn reset_active_age(&mut self) {
    self.active_age = None;
  }

  pub fn set_save_threshold(&mut self, save_threshold: ::models::ConfigNodePropertyInteger) {
    self.save_threshold = Some(save_threshold);
  }

  pub fn with_save_threshold(mut self, save_threshold: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties {
    self.save_threshold = Some(save_threshold);
    self
  }

  pub fn save_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.save_threshold.as_ref()
  }

  pub fn reset_save_threshold(&mut self) {
    self.save_threshold = None;
  }

}



