/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties()
{
    m_Cq_contentsync_pathrewritertransformer_mapping_linksIsSet = false;
    m_Cq_contentsync_pathrewritertransformer_mapping_clientlibsIsSet = false;
    m_Cq_contentsync_pathrewritertransformer_mapping_imagesIsSet = false;
    m_Cq_contentsync_pathrewritertransformer_attribute_patternIsSet = false;
    m_Cq_contentsync_pathrewritertransformer_clientlibrary_patternIsSet = false;
    m_Cq_contentsync_pathrewritertransformer_clientlibrary_replaceIsSet = false;
}

ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::~ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties()
{
}

void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_contentsync_pathrewritertransformer_mapping_linksIsSet)
    {
        val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.links")] = ModelBase::toJson(m_Cq_contentsync_pathrewritertransformer_mapping_links);
    }
    if(m_Cq_contentsync_pathrewritertransformer_mapping_clientlibsIsSet)
    {
        val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.clientlibs")] = ModelBase::toJson(m_Cq_contentsync_pathrewritertransformer_mapping_clientlibs);
    }
    if(m_Cq_contentsync_pathrewritertransformer_mapping_imagesIsSet)
    {
        val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.images")] = ModelBase::toJson(m_Cq_contentsync_pathrewritertransformer_mapping_images);
    }
    if(m_Cq_contentsync_pathrewritertransformer_attribute_patternIsSet)
    {
        val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.attribute.pattern")] = ModelBase::toJson(m_Cq_contentsync_pathrewritertransformer_attribute_pattern);
    }
    if(m_Cq_contentsync_pathrewritertransformer_clientlibrary_patternIsSet)
    {
        val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.pattern")] = ModelBase::toJson(m_Cq_contentsync_pathrewritertransformer_clientlibrary_pattern);
    }
    if(m_Cq_contentsync_pathrewritertransformer_clientlibrary_replaceIsSet)
    {
        val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.replace")] = ModelBase::toJson(m_Cq_contentsync_pathrewritertransformer_clientlibrary_replace);
    }

    return val;
}

void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.links")))
    {
        if(!val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.links")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.links")]);
            setCqContentsyncPathrewritertransformerMappingLinks( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.clientlibs")))
    {
        if(!val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.clientlibs")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.clientlibs")]);
            setCqContentsyncPathrewritertransformerMappingClientlibs( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.images")))
    {
        if(!val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.images")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.images")]);
            setCqContentsyncPathrewritertransformerMappingImages( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.attribute.pattern")))
    {
        if(!val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.attribute.pattern")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.attribute.pattern")]);
            setCqContentsyncPathrewritertransformerAttributePattern( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.pattern")))
    {
        if(!val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.pattern")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.pattern")]);
            setCqContentsyncPathrewritertransformerClientlibraryPattern( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.replace")))
    {
        if(!val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.replace")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.replace")]);
            setCqContentsyncPathrewritertransformerClientlibraryReplace( newItem );
        }
    }
}

void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_contentsync_pathrewritertransformer_mapping_linksIsSet)
    {
        if (m_Cq_contentsync_pathrewritertransformer_mapping_links.get())
        {
            m_Cq_contentsync_pathrewritertransformer_mapping_links->toMultipart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.links."));
        }
    }
    if(m_Cq_contentsync_pathrewritertransformer_mapping_clientlibsIsSet)
    {
        if (m_Cq_contentsync_pathrewritertransformer_mapping_clientlibs.get())
        {
            m_Cq_contentsync_pathrewritertransformer_mapping_clientlibs->toMultipart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.clientlibs."));
        }
    }
    if(m_Cq_contentsync_pathrewritertransformer_mapping_imagesIsSet)
    {
        if (m_Cq_contentsync_pathrewritertransformer_mapping_images.get())
        {
            m_Cq_contentsync_pathrewritertransformer_mapping_images->toMultipart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.images."));
        }
    }
    if(m_Cq_contentsync_pathrewritertransformer_attribute_patternIsSet)
    {
        if (m_Cq_contentsync_pathrewritertransformer_attribute_pattern.get())
        {
            m_Cq_contentsync_pathrewritertransformer_attribute_pattern->toMultipart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.attribute.pattern."));
        }
    }
    if(m_Cq_contentsync_pathrewritertransformer_clientlibrary_patternIsSet)
    {
        if (m_Cq_contentsync_pathrewritertransformer_clientlibrary_pattern.get())
        {
            m_Cq_contentsync_pathrewritertransformer_clientlibrary_pattern->toMultipart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.pattern."));
        }
    }
    if(m_Cq_contentsync_pathrewritertransformer_clientlibrary_replaceIsSet)
    {
        if (m_Cq_contentsync_pathrewritertransformer_clientlibrary_replace.get())
        {
            m_Cq_contentsync_pathrewritertransformer_clientlibrary_replace->toMultipart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.replace."));
        }
    }
}

void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.links")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.links")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.links."));
            setCqContentsyncPathrewritertransformerMappingLinks( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.clientlibs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.clientlibs")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.clientlibs."));
            setCqContentsyncPathrewritertransformerMappingClientlibs( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.images")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.images")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.mapping.images."));
            setCqContentsyncPathrewritertransformerMappingImages( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.attribute.pattern")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.attribute.pattern")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.attribute.pattern."));
            setCqContentsyncPathrewritertransformerAttributePattern( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.pattern")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.pattern")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.pattern."));
            setCqContentsyncPathrewritertransformerClientlibraryPattern( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.replace")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.replace")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.contentsync.pathrewritertransformer.clientlibrary.replace."));
            setCqContentsyncPathrewritertransformerClientlibraryReplace( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::getCqContentsyncPathrewritertransformerMappingLinks() const
{
    return m_Cq_contentsync_pathrewritertransformer_mapping_links;
}


void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::setCqContentsyncPathrewritertransformerMappingLinks(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_contentsync_pathrewritertransformer_mapping_links = value;
    m_Cq_contentsync_pathrewritertransformer_mapping_linksIsSet = true;
}
bool ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::cqContentsyncPathrewritertransformerMappingLinksIsSet() const
{
    return m_Cq_contentsync_pathrewritertransformer_mapping_linksIsSet;
}

void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::unsetCq_contentsync_pathrewritertransformer_mapping_links()
{
    m_Cq_contentsync_pathrewritertransformer_mapping_linksIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::getCqContentsyncPathrewritertransformerMappingClientlibs() const
{
    return m_Cq_contentsync_pathrewritertransformer_mapping_clientlibs;
}


void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::setCqContentsyncPathrewritertransformerMappingClientlibs(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_contentsync_pathrewritertransformer_mapping_clientlibs = value;
    m_Cq_contentsync_pathrewritertransformer_mapping_clientlibsIsSet = true;
}
bool ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::cqContentsyncPathrewritertransformerMappingClientlibsIsSet() const
{
    return m_Cq_contentsync_pathrewritertransformer_mapping_clientlibsIsSet;
}

void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::unsetCq_contentsync_pathrewritertransformer_mapping_clientlibs()
{
    m_Cq_contentsync_pathrewritertransformer_mapping_clientlibsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::getCqContentsyncPathrewritertransformerMappingImages() const
{
    return m_Cq_contentsync_pathrewritertransformer_mapping_images;
}


void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::setCqContentsyncPathrewritertransformerMappingImages(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_contentsync_pathrewritertransformer_mapping_images = value;
    m_Cq_contentsync_pathrewritertransformer_mapping_imagesIsSet = true;
}
bool ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::cqContentsyncPathrewritertransformerMappingImagesIsSet() const
{
    return m_Cq_contentsync_pathrewritertransformer_mapping_imagesIsSet;
}

void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::unsetCq_contentsync_pathrewritertransformer_mapping_images()
{
    m_Cq_contentsync_pathrewritertransformer_mapping_imagesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::getCqContentsyncPathrewritertransformerAttributePattern() const
{
    return m_Cq_contentsync_pathrewritertransformer_attribute_pattern;
}


void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::setCqContentsyncPathrewritertransformerAttributePattern(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_contentsync_pathrewritertransformer_attribute_pattern = value;
    m_Cq_contentsync_pathrewritertransformer_attribute_patternIsSet = true;
}
bool ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::cqContentsyncPathrewritertransformerAttributePatternIsSet() const
{
    return m_Cq_contentsync_pathrewritertransformer_attribute_patternIsSet;
}

void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::unsetCq_contentsync_pathrewritertransformer_attribute_pattern()
{
    m_Cq_contentsync_pathrewritertransformer_attribute_patternIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::getCqContentsyncPathrewritertransformerClientlibraryPattern() const
{
    return m_Cq_contentsync_pathrewritertransformer_clientlibrary_pattern;
}


void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::setCqContentsyncPathrewritertransformerClientlibraryPattern(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_contentsync_pathrewritertransformer_clientlibrary_pattern = value;
    m_Cq_contentsync_pathrewritertransformer_clientlibrary_patternIsSet = true;
}
bool ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::cqContentsyncPathrewritertransformerClientlibraryPatternIsSet() const
{
    return m_Cq_contentsync_pathrewritertransformer_clientlibrary_patternIsSet;
}

void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::unsetCq_contentsync_pathrewritertransformer_clientlibrary_pattern()
{
    m_Cq_contentsync_pathrewritertransformer_clientlibrary_patternIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::getCqContentsyncPathrewritertransformerClientlibraryReplace() const
{
    return m_Cq_contentsync_pathrewritertransformer_clientlibrary_replace;
}


void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::setCqContentsyncPathrewritertransformerClientlibraryReplace(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_contentsync_pathrewritertransformer_clientlibrary_replace = value;
    m_Cq_contentsync_pathrewritertransformer_clientlibrary_replaceIsSet = true;
}
bool ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::cqContentsyncPathrewritertransformerClientlibraryReplaceIsSet() const
{
    return m_Cq_contentsync_pathrewritertransformer_clientlibrary_replaceIsSet;
}

void ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorProperties::unsetCq_contentsync_pathrewritertransformer_clientlibrary_replace()
{
    m_Cq_contentsync_pathrewritertransformer_clientlibrary_replaceIsSet = false;
}

}
}
}
}

