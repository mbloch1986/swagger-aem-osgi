/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
  #[serde(rename = "path")]
  path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "oauth.clientIds.allowed")]
  oauth_client_ids_allowed: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "auth.bearer.sync.ims")]
  auth_bearer_sync_ims: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "auth.tokenRequestParameter")]
  auth_token_request_parameter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "oauth.bearer.configid")]
  oauth_bearer_configid: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "oauth.jwt.support")]
  oauth_jwt_support: Option<::models::ConfigNodePropertyBoolean>
}

impl ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
  pub fn new() -> ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
    ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
      path: None,
      oauth_client_ids_allowed: None,
      auth_bearer_sync_ims: None,
      auth_token_request_parameter: None,
      oauth_bearer_configid: None,
      oauth_jwt_support: None
    }
  }

  pub fn set_path(&mut self, path: ::models::ConfigNodePropertyString) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_oauth_client_ids_allowed(&mut self, oauth_client_ids_allowed: ::models::ConfigNodePropertyArray) {
    self.oauth_client_ids_allowed = Some(oauth_client_ids_allowed);
  }

  pub fn with_oauth_client_ids_allowed(mut self, oauth_client_ids_allowed: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
    self.oauth_client_ids_allowed = Some(oauth_client_ids_allowed);
    self
  }

  pub fn oauth_client_ids_allowed(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.oauth_client_ids_allowed.as_ref()
  }

  pub fn reset_oauth_client_ids_allowed(&mut self) {
    self.oauth_client_ids_allowed = None;
  }

  pub fn set_auth_bearer_sync_ims(&mut self, auth_bearer_sync_ims: ::models::ConfigNodePropertyBoolean) {
    self.auth_bearer_sync_ims = Some(auth_bearer_sync_ims);
  }

  pub fn with_auth_bearer_sync_ims(mut self, auth_bearer_sync_ims: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
    self.auth_bearer_sync_ims = Some(auth_bearer_sync_ims);
    self
  }

  pub fn auth_bearer_sync_ims(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.auth_bearer_sync_ims.as_ref()
  }

  pub fn reset_auth_bearer_sync_ims(&mut self) {
    self.auth_bearer_sync_ims = None;
  }

  pub fn set_auth_token_request_parameter(&mut self, auth_token_request_parameter: ::models::ConfigNodePropertyString) {
    self.auth_token_request_parameter = Some(auth_token_request_parameter);
  }

  pub fn with_auth_token_request_parameter(mut self, auth_token_request_parameter: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
    self.auth_token_request_parameter = Some(auth_token_request_parameter);
    self
  }

  pub fn auth_token_request_parameter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_token_request_parameter.as_ref()
  }

  pub fn reset_auth_token_request_parameter(&mut self) {
    self.auth_token_request_parameter = None;
  }

  pub fn set_oauth_bearer_configid(&mut self, oauth_bearer_configid: ::models::ConfigNodePropertyString) {
    self.oauth_bearer_configid = Some(oauth_bearer_configid);
  }

  pub fn with_oauth_bearer_configid(mut self, oauth_bearer_configid: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
    self.oauth_bearer_configid = Some(oauth_bearer_configid);
    self
  }

  pub fn oauth_bearer_configid(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.oauth_bearer_configid.as_ref()
  }

  pub fn reset_oauth_bearer_configid(&mut self) {
    self.oauth_bearer_configid = None;
  }

  pub fn set_oauth_jwt_support(&mut self, oauth_jwt_support: ::models::ConfigNodePropertyBoolean) {
    self.oauth_jwt_support = Some(oauth_jwt_support);
  }

  pub fn with_oauth_jwt_support(mut self, oauth_jwt_support: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties {
    self.oauth_jwt_support = Some(oauth_jwt_support);
    self
  }

  pub fn oauth_jwt_support(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.oauth_jwt_support.as_ref()
  }

  pub fn reset_oauth_jwt_support(&mut self) {
    self.oauth_jwt_support = None;
  }

}



