/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties()
{
    m_Org_apache_sling_commons_log_fileIsSet = false;
    m_Org_apache_sling_commons_log_file_numberIsSet = false;
    m_Org_apache_sling_commons_log_file_sizeIsSet = false;
    m_Org_apache_sling_commons_log_file_bufferedIsSet = false;
}

OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::~OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties()
{
}

void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Org_apache_sling_commons_log_fileIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.file")] = ModelBase::toJson(m_Org_apache_sling_commons_log_file);
    }
    if(m_Org_apache_sling_commons_log_file_numberIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")] = ModelBase::toJson(m_Org_apache_sling_commons_log_file_number);
    }
    if(m_Org_apache_sling_commons_log_file_sizeIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")] = ModelBase::toJson(m_Org_apache_sling_commons_log_file_size);
    }
    if(m_Org_apache_sling_commons_log_file_bufferedIsSet)
    {
        val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.buffered")] = ModelBase::toJson(m_Org_apache_sling_commons_log_file_buffered);
    }

    return val;
}

void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.file")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.file")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.file")]);
            setOrgApacheSlingCommonsLogFile( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")]);
            setOrgApacheSlingCommonsLogFileNumber( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")]);
            setOrgApacheSlingCommonsLogFileSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("org.apache.sling.commons.log.file.buffered")))
    {
        if(!val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.buffered")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("org.apache.sling.commons.log.file.buffered")]);
            setOrgApacheSlingCommonsLogFileBuffered( newItem );
        }
    }
}

void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Org_apache_sling_commons_log_fileIsSet)
    {
        if (m_Org_apache_sling_commons_log_file.get())
        {
            m_Org_apache_sling_commons_log_file->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file."));
        }
    }
    if(m_Org_apache_sling_commons_log_file_numberIsSet)
    {
        if (m_Org_apache_sling_commons_log_file_number.get())
        {
            m_Org_apache_sling_commons_log_file_number->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file.number."));
        }
    }
    if(m_Org_apache_sling_commons_log_file_sizeIsSet)
    {
        if (m_Org_apache_sling_commons_log_file_size.get())
        {
            m_Org_apache_sling_commons_log_file_size->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file.size."));
        }
    }
    if(m_Org_apache_sling_commons_log_file_bufferedIsSet)
    {
        if (m_Org_apache_sling_commons_log_file_buffered.get())
        {
            m_Org_apache_sling_commons_log_file_buffered->toMultipart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file.buffered."));
        }
    }
}

void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file."));
            setOrgApacheSlingCommonsLogFile( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file.number")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file.number."));
            setOrgApacheSlingCommonsLogFileNumber( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file.size")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file.size."));
            setOrgApacheSlingCommonsLogFileSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file.buffered")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("org.apache.sling.commons.log.file.buffered")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("org.apache.sling.commons.log.file.buffered."));
            setOrgApacheSlingCommonsLogFileBuffered( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFile() const
{
    return m_Org_apache_sling_commons_log_file;
}


void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFile(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_commons_log_file = value;
    m_Org_apache_sling_commons_log_fileIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::orgApacheSlingCommonsLogFileIsSet() const
{
    return m_Org_apache_sling_commons_log_fileIsSet;
}

void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::unsetOrg_apache_sling_commons_log_file()
{
    m_Org_apache_sling_commons_log_fileIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileNumber() const
{
    return m_Org_apache_sling_commons_log_file_number;
}


void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileNumber(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Org_apache_sling_commons_log_file_number = value;
    m_Org_apache_sling_commons_log_file_numberIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::orgApacheSlingCommonsLogFileNumberIsSet() const
{
    return m_Org_apache_sling_commons_log_file_numberIsSet;
}

void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::unsetOrg_apache_sling_commons_log_file_number()
{
    m_Org_apache_sling_commons_log_file_numberIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileSize() const
{
    return m_Org_apache_sling_commons_log_file_size;
}


void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileSize(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Org_apache_sling_commons_log_file_size = value;
    m_Org_apache_sling_commons_log_file_sizeIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::orgApacheSlingCommonsLogFileSizeIsSet() const
{
    return m_Org_apache_sling_commons_log_file_sizeIsSet;
}

void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::unsetOrg_apache_sling_commons_log_file_size()
{
    m_Org_apache_sling_commons_log_file_sizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileBuffered() const
{
    return m_Org_apache_sling_commons_log_file_buffered;
}


void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileBuffered(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Org_apache_sling_commons_log_file_buffered = value;
    m_Org_apache_sling_commons_log_file_bufferedIsSet = true;
}
bool OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::orgApacheSlingCommonsLogFileBufferedIsSet() const
{
    return m_Org_apache_sling_commons_log_file_bufferedIsSet;
}

void OrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::unsetOrg_apache_sling_commons_log_file_buffered()
{
    m_Org_apache_sling_commons_log_file_bufferedIsSet = false;
}

}
}
}
}

