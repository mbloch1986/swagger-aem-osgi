/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingServletsGetDefaultGetServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingServletsGetDefaultGetServletProperties::OrgApacheSlingServletsGetDefaultGetServletProperties()
{
    m_AliasesIsSet = false;
    m_IndexIsSet = false;
    m_Index_filesIsSet = false;
    m_Enable_htmlIsSet = false;
    m_Enable_jsonIsSet = false;
    m_Enable_txtIsSet = false;
    m_Enable_xmlIsSet = false;
    m_Json_maximumresultsIsSet = false;
    m_EcmaSuportIsSet = false;
}

OrgApacheSlingServletsGetDefaultGetServletProperties::~OrgApacheSlingServletsGetDefaultGetServletProperties()
{
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingServletsGetDefaultGetServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AliasesIsSet)
    {
        val[utility::conversions::to_string_t("aliases")] = ModelBase::toJson(m_Aliases);
    }
    if(m_IndexIsSet)
    {
        val[utility::conversions::to_string_t("index")] = ModelBase::toJson(m_Index);
    }
    if(m_Index_filesIsSet)
    {
        val[utility::conversions::to_string_t("index.files")] = ModelBase::toJson(m_Index_files);
    }
    if(m_Enable_htmlIsSet)
    {
        val[utility::conversions::to_string_t("enable.html")] = ModelBase::toJson(m_Enable_html);
    }
    if(m_Enable_jsonIsSet)
    {
        val[utility::conversions::to_string_t("enable.json")] = ModelBase::toJson(m_Enable_json);
    }
    if(m_Enable_txtIsSet)
    {
        val[utility::conversions::to_string_t("enable.txt")] = ModelBase::toJson(m_Enable_txt);
    }
    if(m_Enable_xmlIsSet)
    {
        val[utility::conversions::to_string_t("enable.xml")] = ModelBase::toJson(m_Enable_xml);
    }
    if(m_Json_maximumresultsIsSet)
    {
        val[utility::conversions::to_string_t("json.maximumresults")] = ModelBase::toJson(m_Json_maximumresults);
    }
    if(m_EcmaSuportIsSet)
    {
        val[utility::conversions::to_string_t("ecmaSuport")] = ModelBase::toJson(m_EcmaSuport);
    }

    return val;
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("aliases")))
    {
        if(!val[utility::conversions::to_string_t("aliases")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("aliases")]);
            setAliases( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("index")))
    {
        if(!val[utility::conversions::to_string_t("index")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("index")]);
            setIndex( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("index.files")))
    {
        if(!val[utility::conversions::to_string_t("index.files")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("index.files")]);
            setIndexFiles( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enable.html")))
    {
        if(!val[utility::conversions::to_string_t("enable.html")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enable.html")]);
            setEnableHtml( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enable.json")))
    {
        if(!val[utility::conversions::to_string_t("enable.json")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enable.json")]);
            setEnableJson( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enable.txt")))
    {
        if(!val[utility::conversions::to_string_t("enable.txt")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enable.txt")]);
            setEnableTxt( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enable.xml")))
    {
        if(!val[utility::conversions::to_string_t("enable.xml")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enable.xml")]);
            setEnableXml( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("json.maximumresults")))
    {
        if(!val[utility::conversions::to_string_t("json.maximumresults")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("json.maximumresults")]);
            setJsonMaximumresults( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ecmaSuport")))
    {
        if(!val[utility::conversions::to_string_t("ecmaSuport")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("ecmaSuport")]);
            setEcmaSuport( newItem );
        }
    }
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AliasesIsSet)
    {
        if (m_Aliases.get())
        {
            m_Aliases->toMultipart(multipart, utility::conversions::to_string_t("aliases."));
        }
    }
    if(m_IndexIsSet)
    {
        if (m_Index.get())
        {
            m_Index->toMultipart(multipart, utility::conversions::to_string_t("index."));
        }
    }
    if(m_Index_filesIsSet)
    {
        if (m_Index_files.get())
        {
            m_Index_files->toMultipart(multipart, utility::conversions::to_string_t("index.files."));
        }
    }
    if(m_Enable_htmlIsSet)
    {
        if (m_Enable_html.get())
        {
            m_Enable_html->toMultipart(multipart, utility::conversions::to_string_t("enable.html."));
        }
    }
    if(m_Enable_jsonIsSet)
    {
        if (m_Enable_json.get())
        {
            m_Enable_json->toMultipart(multipart, utility::conversions::to_string_t("enable.json."));
        }
    }
    if(m_Enable_txtIsSet)
    {
        if (m_Enable_txt.get())
        {
            m_Enable_txt->toMultipart(multipart, utility::conversions::to_string_t("enable.txt."));
        }
    }
    if(m_Enable_xmlIsSet)
    {
        if (m_Enable_xml.get())
        {
            m_Enable_xml->toMultipart(multipart, utility::conversions::to_string_t("enable.xml."));
        }
    }
    if(m_Json_maximumresultsIsSet)
    {
        if (m_Json_maximumresults.get())
        {
            m_Json_maximumresults->toMultipart(multipart, utility::conversions::to_string_t("json.maximumresults."));
        }
    }
    if(m_EcmaSuportIsSet)
    {
        if (m_EcmaSuport.get())
        {
            m_EcmaSuport->toMultipart(multipart, utility::conversions::to_string_t("ecmaSuport."));
        }
    }
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("aliases")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("aliases")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("aliases."));
            setAliases( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("index")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("index")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("index."));
            setIndex( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("index.files")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("index.files")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("index.files."));
            setIndexFiles( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enable.html")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enable.html")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enable.html."));
            setEnableHtml( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enable.json")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enable.json")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enable.json."));
            setEnableJson( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enable.txt")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enable.txt")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enable.txt."));
            setEnableTxt( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enable.xml")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enable.xml")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enable.xml."));
            setEnableXml( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("json.maximumresults")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("json.maximumresults")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("json.maximumresults."));
            setJsonMaximumresults( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ecmaSuport")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("ecmaSuport")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("ecmaSuport."));
            setEcmaSuport( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingServletsGetDefaultGetServletProperties::getAliases() const
{
    return m_Aliases;
}


void OrgApacheSlingServletsGetDefaultGetServletProperties::setAliases(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Aliases = value;
    m_AliasesIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::aliasesIsSet() const
{
    return m_AliasesIsSet;
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetAliases()
{
    m_AliasesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServletsGetDefaultGetServletProperties::getIndex() const
{
    return m_Index;
}


void OrgApacheSlingServletsGetDefaultGetServletProperties::setIndex(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Index = value;
    m_IndexIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::indexIsSet() const
{
    return m_IndexIsSet;
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetIndex()
{
    m_IndexIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingServletsGetDefaultGetServletProperties::getIndexFiles() const
{
    return m_Index_files;
}


void OrgApacheSlingServletsGetDefaultGetServletProperties::setIndexFiles(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Index_files = value;
    m_Index_filesIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::indexFilesIsSet() const
{
    return m_Index_filesIsSet;
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetIndex_files()
{
    m_Index_filesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServletsGetDefaultGetServletProperties::getEnableHtml() const
{
    return m_Enable_html;
}


void OrgApacheSlingServletsGetDefaultGetServletProperties::setEnableHtml(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enable_html = value;
    m_Enable_htmlIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::enableHtmlIsSet() const
{
    return m_Enable_htmlIsSet;
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetEnable_html()
{
    m_Enable_htmlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServletsGetDefaultGetServletProperties::getEnableJson() const
{
    return m_Enable_json;
}


void OrgApacheSlingServletsGetDefaultGetServletProperties::setEnableJson(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enable_json = value;
    m_Enable_jsonIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::enableJsonIsSet() const
{
    return m_Enable_jsonIsSet;
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetEnable_json()
{
    m_Enable_jsonIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServletsGetDefaultGetServletProperties::getEnableTxt() const
{
    return m_Enable_txt;
}


void OrgApacheSlingServletsGetDefaultGetServletProperties::setEnableTxt(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enable_txt = value;
    m_Enable_txtIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::enableTxtIsSet() const
{
    return m_Enable_txtIsSet;
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetEnable_txt()
{
    m_Enable_txtIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServletsGetDefaultGetServletProperties::getEnableXml() const
{
    return m_Enable_xml;
}


void OrgApacheSlingServletsGetDefaultGetServletProperties::setEnableXml(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enable_xml = value;
    m_Enable_xmlIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::enableXmlIsSet() const
{
    return m_Enable_xmlIsSet;
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetEnable_xml()
{
    m_Enable_xmlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingServletsGetDefaultGetServletProperties::getJsonMaximumresults() const
{
    return m_Json_maximumresults;
}


void OrgApacheSlingServletsGetDefaultGetServletProperties::setJsonMaximumresults(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Json_maximumresults = value;
    m_Json_maximumresultsIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::jsonMaximumresultsIsSet() const
{
    return m_Json_maximumresultsIsSet;
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetJson_maximumresults()
{
    m_Json_maximumresultsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingServletsGetDefaultGetServletProperties::getEcmaSuport() const
{
    return m_EcmaSuport;
}


void OrgApacheSlingServletsGetDefaultGetServletProperties::setEcmaSuport(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EcmaSuport = value;
    m_EcmaSuportIsSet = true;
}
bool OrgApacheSlingServletsGetDefaultGetServletProperties::ecmaSuportIsSet() const
{
    return m_EcmaSuportIsSet;
}

void OrgApacheSlingServletsGetDefaultGetServletProperties::unsetEcmaSuport()
{
    m_EcmaSuportIsSet = false;
}

}
}
}
}

