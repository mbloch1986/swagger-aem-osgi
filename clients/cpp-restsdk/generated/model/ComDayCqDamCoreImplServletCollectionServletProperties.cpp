/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplServletCollectionServletProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplServletCollectionServletProperties::ComDayCqDamCoreImplServletCollectionServletProperties()
{
    m_Cq_dam_batch_collection_propertiesIsSet = false;
    m_Cq_dam_batch_collection_maxcollectionsIsSet = false;
}

ComDayCqDamCoreImplServletCollectionServletProperties::~ComDayCqDamCoreImplServletCollectionServletProperties()
{
}

void ComDayCqDamCoreImplServletCollectionServletProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplServletCollectionServletProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_batch_collection_propertiesIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.batch.collection.properties")] = ModelBase::toJson(m_Cq_dam_batch_collection_properties);
    }
    if(m_Cq_dam_batch_collection_maxcollectionsIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.batch.collection.maxcollections")] = ModelBase::toJson(m_Cq_dam_batch_collection_maxcollections);
    }

    return val;
}

void ComDayCqDamCoreImplServletCollectionServletProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.batch.collection.properties")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.batch.collection.properties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.batch.collection.properties")]);
            setCqDamBatchCollectionProperties( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.batch.collection.maxcollections")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.batch.collection.maxcollections")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.batch.collection.maxcollections")]);
            setCqDamBatchCollectionMaxcollections( newItem );
        }
    }
}

void ComDayCqDamCoreImplServletCollectionServletProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_batch_collection_propertiesIsSet)
    {
        if (m_Cq_dam_batch_collection_properties.get())
        {
            m_Cq_dam_batch_collection_properties->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.batch.collection.properties."));
        }
    }
    if(m_Cq_dam_batch_collection_maxcollectionsIsSet)
    {
        if (m_Cq_dam_batch_collection_maxcollections.get())
        {
            m_Cq_dam_batch_collection_maxcollections->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.batch.collection.maxcollections."));
        }
    }
}

void ComDayCqDamCoreImplServletCollectionServletProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.batch.collection.properties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.batch.collection.properties")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.batch.collection.properties."));
            setCqDamBatchCollectionProperties( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.batch.collection.maxcollections")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.batch.collection.maxcollections")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.batch.collection.maxcollections."));
            setCqDamBatchCollectionMaxcollections( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqDamCoreImplServletCollectionServletProperties::getCqDamBatchCollectionProperties() const
{
    return m_Cq_dam_batch_collection_properties;
}


void ComDayCqDamCoreImplServletCollectionServletProperties::setCqDamBatchCollectionProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_dam_batch_collection_properties = value;
    m_Cq_dam_batch_collection_propertiesIsSet = true;
}
bool ComDayCqDamCoreImplServletCollectionServletProperties::cqDamBatchCollectionPropertiesIsSet() const
{
    return m_Cq_dam_batch_collection_propertiesIsSet;
}

void ComDayCqDamCoreImplServletCollectionServletProperties::unsetCq_dam_batch_collection_properties()
{
    m_Cq_dam_batch_collection_propertiesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCoreImplServletCollectionServletProperties::getCqDamBatchCollectionMaxcollections() const
{
    return m_Cq_dam_batch_collection_maxcollections;
}


void ComDayCqDamCoreImplServletCollectionServletProperties::setCqDamBatchCollectionMaxcollections(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_dam_batch_collection_maxcollections = value;
    m_Cq_dam_batch_collection_maxcollectionsIsSet = true;
}
bool ComDayCqDamCoreImplServletCollectionServletProperties::cqDamBatchCollectionMaxcollectionsIsSet() const
{
    return m_Cq_dam_batch_collection_maxcollectionsIsSet;
}

void ComDayCqDamCoreImplServletCollectionServletProperties::unsetCq_dam_batch_collection_maxcollections()
{
    m_Cq_dam_batch_collection_maxcollectionsIsSet = false;
}

}
}
}
}

