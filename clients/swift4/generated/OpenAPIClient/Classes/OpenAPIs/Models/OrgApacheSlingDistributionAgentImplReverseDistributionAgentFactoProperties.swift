//
// OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



public struct OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoProperties: Codable {

    public var name: ConfigNodePropertyString?
    public var title: ConfigNodePropertyString?
    public var details: ConfigNodePropertyString?
    public var enabled: ConfigNodePropertyBoolean?
    public var serviceName: ConfigNodePropertyString?
    public var logLevel: ConfigNodePropertyDropDown?
    public var queueProcessingEnabled: ConfigNodePropertyBoolean?
    public var packageExporterEndpoints: ConfigNodePropertyArray?
    public var pullItems: ConfigNodePropertyInteger?
    public var httpConnTimeout: ConfigNodePropertyInteger?
    public var requestAuthorizationStrategyTarget: ConfigNodePropertyString?
    public var transportSecretProviderTarget: ConfigNodePropertyString?
    public var packageBuilderTarget: ConfigNodePropertyString?
    public var triggersTarget: ConfigNodePropertyString?

    public init(name: ConfigNodePropertyString?, title: ConfigNodePropertyString?, details: ConfigNodePropertyString?, enabled: ConfigNodePropertyBoolean?, serviceName: ConfigNodePropertyString?, logLevel: ConfigNodePropertyDropDown?, queueProcessingEnabled: ConfigNodePropertyBoolean?, packageExporterEndpoints: ConfigNodePropertyArray?, pullItems: ConfigNodePropertyInteger?, httpConnTimeout: ConfigNodePropertyInteger?, requestAuthorizationStrategyTarget: ConfigNodePropertyString?, transportSecretProviderTarget: ConfigNodePropertyString?, packageBuilderTarget: ConfigNodePropertyString?, triggersTarget: ConfigNodePropertyString?) {
        self.name = name
        self.title = title
        self.details = details
        self.enabled = enabled
        self.serviceName = serviceName
        self.logLevel = logLevel
        self.queueProcessingEnabled = queueProcessingEnabled
        self.packageExporterEndpoints = packageExporterEndpoints
        self.pullItems = pullItems
        self.httpConnTimeout = httpConnTimeout
        self.requestAuthorizationStrategyTarget = requestAuthorizationStrategyTarget
        self.transportSecretProviderTarget = transportSecretProviderTarget
        self.packageBuilderTarget = packageBuilderTarget
        self.triggersTarget = triggersTarget
    }

    public enum CodingKeys: String, CodingKey { 
        case name
        case title
        case details
        case enabled
        case serviceName
        case logLevel = "log.level"
        case queueProcessingEnabled = "queue.processing.enabled"
        case packageExporterEndpoints = "packageExporter.endpoints"
        case pullItems = "pull.items"
        case httpConnTimeout = "http.conn.timeout"
        case requestAuthorizationStrategyTarget = "requestAuthorizationStrategy.target"
        case transportSecretProviderTarget = "transportSecretProvider.target"
        case packageBuilderTarget = "packageBuilder.target"
        case triggersTarget = "triggers.target"
    }


}

