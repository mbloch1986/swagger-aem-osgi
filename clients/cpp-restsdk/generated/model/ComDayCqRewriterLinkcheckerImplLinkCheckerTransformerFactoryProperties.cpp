/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties()
{
    m_Linkcheckertransformer_disableRewritingIsSet = false;
    m_Linkcheckertransformer_disableCheckingIsSet = false;
    m_Linkcheckertransformer_mapCacheSizeIsSet = false;
    m_Linkcheckertransformer_strictExtensionCheckIsSet = false;
    m_Linkcheckertransformer_stripHtmltExtensionIsSet = false;
    m_Linkcheckertransformer_rewriteElementsIsSet = false;
    m_Linkcheckertransformer_stripExtensionPathBlacklistIsSet = false;
}

ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::~ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties()
{
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Linkcheckertransformer_disableRewritingIsSet)
    {
        val[utility::conversions::to_string_t("linkcheckertransformer.disableRewriting")] = ModelBase::toJson(m_Linkcheckertransformer_disableRewriting);
    }
    if(m_Linkcheckertransformer_disableCheckingIsSet)
    {
        val[utility::conversions::to_string_t("linkcheckertransformer.disableChecking")] = ModelBase::toJson(m_Linkcheckertransformer_disableChecking);
    }
    if(m_Linkcheckertransformer_mapCacheSizeIsSet)
    {
        val[utility::conversions::to_string_t("linkcheckertransformer.mapCacheSize")] = ModelBase::toJson(m_Linkcheckertransformer_mapCacheSize);
    }
    if(m_Linkcheckertransformer_strictExtensionCheckIsSet)
    {
        val[utility::conversions::to_string_t("linkcheckertransformer.strictExtensionCheck")] = ModelBase::toJson(m_Linkcheckertransformer_strictExtensionCheck);
    }
    if(m_Linkcheckertransformer_stripHtmltExtensionIsSet)
    {
        val[utility::conversions::to_string_t("linkcheckertransformer.stripHtmltExtension")] = ModelBase::toJson(m_Linkcheckertransformer_stripHtmltExtension);
    }
    if(m_Linkcheckertransformer_rewriteElementsIsSet)
    {
        val[utility::conversions::to_string_t("linkcheckertransformer.rewriteElements")] = ModelBase::toJson(m_Linkcheckertransformer_rewriteElements);
    }
    if(m_Linkcheckertransformer_stripExtensionPathBlacklistIsSet)
    {
        val[utility::conversions::to_string_t("linkcheckertransformer.stripExtensionPathBlacklist")] = ModelBase::toJson(m_Linkcheckertransformer_stripExtensionPathBlacklist);
    }

    return val;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("linkcheckertransformer.disableRewriting")))
    {
        if(!val[utility::conversions::to_string_t("linkcheckertransformer.disableRewriting")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("linkcheckertransformer.disableRewriting")]);
            setLinkcheckertransformerDisableRewriting( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkcheckertransformer.disableChecking")))
    {
        if(!val[utility::conversions::to_string_t("linkcheckertransformer.disableChecking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("linkcheckertransformer.disableChecking")]);
            setLinkcheckertransformerDisableChecking( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkcheckertransformer.mapCacheSize")))
    {
        if(!val[utility::conversions::to_string_t("linkcheckertransformer.mapCacheSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("linkcheckertransformer.mapCacheSize")]);
            setLinkcheckertransformerMapCacheSize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkcheckertransformer.strictExtensionCheck")))
    {
        if(!val[utility::conversions::to_string_t("linkcheckertransformer.strictExtensionCheck")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("linkcheckertransformer.strictExtensionCheck")]);
            setLinkcheckertransformerStrictExtensionCheck( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkcheckertransformer.stripHtmltExtension")))
    {
        if(!val[utility::conversions::to_string_t("linkcheckertransformer.stripHtmltExtension")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("linkcheckertransformer.stripHtmltExtension")]);
            setLinkcheckertransformerStripHtmltExtension( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkcheckertransformer.rewriteElements")))
    {
        if(!val[utility::conversions::to_string_t("linkcheckertransformer.rewriteElements")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("linkcheckertransformer.rewriteElements")]);
            setLinkcheckertransformerRewriteElements( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkcheckertransformer.stripExtensionPathBlacklist")))
    {
        if(!val[utility::conversions::to_string_t("linkcheckertransformer.stripExtensionPathBlacklist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("linkcheckertransformer.stripExtensionPathBlacklist")]);
            setLinkcheckertransformerStripExtensionPathBlacklist( newItem );
        }
    }
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Linkcheckertransformer_disableRewritingIsSet)
    {
        if (m_Linkcheckertransformer_disableRewriting.get())
        {
            m_Linkcheckertransformer_disableRewriting->toMultipart(multipart, utility::conversions::to_string_t("linkcheckertransformer.disableRewriting."));
        }
    }
    if(m_Linkcheckertransformer_disableCheckingIsSet)
    {
        if (m_Linkcheckertransformer_disableChecking.get())
        {
            m_Linkcheckertransformer_disableChecking->toMultipart(multipart, utility::conversions::to_string_t("linkcheckertransformer.disableChecking."));
        }
    }
    if(m_Linkcheckertransformer_mapCacheSizeIsSet)
    {
        if (m_Linkcheckertransformer_mapCacheSize.get())
        {
            m_Linkcheckertransformer_mapCacheSize->toMultipart(multipart, utility::conversions::to_string_t("linkcheckertransformer.mapCacheSize."));
        }
    }
    if(m_Linkcheckertransformer_strictExtensionCheckIsSet)
    {
        if (m_Linkcheckertransformer_strictExtensionCheck.get())
        {
            m_Linkcheckertransformer_strictExtensionCheck->toMultipart(multipart, utility::conversions::to_string_t("linkcheckertransformer.strictExtensionCheck."));
        }
    }
    if(m_Linkcheckertransformer_stripHtmltExtensionIsSet)
    {
        if (m_Linkcheckertransformer_stripHtmltExtension.get())
        {
            m_Linkcheckertransformer_stripHtmltExtension->toMultipart(multipart, utility::conversions::to_string_t("linkcheckertransformer.stripHtmltExtension."));
        }
    }
    if(m_Linkcheckertransformer_rewriteElementsIsSet)
    {
        if (m_Linkcheckertransformer_rewriteElements.get())
        {
            m_Linkcheckertransformer_rewriteElements->toMultipart(multipart, utility::conversions::to_string_t("linkcheckertransformer.rewriteElements."));
        }
    }
    if(m_Linkcheckertransformer_stripExtensionPathBlacklistIsSet)
    {
        if (m_Linkcheckertransformer_stripExtensionPathBlacklist.get())
        {
            m_Linkcheckertransformer_stripExtensionPathBlacklist->toMultipart(multipart, utility::conversions::to_string_t("linkcheckertransformer.stripExtensionPathBlacklist."));
        }
    }
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.disableRewriting")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.disableRewriting")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("linkcheckertransformer.disableRewriting."));
            setLinkcheckertransformerDisableRewriting( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.disableChecking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.disableChecking")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("linkcheckertransformer.disableChecking."));
            setLinkcheckertransformerDisableChecking( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.mapCacheSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.mapCacheSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("linkcheckertransformer.mapCacheSize."));
            setLinkcheckertransformerMapCacheSize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.strictExtensionCheck")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.strictExtensionCheck")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("linkcheckertransformer.strictExtensionCheck."));
            setLinkcheckertransformerStrictExtensionCheck( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.stripHtmltExtension")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.stripHtmltExtension")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("linkcheckertransformer.stripHtmltExtension."));
            setLinkcheckertransformerStripHtmltExtension( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.rewriteElements")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.rewriteElements")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("linkcheckertransformer.rewriteElements."));
            setLinkcheckertransformerRewriteElements( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.stripExtensionPathBlacklist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("linkcheckertransformer.stripExtensionPathBlacklist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("linkcheckertransformer.stripExtensionPathBlacklist."));
            setLinkcheckertransformerStripExtensionPathBlacklist( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerDisableRewriting() const
{
    return m_Linkcheckertransformer_disableRewriting;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerDisableRewriting(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Linkcheckertransformer_disableRewriting = value;
    m_Linkcheckertransformer_disableRewritingIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerDisableRewritingIsSet() const
{
    return m_Linkcheckertransformer_disableRewritingIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_disableRewriting()
{
    m_Linkcheckertransformer_disableRewritingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerDisableChecking() const
{
    return m_Linkcheckertransformer_disableChecking;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerDisableChecking(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Linkcheckertransformer_disableChecking = value;
    m_Linkcheckertransformer_disableCheckingIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerDisableCheckingIsSet() const
{
    return m_Linkcheckertransformer_disableCheckingIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_disableChecking()
{
    m_Linkcheckertransformer_disableCheckingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerMapCacheSize() const
{
    return m_Linkcheckertransformer_mapCacheSize;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerMapCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Linkcheckertransformer_mapCacheSize = value;
    m_Linkcheckertransformer_mapCacheSizeIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerMapCacheSizeIsSet() const
{
    return m_Linkcheckertransformer_mapCacheSizeIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_mapCacheSize()
{
    m_Linkcheckertransformer_mapCacheSizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStrictExtensionCheck() const
{
    return m_Linkcheckertransformer_strictExtensionCheck;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStrictExtensionCheck(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Linkcheckertransformer_strictExtensionCheck = value;
    m_Linkcheckertransformer_strictExtensionCheckIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerStrictExtensionCheckIsSet() const
{
    return m_Linkcheckertransformer_strictExtensionCheckIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_strictExtensionCheck()
{
    m_Linkcheckertransformer_strictExtensionCheckIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStripHtmltExtension() const
{
    return m_Linkcheckertransformer_stripHtmltExtension;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStripHtmltExtension(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Linkcheckertransformer_stripHtmltExtension = value;
    m_Linkcheckertransformer_stripHtmltExtensionIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerStripHtmltExtensionIsSet() const
{
    return m_Linkcheckertransformer_stripHtmltExtensionIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_stripHtmltExtension()
{
    m_Linkcheckertransformer_stripHtmltExtensionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerRewriteElements() const
{
    return m_Linkcheckertransformer_rewriteElements;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerRewriteElements(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Linkcheckertransformer_rewriteElements = value;
    m_Linkcheckertransformer_rewriteElementsIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerRewriteElementsIsSet() const
{
    return m_Linkcheckertransformer_rewriteElementsIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_rewriteElements()
{
    m_Linkcheckertransformer_rewriteElementsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStripExtensionPathBlacklist() const
{
    return m_Linkcheckertransformer_stripExtensionPathBlacklist;
}


void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStripExtensionPathBlacklist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Linkcheckertransformer_stripExtensionPathBlacklist = value;
    m_Linkcheckertransformer_stripExtensionPathBlacklistIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::linkcheckertransformerStripExtensionPathBlacklistIsSet() const
{
    return m_Linkcheckertransformer_stripExtensionPathBlacklistIsSet;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::unsetLinkcheckertransformer_stripExtensionPathBlacklist()
{
    m_Linkcheckertransformer_stripExtensionPathBlacklistIsSet = false;
}

}
}
}
}

