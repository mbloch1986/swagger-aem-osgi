/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties()
{
    m_MinThreadPoolSizeIsSet = false;
    m_MaxThreadPoolSizeIsSet = false;
    
}

ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::~ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties()
{
}

void ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_MinThreadPoolSizeIsSet)
    {
        val["minThreadPoolSize"] = ModelBase::toJson(m_MinThreadPoolSize);
    }
    if(m_MaxThreadPoolSizeIsSet)
    {
        val["maxThreadPoolSize"] = ModelBase::toJson(m_MaxThreadPoolSize);
    }
    

    return val;
}

void ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("minThreadPoolSize") != val.end())
    {
        if(!val["minThreadPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["minThreadPoolSize"]);
            setMinThreadPoolSize( newItem );
        }
        
    }
    if(val.find("maxThreadPoolSize") != val.end())
    {
        if(!val["maxThreadPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["maxThreadPoolSize"]);
            setMaxThreadPoolSize( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::getMinThreadPoolSize() const
{
    return m_MinThreadPoolSize;
}
void ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::setMinThreadPoolSize(ConfigNodePropertyInteger const& value)
{
    m_MinThreadPoolSize = value;
    m_MinThreadPoolSizeIsSet = true;
}
bool ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::minThreadPoolSizeIsSet() const
{
    return m_MinThreadPoolSizeIsSet;
}
void ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::unsetMinThreadPoolSize()
{
    m_MinThreadPoolSizeIsSet = false;
}
ConfigNodePropertyInteger ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::getMaxThreadPoolSize() const
{
    return m_MaxThreadPoolSize;
}
void ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::setMaxThreadPoolSize(ConfigNodePropertyInteger const& value)
{
    m_MaxThreadPoolSize = value;
    m_MaxThreadPoolSizeIsSet = true;
}
bool ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::maxThreadPoolSizeIsSet() const
{
    return m_MaxThreadPoolSizeIsSet;
}
void ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::unsetMaxThreadPoolSize()
{
    m_MaxThreadPoolSizeIsSet = false;
}

}
}
}
}

