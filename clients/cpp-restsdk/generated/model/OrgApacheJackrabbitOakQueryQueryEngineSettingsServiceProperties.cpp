/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties()
{
    m_QueryLimitInMemoryIsSet = false;
    m_QueryLimitReadsIsSet = false;
    m_QueryFailTraversalIsSet = false;
    m_FastQuerySizeIsSet = false;
}

OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::~OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties()
{
}

void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_QueryLimitInMemoryIsSet)
    {
        val[utility::conversions::to_string_t("queryLimitInMemory")] = ModelBase::toJson(m_QueryLimitInMemory);
    }
    if(m_QueryLimitReadsIsSet)
    {
        val[utility::conversions::to_string_t("queryLimitReads")] = ModelBase::toJson(m_QueryLimitReads);
    }
    if(m_QueryFailTraversalIsSet)
    {
        val[utility::conversions::to_string_t("queryFailTraversal")] = ModelBase::toJson(m_QueryFailTraversal);
    }
    if(m_FastQuerySizeIsSet)
    {
        val[utility::conversions::to_string_t("fastQuerySize")] = ModelBase::toJson(m_FastQuerySize);
    }

    return val;
}

void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("queryLimitInMemory")))
    {
        if(!val[utility::conversions::to_string_t("queryLimitInMemory")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("queryLimitInMemory")]);
            setQueryLimitInMemory( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queryLimitReads")))
    {
        if(!val[utility::conversions::to_string_t("queryLimitReads")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("queryLimitReads")]);
            setQueryLimitReads( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queryFailTraversal")))
    {
        if(!val[utility::conversions::to_string_t("queryFailTraversal")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("queryFailTraversal")]);
            setQueryFailTraversal( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fastQuerySize")))
    {
        if(!val[utility::conversions::to_string_t("fastQuerySize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("fastQuerySize")]);
            setFastQuerySize( newItem );
        }
    }
}

void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_QueryLimitInMemoryIsSet)
    {
        if (m_QueryLimitInMemory.get())
        {
            m_QueryLimitInMemory->toMultipart(multipart, utility::conversions::to_string_t("queryLimitInMemory."));
        }
    }
    if(m_QueryLimitReadsIsSet)
    {
        if (m_QueryLimitReads.get())
        {
            m_QueryLimitReads->toMultipart(multipart, utility::conversions::to_string_t("queryLimitReads."));
        }
    }
    if(m_QueryFailTraversalIsSet)
    {
        if (m_QueryFailTraversal.get())
        {
            m_QueryFailTraversal->toMultipart(multipart, utility::conversions::to_string_t("queryFailTraversal."));
        }
    }
    if(m_FastQuerySizeIsSet)
    {
        if (m_FastQuerySize.get())
        {
            m_FastQuerySize->toMultipart(multipart, utility::conversions::to_string_t("fastQuerySize."));
        }
    }
}

void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("queryLimitInMemory")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queryLimitInMemory")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queryLimitInMemory."));
            setQueryLimitInMemory( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queryLimitReads")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queryLimitReads")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queryLimitReads."));
            setQueryLimitReads( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queryFailTraversal")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queryFailTraversal")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queryFailTraversal."));
            setQueryFailTraversal( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fastQuerySize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fastQuerySize")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fastQuerySize."));
            setFastQuerySize( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getQueryLimitInMemory() const
{
    return m_QueryLimitInMemory;
}


void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setQueryLimitInMemory(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_QueryLimitInMemory = value;
    m_QueryLimitInMemoryIsSet = true;
}
bool OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::queryLimitInMemoryIsSet() const
{
    return m_QueryLimitInMemoryIsSet;
}

void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::unsetQueryLimitInMemory()
{
    m_QueryLimitInMemoryIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getQueryLimitReads() const
{
    return m_QueryLimitReads;
}


void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setQueryLimitReads(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_QueryLimitReads = value;
    m_QueryLimitReadsIsSet = true;
}
bool OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::queryLimitReadsIsSet() const
{
    return m_QueryLimitReadsIsSet;
}

void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::unsetQueryLimitReads()
{
    m_QueryLimitReadsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getQueryFailTraversal() const
{
    return m_QueryFailTraversal;
}


void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setQueryFailTraversal(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_QueryFailTraversal = value;
    m_QueryFailTraversalIsSet = true;
}
bool OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::queryFailTraversalIsSet() const
{
    return m_QueryFailTraversalIsSet;
}

void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::unsetQueryFailTraversal()
{
    m_QueryFailTraversalIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getFastQuerySize() const
{
    return m_FastQuerySize;
}


void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setFastQuerySize(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_FastQuerySize = value;
    m_FastQuerySizeIsSet = true;
}
bool OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::fastQuerySizeIsSet() const
{
    return m_FastQuerySizeIsSet;
}

void OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::unsetFastQuerySize()
{
    m_FastQuerySizeIsSet = false;
}

}
}
}
}

