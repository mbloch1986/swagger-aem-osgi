/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties() {
    init();
}

OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::~OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties() {
    this->cleanup();
}

void
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::init() {
    sync_translation_state_scheduling_format = new OAIConfigNodePropertyString();
    m_sync_translation_state_scheduling_format_isSet = false;
    scheduling_repeat_translation_scheduling_format = new OAIConfigNodePropertyString();
    m_scheduling_repeat_translation_scheduling_format_isSet = false;
    sync_translation_state_lock_timeout_in_minutes = new OAIConfigNodePropertyString();
    m_sync_translation_state_lock_timeout_in_minutes_isSet = false;
    export_format = new OAIConfigNodePropertyDropDown();
    m_export_format_isSet = false;
}

void
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::cleanup() {
    if(sync_translation_state_scheduling_format != nullptr) { 
        delete sync_translation_state_scheduling_format;
    }
    if(scheduling_repeat_translation_scheduling_format != nullptr) { 
        delete scheduling_repeat_translation_scheduling_format;
    }
    if(sync_translation_state_lock_timeout_in_minutes != nullptr) { 
        delete sync_translation_state_lock_timeout_in_minutes;
    }
    if(export_format != nullptr) { 
        delete export_format;
    }
}

OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties*
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&sync_translation_state_scheduling_format, pJson["syncTranslationState.schedulingFormat"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&scheduling_repeat_translation_scheduling_format, pJson["schedulingRepeatTranslation.schedulingFormat"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&sync_translation_state_lock_timeout_in_minutes, pJson["syncTranslationState.lockTimeoutInMinutes"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&export_format, pJson["export.format"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
}

QString
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::asJsonObject() {
    QJsonObject obj;
    if((sync_translation_state_scheduling_format != nullptr) && (sync_translation_state_scheduling_format->isSet())){
        toJsonValue(QString("syncTranslationState.schedulingFormat"), sync_translation_state_scheduling_format, obj, QString("OAIConfigNodePropertyString"));
    }
    if((scheduling_repeat_translation_scheduling_format != nullptr) && (scheduling_repeat_translation_scheduling_format->isSet())){
        toJsonValue(QString("schedulingRepeatTranslation.schedulingFormat"), scheduling_repeat_translation_scheduling_format, obj, QString("OAIConfigNodePropertyString"));
    }
    if((sync_translation_state_lock_timeout_in_minutes != nullptr) && (sync_translation_state_lock_timeout_in_minutes->isSet())){
        toJsonValue(QString("syncTranslationState.lockTimeoutInMinutes"), sync_translation_state_lock_timeout_in_minutes, obj, QString("OAIConfigNodePropertyString"));
    }
    if((export_format != nullptr) && (export_format->isSet())){
        toJsonValue(QString("export.format"), export_format, obj, QString("OAIConfigNodePropertyDropDown"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getSyncTranslationStateSchedulingFormat() {
    return sync_translation_state_scheduling_format;
}
void
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setSyncTranslationStateSchedulingFormat(OAIConfigNodePropertyString* sync_translation_state_scheduling_format) {
    this->sync_translation_state_scheduling_format = sync_translation_state_scheduling_format;
    this->m_sync_translation_state_scheduling_format_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getSchedulingRepeatTranslationSchedulingFormat() {
    return scheduling_repeat_translation_scheduling_format;
}
void
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setSchedulingRepeatTranslationSchedulingFormat(OAIConfigNodePropertyString* scheduling_repeat_translation_scheduling_format) {
    this->scheduling_repeat_translation_scheduling_format = scheduling_repeat_translation_scheduling_format;
    this->m_scheduling_repeat_translation_scheduling_format_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getSyncTranslationStateLockTimeoutInMinutes() {
    return sync_translation_state_lock_timeout_in_minutes;
}
void
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setSyncTranslationStateLockTimeoutInMinutes(OAIConfigNodePropertyString* sync_translation_state_lock_timeout_in_minutes) {
    this->sync_translation_state_lock_timeout_in_minutes = sync_translation_state_lock_timeout_in_minutes;
    this->m_sync_translation_state_lock_timeout_in_minutes_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::getExportFormat() {
    return export_format;
}
void
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::setExportFormat(OAIConfigNodePropertyDropDown* export_format) {
    this->export_format = export_format;
    this->m_export_format_isSet = true;
}


bool
OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(sync_translation_state_scheduling_format != nullptr && sync_translation_state_scheduling_format->isSet()){ isObjectUpdated = true; break;}
        if(scheduling_repeat_translation_scheduling_format != nullptr && scheduling_repeat_translation_scheduling_format->isSet()){ isObjectUpdated = true; break;}
        if(sync_translation_state_lock_timeout_in_minutes != nullptr && sync_translation_state_lock_timeout_in_minutes->isSet()){ isObjectUpdated = true; break;}
        if(export_format != nullptr && export_format->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

