/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteRepositoryImplCommitStatsConfigProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::ComAdobeGraniteRepositoryImplCommitStatsConfigProperties()
{
    
}

ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::~ComAdobeGraniteRepositoryImplCommitStatsConfigProperties()
{
}

std::string ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getEnabled() const
{
    return m_Enabled;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enabled = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getIntervalSeconds() const
{
    return m_IntervalSeconds;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setIntervalSeconds(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_IntervalSeconds = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getCommitsPerIntervalThreshold() const
{
    return m_CommitsPerIntervalThreshold;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setCommitsPerIntervalThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CommitsPerIntervalThreshold = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxLocationLength() const
{
    return m_MaxLocationLength;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxLocationLength(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxLocationLength = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxDetailsShown() const
{
    return m_MaxDetailsShown;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxDetailsShown(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxDetailsShown = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMinDetailsPercentage() const
{
    return m_MinDetailsPercentage;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMinDetailsPercentage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinDetailsPercentage = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getThreadMatchers() const
{
    return m_ThreadMatchers;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setThreadMatchers(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_ThreadMatchers = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getMaxGreedyDepth() const
{
    return m_MaxGreedyDepth;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setMaxGreedyDepth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxGreedyDepth = value;
}
std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getGreedyStackMatchers() const
{
    return m_GreedyStackMatchers;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setGreedyStackMatchers(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_GreedyStackMatchers = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackFilters() const
{
    return m_StackFilters;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackFilters(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_StackFilters = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackMatchers() const
{
    return m_StackMatchers;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackMatchers(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_StackMatchers = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackCategorizers() const
{
    return m_StackCategorizers;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackCategorizers(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_StackCategorizers = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::getStackShorteners() const
{
    return m_StackShorteners;
}
void ComAdobeGraniteRepositoryImplCommitStatsConfigProperties::setStackShorteners(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_StackShorteners = value;
}

}
}
}
}

