/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmCoreImplWCMDebugFilterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmCoreImplWCMDebugFilterProperties::ComDayCqWcmCoreImplWCMDebugFilterProperties()
{
    m_Wcmdbgfilter_enabledIsSet = false;
    m_Wcmdbgfilter_jspDebugIsSet = false;
}

ComDayCqWcmCoreImplWCMDebugFilterProperties::~ComDayCqWcmCoreImplWCMDebugFilterProperties()
{
}

void ComDayCqWcmCoreImplWCMDebugFilterProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmCoreImplWCMDebugFilterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Wcmdbgfilter_enabledIsSet)
    {
        val[utility::conversions::to_string_t("wcmdbgfilter.enabled")] = ModelBase::toJson(m_Wcmdbgfilter_enabled);
    }
    if(m_Wcmdbgfilter_jspDebugIsSet)
    {
        val[utility::conversions::to_string_t("wcmdbgfilter.jspDebug")] = ModelBase::toJson(m_Wcmdbgfilter_jspDebug);
    }

    return val;
}

void ComDayCqWcmCoreImplWCMDebugFilterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("wcmdbgfilter.enabled")))
    {
        if(!val[utility::conversions::to_string_t("wcmdbgfilter.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("wcmdbgfilter.enabled")]);
            setWcmdbgfilterEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wcmdbgfilter.jspDebug")))
    {
        if(!val[utility::conversions::to_string_t("wcmdbgfilter.jspDebug")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("wcmdbgfilter.jspDebug")]);
            setWcmdbgfilterJspDebug( newItem );
        }
    }
}

void ComDayCqWcmCoreImplWCMDebugFilterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Wcmdbgfilter_enabledIsSet)
    {
        if (m_Wcmdbgfilter_enabled.get())
        {
            m_Wcmdbgfilter_enabled->toMultipart(multipart, utility::conversions::to_string_t("wcmdbgfilter.enabled."));
        }
    }
    if(m_Wcmdbgfilter_jspDebugIsSet)
    {
        if (m_Wcmdbgfilter_jspDebug.get())
        {
            m_Wcmdbgfilter_jspDebug->toMultipart(multipart, utility::conversions::to_string_t("wcmdbgfilter.jspDebug."));
        }
    }
}

void ComDayCqWcmCoreImplWCMDebugFilterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("wcmdbgfilter.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("wcmdbgfilter.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("wcmdbgfilter.enabled."));
            setWcmdbgfilterEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wcmdbgfilter.jspDebug")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("wcmdbgfilter.jspDebug")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("wcmdbgfilter.jspDebug."));
            setWcmdbgfilterJspDebug( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplWCMDebugFilterProperties::getWcmdbgfilterEnabled() const
{
    return m_Wcmdbgfilter_enabled;
}


void ComDayCqWcmCoreImplWCMDebugFilterProperties::setWcmdbgfilterEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Wcmdbgfilter_enabled = value;
    m_Wcmdbgfilter_enabledIsSet = true;
}
bool ComDayCqWcmCoreImplWCMDebugFilterProperties::wcmdbgfilterEnabledIsSet() const
{
    return m_Wcmdbgfilter_enabledIsSet;
}

void ComDayCqWcmCoreImplWCMDebugFilterProperties::unsetWcmdbgfilter_enabled()
{
    m_Wcmdbgfilter_enabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplWCMDebugFilterProperties::getWcmdbgfilterJspDebug() const
{
    return m_Wcmdbgfilter_jspDebug;
}


void ComDayCqWcmCoreImplWCMDebugFilterProperties::setWcmdbgfilterJspDebug(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Wcmdbgfilter_jspDebug = value;
    m_Wcmdbgfilter_jspDebugIsSet = true;
}
bool ComDayCqWcmCoreImplWCMDebugFilterProperties::wcmdbgfilterJspDebugIsSet() const
{
    return m_Wcmdbgfilter_jspDebugIsSet;
}

void ComDayCqWcmCoreImplWCMDebugFilterProperties::unsetWcmdbgfilter_jspDebug()
{
    m_Wcmdbgfilter_jspDebugIsSet = false;
}

}
}
}
}

