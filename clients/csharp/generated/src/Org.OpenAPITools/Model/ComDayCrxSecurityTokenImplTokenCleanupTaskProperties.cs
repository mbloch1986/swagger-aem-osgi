/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCrxSecurityTokenImplTokenCleanupTaskProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCrxSecurityTokenImplTokenCleanupTaskProperties :  IEquatable<ComDayCrxSecurityTokenImplTokenCleanupTaskProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCrxSecurityTokenImplTokenCleanupTaskProperties" /> class.
        /// </summary>
        /// <param name="enableTokenCleanupTask">enableTokenCleanupTask.</param>
        /// <param name="schedulerExpression">schedulerExpression.</param>
        /// <param name="batchSize">batchSize.</param>
        public ComDayCrxSecurityTokenImplTokenCleanupTaskProperties(ConfigNodePropertyBoolean enableTokenCleanupTask = default(ConfigNodePropertyBoolean), ConfigNodePropertyString schedulerExpression = default(ConfigNodePropertyString), ConfigNodePropertyInteger batchSize = default(ConfigNodePropertyInteger))
        {
            this.EnableTokenCleanupTask = enableTokenCleanupTask;
            this.SchedulerExpression = schedulerExpression;
            this.BatchSize = batchSize;
        }
        
        /// <summary>
        /// Gets or Sets EnableTokenCleanupTask
        /// </summary>
        [DataMember(Name="enable.token.cleanup.task", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableTokenCleanupTask { get; set; }

        /// <summary>
        /// Gets or Sets SchedulerExpression
        /// </summary>
        [DataMember(Name="scheduler.expression", EmitDefaultValue=false)]
        public ConfigNodePropertyString SchedulerExpression { get; set; }

        /// <summary>
        /// Gets or Sets BatchSize
        /// </summary>
        [DataMember(Name="batch.size", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger BatchSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCrxSecurityTokenImplTokenCleanupTaskProperties {\n");
            sb.Append("  EnableTokenCleanupTask: ").Append(EnableTokenCleanupTask).Append("\n");
            sb.Append("  SchedulerExpression: ").Append(SchedulerExpression).Append("\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCrxSecurityTokenImplTokenCleanupTaskProperties);
        }

        /// <summary>
        /// Returns true if ComDayCrxSecurityTokenImplTokenCleanupTaskProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCrxSecurityTokenImplTokenCleanupTaskProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCrxSecurityTokenImplTokenCleanupTaskProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableTokenCleanupTask == input.EnableTokenCleanupTask ||
                    (this.EnableTokenCleanupTask != null &&
                    this.EnableTokenCleanupTask.Equals(input.EnableTokenCleanupTask))
                ) && 
                (
                    this.SchedulerExpression == input.SchedulerExpression ||
                    (this.SchedulerExpression != null &&
                    this.SchedulerExpression.Equals(input.SchedulerExpression))
                ) && 
                (
                    this.BatchSize == input.BatchSize ||
                    (this.BatchSize != null &&
                    this.BatchSize.Equals(input.BatchSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableTokenCleanupTask != null)
                    hashCode = hashCode * 59 + this.EnableTokenCleanupTask.GetHashCode();
                if (this.SchedulerExpression != null)
                    hashCode = hashCode * 59 + this.SchedulerExpression.GetHashCode();
                if (this.BatchSize != null)
                    hashCode = hashCode * 59 + this.BatchSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
