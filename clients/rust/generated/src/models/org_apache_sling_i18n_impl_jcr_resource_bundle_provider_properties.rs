/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {
  #[serde(rename = "locale.default")]
  locale_default: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "preload.bundles")]
  preload_bundles: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "invalidation.delay")]
  invalidation_delay: Option<::models::ConfigNodePropertyInteger>
}

impl OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {
  pub fn new() -> OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {
    OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {
      locale_default: None,
      preload_bundles: None,
      invalidation_delay: None
    }
  }

  pub fn set_locale_default(&mut self, locale_default: ::models::ConfigNodePropertyString) {
    self.locale_default = Some(locale_default);
  }

  pub fn with_locale_default(mut self, locale_default: ::models::ConfigNodePropertyString) -> OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {
    self.locale_default = Some(locale_default);
    self
  }

  pub fn locale_default(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.locale_default.as_ref()
  }

  pub fn reset_locale_default(&mut self) {
    self.locale_default = None;
  }

  pub fn set_preload_bundles(&mut self, preload_bundles: ::models::ConfigNodePropertyBoolean) {
    self.preload_bundles = Some(preload_bundles);
  }

  pub fn with_preload_bundles(mut self, preload_bundles: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {
    self.preload_bundles = Some(preload_bundles);
    self
  }

  pub fn preload_bundles(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.preload_bundles.as_ref()
  }

  pub fn reset_preload_bundles(&mut self) {
    self.preload_bundles = None;
  }

  pub fn set_invalidation_delay(&mut self, invalidation_delay: ::models::ConfigNodePropertyInteger) {
    self.invalidation_delay = Some(invalidation_delay);
  }

  pub fn with_invalidation_delay(mut self, invalidation_delay: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingI18nImplJcrResourceBundleProviderProperties {
    self.invalidation_delay = Some(invalidation_delay);
    self
  }

  pub fn invalidation_delay(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.invalidation_delay.as_ref()
  }

  pub fn reset_invalidation_delay(&mut self) {
    self.invalidation_delay = None;
  }

}



